// Spiral Movement
// v0.1
// 25th August, 2020

void spiral_in(lweapon l, float circleSpeed, float forwardSpeed, float circleGrowSpeed, int clkindex, int initialCircleSize, int circleSizeMiscIndex)
{
	const int CIRCLESIZE = 1;
	const int CIRCLESIZEMISC = 31;
	const int CLKINDEX = 30;
	const float CIRCLEGROW = 0.1;
	int clk = l->Misc[( clkindex >= 0 && clkindex < 32 ) ? clkindex : CLKINDEX];
	circleSizeMiscIndex = ( circleSizeMiscIndex >= 0 && circleSizeMiscIndex < 32 ) ? circleSizeMiscIndex : CIRCLESIZEMISC; //If invalid, use the const.
	circleSpeed = circleSpeed ? circleSpeed : 1;
	forwardSpeed = forwardSpeed ? forwardSpeed : -1; // Assuming negative Z is towards the camera
	l->Misc[circleSizeMiscIndex] = (initialCircleSize && !l->Misc[circleSizeMiscIndex]) ? initialCircleSize : CIRCLESIZE; //If set to 0, use const. 
	
	circleGrowSpeed = circleGrowSpeed ? circleGrowSpeed : CIRCLEGROW; //If 0, use default. 
 
	float xPos = Sin(clk * circleSpeed) * l->Misc[circleSizeMiscIndex];
	float yPos = Cos(clk * circleSpeed) * l->Misc[circleSizeMiscIndex];
	
	l->Misc[circleSizeMiscIndex] += circleGrowSpeed;
	l->X = l->X + xPos;
	l->Y = l->Y + yPos;
	++l->Misc[( clkindex >= 0 && clkindex < 32 ) ? clkindex : CLKINDEX];
}

lweapon script moveinspiral
{
	void run()
	{
		while(1)
		{
			spiral_in(this, 2, 1, 10, 30, 50,31);
			Waitframe();
		}
	}
}


void spiral_in(eweapon l, float circleSpeed, float forwardSpeed, float circleGrowSpeed, int clkindex, int initialCircleSize, int circleSizeMiscIndex)
{
	const int CIRCLESIZE = 1;
	const int CIRCLESIZEMISC = 31;
	const int CLKINDEX = 30;
	const float CIRCLEGROW = 0.1;
	int clk = l->Misc[( clkindex >= 0 && clkindex < 32 ) ? clkindex : CLKINDEX];
	circleSizeMiscIndex = ( circleSizeMiscIndex >= 0 && circleSizeMiscIndex < 32 ) ? circleSizeMiscIndex : CIRCLESIZEMISC; //If invalid, use the const.
	circleSpeed = circleSpeed ? circleSpeed : 1;
	forwardSpeed = forwardSpeed ? forwardSpeed : -1; // Assuming negative Z is towards the camera
	l->Misc[circleSizeMiscIndex] = (initialCircleSize && !l->Misc[circleSizeMiscIndex]) ? initialCircleSize : CIRCLESIZE; //If set to 0, use const. 
	
	circleGrowSpeed = circleGrowSpeed ? circleGrowSpeed : CIRCLEGROW; //If 0, use default. 
 
	float xPos = Sin(clk * circleSpeed) * l->Misc[circleSizeMiscIndex];
	float yPos = Cos(clk * circleSpeed) * l->Misc[circleSizeMiscIndex];
	
	l->Misc[circleSizeMiscIndex] += circleGrowSpeed;
	l->X = l->X + xPos;
	l->Y = l->Y + yPos;
	++l->Misc[( clkindex >= 0 && clkindex < 32 ) ? clkindex : CLKINDEX];
}

void spiral_in(npc l, float circleSpeed, float forwardSpeed, float circleGrowSpeed, int clkindex, int initialCircleSize, int circleSizeMiscIndex)
{
	const int CIRCLESIZE = 1;
	const int CIRCLESIZEMISC = 31;
	const int CLKINDEX = 30;
	const float CIRCLEGROW = 0.1;
	int clk = l->Misc[( clkindex >= 0 && clkindex < 32 ) ? clkindex : CLKINDEX];
	circleSizeMiscIndex = ( circleSizeMiscIndex >= 0 && circleSizeMiscIndex < 32 ) ? circleSizeMiscIndex : CIRCLESIZEMISC; //If invalid, use the const.
	circleSpeed = circleSpeed ? circleSpeed : 1;
	forwardSpeed = forwardSpeed ? forwardSpeed : -1; // Assuming negative Z is towards the camera
	l->Misc[circleSizeMiscIndex] = (initialCircleSize && !l->Misc[circleSizeMiscIndex]) ? initialCircleSize : CIRCLESIZE; //If set to 0, use const. 
	
	circleGrowSpeed = circleGrowSpeed ? circleGrowSpeed : CIRCLEGROW; //If 0, use default. 
 
	float xPos = Sin(clk * circleSpeed) * l->Misc[circleSizeMiscIndex];
	float yPos = Cos(clk * circleSpeed) * l->Misc[circleSizeMiscIndex];
	
	l->Misc[circleSizeMiscIndex] += circleGrowSpeed;
	l->X = l->X + xPos;
	l->Y = l->Y + yPos;
	++l->Misc[( clkindex >= 0 && clkindex < 32 ) ? clkindex : CLKINDEX];
}

void spiral_in(itemsprite l, float circleSpeed, float forwardSpeed, float circleGrowSpeed, int clkindex, int initialCircleSize, int circleSizeMiscIndex)
{
	const int CIRCLESIZE = 1;
	const int CIRCLESIZEMISC = 31;
	const int CLKINDEX = 30;
	const float CIRCLEGROW = 0.1;
	int clk = l->Misc[( clkindex >= 0 && clkindex < 32 ) ? clkindex : CLKINDEX];
	circleSizeMiscIndex = ( circleSizeMiscIndex >= 0 && circleSizeMiscIndex < 32 ) ? circleSizeMiscIndex : CIRCLESIZEMISC; //If invalid, use the const.
	circleSpeed = circleSpeed ? circleSpeed : 1;
	forwardSpeed = forwardSpeed ? forwardSpeed : -1; // Assuming negative Z is towards the camera
	l->Misc[circleSizeMiscIndex] = (initialCircleSize && !l->Misc[circleSizeMiscIndex]) ? initialCircleSize : CIRCLESIZE; //If set to 0, use const. 
	
	circleGrowSpeed = circleGrowSpeed ? circleGrowSpeed : CIRCLEGROW; //If 0, use default. 
 
	float xPos = Sin(clk * circleSpeed) * l->Misc[circleSizeMiscIndex];
	float yPos = Cos(clk * circleSpeed) * l->Misc[circleSizeMiscIndex];
	
	l->Misc[circleSizeMiscIndex] += circleGrowSpeed;
	l->X = l->X + xPos;
	l->Y = l->Y + yPos;
	++l->Misc[( clkindex >= 0 && clkindex < 32 ) ? clkindex : CLKINDEX];
}

void spiral_in(float circleSpeed, float forwardSpeed, float circleGrowSpeed, int clkindex, int initialCircleSize, int circleSizeMiscIndex)
{
	const int CIRCLESIZE = 1;
	const int CIRCLESIZEMISC = 31;
	const int CLKINDEX = 30;
	const float CIRCLEGROW = 0.1;
	int clk = Hero->Misc[( clkindex >= 0 && clkindex < 32 ) ? clkindex : CLKINDEX];
	circleSizeMiscIndex = ( circleSizeMiscIndex >= 0 && circleSizeMiscIndex < 32 ) ? circleSizeMiscIndex : CIRCLESIZEMISC; //If invalid, use the const.
	circleSpeed = circleSpeed ? circleSpeed : 1;
	forwardSpeed = forwardSpeed ? forwardSpeed : -1; // Assuming negative Z is towards the camera
	Hero->Misc[circleSizeMiscIndex] = (initialCircleSize && !Hero->Misc[circleSizeMiscIndex]) ? initialCircleSize : CIRCLESIZE; //If set to 0, use const. 
	
	circleGrowSpeed = circleGrowSpeed ? circleGrowSpeed : CIRCLEGROW; //If 0, use default. 
 
	float xPos = Sin(clk * circleSpeed) * Hero->Misc[circleSizeMiscIndex];
	float yPos = Cos(clk * circleSpeed) * Hero->Misc[circleSizeMiscIndex];
	
	Hero->Misc[circleSizeMiscIndex] += circleGrowSpeed;
	Hero->X = Hero->X + xPos;
	Hero->Y = Hero->Y + yPos;
	++Hero->Misc[( clkindex >= 0 && clkindex < 32 ) ? clkindex : CLKINDEX];
}

