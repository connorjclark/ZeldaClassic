// ghost.zh
// Version 3.0.0 Alpha 9
// Use this for 2.55, and later versions of ZQuest

// See ghost_zh_docs/index.html for documentation.

#option SHORT_CIRCUIT on
#option BINARY_32BIT off
#option HEADER_GUARD on
#option TRUNCATE_DIVISION_BY_LITERAL_BUG off
#option BOOL_TRUE_RETURN_DECIMAL off
#option TRUE_INT_SIZE on

namespace ghost3
{
	/*
		Ghost Setup Combo Properties
		ID: Must be 1 or higher; the lower, the better.
		Tile: Should be blank.
		ATTRIBYTES
		[0] Min ffc used by ghost, must be 1-32
		[1] Max ffc used by ghost, must be 1-32 and greater or equal to [0].
		[2] Spawn sprite, 0 to 255
		[3] Default enemy walking imprecision. (usually set to '2')
	
		ATTRIBUTES
		[0] The sprite->Misc[] index to use for storing data[] array pointers (0 to 31)
		[1] (Unused)
		[2] (Unused)
		[3] (Unused)
	
		FLAGS
		Flag 1: Fake Z (if ENABLED), Engine Z (if NOT ENABLED)
		Flag 2: Enemies flicker (if ENABLED), Engine hit effect (if NOT ENABLED)
		Flag 3: Scripted shadows (if ENABLED), Engine shadows (if NOT ENABLED)
		Flag 4: Fixed ANONE handling (if NOT ENABLED), broken ANONE (if ENABLED)
		Flag 5: Fixed sideview platform weapon handling/solidity/collision (if NOT ENABLED), broken ghost sideview weapons (if ENABLED)
		Flag 6: FFCs made by GHost are Ethereal (if NOT ENABLED), or are NOT ETHEREAL (if ENABLED)
		Flag 7: FFC->Link is cleared when an ffc is used (if NOT Enabled), Link to other ffcs is NOT cleared (if ENABLED)
		Flag 8: Corrected EWM_FALL (if NOT ENABLED), broken EWM_FALL (if ENABLED).
		Flag 9: Corrected EWM_THROW (if NOT ENABLED), broken EWM_THROW (if ENABLED).
		Flag 10: Fake Weapon Z (if ENABLED), no fake weapon Z (if NOT ENABLED)
		Flag 11: Print Metadata (if NOT ENABLED), do not print Metadata (if ENABLED)
		Flag 12
		Flag 13
		Flag 14
		Flag 15
		Flag 16
	*/
	
	const int GH_INTERNAL = 31;
	
	// Registers of the data[] array, used for every script
	enum DataRegisters
	{
		GHI_DATA,
		GHI_VX,
		GHI_VY,
		GHI_AX,
		GHI_AY,
		GHI_FLAGS,	//GHF_, first 16
		GHI_IFLAGS,	//GHFI_ internal enemy flags
		GHI_PREVX,	//Positional updates
		GHI_PREVY,
		GHI_DIR,
		GHI_DIAGVX,
		GHI_DIAGVY,
		GHI_ANIMSTYLE,
		GHI_OTILE_UP,
		GHI_OTILE_DOWN,
		GHI_OTILE_LEFT,
		GHI_OTILE_RIGHT,
		GHI_OTILE_LEFTUP,
		GHI_OTILE_RIGHTUP,
		GHI_OTILE_LEFTDOWN,
		GHI_OTILE_RIGHTDOWN,
		GHI_AFRAMES_UP,
		GHI_AFRAMES_DOWN,
		GHI_AFRAMES_LEFT,
		GHI_AFRAMES_RIGHT,
		GHI_AFRAMES_LEFTUP,
		GHI_AFRAMES_RIGHTUP,
		GHI_AFRAMES_LEFTDOWN,
		GHI_AFRAMES_RIGHTDOWN,
		GHI_ASPEED_UP,
		GHI_ASPEED_DOWN,
		GHI_ASPEED_LEFT,
		GHI_ASPEED_RIGHT,
		GHI_ASPEED_LEFTUP,
		GHI_ASPEED_RIGHTUP,
		GHI_ASPEED_LEFTDOWN,
		GHI_ASPEED_RIGHTDOWN,
		GHI_CDATA_UP,
		GHI_CDATA_DOWN,
		GHI_CDATA_LEFT,
		GHI_CDATA_RIGHT,
		GHI_CDATA_LEFTUP,
		GHI_CDATA_RIGHTUP,
		GHI_CDATA_LEFTDOWN,
		GHI_CDATA_RIGHTDOWN,
		GHI_ACLK,
		GHI_NOLOOP,
		GHI_TRAIL_CLK,
		GHI_TRAIL_FREQ,
		GHI_TRAIL_LIFESPAN,
		GHI_TRAIL_FLAGS,
		GHI_ORBIT_LASTX,
		GHI_ORBIT_LASTY,
		GHI_ORBIT_ANGLE,
		D0, D1, D2, D3,	//Generic data registers
		D4, D5, D6, D7,
		FLICKERCLK,
		CLK0, CLK1,	// Clocks
		CLK2, CLK3,
		DATA_SIZE
	};

	// Advanced settings -----------------------------------------------------------

	// npc->Misc[] index
	// Set this so it doesn't conflict with other scripts. Legal values are 0-31.
	
	enum InitTypes
	{
		INIT_FAIL, INIT_SUCCESS, INIT_ALREADY, INIT_LAST
	};
	
	// Game->Ghost[] Values
	
	CONFIGB GHOST_DEBUG = true;
	
	enum GhostArrayValues
	{
		//Init
		GHV_INITIALISED, //int: Used to check if ghost was initialised already. Only one bit of this us used.
		
		//Combos	
		GHV_SETTINGS_COMBO, // combodata, Also used for blank combo
		GHV_SETTINGS_COMBO_ID, // int, Also used for blank combo ID
		GHV_BLANK_TILE, // int
		
		//Shadows
		GHV_SHADOW_TILE, //int
		GHV_SHADOW_CSET, //int
		GHV_SHADOW_FRAMES, //int
		GHV_SHADOW_ANIM_SPEED,	//int
		GHV_SHADOW_TRANSLUCENT,	//int
		GHV_SHADOW_FLICKER, //int
		GHV_LARGE_SHADOW_TILE,	//int
		GHV_LARGE_SHADOW_CSET,	//int
		GHV_LARGE_SHADOW_FRAMES, //int
		GHV_LARGE_SHADOW_ANIM_SPEED, //int
		GHV_LARGE_SHADOW_TRANSLUCENT,	//int
		GHV_LARGE_SHADOW_FLICKER, //int
		GHV_LARGE_SHADOW_MIN_WIDTH, //int
		GHV_LARGE_SHADOW_MIN_HEIGHT, //int
		
		//Other settings
		GHV_MIN_FFC, //byte
		GHV_MAX_FFC, //byte
		GHV_SPAWN_SPRITE, //byte
		GHV_FAKE_Z, //flag
		GHV_FAKE_EWEAPON_Z, //flag
		GHV_ENEMIES_FLICKER, //flag
		GHV_PREFER_GHOST_ZH_SHADOWS, //flag
		GHV_FIX_255_ANONE, //flag
		GHV_WEAPONS_HIT_PLATFORMS, //flag
		GHV_SPRITE_ARRAY_MISC_INDEX, //int
		
		//Legacy
		GHV_FLASH_TIME, //byte
		GHV_KNOCKBACK_TIME, //byte
		GHV_KNOCKBACK_STEP, //byte
		GHV_DEFAULT_IMPRECISION, //byte
		GHV_LEG_AUTOGHOST_READ_NAME,  //int
		GHV_LEG_AUTOGHOST_DELIMITER, //int or byte
		GHV_LEG_INVISIBLE_ALT, //int
		GHV_LEG_INVISIBLE_EXTEND, //int
		GHV_LEG_USE_DRAWCOMBO, //flag
		
		//Bugfix
		GHV_LEG_ETHEREAL, //flag
		GHV_CLEAR_FFC_LINK_DEP, //flag
		GHV_FIX_EWM_FALL_DEP, //flag
		GHV_FIX_EWM_THROW_DEP, //flag
		
		//Metadata
		GHV_PRINT_METADATA, //flag
		
		GHV_LAST
		
	};
	
	// Call at the begin of every script immediately following the data[] array declaration.
	void init(npc ghost, untyped ptr)
	{
		if (sysinit())
		{
			ghost->Misc[GH_INTERNAL] = ptr;
			ptr[GHI_ORBIT_ANGLE] = -720;
		}
		else
		{
			printf("Could not initialise ghosted npc.\n");
			ghost->Remove();
		}
	}
	
	// Initialises the environment.
	int sysinit()
	{
		if ( initialised() ) return INIT_ALREADY;
		unless(RunSetupCombo())
		{
			printf("Ghost.zh Version 3 failed to init as RunSetupCombo() failed to execute.\n");
			return INIT_FAIL;
		}
		unless(SetupShadowTiles())
		{
			printf("Ghost.zh Version 3 failed to init as SetupShadowTiles() failed to execute.\n");
			return INIT_FAIL;
		}
		// More System Values Here. All settings ^^ABOVE^^ to be moved to combodata.
		// so that they are tileset-based!!!
		Game->Ghost[GHV_INITIALISED] |= 0x1;
		if ( Game->Ghost[GHV_PRINT_METADATA] ) 
		{
			Metadata.print();
		}
		return INIT_SUCCESS;
	}
	
	// Constructs the environmental settings. 
	int RunSetupCombo()
	{
		int cid = Game->GetCombo("GHOST");
		
		unless(cid > 0) 
		{
			printf("No combo has the label GHOST.\n");
			return INIT_FAIL;
		}
		combodata cd = Game->LoadComboData(cid);
		Game->Ghost[GHV_SETTINGS_COMBO] = cd; //cache the combodata
		Game->Ghost[GHV_SETTINGS_COMBO_ID] = cd->ID;
		Game->Ghost[GHV_BLANK_TILE] = cd->OriginalTile; 
		//if ^^this^^ fails, do Game->Ghost[GHV_BLANK_TILE] = GetInvisibleComboTile(Game->Ghost[GHV_BLANK_COMBO]);
		
		Game->Ghost[GHV_MIN_FFC] = Clamp(cd->Attribytes[0],1,32);
		Game->Ghost[GHV_MAX_FFC] = Clamp(cd->Attribytes[1],1,32);
		if ( Game->Ghost[GHV_MAX_FFC] < Game->Ghost[GHV_MIN_FFC] )
		{
			printf("Error in GHOST combo setup. Attribyte[1] for max FFC MUST be \ngreater or equal to Attribyte[0[ for min FFC!\n");
			Game->Ghost[GHV_MAX_FFC] = Game->Ghost[GHV_MIN_FFC];
		}
		Game->Ghost[GHV_SPAWN_SPRITE] = cd->Attribytes[2];
		Game->Ghost[GHV_DEFAULT_IMPRECISION] = cd->Attribytes[3];
		
		Game->Ghost[GHV_FAKE_Z] = (cd->UserFlags&0x1) ? 1 : 0;
		Game->Ghost[GHV_ENEMIES_FLICKER] = (cd->UserFlags&0x2) ? 1 : 0;
		Game->Ghost[GHV_PREFER_GHOST_ZH_SHADOWS] = (cd->UserFlags&0x4) ? 1 : 0;
		Game->Ghost[GHV_FIX_255_ANONE] = (cd->UserFlags&0x8) ? 1 : 0;
		Game->Ghost[GHV_WEAPONS_HIT_PLATFORMS] = (cd->UserFlags&0x10) ? 1 : 0;
		
		//Fixes
		Game->Ghost[GHV_LEG_ETHEREAL] = (cd->UserFlags&0x20) ? 0 : 1; //default on
		Game->Ghost[GHV_CLEAR_FFC_LINK_DEP] = (cd->UserFlags&0x40) ? 0 : 1; //default on
		Game->Ghost[GHV_FIX_EWM_FALL_DEP] = (cd->UserFlags&0x80) ? 0 : 1; //default on
		Game->Ghost[GHV_FIX_EWM_THROW_DEP] = (cd->UserFlags&0x100) ? 0 : 1; //default on
		Game->Ghost[GHV_FAKE_EWEAPON_Z] = (cd->UserFlags&0x200) ? 1 : 0; //default off
		Game->Ghost[GHV_PRINT_METADATA] = (cd->UserFlags&0x400) ? 0 : 1; //default on
		
		Game->Ghost[GHV_SPRITE_ARRAY_MISC_INDEX] = cd->Attribytes[0];
		
		return INIT_SUCCESS;
	}
	
	// Returns whether the system has been initialised. 
	bool initialised()
	{
		return (Game->Ghost[GHV_INITIALISED]&0x1);
	}
	
	// Gets the ID of the settings combo as combodata. 
	combodata GetSettingsCombo()
	{
		int cd = Game->GetCombo("GHOST");
		if(cd>0) return Game->LoadComboData(cd);
		else 
		{
			printf("No combo has the label GHOST.\n");
			return NULL;
		}
		return Game->Ghost[GHV_SETTINGS_COMBO];
	}
	
	// Easy to remember way to get an invisible combo.
	int GetInvisibleComboID()
	{
		return Game->Ghost[GHV_SETTINGS_COMBO_ID];
	}
	
	//Easy way to get an invisible tile block. 
	int GetInvisibleComboTile()
	{
		return Game->Ghost[GHV_BLANK_TILE];
	}
	
	// Used for old ffc setup. Will be in 2.9, so I am putting it here for now so that I do not forget it int he 2.9 refactor.
	// Please do not delete this. -Z
	int RunLegacySetup()
	{
		int cid = Game->GetCombo("GHFFC");
		unless(cid > 0)
		{	
			printf("No combo has the label GHFFC\n");
			return INIT_FAIL;
		}
		combodata leg = Game->LoadComboData(cid);
		Game->Ghost[GHV_FLASH_TIME] = leg->Attribytes[0];
		Game->Ghost[GHV_KNOCKBACK_TIME] = leg->Attribytes[1];
		Game->Ghost[GHV_KNOCKBACK_STEP] = leg->Attribytes[2];
		Game->Ghost[GHV_LEG_AUTOGHOST_READ_NAME] = leg->Attributes[0];
		Game->Ghost[GHV_LEG_AUTOGHOST_DELIMITER] = leg->Attributes[1];
		Game->Ghost[GHV_LEG_INVISIBLE_ALT] = leg->Attributes[2];
		Game->Ghost[GHV_LEG_INVISIBLE_EXTEND] = leg->Attributes[3];
		Game->Ghost[GHV_LEG_USE_DRAWCOMBO] = (leg->UserFlags&0x1) ? 1 : 0;
		//Game->Ghost[GHV_LEG_USE_DRAWCOMBO] = (leg->UserFlags&0x2) ? 1 : 0; //Did I miss one?
		return INIT_SUCCESS;
		
	}
	
	// Sets up Ghost 2.9.x shadow tiles, if we use those at all. 
	int SetupShadowTiles()
	{
		combodata shad1, shad2;
		int cid1, cid2;
		cid1 = Game->GetCombo("GHSHAD1");
		cid2 = Game->GetCombo("GHSHAD2");
		unless(cid1 > 0) 
		{
			printf("No combo has the label GHSHAD1.\n");
			return INIT_FAIL;
		}
		unless(cid2 > 0) 
		{
			printf("No combo has the label GHSHAD2.\n");
			return INIT_FAIL;
		}
			
		shad1 = Game->LoadComboData(cid1);
		shad2 = Game->LoadComboData(cid2);
		Game->Ghost[GHV_SHADOW_TILE] = shad1->OriginalTile;
		Game->Ghost[GHV_SHADOW_CSET] = shad1->CSet;
		Game->Ghost[GHV_SHADOW_FRAMES] = shad1->Frames;
		Game->Ghost[GHV_SHADOW_ANIM_SPEED] = shad1->ASpeed;
		Game->Ghost[GHV_SHADOW_TRANSLUCENT] = ((shad1->UserFlags&0x1) ? 1 : 0);
		Game->Ghost[GHV_SHADOW_FLICKER] = ((shad1->UserFlags&0x2) ? 1 : 0);
		
		Game->Ghost[GHV_LARGE_SHADOW_TILE] = shad2->OriginalTile;
		Game->Ghost[GHV_LARGE_SHADOW_CSET] = shad2->CSet;
		Game->Ghost[GHV_LARGE_SHADOW_FRAMES] = shad2->Frames;
		Game->Ghost[GHV_LARGE_SHADOW_ANIM_SPEED] = shad2->ASpeed;
		Game->Ghost[GHV_LARGE_SHADOW_TRANSLUCENT] = ((shad2->UserFlags&0x1) ? 1 : 0);
		Game->Ghost[GHV_LARGE_SHADOW_MIN_WIDTH] = shad2->Attributes[0];
		Game->Ghost[GHV_LARGE_SHADOW_MIN_HEIGHT] = shad2->Attributes[1];
		return INIT_SUCCESS;
	}
	
	// Returns true if enemies are visible on screens with the
	// "All Enemies Are Invisible" flag enabled
	bool HaveAmulet()
	{
	    if ( Link->Item[I_AMULET1] )
	    {
		return true;
	    }
	    if ( Link->Item[I_AMULET2] )
	    {
		return true;
	    }
	    return false;
	}
	
	// Used to determine if a weapon hit a platform in sideview.
	bool OnSidePlatform(int x, int y, int xOff, int yOff, int h, int w) 
	{
		unless (IsSideview()) return false;
		for(int i = 0; i <= (w-1); ++i)
		{
			if( Screen->isSolid( (x + xOff + i), (y + yOff) + h ) )
			{
				return true;
			}
		   
		}
		return false;
	}
	
}

#include "std.zh"
#include "ghost3_meta.zh"
#include "ghost_zh/3.0/ghost3_common.zh"
#include "ghost_zh/3.0/ghost3_weapons.zh"
#include "ghost_zh/3.0/ghost3_flags.zh"
#include "ghost_zh/3.0/ghost3_modification.zh"
#include "ghost_zh/3.0/ghost3_movement.zh"
#include "ghost_zh/3.0/ghost3_other.zh"
#include "ghost_zh/3.0/ghost3_update.zh"
#include "ghost_zh/3.0/ghost3_shell.zh"
#include "ghost_zh/3.0/ghost3_extraweapons.zh"
//#include "ghost_zh/3.0/ghost3_global.zh"


