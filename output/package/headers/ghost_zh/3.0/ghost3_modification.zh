// ghost.zh
// Version 3.0.0 - Alpha 9

namespace ghost3
{
	void Transform(npc ghost, int combo, int cset, int tileWidth, int tileHeight)
	{
		int diff;
		int data = ghost->Misc[GH_INTERNAL];
		ghost->Extend = 3;
		
		if(combo>=0)
		{
			data[GHI_DATA] = combo;
			ghost->Tile = Game->ComboTile(combo);
		}
		
		if(cset>=0)
			ghost->CSet=cset;
		
		if(tileWidth>0)
		{
			diff=8*(ghost->TileWidth-tileWidth);
			ghost->TileWidth=tileWidth;

			ghost->X+=diff;
		}
		
		if(tileHeight>0)
		{
			diff=8*(ghost->TileHeight-tileHeight);
			ghost->TileHeight=tileHeight;

			ghost->Y+=diff;
		}
		
		ghost3::SetHitOffsets(ghost, 0, 0, 0, 0);
	}
	
	enum
	{
		GH_STA_1DIR,	//OTile, Frames, ASpeed
		GH_STA_4DIR,
		GH_STA_4DIAG,
		GH_STA_8DIR,
		GH_STA_HV,
		GH_STA_2DIAG,
		GH_STA_HVDIAG,
		GH_STA_1COMBO,
		GH_STA_4COMBO,
		GH_STA_8COMBO
	};
	
	void SetTileAnimation(npc ghost, int style, int arr, bool resetclk, bool noloop)
	{
		untyped data = ghost->Misc[GH_INTERNAL];
		SetTileAnimation(ghost, style, arr);
		if (resetclk) data[GHI_ACLK] = 0;
		if (noloop) data[GHI_NOLOOP] = true;
	}
	
	void SetTileAnimationAdvanced(npc ghost, int style, int arr, bool resetclk, bool noloop)
	{
		untyped data = ghost->Misc[GH_INTERNAL];
		SetTileAnimationAdvanced(ghost, style, arr);
		if (resetclk) data[GHI_ACLK] = 0;
		if (noloop) data[GHI_NOLOOP] = true;
	}
	
	void SetTileAnimation(npc ghost, int style, int arr)
	{
		untyped data = ghost->Misc[GH_INTERNAL];
		data[GHI_NOLOOP] = false;
		unless (IsValidArray(arr)) 
		{
			if (GHOST_DEBUG) TraceS("Invalid array passed to SetTileAnimation!\n");
			return;
		}
		int size = MAX_INT;
		switch(style)
		{
			case GH_STA_1COMBO:
				size = 1;
				break;
				
			case GH_STA_4COMBO:
				size = 4;
				break;
				
			case GH_STA_8COMBO:
				size = 8;
				break;
				
			case GH_STA_1DIR:
				size = 3;
				break;
				
			case GH_STA_HV:
			case GH_STA_2DIAG:
				size = 4;
				break;
				
			case GH_STA_HVDIAG:
				size = 5;
				break;
				
			case GH_STA_4DIR:
			case GH_STA_4DIAG:
				size = 6;
				break;
				
			case GH_STA_8DIR:
				size = 10;
				break;
		}
		if (SizeOfArray(arr) < size)
		{
			if (GHOST_DEBUG) TraceS("Array passed to SetTileAnimation is too small!\n");
			return;
		}
		switch(style)
		{
			case GH_STA_1DIR:
				data[GHI_OTILE_UP] = arr[0];
				data[GHI_AFRAMES_UP] = arr[1];
				data[GHI_ASPEED_UP] = arr[2];
				data[GHI_ANIMSTYLE] = GHI_AS_1DIR;
				break;
				
			case GH_STA_4DIR:
				for (int i = DIR_UP; i <= DIR_RIGHT; ++i)
				{
					data[GHI_OTILE_UP+i] = arr[i];
					data[GHI_AFRAMES_UP+i] = arr[4];
					data[GHI_ASPEED_UP+i] = arr[5];
				}
				data[GHI_ANIMSTYLE] = GHI_AS_4DIR;
				break;
				
			case GH_STA_4DIAG:
				for (int i = DIR_UP; i <= DIR_RIGHT; ++i)
				{
					data[GHI_OTILE_LEFTUP+i] = arr[i];
					data[GHI_AFRAMES_LEFTUP+i] = arr[5];
					data[GHI_ASPEED_LEFTUP+i] = arr[6];
				}
				data[GHI_ANIMSTYLE] = GHI_AS_4DIRDIAG;
				break;
				
			case GH_STA_8DIR:
				for (int i = DIR_UP; i <= DIR_RIGHTDOWN; ++i)
				{
					data[GHI_OTILE_UP+i] = arr[i];
					data[GHI_AFRAMES_UP+i] = arr[8];
					data[GHI_ASPEED_UP+i] = arr[9];
				}
				data[GHI_ANIMSTYLE] = GHI_AS_8DIR;
				break;
			
			case GH_STA_HV:
				for (int i = DIR_UP; i <= DIR_RIGHT; ++i)
				{
					data[GHI_OTILE_UP+i] = arr[(i>>1)];
					data[GHI_AFRAMES_UP+i] = arr[2];
					data[GHI_ASPEED_UP+i] = arr[3];
				}
				data[GHI_ANIMSTYLE] = GHI_AS_4DIR;
				break;
			
			case GH_STA_2DIAG:
				for (int i = DIR_UP; i <= DIR_DOWN; ++i)
				{
					data[GHI_OTILE_LEFTUP+i] = arr[(i>>1)];
					data[GHI_AFRAMES_LEFTUP+i] = arr[2];
					data[GHI_ASPEED_LEFTUP+i] = arr[3];
				}
				data[GHI_OTILE_LEFTDOWN] = data[GHI_OTILE_RIGHTUP];
				data[GHI_AFRAMES_LEFTDOWN] = data[GHI_AFRAMES_RIGHTUP];
				data[GHI_ASPEED_LEFTDOWN] = data[GHI_ASPEED_RIGHTUP];
				data[GHI_OTILE_RIGHTDOWN] = data[GHI_OTILE_LEFTUP];
				data[GHI_AFRAMES_RIGHTDOWN] = data[GHI_AFRAMES_LEFTUP];
				data[GHI_ASPEED_RIGHTDOWN] = data[GHI_ASPEED_LEFTUP];
				data[GHI_ANIMSTYLE] = GHI_AS_4DIRDIAG;
				break;
			
			case GH_STA_HVDIAG:
				for (int i = DIR_UP; i <= DIR_RIGHTUP; ++i)
				{
					data[GHI_OTILE_UP+i] = arr[(i>>1)];
					data[GHI_AFRAMES_UP+i] = arr[3];
					data[GHI_ASPEED_UP+i] = arr[4];
				}
				data[GHI_OTILE_LEFTDOWN] = data[GHI_OTILE_RIGHTUP];
				data[GHI_AFRAMES_LEFTDOWN] = data[GHI_AFRAMES_RIGHTUP];
				data[GHI_ASPEED_LEFTDOWN] = data[GHI_ASPEED_RIGHTUP];
				data[GHI_OTILE_RIGHTDOWN] = data[GHI_OTILE_LEFTUP];
				data[GHI_AFRAMES_RIGHTDOWN] = data[GHI_AFRAMES_LEFTUP];
				data[GHI_ASPEED_RIGHTDOWN] = data[GHI_ASPEED_LEFTUP];
				data[GHI_ANIMSTYLE] = GHI_AS_8DIR;
				break;
				
			case GH_STA_1COMBO:
				combodata c = Game->LoadComboData(arr[0]);
				data[GHI_OTILE_UP] = c->OriginalTile;
				data[GHI_AFRAMES_UP] = c->Frames;
				data[GHI_ASPEED_UP] = c->ASpeed;
				data[GHI_CDATA_UP] = c;
				ghost->TileWidth = c->SkipAnim+1;
				ghost->TileHeight = c->SkipAnimY+1;
				data[GHI_ANIMSTYLE] = GHI_AS_1COMBO;
				break;
			
			case GH_STA_4COMBO:
				for (int i = 0; i < 4; ++i)
				{
					combodata c = Game->LoadComboData(arr[i]);
					data[GHI_OTILE_UP+i] = c->OriginalTile;
					data[GHI_AFRAMES_UP+i] = c->Frames;
					data[GHI_ASPEED_UP+i] = c->ASpeed;
					data[GHI_CDATA_UP+i] = c;
				}
				data[GHI_ANIMSTYLE] = GHI_AS_4COMBO;
				break;
				
			case GH_STA_8COMBO:
				for (int i = 0; i < 8; ++i)
				{
					combodata c = Game->LoadComboData(arr[i]);
					data[GHI_OTILE_UP+i] = c->OriginalTile;
					data[GHI_AFRAMES_UP+i] = c->Frames;
					data[GHI_ASPEED_UP+i] = c->ASpeed;
					data[GHI_CDATA_UP+i] = c;
				}
				data[GHI_ANIMSTYLE] = GHI_AS_8COMBO;
				break;
				
			default:
				break;
		};
	}
	
	void SetTileAnimationAdvanced(npc ghost, int style, int arr)
	{
		untyped data = ghost->Misc[GH_INTERNAL];
		data[GHI_NOLOOP] = false;
		unless (IsValidArray(arr)) 
		{
			if (GHOST_DEBUG) TraceS("Invalid array passed to SetTileAnimation!\n");
			return;
		}
		int size = MAX_INT;
		switch(style)
		{
			case GH_STA_1COMBO:
				size = 1;
				break;
				
			case GH_STA_4COMBO:
				size = 4;
				break;
				
			case GH_STA_8COMBO:
				size = 8;
				break;
				
			case GH_STA_1DIR:
				size = 3;
				break;
				
			case GH_STA_HV:
			case GH_STA_2DIAG:
				size = 6;
				break;
				
			case GH_STA_HVDIAG:
				size = 9;
				break;
				
			case GH_STA_4DIR:
			case GH_STA_4DIAG:
				size = 12;
				break;
				
			case GH_STA_8DIR:
				size = 24;
				break;
		}
		if (SizeOfArray(arr) < size)
		{
			if (GHOST_DEBUG) TraceS("Array passed to SetTileAnimation is too small!\n");
			return;
		}
		switch(style)
		{
			case GH_STA_1DIR:
				data[GHI_OTILE_UP] = arr[0];
				data[GHI_AFRAMES_UP] = arr[1];
				data[GHI_ASPEED_UP] = arr[2];
				data[GHI_ANIMSTYLE] = GHI_AS_1DIR;
				break;
				
			case GH_STA_4DIR:
				for (int i = DIR_UP; i <= DIR_RIGHT; ++i)
				{
					data[GHI_OTILE_UP+i] = arr[i];
					data[GHI_AFRAMES_UP+i] = arr[4+i];
					data[GHI_ASPEED_UP+i] = arr[8+i];
				}
				data[GHI_ANIMSTYLE] = GHI_AS_4DIR;
				break;
				
			case GH_STA_4DIAG:
				for (int i = DIR_UP; i <= DIR_RIGHT; ++i)
				{
					data[GHI_OTILE_LEFTUP+i] = arr[i];
					data[GHI_AFRAMES_LEFTUP+i] = arr[4+i];
					data[GHI_ASPEED_LEFTUP+i] = arr[8+i];
				}
				data[GHI_ANIMSTYLE] = GHI_AS_4DIRDIAG;
				break;
				
			case GH_STA_8DIR:
				for (int i = DIR_UP; i <= DIR_RIGHTDOWN; ++i)
				{
					data[GHI_OTILE_UP+i] = arr[i];
					data[GHI_AFRAMES_UP+i] = arr[8+i];
					data[GHI_ASPEED_UP+i] = arr[16+i];
				}
				data[GHI_ANIMSTYLE] = GHI_AS_8DIR;
				break;
			
			case GH_STA_HV:
				for (int i = DIR_UP; i <= DIR_RIGHT; ++i)
				{
					data[GHI_OTILE_UP+i] = arr[(i>>1)];
					data[GHI_AFRAMES_UP+i] = arr[2+(i>>1)];
					data[GHI_ASPEED_UP+i] = arr[4+(i>>1)];
				}
				data[GHI_ANIMSTYLE] = GHI_AS_4DIR;
				break;
			
			case GH_STA_2DIAG:
				for (int i = DIR_UP; i <= DIR_DOWN; ++i)
				{
					data[GHI_OTILE_LEFTUP+i] = arr[(i>>1)];
					data[GHI_AFRAMES_LEFTUP+i] = arr[2+(i>>1)];
					data[GHI_ASPEED_LEFTUP+i] = arr[4+(i>>1)];
				}
				data[GHI_OTILE_LEFTDOWN] = data[GHI_OTILE_RIGHTUP];
				data[GHI_AFRAMES_LEFTDOWN] = data[GHI_AFRAMES_RIGHTUP];
				data[GHI_ASPEED_LEFTDOWN] = data[GHI_ASPEED_RIGHTUP];
				data[GHI_OTILE_RIGHTDOWN] = data[GHI_OTILE_LEFTUP];
				data[GHI_AFRAMES_RIGHTDOWN] = data[GHI_AFRAMES_LEFTUP];
				data[GHI_ASPEED_RIGHTDOWN] = data[GHI_ASPEED_LEFTUP];
				data[GHI_ANIMSTYLE] = GHI_AS_4DIRDIAG;
				break;
			
			case GH_STA_HVDIAG:
				for (int i = DIR_UP; i <= DIR_RIGHTUP; ++i)
				{
					data[GHI_OTILE_UP+i] = arr[(i>>1)];
					data[GHI_AFRAMES_UP+i] = arr[3+(i>>1)];
					data[GHI_ASPEED_UP+i] = arr[6+(i>>1)];
				}
				data[GHI_OTILE_LEFTDOWN] = data[GHI_OTILE_RIGHTUP];
				data[GHI_AFRAMES_LEFTDOWN] = data[GHI_AFRAMES_RIGHTUP];
				data[GHI_ASPEED_LEFTDOWN] = data[GHI_ASPEED_RIGHTUP];
				data[GHI_OTILE_RIGHTDOWN] = data[GHI_OTILE_LEFTUP];
				data[GHI_AFRAMES_RIGHTDOWN] = data[GHI_AFRAMES_LEFTUP];
				data[GHI_ASPEED_RIGHTDOWN] = data[GHI_ASPEED_LEFTUP];
				data[GHI_ANIMSTYLE] = GHI_AS_8DIR;
				break;
			
			case GH_STA_1COMBO:
				combodata c = Game->LoadComboData(arr[0]);
				data[GHI_OTILE_UP] = c->OriginalTile;
				data[GHI_AFRAMES_UP] = c->Frames;
				data[GHI_ASPEED_UP] = c->ASpeed;
				data[GHI_CDATA_UP] = c;
				ghost->TileWidth = c->SkipAnim+1;
				ghost->TileHeight = c->SkipAnimY+1;
				data[GHI_ANIMSTYLE] = GHI_AS_1COMBO;
				break;
			
			case GH_STA_4COMBO:
				for (int i = 0; i < 4; ++i)
				{
					combodata c = Game->LoadComboData(arr[i]);
					data[GHI_OTILE_UP+i] = c->OriginalTile;
					data[GHI_AFRAMES_UP+i] = c->Frames;
					data[GHI_ASPEED_UP+i] = c->ASpeed;
					data[GHI_CDATA_UP+i] = c;
				}
				data[GHI_ANIMSTYLE] = GHI_AS_4COMBO;
				break;
				
			case GH_STA_8COMBO:
				for (int i = 0; i < 8; ++i)
				{
					combodata c = Game->LoadComboData(arr[i]);
					data[GHI_OTILE_UP+i] = c->OriginalTile;
					data[GHI_AFRAMES_UP+i] = c->Frames;
					data[GHI_ASPEED_UP+i] = c->ASpeed;
					data[GHI_CDATA_UP+i] = c;
				}
				data[GHI_ANIMSTYLE] = GHI_AS_8COMBO;
				break;
				
			default:
				break;
		};
	}
	
	void SetTrail(npc ghost, int frequency, int lifespan, int flags)
	{
		int data = ghost->Misc[GH_INTERNAL];
		data[GHI_TRAIL_FREQ] = frequency;
		data[GHI_TRAIL_LIFESPAN] = lifespan;
		data[GHI_TRAIL_FLAGS] = flags;
	}


	void SetSize(npc ghost, int tileWidth, int tileHeight)
	{
		ghost->Extend = 3;
		if(tileWidth>0)
		ghost->TileWidth=tileWidth;
		
		if(tileHeight>0)
			ghost->TileHeight=tileHeight;
		
		ghost3::SetHitOffsets(ghost, 0, 0, 0, 0);
	}


	void SetHitOffsets(npc ghost, float top, float bottom, float left, float right)
	{
		if(top>0 && top<1)
			top=Round(top*ghost->TileHeight*16);
		if(bottom>0 && bottom<1)
			bottom=Round(bottom*ghost->TileHeight*16);
		if(left>0 && left<1)
			left=Round(left*ghost->TileWidth*16);
		if(right>0 && right<1)
			right=Round(right*ghost->TileWidth*16);

		top=Clamp(top, 0, ghost->TileHeight*16);
		bottom=Clamp(bottom, 0, ghost->TileHeight*16);
		left=Clamp(left, 0, ghost->TileWidth*16);
		right=Clamp(right, 0, ghost->TileWidth*16);

		ghost->HitXOffset=left;
		ghost->HitYOffset=top;
		ghost->HitWidth=16*ghost->TileWidth-(left+right);
		ghost->HitHeight=16*ghost->TileHeight-(top+bottom);
	}


	void SwapNPC(npc oldGhost, npc newGhost, bool copyHP)
	{
		newGhost->X=oldGhost->X;
		newGhost->Y=oldGhost->Y;
		newGhost->Z=oldGhost->Z;
		newGhost->Jump=oldGhost->Jump;
		newGhost->Dir=oldGhost->Dir;

		newGhost->Extend=oldGhost->Extend;
		newGhost->TileWidth=oldGhost->TileWidth;
		newGhost->TileHeight=oldGhost->TileHeight;
		newGhost->HitWidth=oldGhost->HitWidth;
		newGhost->HitHeight=oldGhost->HitHeight;
		newGhost->HitXOffset=oldGhost->HitXOffset;
		newGhost->HitYOffset=oldGhost->HitYOffset;
		newGhost->CollDetection=oldGhost->CollDetection;

		for(int i=0; i<16; i++)
			newGhost->Misc[i]=oldGhost->Misc[i];

		if(copyHP)
			newGhost->HP=oldGhost->HP;

		// Move the old ghost out of the way
		oldGhost->CollDetection=false;
		oldGhost->X=256;
		oldGhost->Y=176;
	}


	void ReplaceNPC(npc oldGhost, npc newGhost, bool copyHP)
	{
		ghost3::SwapNPC(oldGhost, newGhost, copyHP);

		oldGhost->X=384;
		oldGhost->HP=-1000;
	}


	void StoreDefenses(npc ghost, int storedDefense)
	{
		for(int i=0; i<43; ++i)
			storedDefense[i]=ghost->Defense[i];
	}


	void SetDefenses(npc ghost, int defense)
	{
		for(int i=0; i<43; ++i)
			ghost->Defense[i]=defense[i];
	}


	void SetAllDefenses(npc ghost, int defType)
	{
		for(int i=0; i<43; ++i)
			ghost->Defense[i]=defType;
	}


	void ForceDir(npc ghost, int dir)
	{
		ghost->Dir=dir;
		ghost3::SetIFlag(ghost, GHFI_DIR_FORCED);
	}


	void ForceCSet(npc ghost, int cset)
	{
		ghost->CSet=cset;
		ghost3::SetIFlag(ghost, GHFI_CSET_FORCED);
	}

	//TBA

	void StartFlashing(npc ghost)
	{
		ghost->MiscFlags|=1000000b;
	}


	void StartFlashing(npc ghost, int time)
	{
		//FlashCounter=time;
	}


	void StopFlashing(npc ghost)
	{
		ghost->MiscFlags|=~1000000b;
	}


	void StopKnockback(npc ghost)
	{
	/*
		if(KnockbackCounter>0)
		{
			KnockbackCounter=0;
			data[GHI_IFLAGS]|=GHFI_KNOCKBACK_INTERRUPTED;
		}
	*/
	}
}
