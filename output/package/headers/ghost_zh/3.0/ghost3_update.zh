// ghost.zh
// Version 3.0.0 - Alpha 9

namespace ghost3
{

	int GetInternal(npc ghost, int index)
	{
		int flags = ghost->Misc[GH_INTERNAL];
		return flags[index];
	}
	void SetInternal(npc ghost, int index, untyped value)
	{
		int flags = ghost->Misc[GH_INTERNAL];
		flags[index] = value;
	}

	bool Ghost_Waitframe(npc ghost, bool clearOnDeath, bool quitOnDeath)
	{
		int data = ghost->Misc[GH_INTERNAL];
		// Handle gravity first
		int jump = ghost->Jump;
		ghost->Jump=0;
		
		unless(FlagIsSet(ghost, GHF_NO_FALL))
		{
			// Sideview: Jump/fall on Y axis
			if(IsSideview())
			{
				// Use CanMove to check for platforms
				if(jump || CanMove(ghost, DIR_DOWN, 1, Game->Ghost[GHV_DEFAULT_IMPRECISION]))
				{
					// Temporarily unset GHF_SET_DIRECTION so that Ghost_Move doesn't
					// change the enemy's direction here
					bool setDir=FlagIsSet(ghost, GHF_SET_DIRECTION);
					ghost3::UnsetFlag(ghost, GHF_SET_DIRECTION);
					
					// Jumping
					if(jump>0)
					{
						// Set GHF_NO_FALL temporarily so CanMove(DIR_UP) can return true
						ghost3::SetFlag(ghost, GHF_NO_FALL);
						
						ghost3::Move(ghost, DIR_UP, jump, Game->Ghost[GHV_DEFAULT_IMPRECISION]);
						jump=Max(jump-Game->Gravity[GR_STRENGTH], -Game->Gravity[GR_TERMINALV]);
						
						// If it's still jumping, check if it can move any farther;
						// if it can't, it's hit something and should begin falling
						if(jump>0 && !CanMove(ghost, DIR_UP, 1, Game->Ghost[GHV_DEFAULT_IMPRECISION]))
							jump=0;
						
						ghost3::UnsetFlag(ghost, GHF_NO_FALL);
					}
					// Falling
					else
					{
						ghost3::Move(ghost, DIR_DOWN, -jump, Game->Ghost[GHV_DEFAULT_IMPRECISION]);
						
						// Can it fall farther?
						if(CanMove(ghost, DIR_DOWN, 1, Game->Ghost[GHV_DEFAULT_IMPRECISION]))
							jump=Max(jump-Game->Gravity[GR_STRENGTH], -Game->Gravity[GR_TERMINALV]);
						// If not, stop falling
						else
							jump=0;
					}
					
					// Restore the flag
					if(setDir)
						ghost3::SetFlag(ghost, GHF_SET_DIRECTION);
				}
			}
			// Top-down: Jump/fall on Z axis
			else
			{
				if(jump || ghost->Z>0)
				{
					if(ghost->Z+jump<=0)
					{
						ghost->Z=0;
						jump=0;
					}
					else
					{
						ghost->Z += jump;
						jump= Max(jump-Game->Gravity[GR_STRENGTH], -Game->Gravity[GR_TERMINALV]);
					}
				}
			}
		}

		// Then velocity and acceleration
		if(data[GHI_VX] || data[GHI_VY] || data[GHI_AX] || data[GHI_AY])
		{
			data[GHI_VX] += data[GHI_AX];
			data[GHI_VY] += data[GHI_AY];

			ghost3::MoveXY(ghost, data[GHI_VX], data[GHI_VY], Game->Ghost[GHV_DEFAULT_IMPRECISION]);
		}
		
		ghost3::Ghost_WaitframePart1(ghost, false);
		ghost3::Ghost_WaitframeLight(ghost);
		ghost3::ClearIFlags(ghost);
		return ghost3::Ghost_WaitframePart2(ghost, clearOnDeath, quitOnDeath);
	}
	enum GHI_TRAILFLAGS
	{
		GHTF_TRANSLUCENT = 0001b,
		GHTF_FLICKERING =  0010b
	};
	// Before waiting: Update direction, set combo, set overlay flag, draw shadow
	void Ghost_WaitframePart1(npc ghost, bool useNPCDir)
	{
		int data = ghost->Misc[GH_INTERNAL];
		//These braces are a handy way to put something in a scope and remove it once the scope leaves. Very handy!
		{
			float xStep = ghost->X - data[GHI_PREVX];
			float yStep = ghost->Y - data[GHI_PREVY];
			unless (xStep == 0) ghost3::SetInternal(ghost, GHI_DIAGVX, xStep);
			unless (yStep == 0) ghost3::SetInternal(ghost, GHI_DIAGVY, yStep);
		}
		// Direction forced - set the npc's direction
		if((data[GHI_IFLAGS]&GHFI_DIR_FORCED) == GHFI_DIR_FORCED)
		{
			ghost->Dir = data[GHI_DIR];
		}

		// Set direction based on movement
		else if(FlagIsSet(ghost, GHF_SET_DIRECTION) &&
			(data[GHI_PREVX] != ghost->X || data[GHI_PREVY] != ghost->Y))
		{	
			float xStep = ghost->X - data[GHI_PREVX];
			float yStep = ghost->Y - data[GHI_PREVY];
			// Use 8 directions if 8-way flag is set
			if(FlagIsSet(ghost, GHF_8WAY))
				ghost->Dir = AngleDir8(WrapAngle(ArcTan(xStep, yStep)) * RADIAN);

			else if(FlagIsSet(ghost, GHF_DIAGWAY))
			{
				if(ghost3::GetInternal(ghost, GHI_DIAGVY) < 0)
				{
					if(ghost3::GetInternal(ghost, GHI_DIAGVX) < 0)
						ghost->Dir = DIR_LEFTUP;
					if(ghost3::GetInternal(ghost, GHI_DIAGVX) > 0)
						ghost->Dir = DIR_RIGHTUP;
					//Yes I realize this doesn't cover if X is == 0; that's intentional.
				}
				if(ghost3::GetInternal(ghost, GHI_DIAGVY) > 0)
				{
					if(ghost3::GetInternal(ghost, GHI_DIAGVX) < 0)
						ghost->Dir = DIR_LEFTDOWN;
					if(ghost3::GetInternal(ghost, GHI_DIAGVX) > 0)
						ghost->Dir = DIR_RIGHTDOWN;
				}
				//Same here, this doesn't cover if Y == 0, still intentional here.
			}
			// Otherwise, 4 directions
			else
			{
				if(Abs(xStep)>Abs(yStep))
				{
					if(xStep < 0)
						ghost->Dir = DIR_LEFT;
					else
						ghost->Dir = DIR_RIGHT;
				}
				else
				{
					if(yStep < 0)
						ghost->Dir = DIR_UP;
					else
						ghost->Dir = DIR_DOWN;
				}
			}
		}
		unless (data[GHI_PREVX] == ghost->X && data[GHI_PREVY] == ghost->Y)
		{
			if (data[GHI_TRAIL_FREQ] > 0)
			{
				++data[GHI_TRAIL_CLK];
				data[GHI_TRAIL_CLK]%=data[GHI_TRAIL_FREQ];
				unless (data[GHI_TRAIL_CLK])
				{
					eweapon e; 
					if (data[GHI_TRAIL_FLAGS] & GHTF_FLICKERING) e = FireEWeapon(EW_GHOSTED, data[GHI_PREVX], data[GHI_PREVY], 0, 0, 0, -1, 0, EWF_NO_COLLISION|EWF_FLICKER);
					else e = FireEWeapon(EW_GHOSTED, data[GHI_PREVX], data[GHI_PREVY], 0, 0, 0, -1, 0, EWF_NO_COLLISION);
					e->DrawXOffset = ghost->DrawXOffset;
					e->DrawYOffset = ghost->DrawYOffset;
					e->Extend = 3;
					e->TileWidth = ghost->TileWidth;
					e->TileHeight = ghost->TileHeight;
					if (ghost->ScriptTile > 0)
					{
						e->OriginalTile = ghost->ScriptTile;
						e->Tile = ghost->ScriptTile;
					}
					else
					{
						e->OriginalTile = ghost->Tile;
						e->Tile = ghost->Tile;
					}
					e->CSet = ghost->CSet;
					if (data[GHI_TRAIL_FLAGS] & GHTF_TRANSLUCENT) e->DrawStyle = DS_PHANTOM;
					SetEWeaponLifespan(e, EWL_TIMER, data[GHI_TRAIL_LIFESPAN]);
					SetEWeaponDeathEffect(e, EWD_VANISH, -1);
				}
			}
		}
		ghost3::SetInternal(ghost, GHI_PREVX, ghost->X);
		ghost3::SetInternal(ghost, GHI_PREVY, ghost->Y);
		// Set combo
		if(data[GHI_DATA] == Game->Ghost[GHV_SETTINGS_COMBO_ID])
		{
			ghost->Tile = Game->ComboTile(data[GHI_DATA]);
		}
		else if(data[GHI_DATA] > 0)
		{
			if(FlagIsSet(ghost, GHF_8WAY) || FlagIsSet(ghost, GHF_4WAY))
			{
				if(ghost->Tile != Game->ComboTile(data[GHI_DATA] + NormalizeDir(ghost->Dir)))
					ghost->Tile = Game->ComboTile(data[GHI_DATA] + NormalizeDir(ghost->Dir));
			}
			else if(FlagIsSet(ghost, GHF_DIAGWAY))
			{
				if(ghost->Tile != Game->ComboTile(data[GHI_DATA] + NormalizeDir(ghost->Dir) - 4))
					ghost->Tile = Game->ComboTile(data[GHI_DATA] + NormalizeDir(ghost->Dir) - 4);
			}
			else
			{
				if(ghost->Tile != Game->ComboTile(data[GHI_DATA]))
					ghost->Tile = Game->ComboTile(data[GHI_DATA]);
			}
		}
		ghost3::DrawAnimation(ghost);
	}

	// After waiting: Check whether the enemy was hit, stunned, or killed
	bool Ghost_WaitframePart2(npc ghost, bool clearOnDeath, bool quitOnDeath)
	{
		ghost->BFlags[0] = false;
		// Is it dead?
		bool dead = isDead(ghost);
		
		// Not dead; was it hit, stunned, or frozen?
		unless(dead)
		{
			dead = !ghost3::CheckFreeze(ghost);
		}
		
		// Dead; clean up
		if(dead)
		{
			if(quitOnDeath)
			{
				ghost->ScriptTile = -1;
				Quit();
			}
			return false;
		}
		
		return true;
	}
	
	enum GHI_ANIMSTYLES
	{
		GHI_AS_ENGINE,
		GHI_AS_1DIR,
		GHI_AS_4DIR,
		GHI_AS_8DIR,
		GHI_AS_4DIRDIAG,
		GHI_AS_COMPLEX1,
		GHI_AS_COMPLEX4,
		GHI_AS_COMPLEX8,
		GHI_AS_1COMBO,
		GHI_AS_4COMBO,
		GHI_AS_8COMBO
	};
	
	void DrawAnimation(npc ghost)
	{
		if (ghost->isValid() && ghost->HP > 0)
		{
			int data = ghost->Misc[GH_INTERNAL];
			switch(data[GHI_ANIMSTYLE])
			{
				case GHI_AS_1DIR:
					unless (data[GHI_NOLOOP] && data[GHI_ACLK] >= (Max(1, data[GHI_AFRAMES_UP])*Max(data[GHI_ASPEED_UP],1))-1)
					{
						++data[GHI_ACLK];
						data[GHI_ACLK] %= (Max(1, data[GHI_AFRAMES_UP])*Max(data[GHI_ASPEED_UP],1));
					}
					int curodata = data[GHI_OTILE_UP];
					ghost->ScriptTile = curodata + ghost->TileWidth*((data[GHI_ACLK] / Max(data[GHI_ASPEED_UP],1))<<0);
					if (ghost->TileHeight > 1 && ((ghost->ScriptTile/20)<<0) > ((curodata/20)<<0))
					{
						ghost->ScriptTile += 20*(((ghost->ScriptTile/20)<<0) - ((curodata/20)<<0))*(ghost->TileHeight-1);
					}
					break;
				
				case GHI_AS_4DIR:
					unless (data[GHI_NOLOOP] && data[GHI_ACLK] >= (Max(1, data[GHI_AFRAMES_UP+(NormalizeDir(ghost->Dir)%4)]) * Max(data[GHI_ASPEED_UP+(NormalizeDir(ghost->Dir)%4)],1))-1)
					{
						++data[GHI_ACLK];
						data[GHI_ACLK] %= (Max(1, data[GHI_AFRAMES_UP+(NormalizeDir(ghost->Dir)%4)]) * Max(data[GHI_ASPEED_UP+(NormalizeDir(ghost->Dir)%4)],1));
					}
					int curodata = data[GHI_OTILE_UP+(NormalizeDir(ghost->Dir)%4)];
					ghost->ScriptTile = curodata + ghost->TileWidth*((data[GHI_ACLK] / Max(data[GHI_ASPEED_UP+(NormalizeDir(ghost->Dir)%4)],1))<<0);
					if (ghost->TileHeight > 1 && ((ghost->ScriptTile/20)<<0) > ((curodata/20)<<0))
					{
						ghost->ScriptTile += 20*(((ghost->ScriptTile/20)<<0) - ((curodata/20)<<0))*(ghost->TileHeight-1);
					}
					break;
					
				case GHI_AS_4DIRDIAG:
					int dir = 0;
					if(ghost3::GetInternal(ghost, GHI_DIAGVY) < 0)
					{
						if(ghost3::GetInternal(ghost, GHI_DIAGVX) < 0)
							dir = DIR_LEFTUP;
						if(ghost3::GetInternal(ghost, GHI_DIAGVX) > 0)
							dir = DIR_RIGHTUP;
						//Yes I realize this doesn't cover if X is == 0; that's intentional.
					}
					if(ghost3::GetInternal(ghost, GHI_DIAGVY) > 0)
					{
						if(ghost3::GetInternal(ghost, GHI_DIAGVX) < 0)
							dir = DIR_LEFTDOWN;
						if(ghost3::GetInternal(ghost, GHI_DIAGVX) > 0)
							dir = DIR_RIGHTDOWN;
					}
					unless (data[GHI_NOLOOP] && data[GHI_ACLK] >= (Max(1, data[GHI_AFRAMES_UP+dir])*Max(data[GHI_ASPEED_UP+dir],1))-1)
					{
						++data[GHI_ACLK];
						data[GHI_ACLK] %= (Max(1, data[GHI_AFRAMES_UP+dir])*Max(data[GHI_ASPEED_UP+dir],1));
					}
					data[GHI_ACLK] %= (Max(1, data[GHI_AFRAMES_UP+dir])*Max(data[GHI_ASPEED_UP+dir],1));
					int curodata = data[GHI_OTILE_UP+dir];
					ghost->ScriptTile = curodata + ghost->TileWidth*((data[GHI_ACLK] / Max(data[GHI_ASPEED_UP+dir],1))<<0);
					if (ghost->TileHeight > 1 && ((ghost->ScriptTile/20)<<0) > ((curodata/20)<<0))
					{
						ghost->ScriptTile += 20*(((ghost->ScriptTile/20)<<0) - ((curodata/20)<<0))*(ghost->TileHeight-1);
					}
					break;
					
				case GHI_AS_8DIR:
					unless (data[GHI_NOLOOP] && data[GHI_ACLK] >= Max(1, data[GHI_AFRAMES_UP+(NormalizeDir(ghost->Dir)%8)])*Max(data[GHI_ASPEED_UP+(NormalizeDir(ghost->Dir)%8)],1)-1)
					{
						++data[GHI_ACLK];
						data[GHI_ACLK] %= Max(1, data[GHI_AFRAMES_UP+(NormalizeDir(ghost->Dir)%8)])*Max(data[GHI_ASPEED_UP+(NormalizeDir(ghost->Dir)%8)],1);
					}
					int curodata = data[GHI_OTILE_UP+(NormalizeDir(ghost->Dir)%8)];
					ghost->ScriptTile = curodata + ghost->TileWidth*((data[GHI_ACLK] / Max(data[GHI_ASPEED_UP+(NormalizeDir(ghost->Dir)%8)],1))<<0);
					if (ghost->TileHeight > 1 && ((ghost->ScriptTile/20)<<0) > ((curodata/20)<<0))
					{
						ghost->ScriptTile += 20*(((ghost->ScriptTile/20)<<0) - ((curodata/20)<<0))*(ghost->TileHeight-1);
					}
					break;
				
				case GHI_AS_COMPLEX1:
					ghost->ScriptTile = data[GHI_OTILE_UP];
					break;
					
				case GHI_AS_COMPLEX4:
					ghost->ScriptTile = data[GHI_OTILE_UP+(NormalizeDir(ghost->Dir)%4)];
					break;
					
				case GHI_AS_COMPLEX8:
					ghost->ScriptTile = data[GHI_OTILE_UP+(NormalizeDir(ghost->Dir)%8)];
					break;
				
				default:
					break;
			}
		}
	}

	bool CheckFreeze(npc ghost)
	{
		int data = ghost->Misc[GH_INTERNAL];
		if((FlagIsSet(ghost,GHF_CLOCK) && ClockIsActive()) ||
		   (FlagIsSet(ghost,GHF_STUN) && ghost->Stun > 0))
		{
			
			ghost3::SetIFlag(ghost, GHFI_WAS_FROZEN);
			
			// Do nothing except get hit until recovered
			while((FlagIsSet(ghost,GHF_CLOCK) && ClockIsActive()) ||
				  (FlagIsSet(ghost,GHF_STUN) && ghost->Stun > 0))
			{
				Ghost_WaitframeLight(ghost);
				
				unless(ghost->isValid())
					return false;
				else if(isDead(ghost))
					return false;
				
				if(data[GHI_DATA] > 0)
				{
					if(FlagIsSet(ghost, GHF_8WAY) || FlagIsSet(ghost, GHF_4WAY))
					{
						if(ghost->Tile != Game->ComboTile(data[GHI_DATA] + NormalizeDir(ghost->Dir)))
							ghost->Tile = Game->ComboTile(data[GHI_DATA] + NormalizeDir(ghost->Dir));
					}
					else if(FlagIsSet(ghost, GHF_DIAGWAY))
					{
						if(ghost->Tile != Game->ComboTile(data[GHI_DATA] + NormalizeDir(ghost->Dir) - 4))
							ghost->Tile = Game->ComboTile(data[GHI_DATA] + NormalizeDir(ghost->Dir) - 4);
					}
					else
					{
						if(ghost->Tile != Game->ComboTile(data[GHI_DATA]))
							ghost->Tile = Game->ComboTile(data[GHI_DATA]);
					}
				}
			}
		}
		
		return true;
	}

	void Ghost_WaitframeLight(npc ghost)
	{
		Waitframe(); //yup. This might get expanded later, but I doubt it.
	}

	bool Ghost_Waitframes(npc ghost, bool clearOnDeath, bool quitOnDeath, int numFrames)
	{
		for(; numFrames>0; --numFrames)
		{
			unless(ghost3::Ghost_Waitframe(ghost, clearOnDeath, quitOnDeath))
				return false;
		}
		return true;
	}

	void Ghost_WaitframesLight(npc ghost, int numFrames)
	{
		for(; numFrames>0; --numFrames)
			ghost3::Ghost_WaitframeLight(ghost);
	}

	void Ghost_Waitframe(npc ghost)
	{
		ghost3::Ghost_Waitframe(ghost, true, true);
	}

	void Ghost_Waitframes(npc ghost, int numFrames)
	{
		ghost3::Ghost_Waitframes(ghost, true, true, numFrames);
	}


	bool Ghost_Waitframe(npc ghost, DeathAnim deathAnimation, bool quitOnDeath)
	{
		unless(ghost3::Ghost_Waitframe(ghost, false, false))
		{
			ghost3::DeathAnimation(ghost, deathAnimation, quitOnDeath);
			if(quitOnDeath)
				Quit();
			return false;
		}
		
		return true;
	}
}
