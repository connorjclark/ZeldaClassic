// ghost.zh
// Version 3.0.0 - Alpha 9
namespace ghost3
{
	const int EW_GHOSTED    = 39;
	
	enum EXWPNTYPES
	{
		EXWPN_LASER
	};
	
	@Author("Dimi")
	eweapon script GhostWeaponEX
	{
		void run(int type, int arg1, int arg2, int arg3)
		{
			this->DrawXOffset = -1000;
			this->CollDetection = false;
			this->Step = 0;
			unless (this->Angular)
			{
				this->Angle = DirRad(this->Dir);
				this->Angular = true;
			}
			switch(type)
			{
				default:
					for(int i = 0; i < arg3; ++i)
					{
						DrawLaser(this->X+8, this->Y+8, (arg1/arg3)*i, RadtoDeg(this->Angle), 1, OP_OPAQUE);
						Waitframe();
					}
					for(int i = arg2; i > 0; --i)
					{
						Laser(this->X+8, this->Y+8, arg1, RadtoDeg(this->Angle), this->Damage, 1, 1, OP_OPAQUE);
						Waitframe();
					}
					for(int i = arg3; i > 0; --i)
					{
						DrawLaser(this->X+8, this->Y+8, (arg1/arg3)*i, RadtoDeg(this->Angle), 1, OP_OPAQUE);
						Waitframe();
					}
					break;
			}
			Remove(this);
		}
		void Laser(int x, int y, int width, int angle, int damage, int color, int drawstyle, int opacity)
		{
			int curvedivisor = 3;
			{
				int arr[4] = {x+VectorX(Ceiling(width/2), angle+90)+VectorX(Round(width/curvedivisor), angle), y+VectorY(Ceiling(width/2), angle+90)+VectorY(Round(width/curvedivisor), angle), x-VectorX(Floor(width/2), angle+90)+VectorX(Round(width/curvedivisor), angle), y-VectorY(Floor(width/2), angle+90)+VectorY(Round(width/curvedivisor), angle)};
				int arr2[8] = {arr[0], arr[1], arr[2], arr[3], arr[2]+VectorX(255, angle), arr[3]+VectorY(255, angle), arr[0]+VectorX(255, angle), arr[1]+VectorY(255, angle)};
				if (opacity == OP_OPAQUE)
				{
					Screen->Ellipse(4, x+VectorX(Round(width/curvedivisor), angle), y+VectorY(Round(width/curvedivisor), angle), Round(width/curvedivisor), Round(width/2), color, 1, x+VectorX(Round(width/curvedivisor), angle), y+VectorY(Round(width/curvedivisor), angle), angle, true, OP_OPAQUE);
					Screen->Polygon(4, 4, arr2, color, OP_OPAQUE);
				}
				else if (opacity == OP_TRANS)
				{
					bitmap B;
					B->Create(4, 256, 256);
					B->Ellipse(4, x+VectorX(Round(width/curvedivisor), angle), y+VectorY(Round(width/curvedivisor), angle), Round(width/curvedivisor), Round(width/2), color, 1, x+VectorX(Round(width/curvedivisor), angle), y+VectorY(Round(width/curvedivisor), angle), angle, true, opacity);
					B->Polygon(4, 4, arr2, color, opacity);
					B->Blit(4, RT_SCREEN, 
						0, 0, 256, 176, 
						0, 0, 256, 176, 
						0, 0, 0, BITDX_TRANS, -1,  true);
					B->Free();
				}
				if (PolyHeroColl(arr2))
				{
					eweapon e = FireNonAngularEWeapon(EW_GHOSTED, Hero->X-VectorX(3, angle), Hero->Y-VectorY(3, angle), AngleDir4(WrapDegrees(angle)), 0, damage, -1, 0, 0);
					e->DrawXOffset = -1000;
					SetEWeaponLifespan(e, EWL_TIMER, 2);
					SetEWeaponDeathEffect(e, EWD_VANISH, -1);
				}
			}
			if (drawstyle == 1)
			{
				if (Game->Time % 10bL) width+=4;
				x-=VectorX(2, angle);
				y-=VectorY(2, angle);
				int arr[4] = {x+VectorX(Ceiling(width/2), angle+90)+VectorX(Round(width/curvedivisor), angle), y+VectorY(Ceiling(width/2), angle+90)+VectorY(Round(width/curvedivisor), angle), x-VectorX(Floor(width/2), angle+90)+VectorX(Round(width/curvedivisor), angle), y-VectorY(Floor(width/2), angle+90)+VectorY(Round(width/curvedivisor), angle)};
				int arr2[8] = {arr[0], arr[1], arr[2], arr[3], arr[2]+VectorX(255, angle), arr[3]+VectorY(255, angle), arr[0]+VectorX(255, angle), arr[1]+VectorY(255, angle)};
				bitmap B;
				B->Create(4, 256, 256);
				B->Ellipse(4, x+VectorX(Round(width/curvedivisor), angle), y+VectorY(Round(width/curvedivisor), angle), Round(width/curvedivisor), Round(width/2), color, 1, x+VectorX(Round(width/curvedivisor), angle), y+VectorY(Round(width/curvedivisor), angle), angle, true, opacity);
				B->Polygon(4, 4, arr2, color, opacity);
				//Screen->SetRenderTarget(RT_BITMAP4);
				B->Blit(4, RT_SCREEN, 
					0, 0, 256, 176, 
					0, 0, 256, 176, 
					0, 0, 0, BITDX_TRANS, -1,  true);
				B->Free();
			}
		}
		void DrawLaser(int x, int y, int width, int angle, int color, int opacity)
		{
			int curvedivisor = 3;
			{
				int arr[4] = {x+VectorX(Ceiling(width/2), angle+90)+VectorX(Round(width/curvedivisor), angle), y+VectorY(Ceiling(width/2), angle+90)+VectorY(Round(width/curvedivisor), angle), x-VectorX(Floor(width/2), angle+90)+VectorX(Round(width/curvedivisor), angle), y-VectorY(Floor(width/2), angle+90)+VectorY(Round(width/curvedivisor), angle)};
				int arr2[8] = {arr[0], arr[1], arr[2], arr[3], arr[2]+VectorX(255, angle), arr[3]+VectorY(255, angle), arr[0]+VectorX(255, angle), arr[1]+VectorY(255, angle)};
				if (opacity == OP_OPAQUE)
				{
					Screen->Ellipse(4, x+VectorX(Round(width/curvedivisor), angle), y+VectorY(Round(width/curvedivisor), angle), Round(width/curvedivisor), Round(width/2), color, 1, x+VectorX(Round(width/curvedivisor), angle), y+VectorY(Round(width/curvedivisor), angle), angle, true, OP_OPAQUE);
					Screen->Polygon(4, 4, arr2, color, OP_OPAQUE);
				}
				else if (opacity == OP_TRANS)
				{
					bitmap B;
					B->Create(4, 256, 256);
					B->Ellipse(4, x+VectorX(Round(width/curvedivisor), angle), y+VectorY(Round(width/curvedivisor), angle), Round(width/curvedivisor), Round(width/2), color, 1, x+VectorX(Round(width/curvedivisor), angle), y+VectorY(Round(width/curvedivisor), angle), angle, true, opacity);
					B->Polygon(4, 4, arr2, color, opacity);
					B->Blit(4, -2, 
						0, 0, 256, 176, 
						0, 0, 256, 176, 
						0, 0, 0, BITDX_TRANS, -1,  true);
					B->Free();
				}
			}
			{
				if (Game->Time % 10bL) width+=4;
				x-=VectorX(2, angle);
				y-=VectorY(2, angle);
				int arr[4] = {x+VectorX(Ceiling(width/2), angle+90)+VectorX(Round(width/curvedivisor), angle), y+VectorY(Ceiling(width/2), angle+90)+VectorY(Round(width/curvedivisor), angle), x-VectorX(Floor(width/2), angle+90)+VectorX(Round(width/curvedivisor), angle), y-VectorY(Floor(width/2), angle+90)+VectorY(Round(width/curvedivisor), angle)};
				int arr2[8] = {arr[0], arr[1], arr[2], arr[3], arr[2]+VectorX(255, angle), arr[3]+VectorY(255, angle), arr[0]+VectorX(255, angle), arr[1]+VectorY(255, angle)};
				bitmap B;
				B->Create(4, 256, 256);
				B->Ellipse(4, x+VectorX(Round(width/curvedivisor), angle), y+VectorY(Round(width/curvedivisor), angle), Round(width/curvedivisor), Round(width/2), color, 1, x+VectorX(Round(width/curvedivisor), angle), y+VectorY(Round(width/curvedivisor), angle), angle, true, opacity);
				B->Polygon(4, 4, arr2, color, opacity);
				//Screen->SetRenderTarget(RT_BITMAP4);
				B->Blit(4, RT_SCREEN, 
					0, 0, 256, 176, 
					0, 0, 256, 176, 
					0, 0, 0, BITDX_TRANS, -1,  true);
				B->Free();
				//WizzrobeFlickerClear(npc this)
			}
		}
	}

	bool PolyHeroColl(int arr)
	{
		int arr2[] = {Hero->X, Hero->Y, Hero->X+15, Hero->Y, Hero->X+15, Hero->Y+15, Hero->X, Hero->Y+15};
		return SATCollision(arr, arr2);
	}

	bool IsConvex(int a)
	{
		for(int i = 0; i < SizeOfArray(a); i+=2) 
		{
			int curx = a[i];
			int cury = a[i+1];
			int nextx = a[(i + 2) % SizeOfArray(a)];
			int nexty = a[(i + 3) % SizeOfArray(a)];
			int nextx2 = a[(i + 4) % SizeOfArray(a)];
			int nexty2 = a[(i + 5) % SizeOfArray(a)];
			int nextx3 = a[(i + 6) % SizeOfArray(a)];
			int nexty3 = a[(i + 7) % SizeOfArray(a)];
			int ang1 = Angle(curx, cury, nextx, nexty);
			int ang2 = Angle(nextx, nexty, nextx2, nexty2);
			int ang3 = Angle(nextx2, nexty2, nextx3, nexty3);
			int curanglediff = ghost3::angleDifference(ang1, ang2);
			int nextanglediff = ghost3::angleDifference(ang2, ang3);
			unless (Sign(curanglediff) == Sign(nextanglediff)) return false;
		}
		return true;
		
	}

	// Function to get the difference between two angles
	float angleDifference(float angle1, float angle2)
	{
		// Get the difference between the two angles
		float dif = angle2 - angle1;
		
		// Compensate for the difference being outside of normal bounds
		if(dif >= PI)
			dif -= 2 * PI;
		else if(dif <= -1 * PI)
			dif += 2 * PI;
			
		return dif;
	}

	bool SATCollision(int a, int b)
	{
		// loop over the vertices(-> edges -> axis) of the first polygon
		for(int i = 0; i < SizeOfArray(a); i+=2) 
		{
			// calculate the normal vector of the current edge
			// this is the axis will we check in this loop
			int curx = a[i];
			int cury = a[i+1];
			int nextx = a[(i + 2) % SizeOfArray(a)];
			int nexty = a[(i + 3) % SizeOfArray(a)];
			int edge[2];
			edge[0] = nextx - curx;
			edge[1] = nexty - cury;

			int axis[2];
			axis[0] = -edge[1];
			axis[1] = edge[0];

			// loop over all vertices of both polygons and project them
			// onto the axis. We are only interested in max/min projections
			int aMaxProj = MIN_CONSTANT;
			int aMinProj = MAX_CONSTANT;
			int bMaxProj = MIN_CONSTANT;
			int bMinProj = MAX_CONSTANT;
			for(int q = 0; q < SizeOfArray(a); q+=2) 
			{
				int proj = (a[q]*axis[0]) + (a[q+1]*axis[1]);
				if(proj < aMinProj) aMinProj = proj;
				if(proj > aMaxProj) aMaxProj = proj;
			}

			for(int q = 0; q < SizeOfArray(b); q+=2)  
			{
				int proj = (b[q]*axis[0]) + (b[q+1]*axis[1]);
				if(proj < bMinProj) bMinProj = proj;
				if(proj > bMaxProj) bMaxProj = proj;
			}

			// now check if the intervals the both polygons projected on the
			// axis overlap. If they don't, we have found an axis of separation and
			// the given polygons cannot overlap
			if(aMaxProj < bMinProj || aMinProj > bMaxProj) {
				return false;
			}
		}

		// at this point, we have checked all axis but found no separating axis
		// which means that the polygons must intersect.
		return true;
	}

	bool PolyCircleCollision(int a, int b)
	{
		// loop over the vertices(-> edges -> axis) of the first polygon
		for(int i = 0; i < SizeOfArray(a); i+=2) 
		{
			// calculate the normal vector of the current edge
			// this is the axis will we check in this loop
			int curx = a[i];
			int cury = a[i+1];
			int nextx = a[(i + 2) % SizeOfArray(a)];
			int nexty = a[(i + 3) % SizeOfArray(a)];
			int edge[2];
			edge[0] = nextx - curx;
			edge[1] = nexty - cury;

			int axis[2];
			axis[0] = -edge[1];
			axis[1] = edge[0];

			// loop over all vertices of both polygons and project them
			// onto the axis. We are only interested in max/min projections
			int aMaxProj = MIN_CONSTANT;
			int aMinProj = MAX_CONSTANT;
			int bMaxProj = (b[0]*axis[0]) + (b[1]*axis[1]);
			int bMinProj = ((b[0]-b[2])*axis[0]) + ((b[1]-b[2])*axis[1]);
			for(int q = 0; q < SizeOfArray(a); q+=2) 
			{
				int proj = (a[q]*axis[0]) + (a[q+1]*axis[1]);
				if(proj < aMinProj) aMinProj = proj;
				if(proj > aMaxProj) aMaxProj = proj;
			}

			// now check if the intervals the both polygons projected on the
			// axis overlap. If they don't, we have found an axis of separation and
			// the given polygons cannot overlap
			if(aMaxProj < bMinProj || aMinProj > bMaxProj) {
				return false;
			}
		}

		// at this point, we have checked all axis but found no separating axis
		// which means that the polygons must intersect.
		return true;
	}
}