ffc script SlashComboSFXAnim{
	void run(int combo, int sfx, int type, int gfx, int cs, int frames, int aspeed, int rand){
		int i; int j; int k;
		int comboCount;
		int positions[176];
		for(i=0; i<176; i++){
			positions[i] = -1;
		}
		for(i=0; i<176; i++){
			if(Screen->ComboD[i]==combo){
				positions[comboCount] = i;
				comboCount++;
			}
		}
		while(true){
			for(i=0; i<comboCount; i++){
				j = positions[i];
				if(j>-1){
					if(Screen->ComboD[j]!=combo){
						Game->PlaySound(sfx);
						if(type>1){
							int scr[] = "SCSA_Animations";
							int args[8];
							args[0] = type-2;
							args[1] = gfx;
							args[2] = cs;
							args[3] = frames;
							args[4] = aspeed;
							args[5] = rand;
							ffc f = Screen->LoadFFC(RunFFCScript(Game->GetFFCScript(scr), args));
							f->X = ComboX(j);
							f->Y = ComboY(j);
						}
						else if(type==1){
							lweapon poof = CreateLWeaponAt(LW_SCRIPT10, ComboX(j), ComboY(j));
							poof->UseSprite(gfx);
							poof->DrawYOffset = 0;
							if(cs>0)
								poof->CSet = cs;
							poof->DeadState = poof->NumFrames*poof->ASpeed;
							if(rand>1){
								poof->OriginalTile += Rand(rand)*poof->NumFrames;
								poof->Tile = poof->OriginalTile;
							}
						}
						positions[i] = -1;
					}
				}
			}
			Waitframe();
		}
	}
}

ffc script SCSA_Animations{
	void run(int type, int gfx, int cs, int frames, int aspeed, int rand){
		this->Flags[FFCF_ETHEREAL] = true;
		int i; int j; int k;
		int thisNum;
		for(i=1; i<=32; i++){
			ffc f = Screen->LoadFFC(i);
			if(f->Script==this->Script){
				if(f==this)
					break;
				else
					thisNum++;
			}
		}
		
		
		if(type==0){ //Bush leaves
			for(i=0; i<8; i++){
				for(j=0; j<3; j++){
					TileAnim_BushAnim(this->X-8, this->Y, gfx, cs, i, thisNum);
					Waitframe();
				}
			}
		}
		else{
			int particleX[32];
			int particleY[32];
			int particleTile[32];
			int particleA[32];
			int particleS[32];
			int particleT[32];
			int particleMT[32];
			int particleAnim[32];
			int particle[16] = {999, particleX, particleY, particleTile, particleA, particleS, particleT, particleMT, particleAnim};
			if(type==1){ //Random spread
				for(i=0; i<12; i++){
					j = gfx;
					if(rand>=0)
						j += Rand(rand)*Max(frames, 1);
					Particle_Add(particle, this->X+Rand(-4, 4), this->Y+Rand(-4, 4), j, Rand(360), Rand(20, 120)/100, Rand(12, 18));
				}
				while(particle[0]>0){
					Particle_Update(particle, frames, aspeed, cs);
					Waitframe();
				}
			}
			else if(type==2){ //Aimed spread
				k = Angle(Link->X, Link->Y, this->X, this->Y);
				for(i=0; i<6; i++){
					j = gfx;
					if(rand>=0)
						j += Rand(rand)*Max(frames, 1);
					Particle_Add(particle, this->X+Rand(-4, 4), this->Y+Rand(-4, 4), j, k+Rand(-20, 20), Rand(5, 20)/10, Rand(12, 18));
				}
				while(particle[0]>0){
					Particle_Update(particle, frames, aspeed, cs);
					Waitframe();
				}
			}
		}
	}
	void Particle_Update(int particle, int frames, int aspeed, int cs){
		int particleX = particle[1];
		int particleY = particle[2];
		int particleTile = particle[3];
		int particleA = particle[4];
		int particleS = particle[5];
		int particleT = particle[6];
		int particleMT = particle[7];
		int particleAnim = particle[8];
		particle[0] = 0;
		for(int i=0; i<32; i++){
			if(particleT[i]>0){
				particle[0]++;
				particleX[i] += VectorX(particleS[i], particleA[i]);
				particleY[i] += VectorY(particleS[i], particleA[i]);
				int til = particleTile[i];
				if(frames>0){
					if(aspeed==0){
						int j = Floor((particleMT[i]-particleT[i])/(particleMT[i]/frames));
						til = particleTile[i]+Clamp(j, 0, frames-1);
					}
					else{
						til = particleTile[i] + Floor(particleAnim[i]/aspeed);
						particleAnim[i] = (particleAnim[i]+1)%(frames*aspeed);
					}
				}
				Screen->FastTile(4, particleX[i], particleY[i], til, cs, 128);
				particleT[i]--;
			}
		}
	}
	int Particle_Add(int particle, int x, int y, int tile, int angle, int step, int time){
		int particleX = particle[1];
		int particleY = particle[2];
		int particleTile = particle[3];
		int particleA = particle[4];
		int particleS = particle[5];
		int particleT = particle[6];
		int particleMT = particle[7];
		int particleAnim = particle[8];
		for(int i=0; i<32; i++){
			if(particleT[i]==0){
				particleX[i] = x;
				particleY[i] = y;
				particleTile[i] = tile;
				particleA[i] = angle;
				particleS[i] = step;
				particleT[i] = time;
				particleMT[i] = time;
				particleAnim[i] = 0;
				return i;
			}
		}
	}
	void TileAnim_BushAnim(int x, int y, int tile, int cset, int frame, int thisNum){
		int posX[32] = {16, 6,  20, 14, //Frame 1
						16, 9,  17, 14, //Frame 2
						17, 10, 14, 12, //Frame 3
						17, 11, 15, 11, //Frame 4
						19, 8,  18, 10, //Frame 5
						20, 4,  19, 9,  //Frame 6
						21, 3,  22, 8,  //Frame 7
						14, 1,  16, 7}; //Frame 8
						
						
		int posY[32] = {11, 8,  7,   1, //Frame 1 
						14, 9,  8,  -1, //Frame 2
						16, 10, 10, -2, //Frame 3
						18, 10, 10, -3, //Frame 4
						20, 10, 14, -4, //Frame 5
						21, 10, 14, -6, //Frame 6
						23, 9,  14, -9, //Frame 7
						24, 7,  21, -11};//Frame 8
						
		int flip[32] = {0,  0,  1,  0,  //Frame 1
						0,  0,  1,  0,  //Frame 2
						1,  0,  1,  0,  //Frame 3
						0,  1,  0,  3,  //Frame 4
						0,  1,  0,  0,  //Frame 5
						0,  0,  0,  0,  //Frame 6
						0,  0,  1,  0,  //Frame 7
						1,  1,  0,  0}; //Frame 8
		
		for(int i=0; i<4; i++){
			Screen->DrawTile(4, x+posX[frame*4+i]-4, y+posY[frame*4+i]-4, tile+i, 1, 1, cset, -1, -1, 0, 0, 0, flip[frame*4+i], true, 128);
		}
	}
}