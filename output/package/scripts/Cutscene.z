const int CUTSCENETRIGGER_SHOW_HITBOXES = 0; //For debugging problems with the script's hitboxes, set this to 1.
const int C_CUTSCENETRIGGER_HITBOX = 0x01; //Color for the debug hitboxes

const int D_CUTSCENETRIGGER = 0; //Screen->D used for cutscene triggers

//D0: The DMap to warp to for the cutscene
//D1: The screen to warp to IN DECIMAL. Screens in ZQuest are numbered in hex but FFCs only take arguments
//	  in decimal, so you'll have to convert.
//D2: Width of the trigger hitbox
//D3: Height of the trigger hitbox
//D4: Set this to a number 1-17 to make the cutscene only play once. By giving FFCs different D4 arguments, 
//	  you can have multiple triggers for different permanent cutscenes on a screen.
//D5: If you want the trigger to check for a flag under Link, set this to the number of the flag. 
//	  If you want it to check for an item, set this to a negative Item ID.
//D6: The X position to try to walk Link to. 0 for no target point.
//D7: The Y position to try to walk Link to. 0 for no target point.
ffc script CutsceneTrigger{
	void run(int newDMap, int newScreen, int w, int h, int oneUse, int checkItemorFlag, int targetX, int targetY){
		int dbit;
		if(oneUse>0){
			dbit = 1<<(oneUse-1);
		}
		//If Link starts standing on the cutscene hitbox, wait for him to step off
		while(Link->X+8 >= this->X && Link->X+8 <= this->X+w-1 && Link->Y+12 >= this->Y && Link->Y+12 <= this->Y+h-1 ){
			if(CUTSCENETRIGGER_SHOW_HITBOXES){
				Screen->Rectangle(6, this->X-1, this->Y-1, this->X+w-1+1, this->Y+h-1+1, C_CUTSCENETRIGGER_HITBOX, 1, 0, 0, 0, false, 64);
				Screen->Rectangle(6, this->X, this->Y, this->X+w-1, this->Y+h-1, C_CUTSCENETRIGGER_HITBOX, 1, 0, 0, 0, false, 128);
				Screen->Rectangle(6, this->X+1, this->Y+1, this->X+w-1-1, this->Y+h-1-1, C_CUTSCENETRIGGER_HITBOX, 1, 0, 0, 0, true, 64);
			}
			Waitframe();
		}
		//Check if the cutscene has already been triggered
		if(oneUse&&Screen->D[D_CUTSCENETRIGGER]&dbit){
			Quit();
		}
		while(true){
			if(CUTSCENETRIGGER_SHOW_HITBOXES){
				Screen->Rectangle(6, this->X-1, this->Y-1, this->X+w-1+1, this->Y+h-1+1, C_CUTSCENETRIGGER_HITBOX, 1, 0, 0, 0, false, 64);
				Screen->Rectangle(6, this->X, this->Y, this->X+w-1, this->Y+h-1, C_CUTSCENETRIGGER_HITBOX, 1, 0, 0, 0, false, 128);
				Screen->Rectangle(6, this->X+1, this->Y+1, this->X+w-1-1, this->Y+h-1-1, C_CUTSCENETRIGGER_HITBOX, 1, 0, 0, 0, false, 64);
			}
			//Find if Link has collided with the trigger hitbox
			if(Link->X+8 >= this->X && Link->X+8 <= this->X+w-1 && Link->Y+12 >= this->Y && Link->Y+12 <= this->Y+h-1 ){
				if(CUTSCENETRIGGER_SHOW_HITBOXES){
					Screen->Rectangle(6, this->X+2, this->Y+2, this->X+w-1-2, this->Y+h-1-2, C_CUTSCENETRIGGER_HITBOX, 1, 0, 0, 0, true, 64);
				}
				//If Link meets one the requirements to trigger the cutscene, break out of the loop
				if(checkItemorFlag==0){
					break;
				}
				//If the checkItemorFlag argument is negative, check for an item
				else if(checkItemorFlag<0){
					if(Link->Item[Abs(checkItemorFlag)])
						break;
				}
				//Else check for a screen flag
				else if(ComboFI(Link->X+8, Link->Y+12, checkItemorFlag)){
					break;
				}
			}
			Waitframe();
		}
		if(targetX>0||targetY>0){
			//Move Link either until he's in position or 4 seconds have passed
			for(int i=0; i<=240&&(Link->X!=targetX||Link->Y!=targetY); i++){
				//Prevent moving around while moving Link into position
				Link->InputStart = false; Link->PressStart = false;
				Link->InputMap = false; Link->PressMap = false;
				NoAction();
				
				//Apply inputs that should be active
				if(Abs(Link->X-targetX)<=2){
					Link->X = targetX;
				}
				else{
					if(Link->X<targetX)
						Link->InputRight = true;
					else if(Link->X>targetX)
						Link->InputLeft = true;
				}
				if(Abs(Link->Y-targetY)<=2){
					Link->Y = targetY;
				}
				else{
					if(Link->Y<targetY)
						Link->InputDown = true;
					else if(Link->Y>targetY)
						Link->InputUp = true;
				}
				Waitframe();
			}
		}
		if(oneUse){
			Screen->D[D_CUTSCENETRIGGER] |= dbit;
		}
		Link->PitWarp(newDMap, newScreen);
	}
}