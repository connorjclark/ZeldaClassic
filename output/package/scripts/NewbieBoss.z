//Three colors used for the lasers
const int C_EZB_LASER1 = 0x74;
const int C_EZB_LASER2 = 0x73;
const int C_EZB_LASER3 = 0x71;

const int SFX_EZB_TELEPORT = 56; //Sound when a boss teleports
const int SFX_EZB_LASER = 78; //Sound when a laser is fired
const int SFX_EZB_SUMMON = 56; //Sound for summoning enemies

const int EZBF_4WAY         = 000000001b;
const int EZBF_8WAY         = 000000010b;
const int EZBF_FLYING       = 000000100b;
const int EZBF_AQUATIC      = 000001000b;
const int EZBF_NOFALL       = 000010000b;
const int EZBF_EXPLODEEATH  = 000100000b;
const int EZBF_FACELINK     = 001000000b;
const int EZBF_UNBLOCKABLE  = 010000000b;
const int EZBF_KNOCKBACK    = 100000000b;

ffc script EZBoss{
	void run(int enemyid){
		int i; int j; int k; int angle; int dist; int x; int y;
		
		npc ghost = Ghost_InitAutoGhost(this, enemyid);
		Ghost_SetFlag(GHF_STUN);
		Ghost_SetFlag(GHF_CLOCK);
		
		int movementStyle = ghost->Attributes[0];
		int attack1 = ghost->Attributes[1];
		int attack2 = ghost->Attributes[2];
		int attack3 = ghost->Attributes[3];
		int special = ghost->Attributes[5];
		int size = ghost->Attributes[6];
		int fireSFX = ghost->Attributes[7];
		int fireSPR = ghost->Attributes[8];
		int flags = ghost->Attributes[9];
		
		int w = size&1111b;
		int h = (size>>4)&1111b;
		if(h==0)
			h = w;
		w = Clamp(w, 1, 4);
		h = Clamp(h, 1, 4);
			
		int combo = ghost->Attributes[10];
		Ghost_Transform(this, ghost, -1, -1, w, h);
		
		if(flags&EZBF_8WAY)
			Ghost_SetFlag(GHF_8WAY);
		else if(flags&EZBF_4WAY)
			Ghost_SetFlag(GHF_4WAY);
		if(flags&EZBF_NOFALL)
			Ghost_SetFlag(GHF_NO_FALL);
		if(flags&EZBF_FLYING){
			Ghost_SetFlag(GHF_IGNORE_ALL_TERRAIN);
			Ghost_SetFlag(GHF_FLYING_ENEMY);
			this->Flags[FFCF_OVERLAY] = true;
		}
		else if(flags&EZBF_AQUATIC){
			Ghost_SetFlag(GHF_WATER_ONLY);
		}
		if(flags&EZBF_KNOCKBACK){
			Ghost_SetFlag(GHF_KNOCKBACK);
		}
		
		int stepCounter = -1;
		int attackCooldown = ghost->Haltrate*10;
		int stepAngle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY());
		int vX; int vY;
		
		if(movementStyle==4){
			angle = Rand(360);
			vX = VectorX(ghost->Step/100, angle);
			vY = VectorY(ghost->Step/100, angle);
		}
		
		while(true){
			bool attackCond = false;
			//Handle Movement
			if(movementStyle==0){ //4 Way Halting Walk
				stepCounter = Ghost_HaltingWalk4(stepCounter, ghost->Step, ghost->Rate, ghost->Homing, ghost->Hunger, ghost->Haltrate, 48);
				if(stepCounter==16)
					attackCond = true;
			}
			else if(movementStyle==1){ //4 Way Constant Walk
				stepCounter = Ghost_ConstantWalk4(stepCounter, ghost->Step, ghost->Rate, ghost->Homing, ghost->Hunger);
				if(attackCooldown>0)
					attackCooldown--;
				else if(Rand(24)==0)
					attackCond = true;
			}
			else if(movementStyle==2){ //8 Way Constant Walk
				stepCounter = Ghost_ConstantWalk8(stepCounter, ghost->Step, ghost->Rate, ghost->Homing, ghost->Hunger);
				if(attackCooldown>0)
					attackCooldown--;
				else if(Rand(24)==0)
					attackCond = true;
			}
			else if(movementStyle==3){ //Homing in on Link
				if(Distance(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY())>8){
					EZB_FaceLink(this, ghost);
					Ghost_MoveAtAngle(Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY()), ghost->Step/100, 0);
				}
				if(attackCooldown>0)
					attackCooldown--;
				else if(Rand(24)==0)
					attackCond = true;
			}
			else if(movementStyle==4){ //Wall Bounce
				Ghost_MoveXY(vX, vY, 0);
				if((vX<0&&!Ghost_CanMove(DIR_LEFT, 1, 0)) || (vX>0&&!Ghost_CanMove(DIR_RIGHT, 1, 0)))
					vX = -vX;
				if((vY<0&&!Ghost_CanMove(DIR_UP, 1, 0)) || (vY>0&&!Ghost_CanMove(DIR_DOWN, 1, 0)))
					vY = -vY;
					
				Ghost_Dir = EZB_AngleDir(this, ghost, Angle(0, 0, vX*10, vY*10));
				if(flags&EZBF_FACELINK)
					EZB_FaceLink(this, ghost);
				if(attackCooldown>0)
					attackCooldown--;
				else if(Rand(24)==0)
					attackCond = true;
			}
			else if(movementStyle==5){ //Periodic Reaim
				Ghost_MoveAtAngle(stepAngle, ghost->Step/100, 0);
				Ghost_Dir = EZB_AngleDir(this, ghost, stepAngle);
				if(flags&EZBF_FACELINK)
					EZB_FaceLink(this, ghost);
					
				if(attackCooldown>0)
					attackCooldown--;
				else if(Rand(24)==0)
					attackCond = true;
					
				stepCounter++;
				if(stepCounter>80&&Rand(10)==0){
					stepAngle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY());
					stepCounter = 0;
				}
			}
			else if(movementStyle==6){ //Lazy chase
				float homing = ghost->Homing*0.001;
				float topSpeed = ghost->Step*0.01;
				vX = Clamp(vX+Sign(CenterLinkX()-CenterX(ghost))*homing, -topSpeed, topSpeed);
				vY = Clamp(vY+Sign(CenterLinkY()-CenterY(ghost))*homing, -topSpeed, topSpeed);
				Ghost_MoveXY(vX, vY, 0);
				if((vX<0&&!Ghost_CanMove(DIR_LEFT, 1, 0)) || (vX>0&&!Ghost_CanMove(DIR_RIGHT, 1, 0)))
					vX = -vX;
				if((vY<0&&!Ghost_CanMove(DIR_UP, 1, 0)) || (vY>0&&!Ghost_CanMove(DIR_DOWN, 1, 0)))
					vY = -vY;
					
				Ghost_Dir = EZB_AngleDir(this, ghost, Angle(0, 0, vX*10, vY*10));
				if(flags&EZBF_FACELINK)
					EZB_FaceLink(this, ghost);
				if(attackCooldown>0)
					attackCooldown--;
				else if(Rand(24)==0)
					attackCond = true;
			}
			else if(movementStyle==7){ //Hopping
				EZB_Waitframes(this, ghost, Choose(24, 32, 48));
				stepAngle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY())+Rand(-30, 30);
				Game->PlaySound(SFX_JUMP);
				Ghost_Jump = 2.6;
				while(Ghost_Jump>0||Ghost_Z>0){
					Ghost_Dir = EZB_AngleDir(this, ghost, stepAngle);
					Ghost_MoveAtAngle(stepAngle, ghost->Step/100, 0);
					if(flags&EZBF_FACELINK)
						EZB_FaceLink(this, ghost);
					EZB_Waitframe(this, ghost);
				}
				if(Rand(ghost->Rate)==0)
					attackCond = true;
			}
			else if(movementStyle==8){ //Teleport
				EZB_Waitframes(this, ghost, Choose(32, 48, 96));
				EZB_Teleport(this, ghost);
				if(Rand(ghost->Rate)==0)
					attackCond = true;
			}
			
			if(attackCond&&attack1){
				//Select an attack
				int attack;
				if(attack2==0)
					attack = attack1;
				else if(attack3==0)
					attack = Choose(attack1, attack2);
				else
					attack = Choose(attack1, attack2, attack3);
			
				if(attack==1){ //Dash
					angle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY());
					EZB_FaceLink(this, ghost);
					EZB_Waitframes(this, ghost, 30);
					while(EZB_CanMoveAngle(angle)){
						Ghost_MoveAtAngle(angle, 5, 0);
						EZB_Trail(this, ghost);
						EZB_Waitframe(this, ghost);
					}
				}
				if(attack==2){ //Shoot (Directional)
					EZB_FiringAnim(this, ghost);
					EZB_Fire(this, ghost, CenterX(ghost)-8, CenterY(ghost)-8, EZB_DirAngle(Ghost_Dir), 150);
					EZB_Waitframes(this, ghost, 24);
				}
				if(attack==3){ //Shoot (Angular)
					EZB_FaceLink(this, ghost);
					EZB_FiringAnim(this, ghost);
					EZB_Fire(this, ghost, CenterX(ghost)-8, CenterY(ghost)-8, Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY()), 150);
					EZB_Waitframes(this, ghost, 24);
				}
				if(attack==4){ //Tri Shot (Directional)
					EZB_FiringAnim(this, ghost);
					for(i=-1; i<=1; i++){
						EZB_Fire(this, ghost, CenterX(ghost)-8, CenterY(ghost)-8, EZB_DirAngle(Ghost_Dir)+30*i, 250);
					}
					EZB_Waitframes(this, ghost, 24);
				}
				if(attack==5){ //Tri Shot (Angular)
					EZB_FaceLink(this, ghost);
					EZB_FiringAnim(this, ghost);
					for(i=-1; i<=1; i++){
						EZB_Fire(this, ghost, CenterX(ghost)-8, CenterY(ghost)-8, Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY())+30*i, 250);
					}
					EZB_Waitframes(this, ghost, 24);
				}
				if(attack==6){ //Stream (Directional)
					EZB_FiringAnim(this, ghost);
					angle = EZB_DirAngle(Ghost_Dir);
					EZB_Waitframes(this, ghost, 12);
					for(i=0; i<10; i++){
						EZB_Fire(this, ghost, CenterX(ghost)-8, CenterY(ghost)-8, angle, 350);
						EZB_Waitframes(this, ghost, 8);
					}
					EZB_Waitframes(this, ghost, 12);
				}
				if(attack==7){ //Stream (Angular)
					EZB_FaceLink(this, ghost);
					EZB_FiringAnim(this, ghost);
					angle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY());
					EZB_Waitframes(this, ghost, 12);
					for(i=0; i<10; i++){
						EZB_Fire(this, ghost, CenterX(ghost)-8, CenterY(ghost)-8, angle, 350);
						EZB_Waitframes(this, ghost, 8);
					}
					EZB_Waitframes(this, ghost, 12);
				}
				if(attack==8){ //Breath (Directional)
					EZB_FiringAnim(this, ghost);
					angle = EZB_DirAngle(Ghost_Dir);
					EZB_Waitframes(this, ghost, 24);
					for(i=0; i<24; i++){
						EZB_Fire(this, ghost, CenterX(ghost)-8, CenterY(ghost)-8, angle+Rand(-10-i, 10+i), 250);
						EZB_Waitframes(this, ghost, 4);
					}
				}
				if(attack==9){ //Breath (Angular)
					EZB_FaceLink(this, ghost);
					EZB_FiringAnim(this, ghost);
					angle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY());
					EZB_Waitframes(this, ghost, 24);
					for(i=0; i<24; i++){
						EZB_Fire(this, ghost, CenterX(ghost)-8, CenterY(ghost)-8, angle+Rand(-10-i, 10+i), 250);
						EZB_Waitframes(this, ghost, 4);
					}
				}
				if(attack==10){ //Sweep (Directional)
					EZB_FiringAnim(this, ghost);
					k = Choose(-1, 1);
					angle = EZB_DirAngle(Ghost_Dir)-75*k;
					for(i=0; i<7; i++){
						EZB_Fire(this, ghost, CenterX(ghost)-8, CenterY(ghost)-8, angle, 150);
						angle += k*25;
						EZB_Waitframes(this, ghost, 4);
					}
					EZB_Waitframes(this, ghost, 48);
				}
				if(attack==11){ //Sweep (Angular)
					EZB_FaceLink(this, ghost);
					EZB_FiringAnim(this, ghost);
					k = Choose(-1, 1);
					angle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY())-75*k;
					for(i=0; i<7; i++){
						EZB_Fire(this, ghost, CenterX(ghost)-8, CenterY(ghost)-8, angle, 150);
						angle += k*25;
						EZB_Waitframes(this, ghost, 2);
					}
					EZB_Waitframes(this, ghost, 48);
				}
				if(attack==12){ //Bullet Barrage
					EZB_FaceLink(this, ghost);
					EZB_FiringAnim(this, ghost);
					angle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY())-45;
					for(i=0; i<3; i++){
						for(j=-4; j<=4; j+=2){
							EZB_Fire(this, ghost, CenterX(ghost)-8, CenterY(ghost)-8, angle+16*j, 150);
						}
						EZB_Waitframes(this, ghost, 16);
						for(j=-5; j<=5; j+=2){
							EZB_Fire(this, ghost, CenterX(ghost)-8, CenterY(ghost)-8, angle+16*j, 150);
						}
						EZB_Waitframes(this, ghost, 24);
					}
					EZB_Waitframes(this, ghost, 24);
				}
				if(attack==13){ //Bullet Swirl
					EZB_FaceLink(this, ghost);
					EZB_FiringAnim(this, ghost);
					k = Choose(-1, 1);
					angle = Rand(360);
					for(i=0; i<15; i++){
						for(j=0; j<5; j++){
							EZB_Fire(this, ghost, CenterX(ghost)-8, CenterY(ghost)-8, angle+72*j, 150);
						}
						angle += 4*k;
						EZB_Waitframes(this, ghost, 4);
					}
					EZB_Waitframes(this, ghost, 24);
				}
				if(attack==14){ //Bullet Rings
					EZB_FaceLink(this, ghost);
					EZB_FiringAnim(this, ghost);
					for(i=0; i<3; i++){
						angle = Rand(360);
						for(j=0; j<10; j++){
							EZB_Fire(this, ghost, CenterX(ghost)-8, CenterY(ghost)-8, angle+360/10*j, 180);
						}
						EZB_Waitframes(this, ghost, 45);
					}
					EZB_Waitframes(this, ghost, 24);
				}
				if(attack==15){ //Laser
					EZB_FaceLink(this, ghost);
					EZB_FiringAnim(this, ghost);
					angle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY());
					for(i=0; i<30; i++){
						if(i%4<2){
							DrawLaser(4, CenterX(ghost), CenterY(ghost), 8, angle, C_EZB_LASER3);
						}
						EZB_Waitframe(this, ghost);
					}
					Game->PlaySound(SFX_EZB_LASER);
					for(i=0; i<20; i++){
						Laser3Color(4, CenterX(ghost), CenterY(ghost), 8, angle, ghost->WeaponDamage, C_EZB_LASER1, C_EZB_LASER2, C_EZB_LASER3);
						EZB_Waitframe(this, ghost);
					}
				}
				if(attack==16){ //Big Laser
					EZB_FaceLink(this, ghost);
					EZB_FiringAnim(this, ghost);
					angle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY());
					for(i=0; i<60; i++){
						if(i%4<2){
							DrawLaser(4, CenterX(ghost), CenterY(ghost), 40, angle, C_EZB_LASER3);
						}
						EZB_Waitframe(this, ghost);
					}
					Game->PlaySound(SFX_EZB_LASER);
					for(i=0; i<40; i++){
						Laser3Color(4, CenterX(ghost), CenterY(ghost), 40, angle, ghost->WeaponDamage*2, C_EZB_LASER1, C_EZB_LASER2, C_EZB_LASER3);
						EZB_Waitframe(this, ghost);
					}
				}
				if(attack==17){ //Laser Spread
					EZB_FaceLink(this, ghost);
					EZB_FiringAnim(this, ghost);
					angle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY());
					for(i=0; i<30; i++){
						for(j=-2; j<=2; j++){
							if(i%4<2){
								DrawLaser(4, CenterX(ghost), CenterY(ghost), 6, angle+30*j, C_EZB_LASER3);
							}
						}
						EZB_Waitframe(this, ghost);
					}
					Game->PlaySound(SFX_EZB_LASER);
					for(i=0; i<25; i++){
						for(j=-2; j<=2; j++){
							Laser3Color(4, CenterX(ghost), CenterY(ghost), 6, angle+30*j, ghost->WeaponDamage, C_EZB_LASER1, C_EZB_LASER2, C_EZB_LASER3);
						}
						EZB_Waitframe(this, ghost);
					}
				}
				if(attack==18){ //Laser Cross
					EZB_FaceLink(this, ghost);
					EZB_FiringAnim(this, ghost);
					k = Choose(-1, 1);
					angle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY())+45;
					Game->PlaySound(SFX_EZB_LASER);
					for(i=0; i<30; i++){
						for(j=0; j<4; j++){
							Laser3Color(4, CenterX(ghost), CenterY(ghost), 6, angle+90*j, ghost->WeaponDamage, C_EZB_LASER1, C_EZB_LASER2, C_EZB_LASER3);
						}
						EZB_Waitframe(this, ghost);
					}
					for(i=0; i<30; i++){
						for(j=0; j<4; j++){
							Laser3Color(4, CenterX(ghost), CenterY(ghost), 6, angle+90*j, ghost->WeaponDamage, C_EZB_LASER1, C_EZB_LASER2, C_EZB_LASER3);
						}
						angle += k;
						EZB_Waitframe(this, ghost);
					}
					for(i=0; i<120; i++){
						for(j=0; j<4; j++){
							Laser3Color(4, CenterX(ghost), CenterY(ghost), 6, angle+90*j, ghost->WeaponDamage, C_EZB_LASER1, C_EZB_LASER2, C_EZB_LASER3);
						}
						angle += k*1.25;
						EZB_Waitframe(this, ghost);
					}
					for(i=0; i<30; i++){
						for(j=0; j<4; j++){
							Laser3Color(4, CenterX(ghost), CenterY(ghost), 6, angle+90*j, ghost->WeaponDamage, C_EZB_LASER1, C_EZB_LASER2, C_EZB_LASER3);
						}
						angle += k;
						EZB_Waitframe(this, ghost);
					}
				}
				if(attack==19){ //Summon 1 Enemy
					if ( Screen->NumNPCs() < 20 ) {
						EZB_FiringAnim(this, ghost);
						Game->PlaySound(SFX_EZB_SUMMON);
						npc enem = CreateNPCAt(special, CenterX(ghost)-8, CenterY(ghost)-8);
						EZB_Waitframes(this, ghost, 24);
					}
				}
				if(attack==20){ //Summon 2 Enemies
					if ( Screen->NumNPCs() < 20 ) {
						EZB_FiringAnim(this, ghost);
						Game->PlaySound(SFX_EZB_SUMMON);
						for(i=0; i<2; i++){
							npc enem = CreateNPCAt(special, CenterX(ghost)-8+Rand(-4, 4), CenterY(ghost)-8+Rand(-4, 4));
						}
						EZB_Waitframes(this, ghost, 24);
					}
				}
				if(attack==21){ //Summon 3 Enemies
					if ( Screen->NumNPCs() < 20 ) {
						EZB_FiringAnim(this, ghost);
						Game->PlaySound(SFX_EZB_SUMMON);
						for(i=0; i<3; i++){
							npc enem = CreateNPCAt(special, CenterX(ghost)-8+Rand(-4, 4), CenterY(ghost)-8+Rand(-4, 4));
						}
						EZB_Waitframes(this, ghost, 24);
					}
				}
				if(attack==22){ //Homing Shot
					EZB_FaceLink(this, ghost);
					EZB_FiringAnim(this, ghost);
					eweapon wpn = EZB_Fire(this, ghost, CenterX(ghost)-8, CenterY(ghost)-8, Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY()), 100);
					SetEWeaponMovement(wpn, EWM_HOMING, DegtoRad(2), 120);
					EZB_Waitframes(this, ghost, 24);
				}
				if(attack==23){ //5 Aimed Shots (With Delays)
					EZB_FiringAnim(this, ghost);
					for(i=0; i<5; i++){
						EZB_FaceLink(this, ghost);
						EZB_Fire(this, ghost, CenterX(ghost)-8, CenterY(ghost)-8, Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY()), 200);
						EZB_Waitframes(this, ghost, 25);
					}
				}
				if(attack==24){ //10 Aimed Shots (Quick)
					EZB_FaceLink(this, ghost);
					EZB_FiringAnim(this, ghost);
					for(i=0; i<10; i++){
						EZB_Fire(this, ghost, CenterX(ghost)-8, CenterY(ghost)-8, Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY()), 200);
						EZB_Waitframes(this, ghost, 6);
					}
				}
				if(attack==25){ //Aimed Bullet Circle
					EZB_FaceLink(this, ghost);
					EZB_FiringAnim(this, ghost);
					for(i=0; i<12; i++){
						eweapon wpn = EZB_Fire(this, ghost, CenterX(ghost)-8, CenterY(ghost)-8, 360/12*i, 200);
						SetEWeaponMovement(wpn, EWM_HOMING_REAIM, 1, 30);
					}
					EZB_Waitframes(this, ghost, 24);
				}
				if(attack==26){ //4 Way Shot (Normal)
					EZB_FiringAnim(this, ghost);
					for(i=0; i<4; i++){
						EZB_Fire(this, ghost, CenterX(ghost)-8, CenterY(ghost)-8, 90*i, 150);
					}
					EZB_Waitframes(this, ghost, 24);
				}
				if(attack==27){ //4 Way Shot (Diagonal)
					EZB_FiringAnim(this, ghost);
					for(i=0; i<4; i++){
						EZB_Fire(this, ghost, CenterX(ghost)-8, CenterY(ghost)-8, 45+90*i, 150);
					}
					EZB_Waitframes(this, ghost, 24);
				}
				if(attack==28){ //8 Way Shot
					EZB_FiringAnim(this, ghost);
					for(i=0; i<8; i++){
						EZB_Fire(this, ghost, CenterX(ghost)-8, CenterY(ghost)-8, 45*i, 150);
					}
					EZB_Waitframes(this, ghost, 24);
				}
				if(attack==29){ //Bullet Storm
					EZB_FiringAnim(this, ghost);
					angle = 0;
					if ( CenterLinkX() < 128 )
						angle = 180;
					for(i=0; i<20; i++){
						if ( angle == 0 )
							EZB_Fire(this, ghost, 0, Rand(8, 152), angle, 250);
						else
							EZB_Fire(this, ghost, 240, Rand(8, 152), angle, 250);
						EZB_Waitframes(this, ghost, 8);
					}
					EZB_Waitframes(this, ghost, 24);
				}
				if(attack==30){ //Laser Storm
					EZB_FiringAnim(this, ghost);
					k = Rand(8, 152);
					for(i=0; i<35; i++){
						if(i%4<2){
							DrawLaser(4, -32, k, 8, 0, C_EZB_LASER3);
						}
						EZB_Waitframe(this, ghost);
					}
					for(j=0; j<8; j++){
						Game->PlaySound(SFX_EZB_LASER);
						y = k;
						k = Rand(8, 152);
						while(k-y > -40 && k-y < 40) { //make sure next laser is not too close to current laser
							k = Rand(8, 152);
						}
						for(i=0; i<35; i++){
							if(i<20){
								Laser3Color(4, -32, y, 8, 0, ghost->WeaponDamage, C_EZB_LASER1, C_EZB_LASER2, C_EZB_LASER3);
							}
							if(j<7){ //dont show the last laser
								if(i%4<2){
									DrawLaser(4, -32, k, 8, 0, C_EZB_LASER3);
								}
							}
							EZB_Waitframe(this, ghost);
						}
					}
				}
				if(attack==31){ //Laser Expansion
					EZB_FiringAnim(this, ghost);
					k = 0;
					while(true){
						for(i=0; i<30; i++){
							for(j=-1; j<=1; j+=2){
								if(i%4<2){
									DrawLaser(4, CenterX(ghost)+24*k*j, -32, 12, 90, C_EZB_LASER3);
								}
							}
							EZB_Waitframe(this, ghost);
						}
						Game->PlaySound(SFX_EZB_LASER);
						for(i=0; i<20; i++){
							for(j=-1; j<=1; j+=2){
								Laser3Color(4, CenterX(ghost)+24*k*j, -32, 12, 90, ghost->WeaponDamage, C_EZB_LASER1, C_EZB_LASER2, C_EZB_LASER3);
							}
							EZB_Waitframe(this, ghost);
						}
						k++;
						if ( CenterX(ghost)+24*k*-1 < 16 && CenterX(ghost)+24*k > 224 || k > 10 )
							break;
					}
				}
				Ghost_Data = combo;
				
				attackCooldown = ghost->Haltrate*10;
				if(movementStyle==4){ //Wall bounce
					angle = Rand(360);
					vX = VectorX(ghost->Step/100, angle);
					vY = VectorY(ghost->Step/100, angle);
				}
			}
			EZB_Waitframe(this, ghost);
		}
	}
	bool EZB_CanMoveAngle(int angle){
		int vx = VectorX(10, angle);
		int vy = VectorY(10, angle);
		if((vx<0&&!Ghost_CanMove(DIR_LEFT, 1, 0))||(vx>0&&!Ghost_CanMove(DIR_RIGHT, 1, 0)))
			return false;
		if((vy<0&&!Ghost_CanMove(DIR_UP, 1, 0))||(vy>0&&!Ghost_CanMove(DIR_DOWN, 1, 0)))
			return false;
		return true;
	}
	void EZB_FiringAnim(ffc this, npc ghost){
		int flags = ghost->Attributes[9];
		int combo = ghost->Attributes[10];
		if(flags&EZBF_8WAY)
			Ghost_Data = combo+8;
		else if(flags&EZBF_4WAY)
			Ghost_Data = combo+4;
		else
			Ghost_Data = combo+1;
	}
	void EZB_Trail(ffc this, npc ghost){
		int flags = ghost->Attributes[9];
		int tile = Game->ComboTile(Ghost_Data);
		if(flags&EZBF_4WAY||flags&EZBF_8WAY)
			tile = Game->ComboTile(Ghost_Data+Ghost_Dir);
		lweapon trail = CreateLWeaponAt(LW_SCRIPT10, ghost->X+ghost->DrawXOffset, ghost->Y+ghost->DrawYOffset);
		trail->Extend = 3;
		trail->TileWidth = ghost->TileWidth;
		trail->TileHeight = ghost->TileHeight;
		trail->DrawYOffset = 0;
		trail->CSet = this->CSet;
		trail->Tile = tile;
		trail->OriginalTile = tile;
		trail->DrawStyle = DS_PHANTOM;
		trail->DeadState = 8;
	}
	int EZB_DirAngle(int dir){
		if(dir==DIR_UP)
			return -90;
		else if(dir==DIR_DOWN)
			return 90;
		else if(dir==DIR_LEFT)
			return 180;
		else if(dir==DIR_LEFTUP)
			return -135;
		else if(dir==DIR_RIGHTUP)
			return -45;
		else if(dir==DIR_LEFTDOWN)
			return 135;
		else if(dir==DIR_RIGHTDOWN)
			return 45;
		else
			return 0;
	}
	eweapon EZB_Fire(ffc this, npc ghost, int x, int y, int angle, int step){
		int flags = ghost->Attributes[9];
		int type = WeaponTypeToID(ghost->Weapon);
		int wflags;
		if(flags&EZBF_UNBLOCKABLE)
			wflags |= EWF_UNBLOCKABLE;
		if(type==EW_BEAM||type==EW_ARROW||type==EW_MAGIC||type==EW_BOMB||type==EW_SBOMB)
			wflags |= EWF_ROTATE;
			
		int fireSFX = ghost->Attributes[7];
		int fireSPR = ghost->Attributes[8];
		int sfx = fireSFX;
		if(fireSFX<=0)
			sfx = -1;
		int spr = fireSPR;
		if(fireSPR<=0)
			spr = -1;
			
		eweapon e = FireEWeapon(type, x, y, DegtoRad(angle), step, ghost->WeaponDamage, spr, sfx, wflags);
		return e;
	}
	void EZB_Teleport(ffc this, npc ghost){
		int size = ghost->Attributes[6];
		int w = size&1111b;
		int h = (size>>4)&1111b;
		if(h==0)
			h = w;
		w = Clamp(w, 1, 4);
		h = Clamp(h, 1, 4);
		
		Game->PlaySound(SFX_EZB_TELEPORT);
		int tc;
		ghost->CollDetection = false;
		for(int i=0; i<16; i++){
			if(i%2==0)
				ghost->DrawYOffset = -1000;
			else
				ghost->DrawYOffset = -2;
			EZB_Waitframe(this, ghost);
		}
		ghost->DrawYOffset = -1000;
		tc = Rand(176);
		for(int i=0; i<352&&(!EZB_CanPlace(this, ghost, ComboX(tc), ComboY(tc))||Distance(ComboX(tc)+ghost->HitWidth/2, ComboY(tc)+ghost->HitHeight/2, CenterLinkX(), CenterLinkY())<((w+h)/2)*8+32); i++){
			if(i>=176)
				tc = i-176;
			else
				tc = Rand(176);
		}
		Ghost_X = ComboX(tc);
		Ghost_Y = ComboY(tc);
		EZB_Waitframe(this, ghost);
		EZB_FaceLink(this, ghost);
		for(int i=0; i<16; i++){
			if(i%2==0)
				ghost->DrawYOffset = -1000;
			else
				ghost->DrawYOffset = -2;
			EZB_Waitframe(this, ghost);
		}
		ghost->DrawYOffset = -2;
		ghost->CollDetection = true;
	}	
	int EZB_AngleDir(ffc this, npc ghost, int angle){
		int flags = ghost->Attributes[9];
		if(flags&EZBF_8WAY)
			return AngleDir8(angle);
		else
			return AngleDir4(angle);
	}
	void EZB_FaceLink(ffc this, npc ghost){
		int flags = ghost->Attributes[9];
		if(flags&EZBF_8WAY)
			Ghost_Dir = AngleDir8(Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY()));
		else
			Ghost_Dir = AngleDir4(Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY()));
	}
	bool EZB_CanPlace(ffc this, npc ghost, int X, int Y){
		for(int x=ghost->HitXOffset; x<=ghost->HitXOffset+ghost->HitWidth-1; x=Min(x+8, ghost->HitXOffset+ghost->HitWidth-1)){
			for(int y=ghost->HitYOffset; y<=ghost->HitYOffset+ghost->HitHeight-1; y=Min(y+8, ghost->HitYOffset+ghost->HitHeight-1)){
				if(!Ghost_CanMovePixel(X+x, Y+y))
					return false;
				if(y==ghost->HitYOffset+ghost->HitHeight-1)
					break;
			}
			if(x==ghost->HitXOffset+ghost->HitWidth-1)
				break;
		}
		return true;
	}
	void EZB_Waitframes(ffc this, npc ghost, int frames){
		for(int i=0; i<frames; i++){
			EZB_Waitframe(this, ghost);
		}
	}
	void EZB_Waitframe(ffc this, npc ghost){
		int flags = ghost->Attributes[9];
		if(flags&EZBF_EXPLODEEATH)
			Ghost_Waitframe(this, ghost, 1, true);
		else
			Ghost_Waitframe(this, ghost);
	}
}