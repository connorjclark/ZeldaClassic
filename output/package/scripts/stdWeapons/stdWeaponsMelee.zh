//Updates melee weapon hitbox offsets depending on it`s direction. Also determines tile flipping.
//Usually used by custom melee weapons, like swords, wands, hammers etc.
void MeleeWeaponUpdate (lweapon sword, int dir, int origtile, int offset, bool noflip){
	sword->X = Link->X;
	sword->Y = Link->Y;
	int ToffsetX = (sword->TileWidth-1)*16;
	int ToffsetY = (sword->TileHeight-1)*16;
	if (dir == DIR_UP){
		sword->DrawXOffset = -ToffsetX/2;
		sword->DrawYOffset = -offset-ToffsetY;
		if (!noflip)sword->Flip= 0;
		}
	else if (dir == DIR_RIGHTUP){
		sword->DrawXOffset = offset;
		sword->DrawYOffset = -offset-ToffsetY;
		if (!noflip)sword->Flip= 0;
	}
	else if (dir == DIR_RIGHT){
		sword->DrawYOffset = -ToffsetY/2;
		sword->DrawXOffset = offset;
		if (!noflip)sword->Flip= 4;
	}
	else if (dir == DIR_RIGHTDOWN){
		sword->DrawXOffset = offset;
		sword->DrawYOffset = offset;
		if (!noflip)sword->Flip= 2;
	}
	else if (dir == DIR_DOWN){
		sword->DrawXOffset = -ToffsetX/2;
		sword->DrawYOffset = offset;
		if (!noflip)sword->Flip= 2;
	}
	else if (dir == DIR_LEFTDOWN){
		sword->DrawXOffset = -offset-ToffsetX;
		sword->DrawYOffset = offset;
		if (!noflip)sword->Flip= 3;
	}
	else if (dir == DIR_LEFT){
		sword->DrawYOffset = -ToffsetY/2;
		sword->DrawXOffset = -offset-ToffsetX;
		if (!noflip)sword->Flip= 5;
	}
	else if (dir == DIR_LEFTUP){
		sword->DrawXOffset = -offset-ToffsetX;
		sword->DrawYOffset = -offset-ToffsetY;
		if (!noflip)sword->Flip= 1;
	}
	sword->OriginalTile = origtile;
	sword->HitXOffset = sword->DrawXOffset;
	sword->HitYOffset = sword->DrawYOffset;
}

void MeleeWeaponStab(ffc f, lweapon l, int origtile, int delay, int offset, int triggerflag, 
int combodestroy, int enemydefense, int combodestroysfx, int aspeed){
	l->CollDetection=true;
	int Wdir = Link->Dir;
	l->Dir=Wdir;
	if (LweaponFlagIsSet(l, LWF_IGNORE_ENEMY_SHIELDS)) l->Dir = GetUnblockableDir(Wdir);
	LweaponSetFlag(l, LWF_MELEE);	
	LweaponSetFlag(l, LWF_PENETRATING);
	LweaponSetFlag(l, LWF_NO_FALL);
	LweaponSetFlag(l, LWF_MOVE_OFFSCREEN);
	SetEnemyDefense(l, enemydefense);
	int OrigHitboxData[4];
	GetLweaponHitboxOffsets(l, OrigHitboxData);
	for (int i = 0; i<aspeed; i++){
	MeleeWeaponUpdate (l, Wdir, origtile, (offset/2), false);
	MeleeWeaponHitboxUpdate(l, Wdir,OrigHitboxData);
	if (combodestroy>0)  DestroyCombosOnCollision( l, combodestroy, combodestroysfx);
	if(triggerflag>0)TriggerUpdate (l, triggerflag, SFX_SECRET, true);
	//UseEnemyDefense(l, 0, enemydefense);
	LweaponWaitframe (f, l, true);
	}
	for (int i = 0; i<delay; i++){
	MeleeWeaponUpdate (l, Wdir, origtile, offset, false);
	MeleeWeaponHitboxUpdate(l, Wdir,OrigHitboxData);
	if (combodestroy>0)  DestroyCombosOnCollision( l, combodestroy, combodestroysfx);
	if(triggerflag>0)TriggerUpdate (l, triggerflag, SFX_SECRET, true);
	//UseEnemyDefense(l, 0, enemydefense);
	LweaponWaitframe (f, l, true);
	}
}

void MeleeWeaponSlash90(ffc f, lweapon l, int origtile, int delay, int offset, int triggerflag, 
int combodestroy, int enemydefense, int combodestroysfx, int aspeed){
	l->CollDetection=true;
	LweaponSetFlag(l, LWF_MELEE);
	LweaponSetFlag(l, LWF_PENETRATING);
	LweaponSetFlag(l, LWF_NO_FALL);
	SetEnemyDefense(l, enemydefense);
	int OrigHitboxData[4];
	GetLweaponHitboxOffsets(l, OrigHitboxData);
	int Wdir = Link->Dir;
	int TileOffset = l->TileWidth;
	l->Dir=Wdir;
	if (LweaponFlagIsSet(l, LWF_IGNORE_ENEMY_SHIELDS)) l->Dir = GetUnblockableDir(Wdir);
	Wdir = CWDir4Way(Link->Dir);
	for (int i = 0; i<delay; i++){
	MeleeWeaponUpdate (l, Wdir, origtile, offset, false);
	MeleeWeaponHitboxUpdate(l, Wdir,OrigHitboxData);
	if (combodestroy>0)  DestroyCombosOnCollision( l, combodestroy, combodestroysfx);
	if(triggerflag>0)TriggerUpdate (l, triggerflag, SFX_SECRET, true);
	//UseEnemyDefense(l, 0, enemydefense);
	LweaponWaitframe (f, l, true);
	}
	Wdir = CCWDir8Way(Wdir);
	for (int i = 0; i<delay; i++){
	MeleeWeaponUpdate (l, Wdir, origtile+TileOffset, (offset-4), false);
	MeleeWeaponHitboxUpdate(l,Wdir, OrigHitboxData);
	if (combodestroy>0)  DestroyCombosOnCollision( l, combodestroy, combodestroysfx);
	if(triggerflag>0)TriggerUpdate (l, triggerflag, SFX_SECRET, true);
	//UseEnemyDefense(l, 0, enemydefense);
	LweaponWaitframe (f, l, true);
	}
	Wdir = CCWDir8Way(Wdir);
	for (int i = 0; i<delay; i++){
	MeleeWeaponUpdate (l, Wdir, origtile, offset, false);
	MeleeWeaponHitboxUpdate(l,Wdir, OrigHitboxData);
	if (combodestroy>0)  DestroyCombosOnCollision( l, combodestroy, combodestroysfx);
	if(triggerflag>0)TriggerUpdate (l, triggerflag, SFX_SECRET, true);
	//UseEnemyDefense(l, 0, enemydefense);
	LweaponWaitframe (f, l, true);
	}
}

void MeleeWeaponSlash90Alt(ffc f, lweapon l, int origtile, int delay, int offset, int triggerflag, 
int combodestroy, int enemydefense, int combodestroysfx, int aspeed){
	l->CollDetection=true;
	//sword->HitXOffset += sword->Misc[LWEAPON_MISC_HIT_OFFSET_X];
	//sword->HitYOffset += sword->Misc[LWEAPON_MISC_HIT_OFFSET_Y]; 
	int TileOffset = l->TileWidth;
	LweaponSetFlag(l, LWF_MELEE);
	LweaponSetFlag(l, LWF_PENETRATING);
	LweaponSetFlag(l, LWF_NO_FALL);
	SetEnemyDefense(l, enemydefense);
	int OrigHitboxData[4];
	GetLweaponHitboxOffsets(l, OrigHitboxData);
	int Wdir = Link->Dir;
	l->Dir=Wdir;
	if (LweaponFlagIsSet(l, LWF_IGNORE_ENEMY_SHIELDS)) l->Dir = GetUnblockableDir(Wdir);
	if (Link->Dir==DIR_RIGHT)Wdir = CCWDir4Way(Link->Dir);
	else Wdir = CWDir4Way(Link->Dir);
	for (int i = 0; i<aspeed; i++){
	MeleeWeaponUpdate (l, Wdir, origtile, offset, false);
	MeleeWeaponHitboxUpdate(l, Wdir,OrigHitboxData);
	if (combodestroy>0)  DestroyCombosOnCollision( l, combodestroy, combodestroysfx);
	if(triggerflag>0)TriggerUpdate (l, triggerflag, SFX_SECRET, true);
	//UseEnemyDefense(l, 0, enemydefense);
	LweaponWaitframe (f, l, true);
	}
	if (Link->Dir==DIR_RIGHT)Wdir = CWDir8Way(Wdir);
	else Wdir = CCWDir8Way(Wdir);
	for (int i = 0; i<aspeed; i++){
	MeleeWeaponUpdate (l, Wdir, origtile+TileOffset, (offset-4), false);
	MeleeWeaponHitboxUpdate(l, Wdir,OrigHitboxData);
	if (combodestroy>0)  DestroyCombosOnCollision( l, combodestroy, combodestroysfx);
	if(triggerflag>0)TriggerUpdate (l, triggerflag, SFX_SECRET, true);
	//UseEnemyDefense(l, 0, enemydefense);
	LweaponWaitframe (f, l, true);
	}
	if (Link->Dir==DIR_RIGHT)Wdir = CWDir8Way(Wdir);
	else Wdir = CCWDir8Way(Wdir);
	for (int i = 0; i<delay; i++){
	MeleeWeaponUpdate (l, Wdir, origtile, offset, false);
	MeleeWeaponHitboxUpdate(l, Wdir,OrigHitboxData);
	if (combodestroy>0)  DestroyCombosOnCollision( l, combodestroy, combodestroysfx);
	if(triggerflag>0)TriggerUpdate (l, triggerflag, SFX_SECRET, true);
	//UseEnemyDefense(l, 0, enemydefense);
	LweaponWaitframe (f, l, true);
	}
}

void MeleeWeaponSlash180(ffc f, lweapon l, int origtile, int delay, int offset, int triggerflag, 
int combodestroy, int enemydefense, int combodestroysfx, int aspeed){
	l->CollDetection=true;
	int TileOffset = l->TileWidth;
	LweaponSetFlag(l, LWF_MELEE);
	LweaponSetFlag(l, LWF_PENETRATING);
	LweaponSetFlag(l, LWF_NO_FALL);
	SetEnemyDefense(l, enemydefense);
	int OrigHitboxData[4];
	GetLweaponHitboxOffsets(l, OrigHitboxData);
	int Wdir = Link->Dir;
	l->Dir=Wdir;
	if (LweaponFlagIsSet(l, LWF_IGNORE_ENEMY_SHIELDS)) l->Dir = GetUnblockableDir(Wdir);
	Wdir = CWDir4Way(Link->Dir);
	for (int i = 0; i<aspeed; i++){
	MeleeWeaponUpdate (l, Wdir, origtile, offset, false);
	MeleeWeaponHitboxUpdate(l, Wdir,OrigHitboxData);
	if (combodestroy>0)  DestroyCombosOnCollision( l, combodestroy, combodestroysfx);
	if(triggerflag>0)TriggerUpdate (l, triggerflag, SFX_SECRET, true);
	//UseEnemyDefense(l, 0, enemydefense);
	LweaponWaitframe (f, l, true);
	}
	Wdir = CCWDir8Way(Wdir);
	for (int i = 0; i<aspeed; i++){
	MeleeWeaponUpdate (l, Wdir, origtile+TileOffset, (offset-4), false);
	MeleeWeaponHitboxUpdate(l, Wdir,OrigHitboxData);
	if (combodestroy>0)  DestroyCombosOnCollision( l, combodestroy, combodestroysfx);
	if(triggerflag>0)TriggerUpdate (l, triggerflag, SFX_SECRET, true);
	//UseEnemyDefense(l, 0, enemydefense);
	LweaponWaitframe (f, l, true);
	}
	Wdir = CCWDir8Way(Wdir);
	for (int i = 0; i<aspeed; i++){
	MeleeWeaponUpdate (l, Wdir, origtile, offset, false);
	MeleeWeaponHitboxUpdate(l, Wdir,OrigHitboxData);
	if (combodestroy>0)  DestroyCombosOnCollision( l, combodestroy, combodestroysfx);
	if(triggerflag>0)TriggerUpdate (l, triggerflag, SFX_SECRET, true);
	//UseEnemyDefense(l, 0, enemydefense);
	LweaponWaitframe (f, l, true);
	}
	Wdir = CCWDir8Way(Wdir);
	for (int i = 0; i<aspeed; i++){
	MeleeWeaponUpdate (l, Wdir, origtile+TileOffset, (offset-4), false);
	MeleeWeaponHitboxUpdate(l, Wdir,OrigHitboxData);
	if (combodestroy>0)  DestroyCombosOnCollision( l, combodestroy, combodestroysfx);
	if(triggerflag>0)TriggerUpdate (l, triggerflag, SFX_SECRET, true);
	//UseEnemyDefense(l, 0, enemydefense);
	LweaponWaitframe (f, l, true);
	}
	Wdir = CCWDir8Way(Wdir);
	for (int i = 0; i<(delay-4); i++){
	MeleeWeaponUpdate (l, Wdir, origtile, offset, false);
	MeleeWeaponHitboxUpdate(l, Wdir,OrigHitboxData);
	if (combodestroy>0)  DestroyCombosOnCollision( l, combodestroy, combodestroysfx);
	if(triggerflag>0)TriggerUpdate (l, triggerflag, SFX_SECRET, true);
	//UseEnemyDefense(l, 0, enemydefense);
	LweaponWaitframe (f, l, true);
	}
}

void MeleeWeaponSlash360(ffc f, lweapon l, int origtile, int delay, int offset, int triggerflag, 
int combodestroy, int enemydefense, int combodestroysfx, int aspeed){
	l->CollDetection=true;
	int TileOffset = l->TileWidth;
	LweaponSetFlag(l, LWF_MELEE);
	LweaponSetFlag(l, LWF_PENETRATING);
	LweaponSetFlag(l, LWF_NO_FALL);
	SetEnemyDefense(l, enemydefense);
	int OrigHitboxData[4];
	GetLweaponHitboxOffsets(l, OrigHitboxData);
	int Wdir = Link->Dir;
	l->Dir=Wdir;
	if (LweaponFlagIsSet(l, LWF_IGNORE_ENEMY_SHIELDS)) l->Dir = GetUnblockableDir(Wdir);
	for (int i = 0; i<aspeed; i++){
	MeleeWeaponUpdate (l, Wdir, origtile, offset, false);
	MeleeWeaponHitboxUpdate(l, Wdir,OrigHitboxData);
	if (combodestroy>0)  DestroyCombosOnCollision( l, combodestroy, combodestroysfx);
	if(triggerflag>0)TriggerUpdate (l, triggerflag, SFX_SECRET, true);
	//UseEnemyDefense(l, 0, enemydefense);
	LweaponWaitframe (f, l, true);
	}
	Wdir = CCWDir8Way(Wdir);
	for (int i = 0; i<aspeed; i++){
	MeleeWeaponUpdate (l, Wdir, origtile+TileOffset, (offset-4), false);
	MeleeWeaponHitboxUpdate(l, Wdir,OrigHitboxData);
	if (combodestroy>0)  DestroyCombosOnCollision( l, combodestroy, combodestroysfx);
	if(triggerflag>0)TriggerUpdate (l, triggerflag, SFX_SECRET, true);
	//UseEnemyDefense(l, 0, enemydefense);
	LweaponWaitframe (f, l, true);
	}
	Wdir = CCWDir8Way(Wdir);
	for (int i = 0; i<aspeed; i++){
	MeleeWeaponUpdate (l, Wdir, origtile, offset, false);
	MeleeWeaponHitboxUpdate(l, Wdir,OrigHitboxData);
	if (combodestroy>0)  DestroyCombosOnCollision( l, combodestroy, combodestroysfx);
	if(triggerflag>0)TriggerUpdate (l, triggerflag, SFX_SECRET, true);
	//UseEnemyDefense(l, 0, enemydefense);
	LweaponWaitframe (f, l, true);
	}
	Wdir = CCWDir8Way(Wdir);
	for (int i = 0; i<aspeed; i++){
	MeleeWeaponUpdate (l, Wdir, origtile+TileOffset, (offset-4), false);
	MeleeWeaponHitboxUpdate(l, Wdir,OrigHitboxData);
	if (combodestroy>0)  DestroyCombosOnCollision( l, combodestroy, combodestroysfx);
	if(triggerflag>0)TriggerUpdate (l, triggerflag, SFX_SECRET, true);
	//UseEnemyDefense(l, 0, enemydefense);
	LweaponWaitframe (f, l, true);
	}
	Wdir = CCWDir8Way(Wdir);
	for (int i = 0; i<aspeed; i++){
	MeleeWeaponUpdate (l, Wdir, origtile, offset, false);
	MeleeWeaponHitboxUpdate(l, Wdir,OrigHitboxData);
	if (combodestroy>0)  DestroyCombosOnCollision( l, combodestroy, combodestroysfx);
	if(triggerflag>0)TriggerUpdate (l, triggerflag, SFX_SECRET, true);
	//UseEnemyDefense(l, 0, enemydefense);
	LweaponWaitframe (f, l, true);
	}
	Wdir = CCWDir8Way(Wdir);
	for (int i = 0; i<aspeed; i++){
	MeleeWeaponUpdate (l, Wdir, origtile+TileOffset, (offset-4), false);
	MeleeWeaponHitboxUpdate(l, Wdir,OrigHitboxData);
	if (combodestroy>0)  DestroyCombosOnCollision( l, combodestroy, combodestroysfx);
	if(triggerflag>0)TriggerUpdate (l, triggerflag, SFX_SECRET, true);
	//UseEnemyDefense(l, 0, enemydefense);
	LweaponWaitframe (f, l, true);
	}
	Wdir = CCWDir8Way(Wdir);
	for (int i = 0; i<aspeed; i++){
	MeleeWeaponUpdate (l, Wdir, origtile, offset, false);
	MeleeWeaponHitboxUpdate(l, Wdir,OrigHitboxData);
	if (combodestroy>0)  DestroyCombosOnCollision( l, combodestroy, combodestroysfx);
	if(triggerflag>0)TriggerUpdate (l, triggerflag, SFX_SECRET, true);
	//UseEnemyDefense(l, 0, enemydefense);
	LweaponWaitframe (f, l, true);
	}
	Wdir = CCWDir8Way(Wdir);
	for (int i = 0; i<aspeed; i++){
	MeleeWeaponUpdate (l, Wdir, origtile+TileOffset, (offset-4), false);
	MeleeWeaponHitboxUpdate(l, Wdir,OrigHitboxData);
	if (combodestroy>0)  DestroyCombosOnCollision( l, combodestroy, combodestroysfx);
	if(triggerflag>0)TriggerUpdate (l, triggerflag, SFX_SECRET, true);
	//UseEnemyDefense(l, 0, enemydefense);
	LweaponWaitframe (f, l, true);
	}
	Wdir = CCWDir8Way(Wdir);
	if (combodestroy>0)  DestroyCombosOnCollision( l, combodestroy, combodestroysfx);
	if(triggerflag>0)TriggerUpdate (l, triggerflag, SFX_SECRET, true);
	for (int i = 0; i<(delay); i++){
	MeleeWeaponUpdate (l, Wdir, origtile, offset, false);
	MeleeWeaponHitboxUpdate(l, Wdir,OrigHitboxData);
	LweaponWaitframe (f, l, true);
	}
}

void MeleeWeaponPound(ffc f, lweapon l, int origtile, int lag, int delay, int offset, 
int triggerflag, bool breakshield, int combodestroy, int enemydefense, int poundsfx, int combodestroysfx, int aspeed){
	l->CollDetection=true;
	if (Link->Dir==DIR_DOWN) origtile +=20*(l->TileHeight);
	if (Link->Dir==DIR_LEFT) origtile +=40*(l->TileHeight);
	if (Link->Dir==DIR_RIGHT) origtile +=60*(l->TileHeight);
	LweaponSetFlag(l, LWF_MELEE);
	LweaponSetFlag(l, LWF_PENETRATING);
	LweaponSetFlag(l, LWF_NO_FALL);
	LweaponSetFlag(l, LWF_IGNORE_ENEMY_SHIELDS);
	SetEnemyDefense(l, enemydefense);
	int OrigHitboxData[4];
	GetLweaponHitboxOffsets(l, OrigHitboxData);
	int Wdir = Link->Dir;
	l->Dir = GetUnblockableDir(Wdir);
	l->CollDetection=false;
	if ((IsSideview())&&(Link->Dir>1))f->Y=Link->Y-offset;
	else f->Misc[FFC_MISC_Z]=offset;
	for (int i = 0; i<lag; i++){
	MeleeWeaponUpdate (l, Wdir, origtile, 0, true);
	LweaponWaitframe (f, l, true);
	}
	Link->Action=LA_ATTACKING;
	if ((IsSideview())&&(Link->Dir>1))f->Y=Link->Y-offset/2;
	else f->Misc[FFC_MISC_Z]=offset/2;
	origtile+=l->TileWidth;
	for (int i = 0; i<aspeed; i++){
	MeleeWeaponUpdate (l, Wdir, origtile, (offset/2), true);
	MeleeWeaponHitboxUpdate(l, Wdir,OrigHitboxData);
	//UseEnemyDefense(l, 0, enemydefense);
	LweaponWaitframe (f, l, true);
	}
	if ((IsSideview())&&(Link->Dir>1))f->Y=Link->Y;
	else f->Misc[FFC_MISC_Z]=0;
	origtile+=l->TileWidth;
	l->CollDetection=true;
	if (IsWater(ComboAt(CenterX(l), CenterY(l))))Game->PlaySound(SFX_SPLASH);
	else Game->PlaySound(poundsfx);
	if (combodestroy>0)  DestroyCombosOnCollision( l, combodestroy, combodestroysfx);
	if(triggerflag>0)TriggerUpdate (l, triggerflag, SFX_SECRET, true);
	for (int i = 0; i<(delay); i++){
		MeleeWeaponUpdate (l, Wdir, origtile, offset, true);
		MeleeWeaponHitboxUpdate(l, Wdir,OrigHitboxData);
		//UseEnemyDefense(l, 0, enemydefense);
		for (int i=1; i<=Screen->NumNPCs(); i++){
			npc n = Screen->LoadNPC(i);
			if(BlockedByShield(l, n)){
				Game->PlaySound(42);
				bool hammerbreak = GetNPCMiscFlag(n, 0x2000);
				if((breakshield)&&(hammerbreak))n->BreakShield();
			}
		}
		LweaponWaitframe (f, l, true);
	}
	
}

void MeleeWeaponDraw(ffc f, lweapon l, int origtile, int delay, int offset){
	LweaponSetFlag(l, LWF_MELEE);
	LweaponSetFlag(l, LWF_NO_FALL);	
	l->CollDetection = false;
	int Wdir = Link->Dir;
	l->Dir=Wdir;
	if (LweaponFlagIsSet(l, LWF_IGNORE_ENEMY_SHIELDS)) l->Dir = GetUnblockableDir(Wdir);
	for (int i = 0; i<(delay); i++){
		MeleeWeaponUpdate (l, Wdir, origtile, offset, false);
	LweaponWaitframe (f, l, true);
	}
	//origtile++;
	//MeleeWeaponUpdate (l, Wdir, origtile, offset, false);
	//LweaponWaitframe (f, l, true);
}

void MeleeWeaponDrawAboveHead(ffc f, lweapon l, int origtile, int delay, int offset){
	if (Link->Dir==DIR_DOWN) origtile +=20*(l->TileHeight);
	if (Link->Dir==DIR_LEFT) origtile +=40*(l->TileHeight);
	if (Link->Dir==DIR_RIGHT) origtile +=60*(l->TileHeight);
	LweaponSetFlag(l, LWF_MELEE);
	LweaponSetFlag(l, LWF_PENETRATING);
	LweaponSetFlag(l, LWF_NO_FALL);
	LweaponSetFlag(l, LWF_IGNORE_ENEMY_SHIELDS);
	l->CollDetection = false;
	int Wdir = Link->Dir;
	l->Dir=Wdir;
	if ((IsSideview())&&(Link->Dir>1))f->Y=Link->Y-offset/2;
	else f->Misc[FFC_MISC_Z]=offset/2;
	if (LweaponFlagIsSet(l, LWF_IGNORE_ENEMY_SHIELDS)) l->Dir = GetUnblockableDir(Wdir);
	for (int i = 0; i<(delay); i++){
		MeleeWeaponUpdate (l, Wdir, origtile, 0, true);
	LweaponWaitframe (f, l, true);
	}
	if ((IsSideview())&&(Link->Dir>1))f->Y=Link->Y-offset;
	else f->Misc[FFC_MISC_Z]=offset;
	MeleeWeaponUpdate (l, Wdir, origtile, 0, true);
	LweaponWaitframe (f, l, true);
}

void MeleeWeaponEndStrike(ffc f, lweapon l, int origtile, int delay, int offset, int aspeed){
	//LweaponUnSetFlag(l, LWF_MELEE);
	for (int i = 0; i<aspeed; i++){
	l->CollDetection=false;
	MeleeWeaponUpdate (l, (l->Dir), origtile, (offset/2), false);
	//MeleeWeaponHitboxUpdate(l, Wdir,OrigHitboxData);
	LweaponWaitframe (f, l, true);
	TerminateLweapon (f, l);
	}
}

void MeleeWeaponHitboxUpdate(lweapon l, int dir ,int OrigHitboxData){
	if (dir==DIR_UP){
		l->Misc[LWEAPON_MISC_HIT_OFFSET_Y] = OrigHitboxData[0];
		l->HitHeight = l->TileWidth*16 - (OrigHitboxData[0]+OrigHitboxData[1]);
		l->Misc[LWEAPON_MISC_HIT_OFFSET_X] = OrigHitboxData[2];
		l->HitWidth = l->TileWidth*16 - (OrigHitboxData[2]+OrigHitboxData[3]);
	}
	else if (dir==DIR_DOWN){
		l->Misc[LWEAPON_MISC_HIT_OFFSET_Y] = OrigHitboxData[1];
		l->HitHeight = l->TileWidth*16 - (OrigHitboxData[1]+OrigHitboxData[0]);
		l->Misc[LWEAPON_MISC_HIT_OFFSET_X] = OrigHitboxData[2];
		l->HitWidth = l->TileWidth*16 - (OrigHitboxData[2]+OrigHitboxData[3]);
	}
	else if (dir==DIR_LEFT){
		l->Misc[LWEAPON_MISC_HIT_OFFSET_Y] = OrigHitboxData[2];
		l->HitHeight = l->TileHeight*16 - (OrigHitboxData[2]+OrigHitboxData[3]);
		l->Misc[LWEAPON_MISC_HIT_OFFSET_X] = OrigHitboxData[0];
		l->HitWidth = l->TileWidth*16 - (OrigHitboxData[0]+OrigHitboxData[1]);
	}
	else if (dir==DIR_RIGHT){
		l->Misc[LWEAPON_MISC_HIT_OFFSET_Y] = OrigHitboxData[2];
		l->HitHeight = l->TileHeight*16 - (OrigHitboxData[2]+OrigHitboxData[3]);
		l->Misc[LWEAPON_MISC_HIT_OFFSET_X] = OrigHitboxData[0];
		l->HitWidth = l->TileWidth*16 - (OrigHitboxData[0]+OrigHitboxData[1]);
	}
	else{
		int median = (l->TileWidth*8-OrigHitboxData[2]/2-OrigHitboxData[3]/2) + (l->TileHeight*8-OrigHitboxData[0]/2-OrigHitboxData[1]/2);
		l->Misc[LWEAPON_MISC_HIT_OFFSET_Y] = OrigHitboxData[0];
		l->Misc[LWEAPON_MISC_HIT_OFFSET_X] = OrigHitboxData[2];
		l->HitWidth = median;
		l->HitHeight = median;
	}
	l->HitXOffset += l->Misc[LWEAPON_MISC_HIT_OFFSET_X];
	l->HitYOffset += l->Misc[LWEAPON_MISC_HIT_OFFSET_Y];
}