const int LWF_GHOSTED = 1; //
const int LWF_8WAY = 2;
const int LWF_PENETRATING = 4;
const int LWF_MOVE_OFFSCREEN = 8;
const int LWF_DRAW_SHADOW = 16;
const int LWF_NO_FALL = 32;
const int LWF_CAN_PICKUP_ITEMS = 64;
const int LWF_CAN_INSTA_DELIVER_ITEMS = 128;
const int LWF_AUTO_DIR_UPDATE = 256;
const int LWF_AUTO_SPRITE_UPDATE = 512;
const int LWF_MELEE = 1024;
const int LWF_SWING_WHILE_WALKING = 2048;
const int LWF_IGNORE_ENEMY_SHIELDS = 4096;
const int LWF_AUTO_POS_UPDATE = 8192;
const int LWF_REFLECTED = 16384;
const int LWF_INVISIBLE = 32768;

// Initialize FFC position and creates controlled Lweapon at Link`s position, assigning damage and sprite.
// Type - ID of new lweapon.
// Damage - self-explanatory.
// Sprite - sprite used by new weapon.
// Sound - sound to play on launching.
lweapon LweaponInit (ffc f, int type, int damage, int sprite, int sound){
	Link->Action = LA_ATTACKING;
	f->Data=LW_FFC_DATA;
	f->Vx=0;
	f->Vy=0;
	f->Ax=0;
	f->Ay=0;
	f->X= Link->X;
	f->Y= Link->Y;
	lweapon init = Screen->CreateLWeapon(type);
	init->Damage=damage;
	init->X= f->X;
	init->Y= f->Y;
	init->UseSprite(sprite);
	init->Misc[LWEAPON_MISC_ORIGTILE] = init->OriginalTile;
	LweaponSetFlag(init, LWF_GHOSTED);
	init->Misc[LWEAPON_MISC_FFC_ID] = FFCNum(f);
	init->Misc[LWEAPON_MISC_ORIGDAMAGE] = init->Damage;
	init->Misc[LWEAPON_MISC_DEFENSE] = NPCD_ARROW;
	LweaponSetFlag(init, LWF_AUTO_POS_UPDATE);
	LweaponSetFlag(init, LWF_DRAW_SHADOW);
	Game->PlaySound(sound);
	return init;
}

//Launch another scripted Lweapon. Returns a pointer to used FFC.
//item - item that launched this script
//Script - FFC script slot number
//args[8] - pointer to arguments array. It must contain 8 integers. If you have fewer,
//expand the array to 8 with zeroes.
ffc LaunchScriptedLweapon(int Script, int arguments){
	return RunFFCScriptOrQuit(Script, arguments);
}

// Creates another Lweapon at FFC`s position without putting FFC at Link`s position.
// Type - ID of new lweapon.
// Damage - self-explanatory.
// Sprite - sprite used by new weapon.
lweapon CreateNewWeapon (ffc f, int type, int damage, int sprite){
	lweapon init = Screen->CreateLWeapon(type);
	LweaponSetFlag(init, LWF_AUTO_POS_UPDATE);
	LweaponSetFlag(init, LWF_DRAW_SHADOW);
	f->Data=LW_FFC_DATA;
	init->Damage=damage;
	init->X= f->X;
	init->Y= f->Y;
	init->Z = f->Misc[FFC_MISC_Z];
	init->UseSprite(sprite);
	init->Misc[LWEAPON_MISC_ORIGTILE] = init->OriginalTile;
	init->Misc[LWEAPON_MISC_FLAGS] +=1;
	init->Misc[LWEAPON_MISC_FFC_ID] = FFCNum(f);
	init->Misc[LWEAPON_MISC_ORIGDAMAGE] = init->Damage;
	init->Misc[LWEAPON_MISC_DEFENSE] = NPCD_ARROW;
	return init;
}

//Clears FFC and prepares it for being reused.
//Works best right before calling Quit()
void ClearFFC( ffc f){
	f->X=0;
	f->Y=0;
	f->Data=0;
	f->Ax=0;
	f->Ay=0;
	f->TileHeight=1;
	f->TileWidth=1;
	f->EffectHeight=16;
	f->EffectWidth=16;
	f->Vx=0;
	f->Vy=0;
	f->Delay=0;
	f->CSet=0;
	for(int i=0; i<=15; i++){
		f->Misc[i]=0;
	}
}

//Returns true if Link has enough ammo (also subtracting cost) or has an item that allows infinite ammo.
//Usually placed in the init phase of the script before Lweapon initialization.
//Call ClearFFC(this) then Quit() if this function returns "false" (not enough ammo).
//Or execute something cruel, like weapon backfiring. :-)
//If "drain" boolean is set to TRUE, the counter updates gradually. 
//bool AmmoManager(int counter, int cost, int infiniteitem, bool drain){
//	int cn;
//	if ((Game->Generic[1]>0)&&(counter==CR_MAGIC)) cn=cost/2; //Pay attention to "/2 magic" upgrade.
//	else cn=cost;
//	if (Link->Item[infiniteitem]) return true;//Link has item that allows infinite ammo for this weapon.
//	else if (Game->Counter[counter]>=cn){
//		if(drain)Game->DCounter[counter]-=cn; //Pay up cost.
//		else Game->Counter[counter]-=cn;
//		return true;
//	}
//	else return false; //OOPS! Not enough Ammo!
//}

//Advanced version of AmmoManager function, that checks up to 4 different counters with different
//costs and presense of "infinite counter" items.
bool AmmoManager(int counter1, int cost1, int infiniteitem1, int counter2, int cost2, int infiniteitem2,
int counter3, int cost3, int infiniteitem3, int counter4, int cost4, int infiniteitem4, bool drain){
	int COUNTERS[4] = {counter1, counter2, counter3, counter4};
	int COSTS[4] = {cost1, cost2, cost3, cost4};
	int INFINITEITEMS[4] = {infiniteitem1, infiniteitem2, infiniteitem3, infiniteitem4};
	for (int i=0; i<4; i++){
		if (Link->Item[INFINITEITEMS[i]]) COSTS[i] = 0; //Here handled infinite quivers, bomb bags ets.
		if ((COUNTERS[i] == CR_MAGIC)&&(Game->Generic[1]>0)) COSTS[i] = Floor(COSTS[i]/2); //1/2 magic upgrade works here.
		int count = Game->Counter[COUNTERS[i]]; //Make sure that issue, like "draining rupees can still be spent" is not here.
		if (Game->DCounter[COUNTERS[i]]<0) count += Game->DCounter[COUNTERS[i]];
		if (count< COSTS[i]) return false; //OOPS!!
	}
	for (int i=0; i<4; i++){
		if (drain) Game->DCounter[COUNTERS[i]] -= COSTS[i]; //Pay up costs.
		else Game->Counter[COUNTERS[i]] -= COSTS[i];
	}
	return true;
}

void AmmoManager(ffc f, int counter1, int cost1, int infiniteitem1, int counter2, int cost2, int infiniteitem2,
int counter3, int cost3, int infiniteitem3, int counter4, int cost4, int infiniteitem4, bool drain){
	if (!AmmoManager(counter1, cost1, infiniteitem1, counter2, cost2, infiniteitem2,counter3, cost3, 
	infiniteitem3, counter4, cost4, infiniteitem4, drain)){
		ClearFFC(f);
		Quit();
	}
}

bool AmmoManager(int counter1, int cost1, int infiniteitem1, int counter2, int cost2, int infiniteitem2,
int counter3, int cost3, int infiniteitem3, bool drain){
	return AmmoManager(counter1, cost1, infiniteitem1, counter2, cost2, infiniteitem2,counter3, cost3, 
	infiniteitem3, 0,0,0, drain);
}

void AmmoManager(ffc f, int counter1, int cost1, int infiniteitem1, int counter2, int cost2, int infiniteitem2,
int counter3, int cost3, int infiniteitem3, bool drain){
	if (!AmmoManager(counter1, cost1, infiniteitem1, counter2, cost2, infiniteitem2,counter3, cost3, 
	infiniteitem3, 0, 0, 0, drain)){
		ClearFFC(f);
		Quit();
	}
}

bool AmmoManager(int counter1, int cost1, int infiniteitem1, int counter2, int cost2, int infiniteitem2,
bool drain){
	return AmmoManager(counter1, cost1, infiniteitem1, counter2, cost2, infiniteitem2, 0,0,0, 0,0,0, drain);
}

void AmmoManager(ffc f, int counter1, int cost1, int infiniteitem1, int counter2, int cost2, 
int infiniteitem2, bool drain){
	if (!AmmoManager(counter1, cost1, infiniteitem1, counter2, cost2, infiniteitem2, 
	0,0,0, 0,0,0, drain)){
		ClearFFC(f);
		Quit();
	}
}

bool AmmoManager(int counter, int cost, int infiniteitem ,bool drain){
	return AmmoManager(counter, cost, infiniteitem, 0,0,0, 0,0,0, 0,0,0, drain);
}

void AmmoManager(ffc f, int counter, int cost, int infiniteitem, bool drain){
	if (!AmmoManager(counter, cost, infiniteitem, 0,0,0, 0,0,0, 0,0,0, drain)){
		ClearFFC(f);
		Quit();
	}
}

//Returns TRUE if the given lweapon flag is set.
bool LweaponFlagIsSet(lweapon lw, int flag){
	int flagcheck = lw->Misc[LWEAPON_MISC_FLAGS];
	flagcheck&=flag;
	return (flagcheck>0);
}

//Turns on the given Lweapon flag.
void LweaponSetFlag(lweapon lw, int flag){
	if (!LweaponFlagIsSet(lw, flag)) lw->Misc[LWEAPON_MISC_FLAGS] += flag;
}

//Turns off the given Lweapon flag.
void LweaponUnSetFlag(lweapon lw, int flag){
	if (LweaponFlagIsSet(lw, flag)) lw->Misc[LWEAPON_MISC_FLAGS] -= flag;
}

//Toggles the given Lweapon flag.
void LweaponToggleFlag(lweapon lw, int flag){
	if (!LweaponFlagIsSet(lw, flag)) LweaponSetFlag(lw, flag);
	else LweaponUnSetFlag(lw, flag);
}

//Returns the total number of scripted Lweapons of the given type.
int NumScriptedLweapons (ffc f){
	int scrID = f->Script;
	return CountFFCsRunning(scrID);
}

//Returns the number of lweapons running a stdWeapons.zh script, as denoted by their l->Misc[LWF_FLAGS].
int NumScriptedLweapons(){
	int num = 0;
	for (int i = 1; i<= Screen->NumLWeapons(); i++){
		lweapon l = Screen->LoadLWeapon(i);
		if (LweaponFlagIsSet(l, LWF_GHOSTED)) num++;
	}
	return num;
}

//Returns total number of ffc`s that running a specific script.
int NumScriptedLweaponsOf (int ScriptID){
	int num = 0;
	for (int i = 1; i<= Screen->NumLWeapons(); i++){
		lweapon l = Screen->LoadLWeapon(i);
		if (!LweaponFlagIsSet(l, LWF_GHOSTED)) continue;
		ffc master = Screen->LoadFFC(l->Misc[LWEAPON_MISC_FFC_ID]);
		if (master->Script==ScriptID) num++;
	}
	return num;
}
//Checks against maximum number of allowed scripted lweapons running given FFC`s script.
//Clears and quits automatically, if the limit is exceeded.
//Usually placed in the init phase of the script before Lweapon initialization.
void CheckMaxLweapons(ffc f, int maxlweapons){
	int numlweapons = NumScriptedLweapons (f);
	if (numlweapons>maxlweapons){
		Game->PlaySound(SFX_DEBUG_TERMINATE);
		ClearFFC(f);
		Quit();
	}
}

//Checks against maximum number of allowed scripted lweapons running given FFC`s script.
//Unlike previous function, it just returns whether limit is reached or not.
bool MaxLweaponsReached(ffc f, int maxlweapons){
	int numlweapons = NumScriptedLweapons (f);
	if (numlweapons>=maxlweapons) return true;
	else return false;
}