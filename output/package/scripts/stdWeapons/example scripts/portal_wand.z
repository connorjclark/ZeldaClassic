const int PORTAL_STATE_FIRED = 0;
const int PORTAL_STATE_DORMANT = 1;
const int PORTAL_STATE_ACTIVE = 2;
const int PORTAL_STATE_TERMINATED = 4;

const int CSET_PORTAL_ORANGE = 8;//Portal Csets. Blue and orange by default.
const int CSET_PORTAL_BLUE = 7;

const int FFC_MISC_PORTAL_DIR = 0;//FFC misc variable array indexes.
const int FFC_MISC_PORTAL_FREQUENCY = 1;
const int FFC_MISC_PORTAL_COLOR = 2;
const int FFC_MISC_PORTAL_STATE = 3;
const int FFC_MISC_EXIT_PORTAL_FFC_ID = 4;

//const int FFC_SCRIPT_PORTAL_MAGIC = 2;//Script slot for portal magic script.

const int PORTAL_WAND_MAGIC_COST = 0;//Cost of firing portal wand/shooting portal gun, in MP(1/32th of beaker)

const int CF_NO_PORTALS = 99;//Combo flag to prevent spawning portals at specific places.

const int SFX_PORTAL_WARP = 32;//Sound to play, when anything goes trough portal.
const int SFX_PORTAL_HIT = 13;//Sound to play, when portal forms on screen.

const int SPR_PORTAL_WARP_PARTICLE = 0;//Sprite for particle to appear on opening up portal.

//A magic wand that shoots projectiles that can open up portals on hitting flat solid walls. Flat means Fully solid combos.
//Anything that enters one portal will be teleported to another one.

//1. Set up 3 sprites. One for wand animation. one for projectile and a double-rowed one (2 animation sequences, 
//   one right below another in tile sheet) for formed portals.
//2. Import and compile the script. It requires stdWeapons.zh and all his dependencies. Assign 2 FFC script slots.
//3. Set up 2 items for two different portal wand/gun colors (blue and orange). Assign default stuff, 
//   but make sure for items to have different item classes so they will be visible in subscreen.
//4. D0 - Damage dealt to enemies on direct hit by projectile or wand strike. 
//        Uses MAGIC or WAND MELEE enemy defense. Ignores enemy shields.
//   D1 - Sprite for wand animation. Can be the same for both wands.
//   D2 - Sprite for magic projectile.
//   D3 - Color of portal to work with. 0 for blue and 1 for orange.
//   D4 - Projectile flight speed.
//   D5 - Sprite for portal formed on the wall. Open portal tile must be right below closed one.
//   D6 - Portal connection fraquency. Must be the same for both items. 
//        Useful if you want create multiple different portal guns/pairs of portal wands.
//   D7 - Script slot for "Portal Wand" script.
//5. Assign "Weapon Launcher" action item script.

//Known issues
//1. No velocity preservation for Link and enemies in sideview areas. This due to shittiness of default ZC sideview engine.
//2. Untested with ghosted enemies.
//3. Link can get stuck in solid push-block if it blocks exit portal.

//TODO: Implement pushing pushable combos trough portals.

ffc script PortalWand{
	void run(int damage, int wandsprite,int sprite,  int color, int speed, int portalsprite, int frequency){
		itemdata it = Game->LoadItemData(this->InitD[7]);
		int sound = it->UseSound;
		lweapon wand = LweaponInit (this, LW_GHOSTED, damage, wandsprite, 0);
		wand->CSet= CSET_PORTAL_BLUE;
		if (color>0) wand->CSet = CSET_PORTAL_ORANGE;
		MeleeWeaponStab(this, wand, wand->Misc[LWEAPON_MISC_ORIGTILE], 8, 12, 88, 0, NPCD_WAND, 0, 2);
		if (!AmmoManager(CR_MAGIC, PORTAL_WAND_MAGIC_COST, 118, false)){
			MeleeWeaponEndStrike(this, wand, wand->Misc[LWEAPON_MISC_ORIGTILE], 12, 2, 2);
		}
		SetLweaponHitboxOffsets(wand,4,4,4,4);
		int itm = GetItemID(wand);
		int args[8] = {damage, sprite, color, speed, portalsprite, frequency ,0, itm};
		int buffer[] = "PortalMagic";
		int scr = Game->GetFFCScript(buffer);
		ffc magic = LaunchScriptedLweapon(scr, args);
		PutFFCInFrontOfLink(magic, 16);
		Game->PlaySound(sound);
		MeleeWeaponEndStrike(this, wand, wand->Misc[LWEAPON_MISC_ORIGTILE], 12, 2, 2);
	}	
}

ffc script PortalMagic{
	void run(int damage, int sprite, int color, int speed, int portalsprite, int frequency){
		int buffer[] = "PortalMagic";
		int scr = Game->GetFFCScript(buffer);		
		itemdata it = Game->LoadItemData(this->InitD[7]);
		int sound = it->UseSound;
		int oldcmb=-1;
		this->Misc[FFC_MISC_PORTAL_STATE] = PORTAL_STATE_FIRED;
		this->Misc[FFC_MISC_PORTAL_DIR] = OppositeDir(Link->Dir);
		if (color==0)this->Misc[FFC_MISC_PORTAL_COLOR] = CSET_PORTAL_BLUE;
		else this->Misc[FFC_MISC_PORTAL_COLOR] = CSET_PORTAL_ORANGE;
		this->Misc[FFC_MISC_PORTAL_FREQUENCY] = frequency;
				
		lweapon l = LweaponInit (this, LW_GHOSTED, damage, sprite, sound);
		
		LweaponSetFlag(l, LWF_AUTO_DIR_UPDATE);
		LweaponSetFlag(l, LWF_AUTO_SPRITE_UPDATE);
		LweaponSetFlag(l, LWF_NO_FALL);
		LweaponSetFlag(l, LWF_IGNORE_ENEMY_SHIELDS);
		
		l->CSet= this->Misc[FFC_MISC_PORTAL_COLOR];
		
		this->Misc[FFC_MISC_EXIT_PORTAL_FFC_ID] = 0;
		
		SetEnemyDefense(l, NPCD_MAGIC);
		SetLweaponHitboxOffsets(l,4,4,4,4);
		int hitbox[4];
		GetLweaponHitboxOffsets(l, hitbox);
		SetStraightMotion4(this, speed);
		
		while(true){
			if (this->Misc[FFC_MISC_PORTAL_STATE] == PORTAL_STATE_FIRED){
				oldcmb=ReflectOffMirrors(oldcmb, this, l);
				//AutoRotateLweaponHitbox (l, hitbox);
				for (int i=1; i<= Screen->NumLWeapons();i++){//Teleport thru portals.
						lweapon p = Screen->LoadLWeapon(i);
						if (p->ID!=LW_GHOSTED) continue;
						if ((GetBlockableDir(l->Dir))!=OppositeDir(p->Dir)) continue;
						if (!Collision(l,p)) continue;
						ffc master = Screen->LoadFFC(GetMasterFFCID(p));
						if (master->Script!=scr) continue;
						if(master->Misc[FFC_MISC_PORTAL_STATE] !=PORTAL_STATE_ACTIVE) continue;
						CheckMaxLweapons(this, 3);
						Game->PlaySound(SFX_PORTAL_WARP);
						LweaponUnSetFlag(l, LWF_IGNORE_ENEMY_SHIELDS);
						ffc Exit = Screen->LoadFFC(master->Misc[FFC_MISC_EXIT_PORTAL_FFC_ID]);
						this->X = Exit->X;
						this->Y = Exit->Y;
						this->Y+=InFrontY(Exit->Misc[FFC_MISC_PORTAL_DIR], 0);
						this->X+=InFrontX(Exit->Misc[FFC_MISC_PORTAL_DIR], 0);
						SetStraightMotion4(this, Exit->Misc[FFC_MISC_PORTAL_DIR], speed);
						if (LweaponFlagIsSet(l, LWF_MOVE_OFFSCREEN))LweaponPosUpdateAlt(this, l); //Pick one of the two ways to update
						else LweaponPosUpdate(this, l);//lweapon`s position depending on LWF_MOVE_OFFSCREEN flag.
						LweaponDirUpdate(this, l);
						LweaponSpriteUpdate (l);
						this->Misc[FFC_MISC_PORTAL_DIR] = OppositeDir(l->Dir);
						LweaponSetFlag(l, LWF_IGNORE_ENEMY_SHIELDS);
					}
				for (int i=0;i<176;i++){//Detect blocker combos and open up portal on hitting "portal-able" ones.
					if (Screen->ComboT[i]==CT_HOOKSHOTONLY) continue;
					if (Screen->ComboT[i]==CT_LADDERONLY) continue;
					if (Screen->ComboT[i]==CT_LADDERHOOKSHOT) continue;
					if (IsWater(i)) continue;
					if ((ComboFI(i, CF_NO_PORTALS))||(Screen->ComboS[i]==Clamp(Screen->ComboS[i], 1, 14))){
						if (ComboCollision (i, l, false, -1)) TerminateLweapon(this,l);
					}
					if (Screen->ComboS[i]==15){
						if ((ComboCollision (i, l, false, -1))&&(HitSolidHeadOn(l))){
							this->Vx=0;
							this->Vy=0;
							SetupPortal(this, l);
							LweaponUnSetFlag(l, LWF_IGNORE_ENEMY_SHIELDS);
							l->UseSprite(portalsprite);
							l->Misc[LWEAPON_MISC_ORIGTILE] = l->OriginalTile;
							l->CSet = this->Misc[FFC_MISC_PORTAL_COLOR];
							l->CollDetection= false;
							l->Dir = this->Misc[FFC_MISC_PORTAL_DIR];
							Game->PlaySound(SFX_PORTAL_HIT);
							this->Misc[FFC_MISC_EXIT_PORTAL_FFC_ID] = ConnectPortals(this);
							for (int i=1; i<=32; i++){
								ffc f = Screen->LoadFFC(i);
								if (f==this)continue;
								if (f->Script!=scr) continue;
								if (f->Misc[FFC_MISC_PORTAL_STATE] == PORTAL_STATE_FIRED) continue;
								if (f->Misc[FFC_MISC_PORTAL_FREQUENCY] != this->Misc[FFC_MISC_PORTAL_FREQUENCY]) continue;
								if (f->Misc[FFC_MISC_PORTAL_COLOR]==this->Misc[FFC_MISC_PORTAL_COLOR]){
								f->Misc[FFC_MISC_PORTAL_STATE] = PORTAL_STATE_TERMINATED;
								}
							}
							lweapon particle = CreateParticle (this->X,this->Y, SPR_PORTAL_WARP_PARTICLE, 0, 0, 0, 0, -2, false);
							if (this->Misc[FFC_MISC_EXIT_PORTAL_FFC_ID] == 0){
								this->Misc[FFC_MISC_PORTAL_STATE] =PORTAL_STATE_DORMANT;
							}
							else{
								l->Misc[LWEAPON_MISC_ORIGTILE]+=20;
								this->Misc[FFC_MISC_PORTAL_STATE] = PORTAL_STATE_ACTIVE;
							}
						}
					}
				}
			}
			else if(this->Misc[FFC_MISC_PORTAL_STATE] ==PORTAL_STATE_DORMANT){
				this->Misc[FFC_MISC_EXIT_PORTAL_FFC_ID] = ConnectPortals(this);
				if (this->Misc[FFC_MISC_EXIT_PORTAL_FFC_ID] > 0){
					l->Misc[LWEAPON_MISC_ORIGTILE] +=20;
					this->Misc[FFC_MISC_PORTAL_STATE] = PORTAL_STATE_ACTIVE;
				}
			} 
			else if(this->Misc[FFC_MISC_PORTAL_STATE] ==PORTAL_STATE_ACTIVE){
				this->Misc[FFC_MISC_EXIT_PORTAL_FFC_ID] = ConnectPortals(this);
				if (this->Misc[FFC_MISC_EXIT_PORTAL_FFC_ID] == 0){
					l->Misc[LWEAPON_MISC_ORIGTILE] -=20;
					this->Misc[FFC_MISC_PORTAL_STATE] = PORTAL_STATE_DORMANT;
				}
				TeleportObjectsOnCollision(this->Misc[FFC_MISC_EXIT_PORTAL_FFC_ID], l);
			}
			else if(this->Misc[FFC_MISC_PORTAL_STATE] ==PORTAL_STATE_TERMINATED){
				TerminateLweapon(this,l);				
			}
			//DrawLweaponHitbox(l);			
			LweaponWaitframe(this, l, true);
		}
	}
}

//Finds the correct different-colored portal FFC and returns it`s ID.
int ConnectPortals(ffc n){
	int buffer[] = "PortalMagic";
	int scr = Game->GetFFCScript(buffer);
	int curcolor = n->Misc[FFC_MISC_PORTAL_COLOR];
	int targetcolor = 0;
	if (curcolor==CSET_PORTAL_ORANGE) targetcolor = CSET_PORTAL_BLUE;
	if (curcolor==CSET_PORTAL_BLUE) targetcolor = CSET_PORTAL_ORANGE;
	for (int i=1; i<=32; i++){
		ffc f = Screen->LoadFFC(i);
		if (f==n)continue;
		if (f->Script!=scr) continue;
		if (f->Misc[FFC_MISC_PORTAL_STATE] == PORTAL_STATE_FIRED) continue;
		if (f->Misc[FFC_MISC_PORTAL_FREQUENCY] != n->Misc[FFC_MISC_PORTAL_FREQUENCY]) continue;
		if (f->Misc[FFC_MISC_PORTAL_COLOR]!=targetcolor) continue;
		return FFCNum(f);
	}
	return 0;
} 

//Sets up portal orientation and hitbox depending on direction.
void SetupPortal(ffc f, lweapon l){
	int cmb=0;
	int lDir = l->Dir;
	if (LweaponFlagIsSet(l, LWF_IGNORE_ENEMY_SHIELDS)) lDir =GetBlockableDir(l->Dir);
	if (lDir==DIR_UP){
		cmb = ComboAt((HitboxLeft(l)+2), HitboxTop(l)-1);
		SetLweaponHitboxOffsets(l,-1,0,6,6);
	}
	if (lDir==DIR_DOWN){
		cmb = ComboAt((HitboxLeft(l)+2), HitboxBottom(l)+1);
		SetLweaponHitboxOffsets(l,0,-1,6,6);
	}
	if (lDir==DIR_LEFT){
		cmb = ComboAt((HitboxLeft(l)-1), (HitboxTop(l)+2));
		SetLweaponHitboxOffsets(l,6,6,-1,0);
	}
	if (lDir==DIR_RIGHT){
		cmb = ComboAt((HitboxRight(l)+1), (HitboxTop(l)+2));
		SetLweaponHitboxOffsets(l,6,6,0,-1);
	}
	f->X=ComboX(cmb);
	f->Y=ComboY(cmb);
}

//Main function for teleporting stuff between portals.
void TeleportObjectsOnCollision(int PortalFFC, lweapon l){
	int buffer[] = "PortalMagic";
		int scr = Game->GetFFCScript(buffer);
	ffc Exit = Screen->LoadFFC(PortalFFC);
	int RotDir = DirToAngle(l->Dir) - DirToAngle(Exit->Misc[FFC_MISC_PORTAL_DIR]);
	// 1. Link
	if (LinkGoThruPortal(l)){
		Link->X = Exit->X;
		Link->Y = Exit->Y;
		Link->Dir = Exit->Misc[FFC_MISC_PORTAL_DIR];
		Link->Y+=InFrontY(Exit->Misc[FFC_MISC_PORTAL_DIR], 0);
		Link->X+=InFrontX(Exit->Misc[FFC_MISC_PORTAL_DIR], 0);
		Game->PlaySound(SFX_PORTAL_WARP);
		if (IsSideview()&& (Exit->Misc[FFC_MISC_PORTAL_DIR]==DIR_UP)){
			if (l->Dir==DIR_UP){
				if (Link->Jump>0)Link->Jump*=-1;
				else if (Link->Jump==0) Link->Jump= 2;
			}
			else if (l->Dir>1) Link->Jump+= 1.5;
		}
	}
	//2. Lweapons
	for (int i=1; i<= Screen->NumLWeapons(); i++){
		lweapon m = Screen->LoadLWeapon(i);
		if (m->Z>16) continue;
		if ((GetBlockableDir(m->Dir)!=OppositeDir(l->Dir))&&(!m->Angular)) continue;
		if (!Collision(l,m)) continue;
		if (m->ID==LW_WHISTLE) continue;
		if (m->ID==LW_PARTICLE) continue;		
		if (m->ID==LW_GHOSTED){
			if (LweaponFlagIsSet(l, LWF_MELEE)) continue;
			ffc master = Screen->LoadFFC(GetMasterFFCID(m));
			if (master->Script==scr) continue;
			Game->PlaySound(SFX_PORTAL_WARP);
			master->X = Exit->X;
			master->Y = Exit->Y;
			master->Y+=InFrontY(Exit->Misc[FFC_MISC_PORTAL_DIR], 0);
			master->X+=InFrontX(Exit->Misc[FFC_MISC_PORTAL_DIR], 0);
			int rotx = master->Vx;
			int roty = master->Vy;
			master->Vx = (RotatePointX(rotx, roty, 0, 0, RotDir+180));
			master->Vy = (RotatePointY(rotx, roty, 0, 0, RotDir+180));
			rotx = master->Ax;
			roty = master->Ay;
			master->Ax = (RotatePointX(rotx, roty, 0, 0, RotDir+180));
			master->Ay = (RotatePointY(rotx, roty, 0, 0, RotDir+180));
			if (LweaponFlagIsSet(m, LWF_MOVE_OFFSCREEN))LweaponPosUpdateAlt(master, m);
			else LweaponPosUpdate(master, m);
			LweaponDirUpdate( master, m);
			LweaponSpriteUpdate(m);
		}
		else{
			if(m->Angular==false){
				if (GetBlockableDir(m->Dir)!=OppositeDir(l->Dir)) continue;
				m->X = Exit->X;
				m->Y = Exit->Y;
				m->Dir = Exit->Misc[FFC_MISC_PORTAL_DIR];
				m->Y+=InFrontY(Exit->Misc[FFC_MISC_PORTAL_DIR], 0);
				m->X+=InFrontX(Exit->Misc[FFC_MISC_PORTAL_DIR], 0);
				LweaponSpriteUpdate (m);
			}
			else{
				int ang = RadtoDeg(m->Angle);
				if ((l->Dir==DIR_UP)&&(Sin(ang)<0))continue;
				if ((l->Dir==DIR_DOWN)&&(Sin(ang)>0))continue;
				if ((l->Dir==DIR_LEFT)&&(Cos(ang)<0))continue;
				if ((l->Dir==DIR_RIGHT)&&(Cos(ang)>0))continue;
				Game->PlaySound(SFX_PORTAL_WARP);
				m->X = Exit->X;
				m->Y = Exit->Y;
				m->Y+=InFrontY(Exit->Misc[FFC_MISC_PORTAL_DIR], 0);
				m->X+=InFrontX(Exit->Misc[FFC_MISC_PORTAL_DIR], 0);
				m->Angle = WrapAngle(m->Angle +(RotDir*0.0174)+PI);
				LweaponSpriteUpdate (m);
			}
		}
	}
	//3. Eweapons.
	for (int i=1; i<= Screen->NumEWeapons(); i++){
		eweapon m = Screen->LoadEWeapon(i);
		if (m->Z>16) continue;
		if (!Collision(l,m)) continue;
		else{
			if(m->Angular==false){
				if (m->Z>16) continue;
				if (GetBlockableDir(m->Dir)!=OppositeDir(Exit->Misc[FFC_MISC_PORTAL_DIR])) continue;
				Game->PlaySound(SFX_PORTAL_WARP);
				m->X = Exit->X;
				m->Y = Exit->Y;
				m->Dir = Exit->Misc[FFC_MISC_PORTAL_DIR];
				m->Y+=InFrontY(Exit->Misc[FFC_MISC_PORTAL_DIR], 0);
				m->X+=InFrontX(Exit->Misc[FFC_MISC_PORTAL_DIR], 0);
				EweaponSpriteUpdate (m);
			}
			else{
				int ang = RadtoDeg(m->Angle);
				if ((l->Dir==DIR_UP)&&(Sin(ang)<0))continue;
				if ((l->Dir==DIR_DOWN)&&(Sin(ang)>0))continue;
				if ((l->Dir==DIR_LEFT)&&(Cos(ang)<0))continue;
				if ((l->Dir==DIR_RIGHT)&&(Cos(ang)>0))continue;
				Game->PlaySound(SFX_PORTAL_WARP);
				m->X = Exit->X;
				m->Y = Exit->Y;
				m->Y+=InFrontY(Exit->Misc[FFC_MISC_PORTAL_DIR], 0);
				m->X+=InFrontX(Exit->Misc[FFC_MISC_PORTAL_DIR], 0);
				m->Angle = WrapAngle(m->Angle +(RotDir*0.0174)+PI);
				EweaponSpriteUpdate (m);
			}
		}
	}
	//4. Enemies
	for (int i=1; i<= Screen->NumNPCs(); i++){
		npc n = Screen->LoadNPC(i);
		if (n->Z>16) continue;
		//if (n->Attributes[11]>0)continue;
		if (n->Step==0) continue;
		if ((!IsSideview())||(l->Dir!=DIR_UP)){
			if (n->Dir!=OppositeDir(l->Dir))continue;
		}
		if (n->HitWidth>16)continue;//Enemy does not fit trough portal.
		if (n->HitHeight>16)continue;
		if (!Collision(l,n)) continue;
		Game->PlaySound(SFX_PORTAL_WARP);
		n->X = Exit->X;
		n->Y = Exit->Y;
		n->Y+=InFrontY(Exit->Misc[FFC_MISC_PORTAL_DIR], 0);
		n->X+=InFrontX(Exit->Misc[FFC_MISC_PORTAL_DIR], 0);
		if ((!IsSideview())||(Exit->Misc[FFC_MISC_PORTAL_DIR]>1)) n->Dir = Exit->Misc[FFC_MISC_PORTAL_DIR];
		if (IsSideview()&& (Exit->Misc[FFC_MISC_PORTAL_DIR]==DIR_UP)){
			 n->Jump = n->Step/100;
		}
		if (n->Type==NPCT_WALK){
			if (IsWater( GetPortalExitCombo(Exit))){
				Game->PlaySound(SFX_SPLASH);
				Remove(n);
			}
			if (IsPit( GetPortalExitCombo(Exit))){
				Game->PlaySound(SFX_FALL);
				Remove(n);
			}
		}
	}
	//5.Dropped items (sideview only)
	if (!IsSideview())return;
	if (l->Dir!=DIR_UP)return;
	for (int i = 1; i<=Screen->NumItems(); i++){
		item n = Screen->LoadItem(i);
		if (n->HitWidth>16)continue;
		if (n->HitHeight>16)continue;
		if (!Collision(l,n)) continue;
		Game->PlaySound(SFX_PORTAL_WARP);
		n->X = Exit->X;
		n->Y = Exit->Y;
		n->Y+=InFrontY(Exit->Misc[FFC_MISC_PORTAL_DIR], 0);
		n->X+=InFrontX(Exit->Misc[FFC_MISC_PORTAL_DIR], 0);
	}
	return;
}

//Returns whether HEAD-ON collision with solid combos occurred or not.
bool HitSolidHeadOn(lweapon l){
	int ldir = l->Dir;
	if (LweaponFlagIsSet(l, LWF_IGNORE_ENEMY_SHIELDS)) ldir =GetBlockableDir(l->Dir);
	if (ldir==DIR_UP){
		if (Screen->isSolid((HitboxLeft(l)+2), HitboxTop(l))) return true;
	}
	if (ldir==DIR_DOWN){
		if (Screen->isSolid((HitboxLeft(l)+2) , HitboxBottom(l)))return true;
	}
	if (ldir==DIR_LEFT){
		if (Screen->isSolid(HitboxLeft(l), (HitboxTop(l)+2)))return true;
	}
	if (ldir==DIR_RIGHT){
		if (Screen->isSolid(HitboxRight(l), (HitboxTop(l)+2)))return true;
	}
	return false;
}

int DirToAngle(int dir){
	dir &=7;
	if (dir==DIR_UP) return 90;
	if (dir==DIR_DOWN) return 270;
	if (dir==DIR_LEFT) return 180;
	if (dir==DIR_RIGHT) return 0;
	if (dir==DIR_LEFTUP) return 135;
	if (dir==DIR_RIGHTUP) return 45;
	if (dir==DIR_LEFTDOWN) return 225;
	if (dir==DIR_RIGHTDOWN) return 315;
	return -1;
}

int DirToRad(int dir){
	return DirToAngle(dir)*0.0174;
}

void EweaponSpriteUpdate(eweapon l){
	if (l->NumFrames==0) l->NumFrames=1;
	int dir = l->Dir; 
	dir &= ~8;
 	if (dir==DIR_UP) l->Flip=0;
	else if (dir==DIR_DOWN) l->Flip=2;
	else if (dir==DIR_LEFT) l->Flip=5;
	else if (dir==DIR_RIGHT) l->Flip=4;
	else if (dir==DIR_RIGHTUP)l->Flip=0;
	else if (dir==DIR_LEFTUP) l->Flip=1;
	else if (dir==DIR_LEFTDOWN) l->Flip=3;
	else if (dir==DIR_RIGHTDOWN) l->Flip=2;
}

//Returns true, if Link tries to go trough portal.
bool LinkGoThruPortal(lweapon l){
	if (Link->Z>16) return false;
	if (!LinkCollision(l)) return false;
	if ((IsSideview())&&(l->Dir==DIR_UP)){
		if (Link->Jump<=0) return true;
	}
	if (Link->Dir!=OppositeDir(l->Dir))return false;
	int dir = l->Dir;
	if (dir==DIR_UP)return Link->InputDown;
	if (dir==DIR_DOWN)return Link->InputUp;
	if (dir==DIR_LEFT)return Link->InputRight;
	if (dir==DIR_RIGHT)return Link->InputLeft;
	return false;
}

//Gets the portal exit landing combo number on screen.
int GetPortalExitCombo(ffc portal){
	int cmb = ComboAt(CenterX(portal), CenterY(portal));
	if (portal->Misc[FFC_MISC_PORTAL_DIR]==DIR_UP) return cmb-16;
	if (portal->Misc[FFC_MISC_PORTAL_DIR]==DIR_DOWN) return cmb+16;
	if (portal->Misc[FFC_MISC_PORTAL_DIR]==DIR_LEFT) return cmb-1;
	if (portal->Misc[FFC_MISC_PORTAL_DIR]==DIR_RIGHT) return cmb+1;
}