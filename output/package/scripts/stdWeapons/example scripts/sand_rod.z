const int CF_SAND_ROD_DIRECT_TRIGGER = 88;//Sand rod direct touch trigger flag.
const int CF_SAND_ROD_MAGIC_TRIGGER = 76;//Sand rod projectile trigger flag.

const int SAND_ROD_MAGIC_COST=0;

//Combo replacer magic wand

//1. Set up 2 sprites. One for wand animation and one for projectile.
//2. Import and compile the script. It requires stdWeapons.zh and all his dependencies. Assign 3 FFC script slots.
//3. Set up generic item settings on Item Editor.
//4. D0 - Damage dealt to enemies on direct hit by projectile or wand strike. 
//        Uses MAGIC or WAND MELEE enemy defense.
//   D1 - Sprite for wand animation. Can be the same for both wands.
//   D2 - Sprite for magic projectile.
//   D3 - Combo type to replace
//   D4 - Replacement combo ID.
//   D5 - Magic flight duration.
//   D6 - Projectile flight speed.
//   D7 - Script slot for "SandRod" script.
//5. Assign "Weapon Launcher" action item script.

ffc script SandRod{
	void run(int damage, int wandsprite,int sprite,  int SandCombo, int SandReplace, int range, int speed){
		itemdata it = Game->LoadItemData(this->InitD[7]);
		int sound = it->UseSound;
		lweapon wand = LweaponInit (this, LW_GHOSTED, damage, wandsprite, 0);
		MeleeWeaponStab(this, wand, wand->Misc[LWEAPON_MISC_ORIGTILE], 8, 12, CF_SAND_ROD_DIRECT_TRIGGER, 0, NPCD_WAND, 0, 2);
		if (!AmmoManager(CR_MAGIC, SAND_ROD_MAGIC_COST, 118, false)){
			MeleeWeaponEndStrike(this, wand, wand->Misc[LWEAPON_MISC_ORIGTILE], 12, 2, 2);
		}
		SetLweaponHitboxOffsets(wand,4,4,4,4);
		int itm = GetItemID(wand);
		int args[8] = {damage, sprite, SandCombo, SandReplace,range , speed ,0, itm};
		int buffer[] = "SandMagic";
		int scr = Game->GetFFCScript(buffer);
		ffc magic = LaunchScriptedLweapon(scr, args);
		PutFFCInFrontOfLink(magic, 16);
		Game->PlaySound(sound);
		MeleeWeaponEndStrike(this, wand, wand->Misc[LWEAPON_MISC_ORIGTILE], 12, 2, 2);
	}	
}

ffc script SandMagic{
	void run(int damage, int sprite,  int SandCombo, int SandReplace, int range, int speed){
		lweapon l = LweaponInit (this, LW_GHOSTED, damage, sprite, 0);
		
		LweaponSetFlag(l, LWF_AUTO_DIR_UPDATE);
		LweaponSetFlag(l, LWF_AUTO_SPRITE_UPDATE);
		LweaponSetFlag(l, LWF_NO_FALL);
		SetLweaponHitboxOffsets(l,0,0,6,6);
		int hitbox[4];
		GetLweaponHitboxOffsets(l, hitbox);
		SetEnemyDefense(l, NPCD_ALWAYS_STUN);
		SetStraightMotion4(this, speed);
		int timer=range;
		int oldcmb=-1;
		
		while(true){
			oldcmb=ReflectOffMirrors(oldcmb, this, l);			
			if (SandReplace>0)ReplaceCombosOnCollision( l, SandCombo, SandReplace, -1, 0);
			else ChangeToNextOnCollision( l, SandCombo, -1, 0);
			if (LweaponFlagIsSet(l, LWF_REFLECTED))TriggerUpdate (l, CF_REFMAGIC, SFX_SECRET, true);
			TriggerUpdate (l, CF_ICE_ROD_MAGIC_TRIGGER, SFX_SECRET, true);
			AutoRotateLweaponHitbox (l, hitbox);
			timer--;
			if (timer<0) TerminateLweapon (this, l);
			LweaponWaitframe(this, l, true);
		}
	}
}