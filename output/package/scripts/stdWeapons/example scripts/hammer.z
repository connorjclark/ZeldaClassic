const int QUAKE_HAMMER_RADIUS = 64;//Quake Hammer stun radius.
const int QUAKE_HAMMER_STUN_DURATION = 64;//Quake Hammer stun duration, in frames.
const int QUAKE_HAMMER_SECRET_TRIGGER = 103;//Quake Hammer direct hit secret trigger.
const int QUAKE_HAMMER_DAMAGE_MODIFIER = 4;//Quake Hammer direct hit damage multiplier.
const int SUPER_QUAKE_RADIUS = 192;//Super Quake stun radius.
const int SUPER_QUAKE_STUN_DURATION = 128;//Super Quake stun duration, in frames.
const int SUPER_QUAKE_SECRET_TRIGGER = 99;//Super Quake direct hit secret trigger.
const int SUPER_QUAKE_DAMAGE_MODIFIER = 16;//Super Quake direct hit damage multiplier.

//Custom simple scripted hammer. Or not. Expanded support for Quake Hammer techniques.
//D0 - damage dealt by hammer 
//D1 - Sprite used.
//D2- lag time between Link drawing hammer and it`s landing pound.
//D3- hammer animation speed. Higher-slower. 

ffc script CustomHammer{
	void run(int damage, int sprite, int lag, int delay){
		lweapon l = LweaponInit (this, LW_GHOSTED, damage, sprite, 0);
		int origtile = l->Misc[LWEAPON_MISC_ORIGTILE];
		SetLweaponHitboxOffsets(l, 0, 0, 4, 4);		
		if (Link->Item[I_QUAKESCROLL1]){
			MeleeWeaponDrawAboveHead(this, l, origtile, 1, 8);
			int counter=0;
			int chargetype = 0;
			int radius = 0;
			int duration = 0;
			int spinattack = 128;
			if (Link->Item[I_CHARGERING2]) spinattack=32;
			else if (Link->Item[I_CHARGERING1]) spinattack=64;
			int hurricane = 256;
			if (Link->Item[I_CHARGERING2]) hurricane=64;
			else if (Link->Item[I_CHARGERING1]) hurricane=128;
			while (UsingItem(this->InitD[7])){
				Link->InputUp=false;
				Link->InputDown=false;
				Link->InputLeft=false;
				Link->InputRight=false;
				counter++;
				if ((counter>= spinattack)&&(chargetype==0)){
					Game->PlaySound(SFX_CHARGE1);
					chargetype=1;
				}
				if ((counter>= hurricane)&&(Link->Item[I_QUAKESCROLL2])){
					if (chargetype==1){
						if (AmmoManager(CR_MAGIC, 8, 118, false)){
						Game->PlaySound(SFX_CHARGE2);
						chargetype=2;
						}
					}
				}
				LweaponWaitframe (this,l, true);
			}
			if (chargetype==1)l->Damage*=QUAKE_HAMMER_DAMAGE_MODIFIER;
			if (chargetype==2)l->Damage*=SUPER_QUAKE_DAMAGE_MODIFIER;
			if (chargetype>0){
				Game->PlaySound(SFX_BOMB);
				MeleeWeaponPound(this, l, origtile, 0, delay, 12, 89, true, 28, NPCD_HAMMER, 16, 42, 1);
			}
			else MeleeWeaponPound(this, l, origtile, lag, delay, 12, 89, true, 28, NPCD_HAMMER, 16, 42, 2);
			if (chargetype==1){
				TriggerUpdate (l, QUAKE_HAMMER_SECRET_TRIGGER, SFX_SECRET, true);
				Screen->Quake=30;
				radius = QUAKE_HAMMER_RADIUS;
				duration = QUAKE_HAMMER_STUN_DURATION;
			}
			if (chargetype==2){
				Screen->Quake=90;
				TriggerUpdate (l, QUAKE_HAMMER_SECRET_TRIGGER, SFX_SECRET, true);
				TriggerUpdate (l, SUPER_QUAKE_SECRET_TRIGGER, SFX_SECRET, true);
				radius = SUPER_QUAKE_RADIUS;
				duration = SUPER_QUAKE_STUN_DURATION;
			}
			for (int i=1; i<= Screen->NumNPCs(); i++){				
				npc en = Screen->LoadNPC(i);
				if (en->Z>0)continue;
				int nx = en->X+en->HitXOffset;
				int ny = en->Y+en->HitYOffset;
				int nx2 = nx+en->HitWidth;
				int ny2 = ny+en->HitHeight;
				if (CircleIntersectRect(nx, ny, nx2, ny2, CenterX(l), CenterY(l), radius)) en->Stun=duration;
			}
		}
		else MeleeWeaponPound(this, l, origtile, lag, delay, 12, 89, true, 28, NPCD_HAMMER, 16, 42, 2);
		MeleeWeaponEndStrike(this,l, l->OriginalTile, 12, 2, 2);
	}
}

//Returns TRUE if the given rectangle collides with given circle
//x1, y1, x2, y2 - coordinates of rectangle
//x, y - center of given circle
//r - radius of given circle
 bool CircleIntersectRect(int x1, int y1, int x2, int y2, int x, int y, int r){
 if(y < y1)   // If center Y is above rectangle
   {
    if(x < x1)          // If central point is in left corner
      return ((x-x1)*(x-x1) + (y-y1)*(y-y1)) <= r*r;
    if(x > x2)          // If central point is in right corner
      return ((x-x2)*(x-x2) + (y-y1)*(y-y1)) <= r*r;
    return (y1-y) <= r; // If central point is right above rectangle,
    //Just check difference between Y coordinates and compare it with radius.
   }
 if(y > y2)  // If center Y is below rectangle
   {
    if(x < x1)          // If central point is in left corner
      return ((x-x1)*(x-x1) + (y-y2)*(y-y2)) <= r*r;
    if(x > x2)          // If central point is in right corner
      return ((x-x2)*(x-x2) + (y-y2)*(y-y2)) <= r*r;
    return (y-y2) <= r; // If central point is right below rectangle,
    //Just check difference between Y coordinates and compare it with radius.
   }
  //Let`s assume if circle`s Y coordinate is inside rectangle`s Y projection.
 if(x < x1)   // If center is to the left of rectangle.
   return (x1-x) <= r;
 if(x > x2)   // If center is to the right of rectangle.
   return (x-x2) <= r;
 return true; // CIRCLE CENTER IS INSIDE!!
}