const int MAX_ORBITERS_PER_RING = 8;//Maximum orbiters per ring. Excess move to next ring.
const int RADIUS_INCREASE_PER_RING = 16;//Radius increase per ring.

const int LWEAPON_MISC_RADIUS = 0;
const int LWEAPON_MISC_ROTANGLE = 1;

const int FFC_MISC_TERMINATE=0;

//This version of Cane of Byrna was created to test and explain ability to handle multiple lweapons in one script.
//Also fine rotation has been shown here.  

//2 sprites needed

//D0 - damage dealt
//D1 - wand sprite
//D2 - orbiter sprite
//D3 - number of orbiting lweapons, max 24
//D4 - orbiting radius, in pixels
//D5 - orbiting speed, in degrees per frame
//D6 - Cost for spell maintenance per 1/2 second, in MP.
ffc script OrbiterWeapon{
	void run(int damage, int wandsprite, int sprite, int numorbs, int radius, int speed, int cost){
		int buffer[] = "OrbiterMagic";
		int scr = Game->GetFFCScript(buffer);
		if (NumScriptedLweaponsOf(scr)>0){
			for (int i=1;i<=32;i++){
				ffc f= Screen->LoadFFC(i);
				if (f->Script==scr) f->Misc[FFC_MISC_TERMINATE]=1;
			}
			Quit();
		}
		itemdata it = Game->LoadItemData(this->InitD[7]);
		int sound = it->UseSound;		
		lweapon wand = LweaponInit (this, LW_GHOSTED, damage, wandsprite, 0);
		SetLweaponHitboxOffsets(wand,0,0,6,6);
		MeleeWeaponSlash90Alt(this, wand, wand->Misc[LWEAPON_MISC_ORIGTILE], 6, 12, 88, 0, NPCD_WAND, 0, 1);
		if (!AmmoManager(CR_MAGIC, cost, 118, false)){
			MeleeWeaponEndStrike(this, wand, wand->Misc[LWEAPON_MISC_ORIGTILE], 12, 2, 2);
		}
		int itm = GetItemID(wand);
		int args[8] = {damage, sprite, numorbs, radius, speed, cost, sound, itm};
		ffc magic = LaunchScriptedLweapon(scr, args);
		MeleeWeaponEndStrike(this, wand, wand->Misc[LWEAPON_MISC_ORIGTILE], 12, 2, 2);
	}
}

ffc script OrbiterMagic{
	void run(int damage, int sprite, int numorbs, int radius, int speed, int cost, int sound){
		CheckMaxLweapons(this, 1);
		lweapon l[24];
		int counter = 30;
		for (int i=0; i<numorbs; i++){
			l[i] = LweaponInit (this, LW_GHOSTED, damage, sprite, 0);
			LweaponSetFlag(l[i], LWF_AUTO_DIR_UPDATE);
			LweaponSetFlag(l[i], LWF_AUTO_SPRITE_UPDATE);
			LweaponSetFlag(l[i], LWF_NO_FALL);
			LweaponSetFlag(l[i], LWF_PENETRATING);
			LweaponSetFlag(l[i], LWF_MOVE_OFFSCREEN);
			
			LweaponUnSetFlag(l[i], LWF_AUTO_POS_UPDATE);
			
			SetEnemyDefense(l[i], NPCD_BYRNA);
			l[i]->Angular=true;
			l[i]->CSet=5;
			l[i]->Misc[LWEAPON_MISC_RADIUS]=radius+(Floor(i/MAX_ORBITERS_PER_RING)*RADIUS_INCREASE_PER_RING);
			int ang = 360/MAX_ORBITERS_PER_RING; //Set init angle and position.
			if (Floor(i/MAX_ORBITERS_PER_RING)==Floor(numorbs/MAX_ORBITERS_PER_RING)) ang = 360/((i%MAX_ORBITERS_PER_RING)+1);
			l[i]->Misc[LWEAPON_MISC_ROTANGLE] = 0 + (ang*(i%MAX_ORBITERS_PER_RING));
		}
		while (true){
			this->X = Link->X;
			this->Y = Link->Y;
			for (int i=0; i<numorbs; i++){
				if (!(l[i]->isValid())) continue;
				LweaponUpdatePostWaitframe(this, l[i]);
				if (IsOdd(Floor(i/MAX_ORBITERS_PER_RING))) l[i]->Misc[LWEAPON_MISC_ROTANGLE]-=speed;
				else l[i]->Misc[LWEAPON_MISC_ROTANGLE]+=speed;
				l[i]->X = this->X;
				l[i]->Y = this->Y;
				l[i]->HitXOffset = l[i]->Misc[LWEAPON_MISC_RADIUS]*Cos(l[i]->Misc[LWEAPON_MISC_ROTANGLE]);
				l[i]->HitYOffset = l[i]->Misc[LWEAPON_MISC_RADIUS]*Sin(l[i]->Misc[LWEAPON_MISC_ROTANGLE]);
				l[i]->DrawXOffset = l[i]->HitXOffset;
				l[i]->DrawYOffset = l[i]->HitYOffset;
				l[i]->Angle = WrapAngle(DegtoRad(l[i]->Misc[LWEAPON_MISC_ROTANGLE]));
				LweaponUpdate(this, l[i]);
			}
			counter--;
			if (counter<=0){
				if (!AmmoManager(CR_MAGIC, cost, 118, false)){
					for (int i=0; i<numorbs; i++){
						if (l[i]->isValid()) Remove(l[i]);
					}
					ClearFFC(this);
					Quit();
				}
				else {
					Game->PlaySound(sound);
					counter=30;
				}
			}
			
			if (this->Misc[FFC_MISC_TERMINATE]>0){
				for (int i=0; i<numorbs; i++){
						if (l[i]->isValid()) Remove(l[i]);
				}
				ClearFFC(this);
				Quit();
			}
			Waitframe();
		}
	}
}