///////////////////////////////////////////
//CV SUBWEAPONS
//A set of subweapons from various CV games
///////////////////////////////////////////

//import "std.zh"
//import "string.zh"
//import "ffcscript.zh"
//import "stdExtra.zh"

const int CR_MAXPROJECTILES=10; //Counter ID used for maximum amount of lweapons launched at time.
const int SFX_ERROR=32; //Error SFX.
const int I_CHAOSRING=104; //Item that allows infinite rupees.

//global script Init{
//	void run(){
//	Game->Counter[CR_MAXPROJECTILES]=1;
//	}
//}

//Main item script. Handles maximum projectiles flying onscreen.
//D0-D6: FFC arguments
//D7: Script slot.
item script Subweapon{
	void run (float d0, float d1, float d2, float d3, float d4, float d5, float d6, int ffcscript){
		int maxprojectiles = Game->Counter[CR_MAXPROJECTILES];
		float D[8]={d0,d1,d2,d3,d4,d5,d6,0};
		if (CountFFCsRunning(ffcscript)>=maxprojectiles){
			Game->PlaySound(SFX_ERROR);
			Quit();
		}
		else{
			Link->Action=LA_ATTACKING;
			RunFFCScriptOrQuit(ffcscript, D);
		}
	}
} 

//An item that sets maximum projectiles that can be launched at once.
//D0: New maximum.
item script IV {
	void run (int newmax){
		Game->Counter[CR_MAXPROJECTILES]=newmax;
	}
}

//An AXE that moves in arch pattern.
//D0: Damage.
//D1: Launch sound.
//D2: Sprite used.
//D3: Starting horizontal velocity.
//D4: Starting vertical velocity.
//D5: Cost (in rupees).
ffc script Axe{
	void run (int dam, int sound, int sprite, float hvel, float vvel, int cost){
		CheckMaxLweapons(this, (Game->Counter[CR_MAXPROJECTILES]));
		if (!AmmoManager(CR_RUPEES, cost, I_CHAOSRING)){
			Game->PlaySound(SFX_ERROR);
			Quit();
		}
		int soundcounter = 0;
		lweapon axe = LweaponInit(this, LW_SCRIPT1, dam, sprite, sound);
		LweaponSetFlag(axe, LWF_PENETRATING);
		LweaponSetFlag(axe, LWF_DRAW_SHADOW);
		LweaponSetFlag(axe, LWF_MOVE_OFFSCREEN);
		LweaponSetFlag(axe, LWF_AUTO_DIR_UPDATE);
		if(IsSideview()){
			if (Link->Dir==DIR_RIGHT){
				this->Vx=hvel;
				this->Vy=-(vvel);
			}
			else if (Link->Dir==DIR_LEFT){
				this->Vx=-(hvel);
				this->Vy=-(vvel);
			}
			else if (Link->Dir==DIR_UP){
				this->Vy=-(vvel);
			}
		}
		else{
			SetStraightMotion4(this, hvel);
			this->Misc[FFC_MISC_VZ] = vvel;
			axe->HitZHeight = 16;
		}
		if(IsSideview()){
			while(true){
				if (this->X< -(this->EffectWidth))TerminateLweapon (this, axe);
				if (this->X> 256) TerminateLweapon (this, axe);
				if (this->Y>176) TerminateLweapon (this, axe);
				if (axe->isValid()){
					soundcounter = ContiniousSFX(soundcounter, 20, sound);
					if (BlockedByEnemy(axe)){
						Game->PlaySound(6);
						this-> Vx = -((this->Vx)/4);
						axe->DrawStyle=DS_PHANTOM;
						axe->CollDetection = false;
					}
					//debugValue (1, axe->Z);
				}
				LweaponWaitframe (this, axe, true);
			}			
		}
		else{
			while (true){
				soundcounter = ContiniousSFX(soundcounter, 20, sound);
				if (axe->Z <= 0) Remove(axe);
				LweaponWaitframe (this, axe, true);
			}
		}
	}
}

//A DAGGER that moves in straightforward way. Turns Gibdos into Stalfos II.
//D0: Damage.
//D1: Launch sound.
//D2: Sprite used.
//D3: Unused.
//D4: Flight speed.
//D5: Cost (in rupees).
ffc script Knife{
	void run (int dam, int sound, int sprite, int altsprite, float speed, int cost){
		CheckMaxLweapons(this, (Game->Counter[CR_MAXPROJECTILES]));
		if (!AmmoManager(CR_RUPEES, cost, I_CHAOSRING)){
			Game->PlaySound(SFX_ERROR);
			Quit();
		}
		lweapon knife = LweaponInit(this, LW_SCRIPT1, dam, sprite, sound);
		LweaponSetFlag(knife, LWF_AUTO_DIR_UPDATE);
		LweaponSetFlag(knife, LWF_AUTO_SPRITE_UPDATE);
		SetStraightMotion4(this, speed);		
		while (true){
			TransformEnemyOnCollision (knife, NPC_GIBDO, NPC_STALFOS2, false, SFX_EDEAD);
			LweaponWaitframe (this, knife, true);
		}
	}
}

//A CROSS-shaped boomerang that bounces off screen boundaries several times before disappearing.
//Use Boomerang Defense for enemy interaction with this weapon.
//Also this weapon drags dropped items around.
//D0: Damage.
//D1: Launch sound.
//D2: Sprite used.
//D3: Maximum number of bounces.
//D4: Flight speed.
//D5: Cost (in rupees).
ffc script CrossBoomerang{
	void run (int dam, int sound, int sprite, int maxbounce, float speed, int cost){
		if (!AmmoManager(CR_RUPEES, cost, I_CHAOSRING)){
			Game->PlaySound(SFX_ERROR);
			Quit();
		}
		//this->Data=1;
		lweapon cross = LweaponInit(this, LW_SCRIPT1, dam, sprite, sound);
		LweaponSetFlag(cross, LWF_PENETRATING);
		LweaponSetFlag(cross, LWF_DRAW_SHADOW);
		LweaponSetFlag(cross, LWF_MOVE_OFFSCREEN);
		LweaponSetFlag(cross, LWF_AUTO_DIR_UPDATE);
		SetStraightMotion4(this, speed);
		while (cross->isValid()){
			LweaponPosUpdate(this, cross);
			LweaponDirUpdate(this, cross);
			LweaponSpriteUpdate (cross);
			ItemPickup (cross, false);
			UseEnemyDefense(cross, 0, NPCD_BRANG);
			PenetratorUpdate(cross);
			Waitframe();
		}
		for (int b=1; b<=maxbounce; b++){
			if (this->Vx!=0) this->Vx= -(this->Vx);
			if (this->Vy!=0) this->Vy= -(this->Vy);
			if (this->Vy>0) Waitframe();
			cross = CreateNewWeapon (this, LW_SCRIPT1, dam, sprite);
			while (cross->isValid()){
			     LweaponPosUpdate(this, cross);
			     LweaponDirUpdate( this, cross);
			     LweaponSpriteUpdate (cross);
			     ItemPickup (cross, false);
			     PenetratorUpdate(cross);
			     Waitframe();
		     }
		}
		ClearFFC(this);
     	Game->PlaySound(SFX_FALL);
	}
}

//A bottle filled with HOLY WATER. When thrown it lobs at arch pattern like axe and on collision with
//solid combos (or enemies) explodes into raging inferno like Molotov Cocktail.
//D0: Damage.
//D1: Launch sound.
//D2: Sprite used.
//D3: Starting horizontal velocity.
//D4: Starting vertical velocity.
//D5: Cost (in rupees).
ffc script HolyMolotov{
	void run (int dam, int sound, int sprite, float hvel, float vvel, int cost){
		if (!AmmoManager(CR_RUPEES, cost, I_CHAOSRING)){
			Game->PlaySound(SFX_ERROR);
			Quit();
		}
		lweapon bottle = LweaponInit(this, LW_SCRIPT1, dam, sprite, sound);
		bottle->HitWidth=8;
		bottle->HitHeight=8;
		if(IsSideview()){
		if (Link->Dir==DIR_RIGHT){
			this->Vx=hvel;
			this->Vy=-(vvel);
		}
		else if (Link->Dir==DIR_LEFT){
			this->Vx=-(hvel);
			this->Vy=-(vvel);
		}
		else if (Link->Dir==DIR_UP){
			this->Vy=-(vvel);
		}
		}
		else{
			SetStraightMotion4(this, hvel);
			this->Misc[FFC_MISC_VZ] = vvel;
			bottle->HitZHeight = 16;
		}
		if(IsSideview()){
		while(this->Y<=176){
			if (this->X< -(this->EffectWidth)){
				Game->PlaySound(SFX_FALL);
				Quit();
			}
			if (this->X> 256) {
				Game->PlaySound(SFX_FALL);
				Quit();
			}
			if (bottle->isValid()){
			    AffectedByGravity (this, bottle);
			    LweaponDirUpdate(this, bottle);
			    LweaponPosUpdate(this, bottle);
			    PenetratorUpdate(bottle);
			    if ((WallCollision8way(bottle))||(BlockedByEnemy(bottle))){
			    	Game->PlaySound(SFX_FIRE);
			    	KillMolotov( this, bottle, dam, 8, 60);
			    	ClearFFC(this);
			    	Quit();
			    }
			    Waitframe();
			}
			else bottle = CreateNewWeapon(this, LW_SCRIPT1, dam, sprite);
		}
		}
		else{
			while (bottle->isValid()){
				AffectedByGravity (this, bottle);
			    LweaponDirUpdate(this, bottle);
			    LweaponPosUpdate(this, bottle);
			    PenetratorUpdate(bottle);
			    FastShadow(this, bottle);
			    if (bottle->Z <= 0){
					Waitframe();
					Game->PlaySound(SFX_FIRE);
					KillMolotov( this, bottle, dam, 8, 60);
					ClearFFC(this);
					Quit();
				}
			    Waitframe();
			}
		}
		ClearFFC(this);
		Game->PlaySound(SFX_FALL);
	}
}
//An ancient HOLY BIBLE. Upon launching,i t starts moving in spiral pattern 
//until disappearing after certain time. Additionally, it destroys EWeapons.
//D0: Damage.
//D1: Launch sound.
//D2: Sprite used.
//D3: Spiral radius.
//D4: Angular speed of moving.
//D5: Bible lifespan, in frames.
//D6: Cost(in rupees).
ffc script Bible{
	void run (int dam, int sound, int sprite, int radius, int speed, int duration, int cost){
		if (!AmmoManager(CR_RUPEES, cost, I_CHAOSRING)){
			Game->PlaySound(SFX_ERROR);
			Quit();
		}
		int angle=0;
		int rotspeed = speed;
		int Xrad = 0;
		int Ox = Link->X;
		int Oy = Link->Y;
		lweapon book = LweaponInit(this, LW_SCRIPT1, dam, sprite, sound);
		int booktile = book->OriginalTile;
		book->HitWidth=8;
		book->DrawXOffset=-4;
		if (Link->Dir==DIR_DOWN){
			angle= 90;
		}
		else if (Link->Dir==DIR_RIGHT){
			angle= 0;
		}
		else if (Link->Dir==DIR_LEFT){
			if (IsSideview()) rotspeed = -(speed);
			angle= 180;
		}
		else angle=270;
		for (int t = duration; t>=0; t--){
			SetPolarCoordinates(this,Ox,Oy,Xrad,angle);
			angle=angle+speed;
			Xrad=Xrad+radius;
			if (book->isValid()){
				LweaponPosUpdate(this,book);
				LweaponDirUpdate(this,book);
				PenetratorUpdate(book);
				DestroyEweapons (book, 10, 0);
				if (t<Floor(duration/5)) book->DrawStyle=DS_PHANTOM;
			}
			else book = CreateNewWeapon (this, LW_SCRIPT1, dam, sprite);
			Waitframe();
		}
		Remove (book);
		ClearFFC(this);
		Game->PlaySound(SFX_FALL);
	}
}

//A small DIAMOND that, when thrown, ricochets off solid combos.
//D0: Damage.
//D1: Launch sound.
//D2: Sprite used.
//D3: Maximum number of ricochets before flying trough walls.
//D4: Flight speed.
//D5: Cost (in rupees).
ffc script RicochetingDiamond{
	void run( int dam, int sound, int sprite, int maxbounce, float speed, int cost){
		if (!AmmoManager(CR_RUPEES, cost, I_CHAOSRING)){
			Game->PlaySound(SFX_ERROR);
			Quit();
		}
		lweapon gem = LweaponInit(this, LW_SCRIPT1, dam, sprite, sound);
		int startdir= 0;
		int ric= 0;
		int bouncecooldown=0;
		gem->HitWidth=8;
		gem->HitHeight=8;
		gem->DrawXOffset=-4;
		gem->DrawYOffset=-4;
		if (IsSideview()){
			if (Link->Dir==DIR_RIGHT) startdir=45;
			else if (Link->Dir==DIR_LEFT) startdir=135;
			else if (Link->Dir==DIR_UP) startdir= Rand(45, 135);
			else startdir = Rand(225, 315);
		}
		else{
			if (Link->Dir==DIR_UP) startdir=315;
			else if (Link->Dir==DIR_DOWN) startdir=135;
			else if (Link->Dir==DIR_LEFT) startdir= 225;
			else startdir = 45;
		}
		this->Vx=speed*Cos(startdir);
		this->Vy=speed*Sin(startdir);
		while (gem->isValid()){
			if (ric <= maxbounce){
				if (bouncecooldown>0) bouncecooldown--;
			     else if (WallCollision8way(gem)) {
			     	MoveToSolidContactPosition(this, gem);
			     	Bounce(this, gem, SFX_TAP1);
			     	ric++;
			     	bouncecooldown=bouncecooldown+1;
			     	}
			     }
			else gem->DrawStyle=DS_PHANTOM;
			LweaponPosUpdate(this,gem);
			LweaponDirUpdate(this,gem);
			PenetratorUpdate(gem);
			Waitframe();
		}
		Game->PlaySound(SFX_FALL);
		ClearFFC(this);
	}
}