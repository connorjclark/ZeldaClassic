// Creates a particle. Setting lifespan to -2 sets it to one full animation cycle.
lweapon CreateParticle (int x, int y, int sprite, int ax, int ay, int vx, int vy, int lifespan, bool grav){
	lweapon anim = Screen->CreateLWeapon(LW_PARTICLE);
	anim->X = x;
	anim->Y = y;
	anim->UseSprite(sprite);
	anim->CollDetection = false; //No one should want for any NPC do destroy particle by stepping on it`s spawn point.
	anim->Misc[LWEAPON_MISC_PARTICLE_VX] = vx;
	anim->Misc[LWEAPON_MISC_PARTICLE_VY] = vy;
	anim->Misc[LWEAPON_MISC_PARTICLE_AX] = ax;
	anim->Misc[LWEAPON_MISC_PARTICLE_AY] = ay;
	if (lifespan == -2){
		anim->Misc[LWEAPON_MISC_PARTICLE_TIMEOUT] = (anim->ASpeed)*(anim->NumFrames);
	}
	else anim->Misc[LWEAPON_MISC_PARTICLE_TIMEOUT] = lifespan;
	if (grav) anim->Misc[LWEAPON_MISC_PARTICLE_AFFECTED_BY_GRAVITY] = 1;
	anim->Misc[LWEAPON_MISC_PARTICLE_XPOS] = anim->X;
	anim->Misc[LWEAPON_MISC_PARTICLE_YPOS] = anim->Y;
	return anim;
}

//Andvanced version of PARTICLE creating. Use it if you are running out of sprite slots in Weapons/Misc animation data.
lweapon CreateParticleAdvanced( int x, int y, int numframes, int aspeed, int origtile, int cset, int flashcset, int ax, int ay, int vx, int vy, int lifespan, bool grav){
	lweapon anim = Screen->CreateLWeapon(LW_PARTICLE);
	anim->DeadState = -1;
	anim->X = x;
	anim->Y = y;
	anim->CollDetection = false;
	anim->NumFrames = numframes;
	anim->ASpeed = aspeed;
	anim->OriginalTile = origtile;
	anim->OriginalCSet = cset;
	if (flashcset != cset){
		anim->Flash = true;
		anim->FlashCSet = flashcset;
	}
	anim->Misc[LWEAPON_MISC_PARTICLE_VX] = vx;
	anim->Misc[LWEAPON_MISC_PARTICLE_VY] = vy;
	anim->Misc[LWEAPON_MISC_PARTICLE_AX] = ax;
	anim->Misc[LWEAPON_MISC_PARTICLE_AY] = ay;
	if (lifespan == -2){
		anim->Misc[LWEAPON_MISC_PARTICLE_TIMEOUT] = (anim->ASpeed)*(anim->NumFrames);
	}
	else anim->Misc[LWEAPON_MISC_PARTICLE_TIMEOUT] = lifespan;
	if (grav) anim->Misc[LWEAPON_MISC_PARTICLE_AFFECTED_BY_GRAVITY] = 1;
	anim->Misc[LWEAPON_MISC_PARTICLE_XPOS] = anim->X;
	anim->Misc[LWEAPON_MISC_PARTICLE_YPOS] = anim->Y;
	return anim;
}

//Set angular motion of particle. Angle is measured in degrees.
void SetParticleAngularMovement(lweapon anim, int angle, int speed){
	if (anim->ID!=LW_PARTICLE) return;
	anim->Misc[LWEAPON_MISC_PARTICLE_VX] = speed*Cos(angle);
	anim->Misc[LWEAPON_MISC_PARTICLE_VY] = speed*Sin(angle);
}

//Expands particle size.
void BigParticle (lweapon anim, int tilewidth, int tileheight){
	if (anim->ID!=LW_PARTICLE) return;
	anim->Extend = 3;
	anim->TileWidth = tilewidth;
	anim->TileHeight = tileheight;
}

//Removes all particles from screen.
void ClearParticles(){
	for (int i=1; i<=Screen->NumLWeapons(); i++){
		lweapon rem = Screen->LoadLWeapon(i);
		if (rem->ID != LW_PARTICLE) continue;
		Remove(rem);
	}
}

//Sets particle as Damaging particle that deals damage to all NPC`s when stepped on.
void SetAsDamagingParticle(lweapon anim, int dam, int HitXoffset, int HitYoffset, int HitWidth, int Hitheight, int defense){
	if (anim->ID!=LW_PARTICLE) return;
	anim->Misc[LWEAPON_MISC_PARTICLE_DAMAGE_X_OFFSET] = HitXoffset;
	anim->Misc[LWEAPON_MISC_PARTICLE_DAMAGE_Y_OFFSET] = HitYoffset;
	anim->HitWidth = HitWidth;
	anim->HitHeight = Hitheight;
	anim->CollDetection= true;
	anim->Damage = dam;
	anim->Misc[LWEAPON_MISC_PARTICLE_DAMAGE_ENEMY_DEFENSE] = defense;
}