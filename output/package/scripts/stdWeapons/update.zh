//Main Lweapon update function. Must be called instead of original Waitframe, as in additional to
//waiting a frame, it updates basic parameters of lweapon and his master FFC.
//Returns TRUE, if lweapon pointer is still valid, otherwise returns FALSE.
bool LweaponWaitframe(ffc f, lweapon l){
	if (!(l->isValid())) return false;//Lweapon pointer is dangling. ouch...
	
	if (LweaponFlagIsSet(l, LWF_PENETRATING)) PenetratorUpdate(l);//Check if lweapon can pierce trough enemies.
	if (!LweaponFlagIsSet(l, LWF_NO_FALL)) AffectedByGravity (f, l);	//Check gravity.
	if (LweaponFlagIsSet(l, LWF_AUTO_POS_UPDATE)){
		if (LweaponFlagIsSet(l, LWF_MOVE_OFFSCREEN))LweaponPosUpdateAlt(f, l); //Pick one of the two ways to update
		else LweaponPosUpdate(f, l);//lweapon`s position depending on LWF_MOVE_OFFSCREEN flag.
	}
	if (LweaponFlagIsSet(l, LWF_AUTO_DIR_UPDATE))LweaponDirUpdate(f, l); //Update lweapon`s direction for proper interaction with shielded enemies.
	if (LweaponFlagIsSet(l, LWF_CAN_PICKUP_ITEMS))ItemPickup (l, false); //Now check, if lweapon can pickup items.
	if (LweaponFlagIsSet(l, LWF_CAN_INSTA_DELIVER_ITEMS)) ItemPickup (l, true);//Or deliver them to Link instantly.
	UseEnemyDefense(l, 0, l->Misc[LWEAPON_MISC_DEFENSE]);//Check and use enemy defenses.
	if (LweaponFlagIsSet(l, LWF_MELEE)){
		if (LweaponFlagIsSet(l, LWF_SWING_WHILE_WALKING)){
			f->X = Link->X;
			f->Y= Link->Y;
			LweaponPosUpdate(f, l);
		}
		else NoAction();
		TerminateLweaponOnLA(f,l);
	}
	if (LweaponFlagIsSet(l, LWF_AUTO_SPRITE_UPDATE))LweaponSpriteUpdate (l);//Update sprite flipping depending on directions. Uses next sprite in the list
	//for diagonal directions.
	if (LweaponFlagIsSet(l, LWF_DRAW_SHADOW))FastShadow (f, l);//Draw shadow, if needed.
	int DrawX = l->DrawXOffset; //Backup DrawXoffset prior to custom drawing function.
	if ((l->HitWidth<=200)&&(l->HitHeight<=160))DrawCustomSprite(l); // Use custom drawing algorithm.
	
	Waitframe(); //Moment of truth!
	
	if (!(l->isValid())) return false;//Lweapon pointer is now dangling. ouch...
	
	if (DEBUG_DRAW_HITBOXES>0)DrawLweaponHitbox(l);//Debug line...
	
	if (LweaponFlagIsSet(l, LWF_PENETRATING)) PenetratorUpdate(l);//Check if lweapon can pierce trough enemies.
	UpdateTimer(f);
	if (l->DrawXOffset>=1000)l->DrawXOffset=DrawX; //Fix draw offset, if custom drawing is used.
	
	return true; //End of routine, return to main script. 
}

void LweaponUpdate(ffc f, lweapon l){
	if (!(l->isValid())) return;//Lweapon pointer is dangling. ouch...
	UpdateTimer(f);
	if (LweaponFlagIsSet(l, LWF_PENETRATING)) PenetratorUpdate(l);//Check if lweapon can pierce trough enemies.
	if (!LweaponFlagIsSet(l, LWF_NO_FALL)) AffectedByGravity (f, l);	//Check gravity.
	if (LweaponFlagIsSet(l, LWF_AUTO_POS_UPDATE)){
		if (LweaponFlagIsSet(l, LWF_MOVE_OFFSCREEN))LweaponPosUpdateAlt(f, l); //Pick one of the two ways to update
		else LweaponPosUpdate(f, l);//lweapon`s position depending on LWF_MOVE_OFFSCREEN flag.
	}
	if (LweaponFlagIsSet(l, LWF_AUTO_DIR_UPDATE))LweaponDirUpdate(f, l); //Update lweapon`s direction for proper interaction with shielded enemies.
	if (LweaponFlagIsSet(l, LWF_CAN_PICKUP_ITEMS))ItemPickup (l, false); //Now check, if lweapon can pickup items.
	if (LweaponFlagIsSet(l, LWF_CAN_INSTA_DELIVER_ITEMS)) ItemPickup (l, true);//Or deliver them to Link instantly.
	UseEnemyDefense(l, 0, l->Misc[LWEAPON_MISC_DEFENSE]);//Check and use enemy defenses.
	if (LweaponFlagIsSet(l, LWF_MELEE)){
		if (LweaponFlagIsSet(l, LWF_SWING_WHILE_WALKING)){
			f->X = Link->X;
			f->Y= Link->Y;
		}
		else NoAction();
		TerminateLweaponOnLA(f,l);
	}
	if (LweaponFlagIsSet(l, LWF_AUTO_SPRITE_UPDATE))LweaponSpriteUpdate (l);//Update sprite flipping depending on directions. Uses next sprite in the list
	//for diagonal directions.
	if (LweaponFlagIsSet(l, LWF_DRAW_SHADOW))FastShadow (f, l);//Draw shadow, if needed.
	l->Misc[LWEAPON_MISC_ORIGDRAWX] = l->DrawXOffset; //Backup DrawXoffset prior to custom drawing function.
	DrawCustomSprite(l); // Use custom drawing algorithm.
	
	//Waitframe(); //Moment of truth!
	
	//if (!(l->isValid())) return;//Lweapon pointer is now dangling. ouch...
	//DrawLweaponHitbox(l);
	
	//if (LweaponFlagIsSet(l, LWF_PENETRATING)) PenetratorUpdate(l);//Check if lweapon can pierce trough enemies.
	//UpdateTimer(f);
	//if (l->DrawXOffset>=1000)l->DrawXOffset=DrawX; //Fix draw offset, if custom drawing is used.
	
	//return; //End of routine, return to main script.
}

void LweaponUpdatePostWaitframe(ffc f, lweapon l, bool debugDrawHitbox){
	if (!(l->isValid())) return;//Lweapon pointer is now dangling. ouch...
	if (DEBUG_DRAW_HITBOXES>0)DrawLweaponHitbox(l);
	if (LweaponFlagIsSet(l, LWF_PENETRATING)) PenetratorUpdate(l);//Check if lweapon can pierce trough enemies.
	if (l->DrawXOffset>=1000)l->DrawXOffset=l->Misc[LWEAPON_MISC_ORIGDRAWX]; //Fix draw offset, if custom drawing is used.
	
	return; //End of routine, return to main script.
}

void LweaponUpdatePostWaitframe(ffc f, lweapon l){
	LweaponUpdatePostWaitframe(f,l, false);
}

//Unlike previous function, does not return anything and can automatically
//terminate the script if lweapon becomes invalid, complete with FFC cleanup.
void LweaponWaitframe (ffc f, lweapon l, bool quitoninvalid){
	if (!LweaponWaitframe(f, l)){
		if (quitoninvalid){//Lweapon pointer is dangling and it`s instructed to end here?
			ClearFFC(f);//Clean FFC for recycling.
			Game->PlaySound(SFX_DEBUG_TERMINATE); //Play debug terminating sound. Usually silence.
			Quit();//Finita la comedia.
		}
	}
}

//Multiple waitframes activated one after another.
void LweaponWaitframes (ffc f, lweapon l, bool quitoninvalid, int numframes){
	for (int i=1; i<= numframes; i++){
		LweaponWaitframe (f, l, quitoninvalid);
	}
}


//Updates Lweapon`s direction depending on FFC`s velocity. Needed for proper interaction with shielded enemies.
void LweaponDirUpdate( ffc f, lweapon l){
	if ((f->Vx==0)&&(f->Vy==0)) return;
	if (!LweaponFlagIsSet(l, LWF_8WAY)) l->Dir=RadianAngleDir4(ArcTan(f->Vx, f->Vy));
	else l->Dir=RadianAngleDir8(ArcTan(f->Vx, f->Vy));
	if (LweaponFlagIsSet(l, LWF_IGNORE_ENEMY_SHIELDS)) l->Dir = GetUnblockableDir(l->Dir);
}

//Puts Lweapon at FFC`s position.
void LweaponPosUpdate( ffc f, lweapon l){
	l->X= f->X;
	l->Y= f->Y;
	if (!LweaponFlagIsSet(l, LWF_MELEE))l->HitXOffset = l->Misc[LWEAPON_MISC_HIT_OFFSET_X];
	if (!LweaponFlagIsSet(l, LWF_MELEE))l->HitYOffset = l->Misc[LWEAPON_MISC_HIT_OFFSET_Y];
	if (!IsSideview()) l->Z = f->Misc[FFC_MISC_Z]; //Z-axis does not exist in sideview screens.
}

//Another way to update lweapon`s position.
//This method uses Draw & Hitbox offsets, and Lweapon can go off-screen without disappearing.
void LweaponPosUpdateAlt(ffc f, lweapon l){
	int HitX = f->X - l->X;
	int HitY = f->Y - l->Y;
	if (!LweaponFlagIsSet(l, LWF_MELEE))l->DrawXOffset = HitX;
	if (!LweaponFlagIsSet(l, LWF_MELEE))l->HitXOffset = HitX + l->Misc[LWEAPON_MISC_HIT_OFFSET_X];
	if (!LweaponFlagIsSet(l, LWF_MELEE))l->DrawYOffset = HitY;
	if (!LweaponFlagIsSet(l, LWF_MELEE))l->HitYOffset = HitY + l->Misc[LWEAPON_MISC_HIT_OFFSET_Y];
	if (!IsSideview()) l->Z = f->Misc[FFC_MISC_Z];
}

//Updates Lweapon`s sprite flipping depending on it`s direction. Uses next sprite for non-cardinal directions.
void LweaponSpriteUpdate (lweapon l){
	if (l->NumFrames==0) l->NumFrames=1;
	int dir = l->Dir;
	if (l->ID==LW_GHOSTED){
		if ((dir<4)||((dir>7)&&(IsEven(dir)))) l->OriginalTile = l->Misc[LWEAPON_MISC_ORIGTILE];
		else l->OriginalTile = l->Misc[LWEAPON_MISC_ORIGTILE]+ (l->TileWidth* l->NumFrames);
	}
 	if ((dir==DIR_UP)||(dir==8)) l->Flip=0;
	else if ((dir==DIR_DOWN)||(dir==12)) l->Flip=2;
	else if ((dir==DIR_LEFT)||(dir==14)) l->Flip=5;
	else if ((dir==DIR_RIGHT)||(dir==10)) l->Flip=4;
	else if ((dir==DIR_RIGHTUP)||(dir==9))l->Flip=0;
	else if ((dir==DIR_LEFTUP)||(dir==15)) l->Flip=1;
	else if ((dir==DIR_LEFTDOWN)||(dir==13)) l->Flip=3;
	else if ((dir==DIR_RIGHTDOWN)||(dir==11)) l->Flip=2;
}

void DrawCustomSprite(lweapon l){
	int layer = CUSTOM_SPRITE_DRAW_LAYER;
	if (l->Behind) layer = 0;
	l->DrawXOffset+=1500;
	int DrawX= l->X + l->DrawXOffset - 1500;
	int DrawY = l->Y + l->DrawYOffset - l->Z - l->DrawZOffset;
	int flip = l->Flip;
	int tile = l->Tile;
	int cset = l->CSet;
	if (LweaponFlagIsSet(l, LWF_MELEE)){
		tile= l->OriginalTile;
		//cset = l->OriginalCSet;
	}
	int rot = 0;
	if (l->Angular){
		rot = 90 + RadtoDeg(l->Angle);
		flip = 0;
	}
	else{
		if (l->Flip==4){
			rot = 90;
			flip = 0;
		}
		else if (l->Flip==5){
			rot =90;
			flip=2;
		}
		else if (l->Flip==6){
			rot = 270;
			flip=2;
		}
		else if (l->Flip==7){
			rot =270;
			flip = 0;
		}
	}
	if (!LweaponFlagIsSet(l, LWF_INVISIBLE))Screen->DrawTile(layer, DrawX, DrawY, tile, l->TileWidth, l->TileHeight, cset, -1, -1, DrawX, DrawY, rot, flip, true, OP_OPAQUE);
}

//A simpler way to draw shadow beneath lweapon. Uses constants from the main library file.
void FastShadow (ffc f, lweapon l){
	bool translucent = (LWEAPON_SHADOW_TRANSLUCENT>0);
	bool flicker = (LWEAPON_SHADOW_FLICKER>0);
	bool static = (!(LWEAPON_SHADOW_NUMFRAMES>1));
	int ltx = l->TileWidth;
	int lty = l->TileHeight;
	if((LWEAPON_LARGE_SHADOW_TILE!=0)&&(ltx>=LWEAPON_LARGE_SHADOW_MIN_WIDTH)&&(lty>=LWEAPON_LARGE_SHADOW_MIN_HEIGHT)){
		static = (!(LWEAPON_LARGE_SHADOW_FRAMES>1));
		}
	DrawShadow(f,l, flicker, translucent, static);
}

//Draws shadow of Lweapon in ground. Internal function.
void DrawShadow(ffc f, lweapon l, bool flickering, bool translucent, bool static){
	if (l->Z == 0) return;
	if (IsSideview()) return;
	if (LWEAPON_SHADOW_TILE == 0) return;
	int counter = f->Misc[FFC_MISC_TIMER];
	int ltx = l->TileWidth;
	int lty = l->TileHeight;
	bool largeshadow = false;
	if((LWEAPON_LARGE_SHADOW_TILE!=0)&&(ltx>=LWEAPON_LARGE_SHADOW_MIN_WIDTH)&&(lty>=LWEAPON_LARGE_SHADOW_MIN_HEIGHT)){
		largeshadow = true;
		}	
	int aspeed = LWEAPON_SHADOW_ASPEED;
	if (largeshadow) aspeed = LWEAPON_LARGE_SHADOW_ANIM_SPEED;
	int numframes = LWEAPON_SHADOW_NUMFRAMES;
	if (largeshadow) numframes = LWEAPON_LARGE_SHADOW_FRAMES;
	counter%=(aspeed*numframes); 
	int tile = LWEAPON_SHADOW_TILE;
	if (largeshadow) tile = LWEAPON_LARGE_SHADOW_TILE;
	int Lx = l->X + l->DrawXOffset;
	int Ly = l->Y + l->DrawYOffset;
	int sizex = 1;
	if (largeshadow) sizex = 2;
	int sizey = 1;
	if (largeshadow) sizey = 2;
	int cset = LWEAPON_SHADOW_CSET;
	if (largeshadow) cset = LWEAPON_LARGE_SHADOW_CSET;
	if ((IsOdd(counter))&&flickering) return;
	int offset = sizex*(Floor(counter/aspeed));
	if (!static) tile += offset;
	int trindex = OP_OPAQUE;
	if (translucent) trindex = OP_TRANS;
	Screen->DrawTile(1, Lx, Ly, tile, sizex, sizey, cset, -1, -1, 0, 0, 0, 0, true, trindex);
	return;
}

//Terminates melee lweapon automatically, if Link is unable to continue using it, like after getting hit
//or getting major treasure.
void TerminateLweaponOnLA(ffc f, lweapon l){
	if (Link->Action==LA_FROZEN) return;
	if (Link->Action >2) TerminateLweapon (f, l);
}

//Displays given value. Straight from stdExtra.zh
void LweaponDebugValue ( int num, float value){
	Screen->DrawInteger(6, 100, 2+10*num, FONT_S, 1, 15, -1, -1, value, 0, OP_OPAQUE);
}

//Updates lweapon`s internal timer. resets every 1/2 hour.
void UpdateTimer(ffc f){
	f->Misc[FFC_MISC_TIMER]++;
	if (f->Misc[FFC_MISC_TIMER]>=108000)f->Misc[FFC_MISC_TIMER]=0;
}

//Returns unblockable version of given lweapon/eweapon direction.
int GetUnblockableDir(int dir){
	if (dir==DIR_UP)return 8;
	if (dir==DIR_DOWN)return 12;
	if (dir==DIR_LEFT)return 14;
	if (dir==DIR_RIGHT)return 10;
	if (dir==DIR_RIGHTUP)return 9;
	if (dir==DIR_RIGHTDOWN)return 11;
	if (dir==DIR_LEFTDOWN)return 13;
	if (dir==DIR_LEFTUP)return 15;
	return dir;
}

//Returns normal(blockable) version of given lweapon/eweapon direction.
int GetBlockableDir(int dir){
	if (dir==8)return 0;
	if (dir==12)return 1;
	if (dir==14)return 2;
	if (dir==10)return 3;
	if (dir==9)return 4;
	if (dir==11)return 5;
	if (dir==13)return 6;
	if (dir==15)return 7;
	return dir;
}