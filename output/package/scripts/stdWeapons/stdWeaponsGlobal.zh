global script stdWeaponsInit{
	void run(){
		InitLweaponZH();
	}
}

global script StdWeaponsActive{
	void run(){
		while(true){			
			UpdateLweaponZH();
			
			Waitdraw();			
			
			Waitframe();
		}
	}
}

void InitLweaponZH(){
	InitCustomDefenses();
}

//Template for stdWeapons-related global functions.
void UpdateLweaponZH(){
	UpdateParticles();
}

//Main particle update function. Uses DrawOffset variables to actually display particle at it`s position so it does not disappear on touching screen edges
void UpdateParticles(){
	lweapon anim;
	for (int i=1; i<= Screen->NumLWeapons(); i++){
		anim = Screen->LoadLWeapon(i);
		if (anim->ID == LW_PARTICLE){
				if (((anim->Misc[LWEAPON_MISC_PARTICLE_AFFECTED_BY_GRAVITY])>0)&&(IsSideview())){// Determine gravity movement.
					if ((anim->Misc[LWEAPON_MISC_PARTICLE_VY]) < TERMINAL_VELOCITY) anim->Misc[LWEAPON_MISC_PARTICLE_AY] = GRAVITY;
					else {
						anim->Misc[LWEAPON_MISC_PARTICLE_AY] = 0;
						anim->Misc[LWEAPON_MISC_PARTICLE_VY] = TERMINAL_VELOCITY;
					}
				}
				//Next update particle velocity depending on acceleration.
				anim->Misc[LWEAPON_MISC_PARTICLE_VX] = (anim->Misc[LWEAPON_MISC_PARTICLE_VX])+(anim->Misc[LWEAPON_MISC_PARTICLE_AX]);
				anim->Misc[LWEAPON_MISC_PARTICLE_VY] = (anim->Misc[LWEAPON_MISC_PARTICLE_VY])+(anim->Misc[LWEAPON_MISC_PARTICLE_AY]);
				//Then update pseudo-position of particle depending on velocity.
				anim->Misc[LWEAPON_MISC_PARTICLE_XPOS] = (anim->Misc[LWEAPON_MISC_PARTICLE_XPOS])+(anim->Misc[LWEAPON_MISC_PARTICLE_VX]);
				anim->Misc[LWEAPON_MISC_PARTICLE_YPOS] = (anim->Misc[LWEAPON_MISC_PARTICLE_YPOS])+(anim->Misc[LWEAPON_MISC_PARTICLE_VY]);
				//And finally calculate and apply DrawOffset values to Lweapons.
				anim->DrawXOffset = (anim->Misc[LWEAPON_MISC_PARTICLE_XPOS]) - (anim->X);
				anim->DrawYOffset = (anim->Misc[LWEAPON_MISC_PARTICLE_YPOS]) - (anim->Y);
				//Remove particle if it falls off bottom of the screen on sideview areas.
				if (((anim->Misc[LWEAPON_MISC_PARTICLE_AFFECTED_BY_GRAVITY])>0)&&((anim->Misc[LWEAPON_MISC_PARTICLE_YPOS])>176)){
					Remove(anim);
				}
				if (anim->X+anim->DrawXOffset>256) Remove(anim);
				if (anim->X+anim->DrawXOffset<-(anim->TileWidth*16)) Remove(anim);
				if (anim->Y+anim->DrawYOffset>176) Remove(anim);
				if (anim->Y+anim->DrawYOffset<-(anim->TileHeight*16)) Remove(anim);
				if ((anim->X<20000)&&(anim->Damage>0))anim->DeadState = WDS_ALIVE;
				if (anim->Damage>0) anim->HitXOffset= anim->DrawXOffset+anim->Misc[LWEAPON_MISC_PARTICLE_DAMAGE_X_OFFSET];
				if (anim->Damage>0) anim->HitYOffset= anim->DrawYOffset+anim->Misc[LWEAPON_MISC_PARTICLE_DAMAGE_Y_OFFSET];
				if (anim->Damage>0)UseEnemyDefense(anim, 0, anim->Misc[LWEAPON_MISC_PARTICLE_DAMAGE_ENEMY_DEFENSE]);
				//DrawLweaponHitbox(anim);
				//Update life timer and remove PARTICLE if it hits 0.
				if ((anim->Misc[LWEAPON_MISC_PARTICLE_TIMEOUT])>0) anim->Misc[LWEAPON_MISC_PARTICLE_TIMEOUT]--;
				if ((anim->Misc[LWEAPON_MISC_PARTICLE_TIMEOUT])==0) Remove(anim);
		}
	}
}