Compiling 'scrolling_debug.zs'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
Pass 5: Checking code paths
Pass 6: Generating object code
Pass 7: Assembling
Success!
Compile finished with exit code '0' (success)
=== METADATA (elided)
{
  "currentFileSymbols": 4,
  "symbols": 21,
  "identifiers": 106
}
PUSHR REFDMAPDATA; void run() Body Start
PUSHARGSV 0 0.0006
SETR D4 SP2
ALLOCATEMEMV D2 13 0; while(true) #2 Body [Opt:AlwaysOn] Start
STORE D2 0.0005
WRITEPODSTRING D2 "OX/OY %d %d\n"
LOAD D2 0.0005; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETV D2 3
PUSHR D2
POP D0
PUSHVARGR GAMESCROLLING
SETV D2 4
PUSHR D2
POP D0
PUSHVARGR GAMESCROLLING; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0005
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 6 0
STORE D2 0.0004
WRITEPODSTRING D2 "OX/OY"
PUSHV 7; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHARGSV 0 0.0002
PUSHV 2
PUSHV 1
PUSHV 15
PUSHV 0
LOAD D2 0.0004
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D3 0.0004
DEALLOCATEMEMR D3
PUSHV 7; InlineFunc[void screendata::DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHV 40
PUSHV 0
PUSHV 2
PUSHV 1
PUSHV 15
PUSHARGSV -1 0.0002
SETV D2 3
PUSHR D2
POP D0
PUSHR GAMESCROLLING
PUSHV 0
PUSHV 128; InlineFunc[void screendata::DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Params End
DRAWINTR; InlineFunc[void screendata::DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Body End
PUSHV 7; InlineFunc[void screendata::DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHV 120
PUSHV 0
PUSHV 2
PUSHV 1
PUSHV 15
PUSHARGSV -1 0.0002
SETV D2 4
PUSHR D2
POP D0
PUSHR GAMESCROLLING
PUSHV 0
PUSHV 128; InlineFunc[void screendata::DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Params End
DRAWINTR; InlineFunc[void screendata::DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Body End
ALLOCATEMEMV D2 13 0
STORE D2 0.0003
WRITEPODSTRING D2 "NX/NY %d %d\n"
LOAD D2 0.0003; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETV D2 1
PUSHR D2
POP D0
PUSHVARGR GAMESCROLLING
SETV D2 2
PUSHR D2
POP D0
PUSHVARGR GAMESCROLLING; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0003
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 6 0
STORE D2 0.0002
WRITEPODSTRING D2 "NX/NY"
PUSHV 7; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHV 0
PUSHV 8
PUSHV 2
PUSHV 1
PUSHV 15
PUSHV 0
LOAD D2 0.0002
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D3 0.0002
DEALLOCATEMEMR D3
PUSHV 7; InlineFunc[void screendata::DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHV 40
PUSHV 8
PUSHV 2
PUSHV 1
PUSHV 15
PUSHARGSV -1 0.0002
SETV D2 1
PUSHR D2
POP D0
PUSHR GAMESCROLLING
PUSHV 0
PUSHV 128; InlineFunc[void screendata::DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Params End
DRAWINTR; InlineFunc[void screendata::DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Body End
PUSHV 7; InlineFunc[void screendata::DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHV 120
PUSHV 8
PUSHV 2
PUSHV 1
PUSHV 15
PUSHARGSV -1 0.0002
SETV D2 2
PUSHR D2
POP D0
PUSHR GAMESCROLLING
PUSHV 0
PUSHV 128; InlineFunc[void screendata::DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Params End
DRAWINTR; InlineFunc[void screendata::DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Body End
SETV D2 0; if() #448 Test
PUSHR D2
POP D0
SETR D2 GAMESCROLLING
COMPAREV D2 -1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 223 ==; Test 'if'
SETR D2 LINKX; if() #448 Body Start
PUSHR D2
SETV D2 1
PUSHR D2
POP D0
SETR D2 GAMESCROLLING
POP D3
ADDR D2 D3
STORE D2 0.0001
SETR D2 LINKY
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
SETR D2 GAMESCROLLING
POP D3
ADDR D2 D3
STORE D2 0
PUSHV 3; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 20
PUSHARGSV 1 0.0002
PUSHV 3
PUSHARGSV -1 0.0002
PUSHARGSV 0 0.0005
PUSHV 1
PUSHV 128; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWCOMBOR; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0016; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
SETV D2 3
PUSHR D2
POP D0
SETR D2 GAMESCROLLING
ADDV D2 128
STORE D2 0.0001
SETV D2 4
PUSHR D2
POP D0
SETR D2 GAMESCROLLING
ADDV D2 88
STORE D2 0
PUSHV 3; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 21
PUSHARGSV 1 0.0002
PUSHV 3
PUSHARGSV -1 0.0002
PUSHARGSV 0 0.0005
PUSHV 1
PUSHV 128; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWCOMBOR; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0016; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
SETV D2 1
PUSHR D2
POP D0
SETR D2 GAMESCROLLING
ADDV D2 128
STORE D2 0.0001
SETV D2 2
PUSHR D2
POP D0
SETR D2 GAMESCROLLING
ADDV D2 88
STORE D2 0
PUSHV 3; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 44
PUSHARGSV 1 0.0002
PUSHV 3
PUSHARGSV -1 0.0002
PUSHARGSV 0 0.0005
PUSHV 1
PUSHV 128; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWCOMBOR; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0016; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End AND if() #448 Body End
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #2 Body [Opt:AlwaysOn] End
GOTO 4; while() #2 End AND [Opt:NeverRet] AND void run() Body End


ALLOCATEGMEMV D2 4096 0; void run() Body Start
SETR GD1 D2
QUIT; void run() Body End