stderr:

Compiling 'NewbieBoss.z'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
NewbieBoss.z Line 3463 @ Columns 4-29 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3461    
3462    if(attack>=91&&attack<=93){
3463        vars[EZBI_SPEEDUPCOUNTER] = 0;
            ^~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3464 @ Columns 4-24 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3462    if(attack>=91&&attack<=93){
3463        vars[EZBI_SPEEDUPCOUNTER] = 0;
3464        vars[EZBI_INITSPEED] = ghost->Step;
            ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3466 @ Columns 5-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3464    vars[EZBI_INITSPEED] = ghost->Step;
3465    if(attack==91){
3466        vars[EZBI_MAXSPEEDCOUNTER] = FRAMES_EZB_SPEEDUP;
            ^~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3467 @ Columns 5-24 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3465    if(attack==91){
3466        vars[EZBI_MAXSPEEDCOUNTER] = FRAMES_EZB_SPEEDUP;
3467        vars[EZBI_TOPSPEED] = vars[EZBI_INITSPEED]*2;
            ^~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3467 @ Columns 27-47 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3465    if(attack==91){
3466        vars[EZBI_MAXSPEEDCOUNTER] = FRAMES_EZB_SPEEDUP;
3467        vars[EZBI_TOPSPEED] = vars[EZBI_INITSPEED]*2;
                                  ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3470 @ Columns 5-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3468    }
3469    else if(attack==92){
3470        vars[EZBI_MAXSPEEDCOUNTER] = FRAMES_EZB_SPEEDUP*2;
            ^~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3471 @ Columns 5-24 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3469    else if(attack==92){
3470        vars[EZBI_MAXSPEEDCOUNTER] = FRAMES_EZB_SPEEDUP*2;
3471        vars[EZBI_TOPSPEED] = vars[EZBI_INITSPEED]*3;
            ^~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3471 @ Columns 27-47 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3469    else if(attack==92){
3470        vars[EZBI_MAXSPEEDCOUNTER] = FRAMES_EZB_SPEEDUP*2;
3471        vars[EZBI_TOPSPEED] = vars[EZBI_INITSPEED]*3;
                                  ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3474 @ Columns 5-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3472    }
3473    else if(attack==93){
3474        vars[EZBI_MAXSPEEDCOUNTER] = FRAMES_EZB_SPEEDUP*3;
            ^~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3475 @ Columns 5-24 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3473    else if(attack==93){
3474        vars[EZBI_MAXSPEEDCOUNTER] = FRAMES_EZB_SPEEDUP*3;
3475        vars[EZBI_TOPSPEED] = vars[EZBI_INITSPEED]*4;
            ^~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3475 @ Columns 27-47 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3473    else if(attack==93){
3474        vars[EZBI_MAXSPEEDCOUNTER] = FRAMES_EZB_SPEEDUP*3;
3475        vars[EZBI_TOPSPEED] = vars[EZBI_INITSPEED]*4;
                                  ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3480 @ Columns 3-30 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3478    }
3479    
3480    attackPool[1+attackPool[0]] = attack;
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3480 @ Columns 16-29 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3478    }
3479    
3480    attackPool[1+attackPool[0]] = attack;
                     ^~~~~~~~~~~~~


NewbieBoss.z Line 3481 @ Columns 5-18 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3479    
3480    attackPool[1+attackPool[0]] = attack;
3481    ++attackPool[0];
          ^~~~~~~~~~~~~


NewbieBoss.z Line 3500 @ Columns 8-18 - Warning S108: Arrays should be explicitly typed - change `npc` to `npc[]`

3498    void EZB_AddSummon(npc n, npc summons){
3499        for(int i=0; i<256; ++i){
3500            if(!summons[i]->isValid()){
                    ^~~~~~~~~~


NewbieBoss.z Line 3501 @ Columns 5-15 - Warning S108: Arrays should be explicitly typed - change `npc` to `npc[]`

3499    for(int i=0; i<256; ++i){
3500        if(!summons[i]->isValid()){
3501            summons[i] = n;
                ^~~~~~~~~~


NewbieBoss.z Line 3486 @ Columns 3-34 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3484    if(form==0)
3485        return;
3486    attackPool[101+attackPool[100]] = form;
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3486 @ Columns 18-33 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3484    if(form==0)
3485        return;
3486    attackPool[101+attackPool[100]] = form;
                       ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3487 @ Columns 5-20 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3485        return;
3486    attackPool[101+attackPool[100]] = form;
3487    ++attackPool[100];
          ^~~~~~~~~~~~~~~


NewbieBoss.z Line 2855 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2853    }
2854    int EZB_AngleDir(ffc this, npc ghost, int vars, int angle){
2855        int flags = vars[EZBI_FLAGS];
                        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3348 @ Columns 6-25 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3346    int i;
3347    int startIndex = 0;
3348    if(vars[EZBI_BSBUFFER]==0)
           ^~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3351 @ Columns 14-36 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3349        startIndex = 100;
3350    
3351    int size = vars[startIndex+011+6];
                   ^~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3310 @ Columns 6-25 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3308    int i;
3309    int startIndex = 0;
3310    if(vars[EZBI_BSBUFFER]==0)
           ^~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3313 @ Columns 16-36 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3311        startIndex = 100;
3312    
3313    Ghost_CSet = vars[startIndex+000];
                     ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3315 @ Columns 20-40 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3313    Ghost_CSet = vars[startIndex+000];
3314    if(!onlyDefenses){
3315        ghost->Damage = vars[startIndex+001];
                            ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3316 @ Columns 26-46 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3314    if(!onlyDefenses){
3315        ghost->Damage = vars[startIndex+001];
3316        ghost->WeaponDamage = vars[startIndex+002];
                                  ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3317 @ Columns 20-40 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3315    ghost->Damage = vars[startIndex+001];
3316    ghost->WeaponDamage = vars[startIndex+002];
3317    ghost->Hunger = vars[startIndex+003];
                        ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3318 @ Columns 18-38 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3316    ghost->WeaponDamage = vars[startIndex+002];
3317    ghost->Hunger = vars[startIndex+003];
3318    ghost->Rate = vars[startIndex+004];
                      ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3319 @ Columns 22-42 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3317    ghost->Hunger = vars[startIndex+003];
3318    ghost->Rate = vars[startIndex+004];
3319    ghost->Haltrate = vars[startIndex+005];
                          ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3320 @ Columns 20-40 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3318    ghost->Rate = vars[startIndex+004];
3319    ghost->Haltrate = vars[startIndex+005];
3320    ghost->Homing = vars[startIndex+006];
                        ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3321 @ Columns 18-38 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3319    ghost->Haltrate = vars[startIndex+005];
3320    ghost->Homing = vars[startIndex+006];
3321    ghost->Step = vars[startIndex+007];
                      ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3322 @ Columns 20-40 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3320    ghost->Homing = vars[startIndex+006];
3321    ghost->Step = vars[startIndex+007];
3322    ghost->Weapon = vars[startIndex+008];
                        ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3323 @ Columns 21-41 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3321    ghost->Step = vars[startIndex+007];
3322    ghost->Weapon = vars[startIndex+008];
3323    ghost->ItemSet = vars[startIndex+009];
                         ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3324 @ Columns 17-37 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3322    ghost->Weapon = vars[startIndex+008];
3323    ghost->ItemSet = vars[startIndex+009];
3324    ghost->SFX = vars[startIndex+010];
                     ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3327 @ Columns 5-16 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3325    
3326    for(i=0; i<11; ++i){
3327        vars[300+i] = vars[startIndex+011+i];
            ^~~~~~~~~~~


NewbieBoss.z Line 3327 @ Columns 19-41 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3325    
3326    for(i=0; i<11; ++i){
3327        vars[300+i] = vars[startIndex+011+i];
                          ^~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3332 @ Columns 24-46 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3330    
3331    for(i=0; i<18; ++i){
3332        ghost->Defense[i] = vars[startIndex+022+i];
                                ^~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3335 @ Columns 16-36 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3333    }
3334    if(includeHP){
3335        ghost->HP = vars[startIndex+040];
                        ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3338 @ Columns 3-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3336        Ghost_HP = ghost->HP;
3337    }
3338    vars[EZBI_CURFORMID] = vars[startIndex+041];
        ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3338 @ Columns 26-46 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3336        Ghost_HP = ghost->HP;
3337    }
3338    vars[EZBI_CURFORMID] = vars[startIndex+041];
                               ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3340 @ Columns 6-25 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3338        vars[EZBI_CURFORMID] = vars[startIndex+041];
3339    
3340        if(vars[EZBI_BSBUFFER]==0)
               ^~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3341 @ Columns 4-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3339    
3340        if(vars[EZBI_BSBUFFER]==0)
3341            vars[EZBI_BSBUFFER] = 1;
                ^~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3343 @ Columns 4-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3341        vars[EZBI_BSBUFFER] = 1;
3342    else
3343        vars[EZBI_BSBUFFER] = 0;
            ^~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3256 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3254    npc n = CreateNPCAt(newForm, 128, -1000);
3255    
3256    vars[000] = Ghost_CSet;
        ^~~~~~~~~


NewbieBoss.z Line 3257 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3255    
3256    vars[000] = Ghost_CSet;
3257    vars[001] = ghost->Damage;
        ^~~~~~~~~


NewbieBoss.z Line 3258 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3256    vars[000] = Ghost_CSet;
3257    vars[001] = ghost->Damage;
3258    vars[002] = ghost->WeaponDamage;
        ^~~~~~~~~


NewbieBoss.z Line 3259 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3257    vars[001] = ghost->Damage;
3258    vars[002] = ghost->WeaponDamage;
3259    vars[003] = ghost->Hunger;
        ^~~~~~~~~


NewbieBoss.z Line 3260 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3258    vars[002] = ghost->WeaponDamage;
3259    vars[003] = ghost->Hunger;
3260    vars[004] = ghost->Rate;
        ^~~~~~~~~


NewbieBoss.z Line 3261 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3259    vars[003] = ghost->Hunger;
3260    vars[004] = ghost->Rate;
3261    vars[005] = ghost->Haltrate;
        ^~~~~~~~~


NewbieBoss.z Line 3262 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3260    vars[004] = ghost->Rate;
3261    vars[005] = ghost->Haltrate;
3262    vars[006] = ghost->Homing;
        ^~~~~~~~~


NewbieBoss.z Line 3263 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3261    vars[005] = ghost->Haltrate;
3262    vars[006] = ghost->Homing;
3263    vars[007] = ghost->Step;
        ^~~~~~~~~


NewbieBoss.z Line 3264 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3262    vars[006] = ghost->Homing;
3263    vars[007] = ghost->Step;
3264    vars[008] = ghost->Weapon;
        ^~~~~~~~~


NewbieBoss.z Line 3265 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3263    vars[007] = ghost->Step;
3264    vars[008] = ghost->Weapon;
3265    vars[009] = ghost->ItemSet;
        ^~~~~~~~~


NewbieBoss.z Line 3266 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3264    vars[008] = ghost->Weapon;
3265    vars[009] = ghost->ItemSet;
3266    vars[010] = ghost->SFX;
        ^~~~~~~~~


NewbieBoss.z Line 3268 @ Columns 4-15 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3266    vars[010] = ghost->SFX;
3267    for(i=0; i<11; ++i){
3268        vars[011+i] = ghost->Attributes[i];
            ^~~~~~~~~~~


NewbieBoss.z Line 3271 @ Columns 4-15 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3269    }
3270    for(i=0; i<18; ++i){
3271        vars[022+i] = ghost->Defense[i];
            ^~~~~~~~~~~


NewbieBoss.z Line 3273 @ Columns 3-11 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3271        vars[022+i] = ghost->Defense[i];
3272    }
3273    vars[40] = ghost->HP;
        ^~~~~~~~


NewbieBoss.z Line 3274 @ Columns 3-11 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3272    }
3273    vars[40] = ghost->HP;
3274    vars[41] = ghost->ID;
        ^~~~~~~~


NewbieBoss.z Line 3276 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3274    vars[41] = ghost->ID;
3275    
3276    vars[100] = n->CSet;
        ^~~~~~~~~


NewbieBoss.z Line 3277 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3275    
3276    vars[100] = n->CSet;
3277    vars[101] = n->Damage;
        ^~~~~~~~~


NewbieBoss.z Line 3278 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3276    vars[100] = n->CSet;
3277    vars[101] = n->Damage;
3278    vars[102] = n->WeaponDamage;
        ^~~~~~~~~


NewbieBoss.z Line 3279 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3277    vars[101] = n->Damage;
3278    vars[102] = n->WeaponDamage;
3279    vars[103] = n->Hunger;
        ^~~~~~~~~


NewbieBoss.z Line 3280 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3278    vars[102] = n->WeaponDamage;
3279    vars[103] = n->Hunger;
3280    vars[104] = n->Rate;
        ^~~~~~~~~


NewbieBoss.z Line 3281 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3279    vars[103] = n->Hunger;
3280    vars[104] = n->Rate;
3281    vars[105] = n->Haltrate;
        ^~~~~~~~~


NewbieBoss.z Line 3282 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3280    vars[104] = n->Rate;
3281    vars[105] = n->Haltrate;
3282    vars[106] = n->Homing;
        ^~~~~~~~~


NewbieBoss.z Line 3283 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3281    vars[105] = n->Haltrate;
3282    vars[106] = n->Homing;
3283    vars[107] = n->Step;
        ^~~~~~~~~


NewbieBoss.z Line 3284 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3282    vars[106] = n->Homing;
3283    vars[107] = n->Step;
3284    vars[108] = n->Weapon;
        ^~~~~~~~~


NewbieBoss.z Line 3285 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3283    vars[107] = n->Step;
3284    vars[108] = n->Weapon;
3285    vars[109] = n->ItemSet;
        ^~~~~~~~~


NewbieBoss.z Line 3286 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3284    vars[108] = n->Weapon;
3285    vars[109] = n->ItemSet;
3286    vars[110] = n->SFX;
        ^~~~~~~~~


NewbieBoss.z Line 3288 @ Columns 4-15 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3286    vars[110] = n->SFX;
3287    for(i=0; i<11; ++i){
3288        vars[111+i] = n->Attributes[i];
            ^~~~~~~~~~~


NewbieBoss.z Line 3291 @ Columns 4-15 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3289    }
3290    for(i=0; i<18; ++i){
3291        vars[122+i] = n->Defense[i];
            ^~~~~~~~~~~


NewbieBoss.z Line 3293 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3291        vars[122+i] = n->Defense[i];
3292    }
3293    vars[140] = n->HP;
        ^~~~~~~~~


NewbieBoss.z Line 3294 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3292    }
3293    vars[140] = n->HP;
3294    vars[141] = n->ID;
        ^~~~~~~~~


NewbieBoss.z Line 3296 @ Columns 3-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3294    vars[141] = n->ID;
3295    
3296    vars[EZBI_BSBUFFER] = 0;
        ^~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3237 @ Columns 3-18 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

3235    }
3236    void EZB_CreateDeathExplosion(int x, int y){
3237        Game->PlaySound(SFX_BOMB);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 3080 @ Columns 47-61 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3078    if(state==0){
3079        if(frame%4<2)
3080            EZB_DrawLaser(layer, x, y, width, angle, laserColors[2]);
                                                         ^~~~~~~~~~~~~~


NewbieBoss.z Line 3083 @ Columns 52-66 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3081    }
3082    else{
3083        EZB_DrawLaser3Color(layer, x, y, width, angle, laserColors[0], laserColors[1], laserColors[2]);
                                                           ^~~~~~~~~~~~~~


NewbieBoss.z Line 3083 @ Columns 68-82 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3081    }
3082    else{
3083        EZB_DrawLaser3Color(layer, x, y, width, angle, laserColors[0], laserColors[1], laserColors[2]);
                                                                           ^~~~~~~~~~~~~~


NewbieBoss.z Line 3083 @ Columns 84-98 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3081    }
3082    else{
3083        EZB_DrawLaser3Color(layer, x, y, width, angle, laserColors[0], laserColors[1], laserColors[2]);
                                                                                           ^~~~~~~~~~~~~~


NewbieBoss.z Line 3093 @ Columns 18-32 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3091    int w; int wRand;
3092    if(state==0){
3093        clr = Choose(laserColors[1], laserColors[2]);
                         ^~~~~~~~~~~~~~


NewbieBoss.z Line 3093 @ Columns 34-48 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3091    int w; int wRand;
3092    if(state==0){
3093        clr = Choose(laserColors[1], laserColors[2]);
                                         ^~~~~~~~~~~~~~


NewbieBoss.z Line 3116 @ Columns 18-32 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3114    }
3115    else{
3116        clr = Choose(laserColors[0], laserColors[1], laserColors[2]);
                         ^~~~~~~~~~~~~~


NewbieBoss.z Line 3116 @ Columns 34-48 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3114    }
3115    else{
3116        clr = Choose(laserColors[0], laserColors[1], laserColors[2]);
                                         ^~~~~~~~~~~~~~


NewbieBoss.z Line 3116 @ Columns 50-64 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3114    }
3115    else{
3116        clr = Choose(laserColors[0], laserColors[1], laserColors[2]);
                                                         ^~~~~~~~~~~~~~


NewbieBoss.z Line 2758 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2756    int h = Ghost_TileHeight;
2757    
2758    int flags = vars[EZBI_FLAGS];
                    ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 2924 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2922    }
2923    void EZB_FaceAngle(ffc this, npc ghost, int vars, int angle){
2924        int flags = vars[EZBI_FLAGS];
                        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 2931 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2929    }
2930    void EZB_FaceDir(ffc this, npc ghost, int vars, int dir){
2931        int flags = vars[EZBI_FLAGS];
                        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 2917 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2915    }
2916    void EZB_FaceLink(ffc this, npc ghost, int vars){
2917        int flags = vars[EZBI_FLAGS];
                        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 2686 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2684    }
2685    eweapon EZB_Fire(ffc this, npc ghost, int vars, int x, int y, int angle, int step, int wflags){
2686        int flags = vars[EZBI_FLAGS];
                        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 2690 @ Columns 17-34 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2688    if(flags&EZBF_UNBLOCKABLE)
2689        wflags |= EWF_UNBLOCKABLE;
2690    int fireSFX = vars[EZBI_WPNSFX];
                      ^~~~~~~~~~~~~~~~~


NewbieBoss.z Line 2691 @ Columns 17-34 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2689        wflags |= EWF_UNBLOCKABLE;
2690    int fireSFX = vars[EZBI_WPNSFX];
2691    int fireSPR = vars[EZBI_WPNSPR];
                      ^~~~~~~~~~~~~~~~~


NewbieBoss.z Line 2596 @ Columns 23-42 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2594    void EZB_FiringAnim(ffc this, npc ghost, int vars, int delayType){
2595        int i;
2596        int movementStyle = vars[EZBI_WALKTYPE];
                                ^~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 2597 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2595    int i;
2596    int movementStyle = vars[EZBI_WALKTYPE];
2597    int flags = vars[EZBI_FLAGS];
                    ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 2598 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2596    int movementStyle = vars[EZBI_WALKTYPE];
2597    int flags = vars[EZBI_FLAGS];
2598    int combo = vars[EZBI_COMBO];
                    ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3613 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3611    void EZB_FishWizardUpdate(ffc this, npc ghost, int vars, int movementMisc){
3612        int i;
3613        int flags = vars[EZBI_FLAGS];
                        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3627 @ Columns 3-18 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3625    //11 - Phase Cooldown
3626    //12 - Knockback
3627    movementMisc[2] = 0;
        ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3628 @ Columns 3-18 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3626    //12 - Knockback
3627    movementMisc[2] = 0;
3628    movementMisc[3] = 0;
        ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3629 @ Columns 6-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3627    movementMisc[2] = 0;
3628    movementMisc[3] = 0;
3629    if(movementMisc[7]==0){ //Walking
           ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3630 @ Columns 7-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3628    movementMisc[3] = 0;
3629    if(movementMisc[7]==0){ //Walking
3630        if(movementMisc[1])
               ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3631 @ Columns 7-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3629    if(movementMisc[7]==0){ //Walking
3630        if(movementMisc[1])
3631            --movementMisc[1];
                  ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3632 @ Columns 7-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3630    if(movementMisc[1])
3631        --movementMisc[1];
3632    if(movementMisc[11])
           ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3633 @ Columns 7-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3631        --movementMisc[1];
3632    if(movementMisc[11])
3633        --movementMisc[11];
              ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3634 @ Columns 4-19 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3632    if(movementMisc[11])
3633        --movementMisc[11];
3634    movementMisc[0] = Ghost_ConstantWalk4(movementMisc[0], ghost->Step, ghost->Rate, ghost->Homing, ghost->Hunger);
        ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3634 @ Columns 42-57 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3632    if(movementMisc[11])
3633        --movementMisc[11];
3634    movementMisc[0] = Ghost_ConstantWalk4(movementMisc[0], ghost->Step, ghost->Rate, ghost->Homing, ghost->Hunger);
                                              ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3636 @ Columns 27-42 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3634    movementMisc[0] = Ghost_ConstantWalk4(movementMisc[0], ghost->Step, ghost->Rate, ghost->Homing, ghost->Hunger);
3635    //Ice Wave Attack
3636    if(EZB_InSight(ghost)&&movementMisc[1]==0){
                               ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3637 @ Columns 5-20 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3635    //Ice Wave Attack
3636    if(EZB_InSight(ghost)&&movementMisc[1]==0){
3637        movementMisc[1] = ghost->Haltrate*10;
            ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3638 @ Columns 5-20 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3636    if(EZB_InSight(ghost)&&movementMisc[1]==0){
3637        movementMisc[1] = ghost->Haltrate*10;
3638        movementMisc[2] = 1; //Regular Attack
            ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3641 @ Columns 28-43 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3639    }
3640    //Diagonal Dash Attack
3641    else if(Rand(1, 90)==1&&movementMisc[1]==0){
                                ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3670 @ Columns 6-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3668    if(step==0)
3669        step = 0.5;
3670    movementMisc[3] = 1; //Constant Attack
        ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3671 @ Columns 6-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3669        step = 0.5;
3670    movementMisc[3] = 1; //Constant Attack
3671    movementMisc[4] = vX;
        ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3672 @ Columns 6-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3670    movementMisc[3] = 1; //Constant Attack
3671    movementMisc[4] = vX;
3672    movementMisc[5] = vY;
        ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3673 @ Columns 6-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3671    movementMisc[4] = vX;
3672    movementMisc[5] = vY;
3673    movementMisc[6] = dist/step;
        ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3674 @ Columns 6-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3672    movementMisc[5] = vY;
3673    movementMisc[6] = dist/step;
3674    movementMisc[7] = 1; //Dash State
        ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3675 @ Columns 6-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3673    movementMisc[6] = dist/step;
3674    movementMisc[7] = 1; //Dash State
3675    movementMisc[8] = vars[EZBI_FLAGS];
        ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3675 @ Columns 24-40 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3673    movementMisc[6] = dist/step;
3674    movementMisc[7] = 1; //Dash State
3675    movementMisc[8] = vars[EZBI_FLAGS];
                          ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3677 @ Columns 7-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3675    movementMisc[8] = vars[EZBI_FLAGS];
3676    if(!Ghost_FlagIsSet(GHF_IGNORE_ALL_TERRAIN))
3677        movementMisc[8] = GHF_IGNORE_ALL_TERRAIN;
            ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3679 @ Columns 7-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3677        movementMisc[8] = GHF_IGNORE_ALL_TERRAIN;
3678    if(!Ghost_FlagIsSet(GHF_IGNORE_NO_ENEMY))
3679        movementMisc[9] = GHF_FLYING_ENEMY;
            ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3681 @ Columns 7-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3679        movementMisc[9] = GHF_FLYING_ENEMY;
3680    if(Ghost_FlagIsSet(GHF_KNOCKBACK))
3681        movementMisc[12] = GHF_KNOCKBACK;
            ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3685 @ Columns 6-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3683    Ghost_SetFlag(GHF_IGNORE_NO_ENEMY);
3684    Ghost_UnsetFlag(GHF_KNOCKBACK);
3685    movementMisc[10] = step;
        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3686 @ Columns 6-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3684    Ghost_UnsetFlag(GHF_KNOCKBACK);
3685    movementMisc[10] = step;
3686    movementMisc[11] = ghost->Haltrate*10;
        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3690 @ Columns 11-26 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3688        }
3689    }
3690    else if(movementMisc[7]==1){
                ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3691 @ Columns 17-32 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3689    }
3690    else if(movementMisc[7]==1){
3691        Ghost_MoveXY(movementMisc[4]*movementMisc[10], movementMisc[5]*movementMisc[10], 0);
                         ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3691 @ Columns 33-49 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3689    }
3690    else if(movementMisc[7]==1){
3691        Ghost_MoveXY(movementMisc[4]*movementMisc[10], movementMisc[5]*movementMisc[10], 0);
                                         ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3691 @ Columns 51-66 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3689    }
3690    else if(movementMisc[7]==1){
3691        Ghost_MoveXY(movementMisc[4]*movementMisc[10], movementMisc[5]*movementMisc[10], 0);
                                                           ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3691 @ Columns 67-83 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3689    }
3690    else if(movementMisc[7]==1){
3691        Ghost_MoveXY(movementMisc[4]*movementMisc[10], movementMisc[5]*movementMisc[10], 0);
                                                                           ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3692 @ Columns 7-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3690    else if(movementMisc[7]==1){
3691        Ghost_MoveXY(movementMisc[4]*movementMisc[10], movementMisc[5]*movementMisc[10], 0);
3692        if(movementMisc[6]%4<2)
               ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3696 @ Columns 6-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3694    else
3695        ghost->DrawYOffset = -2;
3696    --movementMisc[6];
          ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3697 @ Columns 7-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3695        ghost->DrawYOffset = -2;
3696    --movementMisc[6];
3697    if(movementMisc[6]<=0){
           ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3699 @ Columns 8-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3697    if(movementMisc[6]<=0){
3698        ghost->DrawYOffset = -2;
3699        if(movementMisc[4]<0)
               ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3703 @ Columns 8-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3701    else
3702        Ghost_Dir = DIR_RIGHT;
3703    if(movementMisc[8])
           ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3705 @ Columns 8-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3703    if(movementMisc[8])
3704        Ghost_UnsetFlag(GHF_IGNORE_ALL_TERRAIN);
3705    if(movementMisc[9])
           ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3707 @ Columns 8-24 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3705    if(movementMisc[9])
3706        Ghost_UnsetFlag(GHF_IGNORE_NO_ENEMY);
3707    if(movementMisc[12])
           ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3709 @ Columns 5-20 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3707    if(movementMisc[12])
3708        Ghost_SetFlag(GHF_KNOCKBACK);
3709    movementMisc[7] = 0;
        ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3710 @ Columns 5-20 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3708        Ghost_SetFlag(GHF_KNOCKBACK);
3709    movementMisc[7] = 0;
3710    movementMisc[0] = 0;
        ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3369 @ Columns 17-35 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3367    void EZB_GetExtraProperties(ffc this, npc ghost, int id, int vars, int attack1, int attack2, int attack3, int attackPool, int laserColors){
3368        int i; int j;
3369        int special = vars[EZBI_SPECIAL];
                          ^~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3370 @ Columns 3-16 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3368    int i; int j;
3369    int special = vars[EZBI_SPECIAL];
3370    attackPool[0] = 0;
        ^~~~~~~~~~~~~


NewbieBoss.z Line 3380 @ Columns 3-20 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3378    
3379    //If attack 1 is a transformation, set which one
3380    vars[EZBI_BSTYPE] = 0;
        ^~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3383 @ Columns 4-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3381    if(attack1==50||attack1==51||attack1==71){
3382        EZB_AddTransformation(this, ghost, vars, special, attackPool);
3383        vars[EZBI_BSTYPE] = 1;
            ^~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3385 @ Columns 5-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3383    vars[EZBI_BSTYPE] = 1;
3384    if(attack1==51)
3385        vars[EZBI_BSTYPE] = 2;
            ^~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3387 @ Columns 5-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3385        vars[EZBI_BSTYPE] = 2;
3386    else if(attack1==71)
3387        vars[EZBI_BSTYPE] = 3;
            ^~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3421 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3419    if(f->InitD[0]==id){
3420        if(f->InitD[1]||f->InitD[2]||f->InitD[3]){
3421            laserColors[0] = f->InitD[1];
                ^~~~~~~~~~~~~~


NewbieBoss.z Line 3422 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3420    if(f->InitD[1]||f->InitD[2]||f->InitD[3]){
3421        laserColors[0] = f->InitD[1];
3422        laserColors[1] = f->InitD[2];
            ^~~~~~~~~~~~~~


NewbieBoss.z Line 3423 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3421    laserColors[0] = f->InitD[1];
3422    laserColors[1] = f->InitD[2];
3423    laserColors[2] = f->InitD[3];
        ^~~~~~~~~~~~~~


NewbieBoss.z Line 3426 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3424    }
3425    if(f->InitD[4]||f->InitD[5]||f->InitD[6]){
3426        laserColors[3] = f->InitD[4];
            ^~~~~~~~~~~~~~


NewbieBoss.z Line 3427 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3425    if(f->InitD[4]||f->InitD[5]||f->InitD[6]){
3426        laserColors[3] = f->InitD[4];
3427        laserColors[4] = f->InitD[5];
            ^~~~~~~~~~~~~~


NewbieBoss.z Line 3428 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3426    laserColors[3] = f->InitD[4];
3427    laserColors[4] = f->InitD[5];
3428    laserColors[5] = f->InitD[6];
        ^~~~~~~~~~~~~~


NewbieBoss.z Line 3436 @ Columns 7-35 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3434    if(f->InitD[0]==id){
3435        if(f->InitD[1]>0)
3436            vars[EZBI_TRANSFORMCOOLDOWN] = f->InitD[1]-1;
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3438 @ Columns 7-35 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3436        vars[EZBI_TRANSFORMCOOLDOWN] = f->InitD[1]-1;
3437    if(f->InitD[2]>1)
3438        vars[EZBI_TRANSFORMVARIANCE] = f->InitD[2];
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3449 @ Columns 6-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3447    
3448    //If the enemy has transformations in the pool but no transforming attack, assume 51, a complete transformation
3449    if(attackPool[100]&&vars[EZBI_BSTYPE]==0){
           ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3449 @ Columns 23-40 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3447    
3448    //If the enemy has transformations in the pool but no transforming attack, assume 51, a complete transformation
3449    if(attackPool[100]&&vars[EZBI_BSTYPE]==0){
                            ^~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3450 @ Columns 4-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3448    //If the enemy has transformations in the pool but no transforming attack, assume 51, a complete transformation
3449    if(attackPool[100]&&vars[EZBI_BSTYPE]==0){
3450        vars[EZBI_BSTYPE] = 2;
            ^~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3454 @ Columns 6-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3452    
3453    //If the enemy has transformations in the pool, select one at random to load for the next transformation
3454    if(attackPool[100]){
           ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3455 @ Columns 34-71 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3453    //If the enemy has transformations in the pool, select one at random to load for the next transformation
3454    if(attackPool[100]){
3455        EZB_Barriershift_Store(ghost, attackPool[101+Rand(attackPool[100])], vars);
                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3455 @ Columns 54-69 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3453    //If the enemy has transformations in the pool, select one at random to load for the next transformation
3454    if(attackPool[100]){
3455        EZB_Barriershift_Store(ghost, attackPool[101+Rand(attackPool[100])], vars);
                                                              ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3128 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3126    }
3127    int EZB_GetSpecialCombo(ffc this, npc ghost, int vars, int graphic){
3128        int flags = vars[EZBI_FLAGS];
                        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3129 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3127    int EZB_GetSpecialCombo(ffc this, npc ghost, int vars, int graphic){
3128        int flags = vars[EZBI_FLAGS];
3129        int combo = vars[EZBI_COMBO];
                        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3362 @ Columns 3-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3360    }
3361    void EZB_InitVars(int vars){
3362        vars[EZBI_TRANSFORMCOOLDOWN] = 0;
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3363 @ Columns 3-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3361    void EZB_InitVars(int vars){
3362        vars[EZBI_TRANSFORMCOOLDOWN] = 0;
3363        vars[EZBI_TRANSFORMVARIANCE] = 0;
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3365 @ Columns 3-29 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3363    vars[EZBI_TRANSFORMVARIANCE] = 0;
3364    
3365    vars[EZBI_MAXSPEEDCOUNTER] = 0;
        ^~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3492 @ Columns 7-17 - Warning S108: Arrays should be explicitly typed - change `npc` to `npc[]`

3490    int count;
3491    for(int i=0; i<256; ++i){
3492        if(summons[i]->isValid()){
               ^~~~~~~~~~


NewbieBoss.z Line 3530 @ Columns 3-18 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

3528    }
3529    void EZB_SetLaserArray(int arr, int count, int index, int x, int y, int scale, int angle, int chargeTime, int upTime, int damage){
3530        Game->PlaySound(SFX_EZB_LASERCHARGE);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 3531 @ Columns 3-13 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3529    void EZB_SetLaserArray(int arr, int count, int index, int x, int y, int scale, int angle, int chargeTime, int upTime, int damage){
3530        Game->PlaySound(SFX_EZB_LASERCHARGE);
3531        arr[index] = x;
            ^~~~~~~~~~


NewbieBoss.z Line 3532 @ Columns 3-19 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3530    Game->PlaySound(SFX_EZB_LASERCHARGE);
3531    arr[index] = x;
3532    arr[count+index] = y;
        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3533 @ Columns 3-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3531    arr[index] = x;
3532    arr[count+index] = y;
3533    arr[count*2+index] = scale;
        ^~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3534 @ Columns 3-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3532    arr[count+index] = y;
3533    arr[count*2+index] = scale;
3534    arr[count*3+index] = angle;
        ^~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3535 @ Columns 3-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3533    arr[count*2+index] = scale;
3534    arr[count*3+index] = angle;
3535    arr[count*4+index] = chargeTime;
        ^~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3536 @ Columns 3-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3534    arr[count*3+index] = angle;
3535    arr[count*4+index] = chargeTime;
3536    arr[count*5+index] = upTime;
        ^~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3537 @ Columns 3-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3535    arr[count*4+index] = chargeTime;
3536    arr[count*5+index] = upTime;
3537    arr[count*6+index] = 1;
        ^~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3538 @ Columns 3-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3536    arr[count*5+index] = upTime;
3537    arr[count*6+index] = 1;
3538    arr[count*7+index] = 0;
        ^~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3539 @ Columns 3-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3537    arr[count*6+index] = 1;
3538    arr[count*7+index] = 0;
3539    arr[count*8+index] = damage;
        ^~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 2774 @ Columns 14-29 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2772    }
2773    void EZB_Teleport(ffc this, npc ghost, int vars, int x, int y, int teleFrames){
2774        int size = vars[EZBI_SIZE];
                       ^~~~~~~~~~~~~~~


NewbieBoss.z Line 2775 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2773    void EZB_Teleport(ffc this, npc ghost, int vars, int x, int y, int teleFrames){
2774        int size = vars[EZBI_SIZE];
2775        int flags = vars[EZBI_FLAGS];
                        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 2776 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2774    int size = vars[EZBI_SIZE];
2775    int flags = vars[EZBI_FLAGS];
2776    int combo = vars[EZBI_COMBO];
                    ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 2784 @ Columns 3-18 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2782    h = Clamp(h, 1, 4);
2783    
2784    Game->PlaySound(SFX_EZB_TELEPORT);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2648 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2646        return;
2647    
2648    int flags = vars[EZBI_FLAGS];
                    ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3508 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3506    void EZB_UpdateLaserArray(int arr, int laserColors, int count){
3507        for(int i=0; i<count; ++i){
3508            if(arr[count*6+i]){
                   ^~~~~~~~~~~~~~


NewbieBoss.z Line 3509 @ Columns 8-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3507    for(int i=0; i<count; ++i){
3508        if(arr[count*6+i]){
3509            if(arr[count*6+i]==1){
                   ^~~~~~~~~~~~~~


NewbieBoss.z Line 3510 @ Columns 35-41 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3508    if(arr[count*6+i]){
3509        if(arr[count*6+i]==1){
3510            EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], 0, laserColors, -1, 0, arr[count*7+i], arr[count*4+i]);
                                             ^~~~~~


NewbieBoss.z Line 3510 @ Columns 43-55 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3508    if(arr[count*6+i]){
3509        if(arr[count*6+i]==1){
3510            EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], 0, laserColors, -1, 0, arr[count*7+i], arr[count*4+i]);
                                                     ^~~~~~~~~~~~


NewbieBoss.z Line 3510 @ Columns 57-71 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3508    if(arr[count*6+i]){
3509        if(arr[count*6+i]==1){
3510            EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], 0, laserColors, -1, 0, arr[count*7+i], arr[count*4+i]);
                                                                   ^~~~~~~~~~~~~~


NewbieBoss.z Line 3510 @ Columns 73-87 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3508    if(arr[count*6+i]){
3509        if(arr[count*6+i]==1){
3510            EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], 0, laserColors, -1, 0, arr[count*7+i], arr[count*4+i]);
                                                                                   ^~~~~~~~~~~~~~


NewbieBoss.z Line 3510 @ Columns 112-126 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3508    if(arr[count*6+i]){
3509        if(arr[count*6+i]==1){
3510            EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], 0, laserColors, -1, 0, arr[count*7+i], arr[count*4+i]);
                                                                                                                          ^~~~~~~~~~~~~~


NewbieBoss.z Line 3510 @ Columns 128-142 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3508    if(arr[count*6+i]){
3509        if(arr[count*6+i]==1){
3510            EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], 0, laserColors, -1, 0, arr[count*7+i], arr[count*4+i]);
                                                                                                                                          ^~~~~~~~~~~~~~


NewbieBoss.z Line 3511 @ Columns 8-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3509    if(arr[count*6+i]==1){
3510        EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], 0, laserColors, -1, 0, arr[count*7+i], arr[count*4+i]);
3511        ++arr[count*7+i];
              ^~~~~~~~~~~~~~


NewbieBoss.z Line 3512 @ Columns 9-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3510    EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], 0, laserColors, -1, 0, arr[count*7+i], arr[count*4+i]);
3511    ++arr[count*7+i];
3512    if(arr[count*7+i]>=arr[count*4+i]){
           ^~~~~~~~~~~~~~


NewbieBoss.z Line 3512 @ Columns 25-39 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3510    EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], 0, laserColors, -1, 0, arr[count*7+i], arr[count*4+i]);
3511    ++arr[count*7+i];
3512    if(arr[count*7+i]>=arr[count*4+i]){
                           ^~~~~~~~~~~~~~


NewbieBoss.z Line 3513 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

3511    ++arr[count*7+i];
3512    if(arr[count*7+i]>=arr[count*4+i]){
3513        Game->PlaySound(SFX_EZB_LASER);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 3514 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3512    if(arr[count*7+i]>=arr[count*4+i]){
3513        Game->PlaySound(SFX_EZB_LASER);
3514        arr[count*7+i] = 0;
            ^~~~~~~~~~~~~~


NewbieBoss.z Line 3515 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3513    Game->PlaySound(SFX_EZB_LASER);
3514    arr[count*7+i] = 0;
3515    arr[count*6+i] = 2;
        ^~~~~~~~~~~~~~


NewbieBoss.z Line 3518 @ Columns 13-27 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3516        }
3517    }
3518    else if(arr[count*6+i]==2){
                ^~~~~~~~~~~~~~


NewbieBoss.z Line 3519 @ Columns 35-41 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3517    }
3518    else if(arr[count*6+i]==2){
3519        EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], arr[count*8+i], laserColors, -1, 1, arr[count*7+i], arr[count*5+i]);
                                         ^~~~~~


NewbieBoss.z Line 3519 @ Columns 43-55 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3517    }
3518    else if(arr[count*6+i]==2){
3519        EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], arr[count*8+i], laserColors, -1, 1, arr[count*7+i], arr[count*5+i]);
                                                 ^~~~~~~~~~~~


NewbieBoss.z Line 3519 @ Columns 57-71 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3517    }
3518    else if(arr[count*6+i]==2){
3519        EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], arr[count*8+i], laserColors, -1, 1, arr[count*7+i], arr[count*5+i]);
                                                               ^~~~~~~~~~~~~~


NewbieBoss.z Line 3519 @ Columns 73-87 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3517    }
3518    else if(arr[count*6+i]==2){
3519        EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], arr[count*8+i], laserColors, -1, 1, arr[count*7+i], arr[count*5+i]);
                                                                               ^~~~~~~~~~~~~~


NewbieBoss.z Line 3519 @ Columns 89-103 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3517    }
3518    else if(arr[count*6+i]==2){
3519        EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], arr[count*8+i], laserColors, -1, 1, arr[count*7+i], arr[count*5+i]);
                                                                                               ^~~~~~~~~~~~~~


NewbieBoss.z Line 3519 @ Columns 125-139 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3517    }
3518    else if(arr[count*6+i]==2){
3519        EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], arr[count*8+i], laserColors, -1, 1, arr[count*7+i], arr[count*5+i]);
                                                                                                                                   ^~~~~~~~~~~~~~


NewbieBoss.z Line 3519 @ Columns 141-155 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3517    }
3518    else if(arr[count*6+i]==2){
3519        EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], arr[count*8+i], laserColors, -1, 1, arr[count*7+i], arr[count*5+i]);
                                                                                                                                                   ^~~~~~~~~~~~~~


NewbieBoss.z Line 3520 @ Columns 8-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3518    else if(arr[count*6+i]==2){
3519        EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], arr[count*8+i], laserColors, -1, 1, arr[count*7+i], arr[count*5+i]);
3520        ++arr[count*7+i];
              ^~~~~~~~~~~~~~


NewbieBoss.z Line 3521 @ Columns 9-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3519    EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], arr[count*8+i], laserColors, -1, 1, arr[count*7+i], arr[count*5+i]);
3520    ++arr[count*7+i];
3521    if(arr[count*7+i]>=arr[count*5+i]){
           ^~~~~~~~~~~~~~


NewbieBoss.z Line 3521 @ Columns 25-39 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3519    EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], arr[count*8+i], laserColors, -1, 1, arr[count*7+i], arr[count*5+i]);
3520    ++arr[count*7+i];
3521    if(arr[count*7+i]>=arr[count*5+i]){
                           ^~~~~~~~~~~~~~


NewbieBoss.z Line 3522 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3520    ++arr[count*7+i];
3521    if(arr[count*7+i]>=arr[count*5+i]){
3522        arr[count*7+i] = 0;
            ^~~~~~~~~~~~~~


NewbieBoss.z Line 3523 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3521    if(arr[count*7+i]>=arr[count*5+i]){
3522        arr[count*7+i] = 0;
3523        arr[count*6+i] = 0;
            ^~~~~~~~~~~~~~


NewbieBoss.z Line 3721 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3719    }
3720    void EZB_Waitframe(ffc this, npc ghost, int vars){
3721        int flags = vars[EZBI_FLAGS];
                        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3729 @ Columns 7-28 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3727    }
3728    
3729    if(!vars[EZBI_ATTACKFLAG]){
            ^~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3730 @ Columns 7-33 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3728    
3729    if(!vars[EZBI_ATTACKFLAG]){
3730        if(vars[EZBI_MAXSPEEDCOUNTER]){
               ^~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3731 @ Columns 8-33 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3729    if(!vars[EZBI_ATTACKFLAG]){
3730        if(vars[EZBI_MAXSPEEDCOUNTER]){
3731            if(vars[EZBI_SPEEDUPCOUNTER]<vars[EZBI_MAXSPEEDCOUNTER]){
                   ^~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3731 @ Columns 34-60 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3729    if(!vars[EZBI_ATTACKFLAG]){
3730        if(vars[EZBI_MAXSPEEDCOUNTER]){
3731            if(vars[EZBI_SPEEDUPCOUNTER]<vars[EZBI_MAXSPEEDCOUNTER]){
                                             ^~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3732 @ Columns 8-33 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3730    if(vars[EZBI_MAXSPEEDCOUNTER]){
3731        if(vars[EZBI_SPEEDUPCOUNTER]<vars[EZBI_MAXSPEEDCOUNTER]){
3732            ++vars[EZBI_SPEEDUPCOUNTER];
                  ^~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3733 @ Columns 20-40 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3731    if(vars[EZBI_SPEEDUPCOUNTER]<vars[EZBI_MAXSPEEDCOUNTER]){
3732        ++vars[EZBI_SPEEDUPCOUNTER];
3733        ghost->Step = vars[EZBI_INITSPEED]+(vars[EZBI_TOPSPEED]-vars[EZBI_INITSPEED])*(vars[EZBI_SPEEDUPCOUNTER]/vars[EZBI_MAXSPEEDCOUNTER]);
                          ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3733 @ Columns 42-61 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3731    if(vars[EZBI_SPEEDUPCOUNTER]<vars[EZBI_MAXSPEEDCOUNTER]){
3732        ++vars[EZBI_SPEEDUPCOUNTER];
3733        ghost->Step = vars[EZBI_INITSPEED]+(vars[EZBI_TOPSPEED]-vars[EZBI_INITSPEED])*(vars[EZBI_SPEEDUPCOUNTER]/vars[EZBI_MAXSPEEDCOUNTER]);
                                                ^~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3733 @ Columns 62-82 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3731    if(vars[EZBI_SPEEDUPCOUNTER]<vars[EZBI_MAXSPEEDCOUNTER]){
3732        ++vars[EZBI_SPEEDUPCOUNTER];
3733        ghost->Step = vars[EZBI_INITSPEED]+(vars[EZBI_TOPSPEED]-vars[EZBI_INITSPEED])*(vars[EZBI_SPEEDUPCOUNTER]/vars[EZBI_MAXSPEEDCOUNTER]);
                                                                    ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3733 @ Columns 85-110 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3731    if(vars[EZBI_SPEEDUPCOUNTER]<vars[EZBI_MAXSPEEDCOUNTER]){
3732        ++vars[EZBI_SPEEDUPCOUNTER];
3733        ghost->Step = vars[EZBI_INITSPEED]+(vars[EZBI_TOPSPEED]-vars[EZBI_INITSPEED])*(vars[EZBI_SPEEDUPCOUNTER]/vars[EZBI_MAXSPEEDCOUNTER]);
                                                                                           ^~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3733 @ Columns 111-137 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3731    if(vars[EZBI_SPEEDUPCOUNTER]<vars[EZBI_MAXSPEEDCOUNTER]){
3732        ++vars[EZBI_SPEEDUPCOUNTER];
3733        ghost->Step = vars[EZBI_INITSPEED]+(vars[EZBI_TOPSPEED]-vars[EZBI_INITSPEED])*(vars[EZBI_SPEEDUPCOUNTER]/vars[EZBI_MAXSPEEDCOUNTER]);
                                                                                                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3738 @ Columns 6-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3736    }
3737    
3738    if(vars[EZBI_BSTYPE]==3){
           ^~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3742 @ Columns 5-24 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3740    ghost->HP = 1;
3741    Ghost_HP = 1;
3742    vars[EZBI_BSISDEAD] = 1;
        ^~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 356 @ Columns 5-20 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

354    else
355        stepAngle = WrapDegrees(Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY())+Rand(-ghost->Homing, ghost->Homing));
356    Game->PlaySound(SFX_JUMP);
       ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 388 @ Columns 5-20 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

386    else if(movementStyle==9){ //Rapid hop
387        stepAngle = WrapDegrees(Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY())+Rand(-ghost->Haltrate, ghost->Haltrate));
388        Game->PlaySound(SFX_JUMP);
           ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 688 @ Columns 11-26 - Warning S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.

686    }
687    else if(constantAttack==46){ //Summon
688        if ( Screen->NumNPCs() < EZB_TOTAL_SUMMON_CAP && EZB_NumSummons(summons) < EZB_SUMMON_CAP ) {
                ^~~~~~~~~~~~~~~


INFO: Use [NumNPCs] instead!
NewbieBoss.z Line 689 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

687    else if(constantAttack==46){ //Summon
688        if ( Screen->NumNPCs() < EZB_TOTAL_SUMMON_CAP && EZB_NumSummons(summons) < EZB_SUMMON_CAP ) {
689            Game->PlaySound(SFX_EZB_SUMMON);
               ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 737 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

735    k = 2;
736    Ghost_Data = combo;
737    Game->PlaySound(SFX_EZB_DASH);
       ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 880 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

878    EZB_FiringAnim(this, ghost, vars, 0);
879    angle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY());
880    Game->PlaySound(SFX_EZB_LASERCHARGE);
       ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 885 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

883        EZB_Waitframe(this, ghost, vars);
884    }
885    Game->PlaySound(SFX_EZB_LASER);
       ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 895 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

893    EZB_FaceLink(this, ghost, vars);
894    EZB_FiringAnim(this, ghost, vars, 2);
895    Game->PlaySound(SFX_EZB_LASERCHARGE);
       ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 900 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

898        EZB_Waitframe(this, ghost, vars);
899    }
900    Game->PlaySound(SFX_EZB_LASER);
       ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 911 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

909    angle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY());
910    k = (w*8+h*8)/2;
911    Game->PlaySound(SFX_EZB_LASERCHARGE);
       ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 921 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

919        EZB_Waitframe(this, ghost, vars);
920    }
921    Game->PlaySound(SFX_EZB_LASER);
       ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 937 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

935    k = Choose(-1, 1);
936    angle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY())+45;
937    Game->PlaySound(SFX_EZB_LASERCHARGE);
       ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 948 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

946        EZB_Waitframe(this, ghost, vars);
947    }
948    Game->PlaySound(SFX_EZB_LASER);
       ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 982 @ Columns 11-26 - Warning S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.

980    }
981    if(attack==19){ //Summon 1 Enemy
982        if ( Screen->NumNPCs() < EZB_TOTAL_SUMMON_CAP && EZB_NumSummons(summons) < EZB_SUMMON_CAP ) {
                ^~~~~~~~~~~~~~~


INFO: Use [NumNPCs] instead!
NewbieBoss.z Line 984 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

982    if ( Screen->NumNPCs() < EZB_TOTAL_SUMMON_CAP && EZB_NumSummons(summons) < EZB_SUMMON_CAP ) {
983        EZB_FiringAnim(this, ghost, vars, 0);
984        Game->PlaySound(SFX_EZB_SUMMON);
           ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 991 @ Columns 11-26 - Warning S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.

989    }
990    if(attack==20){ //Summon 2 Enemies
991        if ( Screen->NumNPCs() < EZB_TOTAL_SUMMON_CAP && EZB_NumSummons(summons) < EZB_SUMMON_CAP ) {
                ^~~~~~~~~~~~~~~


INFO: Use [NumNPCs] instead!
NewbieBoss.z Line 993 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

991    if ( Screen->NumNPCs() < EZB_TOTAL_SUMMON_CAP && EZB_NumSummons(summons) < EZB_SUMMON_CAP ) {
992        EZB_FiringAnim(this, ghost, vars, 0);
993        Game->PlaySound(SFX_EZB_SUMMON);
           ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1002 @ Columns 11-26 - Warning S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.

1000    }
1001    if(attack==21){ //Summon 3 Enemies
1002        if ( Screen->NumNPCs() < EZB_TOTAL_SUMMON_CAP && EZB_NumSummons(summons) < EZB_SUMMON_CAP ) {
                 ^~~~~~~~~~~~~~~


INFO: Use [NumNPCs] instead!
NewbieBoss.z Line 1004 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1002    if ( Screen->NumNPCs() < EZB_TOTAL_SUMMON_CAP && EZB_NumSummons(summons) < EZB_SUMMON_CAP ) {
1003        EZB_FiringAnim(this, ghost, vars, 0);
1004        Game->PlaySound(SFX_EZB_SUMMON);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1083 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1081    EZB_FiringAnim(this, ghost, vars, 2);
1082    k = Rand(8, 152);
1083    Game->PlaySound(SFX_EZB_LASERCHARGE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1089 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1087    }
1088    for(j=0; j<8; ++j){
1089        Game->PlaySound(SFX_EZB_LASER);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1101 @ Columns 10-25 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1099    if(j<7){ //dont show the last laser
1100        if(i==0)
1101            Game->PlaySound(SFX_EZB_LASERCHARGE);
                ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1112 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1110    k = 0;
1111    while(true){
1112        Game->PlaySound(SFX_EZB_LASERCHARGE);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1119 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1117        EZB_Waitframe(this, ghost, vars);
1118    }
1119    Game->PlaySound(SFX_EZB_LASER);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1149 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1147    k = 1;
1148    Ghost_Data = combo;
1149    Game->PlaySound(SFX_EZB_DASH);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1163 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1161    angle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY());
1162    k = 2;
1163    Game->PlaySound(SFX_EZB_DASH);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1188 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1186    angle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY());
1187    k = 2;
1188    Game->PlaySound(SFX_EZB_DASH);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1202 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1200    EZB_FaceLink(this, ghost, vars);
1201    k = 2;
1202    Game->PlaySound(SFX_EZB_DASH);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1222 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1220    angle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY());
1221    EZB_FaceAngle(this, ghost, vars, angle);
1222    Game->PlaySound(SFX_JUMP);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1246 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1244    angle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY());
1245    EZB_FaceAngle(this, ghost, vars, angle);
1246    Game->PlaySound(SFX_JUMP);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1269 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1267    EZB_FaceAngle(this, ghost, vars, angle);
1268    
1269    Game->PlaySound(SFX_JUMP);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1282 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1280    angle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY());
1281    
1282    Game->PlaySound(SFX_JUMP);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1302 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1300        EZB_Waitframe(this, ghost, vars);
1301    }
1302    Game->PlaySound(SFX_EZB_SHOCKWAVE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1315 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1313    
1314    Ghost_Data = combo;
1315    Game->PlaySound(SFX_JUMP);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1335 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1333        EZB_Waitframe(this, ghost, vars);
1334    }
1335    Game->PlaySound(SFX_FALL);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1345 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1343        EZB_Waitframe(this, ghost, vars);
1344    }
1345    Game->PlaySound(SFX_EZB_SHAKE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1347 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1345    Game->PlaySound(SFX_EZB_SHAKE);
1346    Screen->Quake = 20;
1347    Game->PlaySound(SFX_EZB_SHOCKWAVE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1359 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1357    
1358    Ghost_Data = combo;
1359    Game->PlaySound(SFX_JUMP);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1379 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1377        EZB_Waitframe(this, ghost, vars);
1378    }
1379    Game->PlaySound(SFX_FALL);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1389 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1387        EZB_Waitframe(this, ghost, vars);
1388    }
1389    Game->PlaySound(SFX_EZB_SHAKE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1404 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1402    
1403    Ghost_Data = combo;
1404    Game->PlaySound(SFX_JUMP);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1424 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1422        EZB_Waitframe(this, ghost, vars);
1423    }
1424    Game->PlaySound(SFX_FALL);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1434 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1432        EZB_Waitframe(this, ghost, vars);
1433    }
1434    Game->PlaySound(SFX_EZB_SHAKE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1437 @ Columns 21-36 - Warning S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.

1435    Screen->Quake = 20;
1436    k = Rand(4, 7);
1437    for(i=0; i<k&&(Screen->NumNPCs() < EZB_TOTAL_SUMMON_CAP && EZB_NumSummons(summons) < EZB_SUMMON_CAP); ++i){
                       ^~~~~~~~~~~~~~~


INFO: Use [NumNPCs] instead!
NewbieBoss.z Line 1445 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1443            j = m-176;
1444    }
1445    Game->PlaySound(SFX_FALL);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1473 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1471    k = 3;
1472    Ghost_Data = combo;
1473    Game->PlaySound(SFX_EZB_BACKSTEP);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1490 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1488    k = 2;
1489    Ghost_Data = combo;
1490    Game->PlaySound(SFX_EZB_DASH);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1508 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1506    EZB_FaceLink(this, ghost, vars);
1507    EZB_FiringAnim(this, ghost, vars, 2);
1508    Game->PlaySound(SFX_EZB_LASERCHARGE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1513 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1511        EZB_Waitframe(this, ghost, vars);
1512    }
1513    Game->PlaySound(SFX_EZB_LASER);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1535 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1533    Ghost_Jump = 4;
1534    Ghost_Data = combo;
1535    Game->PlaySound(SFX_JUMP);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1557 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1555        EZB_Waitframe(this, ghost, vars);
1556    }
1557    Game->PlaySound(SFX_FALL);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1568 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1566        EZB_Waitframe(this, ghost, vars);
1567    }
1568    Game->PlaySound(SFX_EZB_SHAKE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1570 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1568    Game->PlaySound(SFX_EZB_SHAKE);
1569    Screen->Quake = 4;
1570    Game->PlaySound(SFX_EZB_SHOCKWAVE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1583 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1581    Ghost_Jump = 4;
1582    Ghost_Data = combo;
1583    Game->PlaySound(SFX_JUMP);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1605 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1603        EZB_Waitframe(this, ghost, vars);
1604    }
1605    Game->PlaySound(SFX_FALL);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1616 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1614        EZB_Waitframe(this, ghost, vars);
1615    }
1616    Game->PlaySound(SFX_EZB_SHAKE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1632 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1630    Ghost_Jump = 4;
1631    Ghost_Data = combo;
1632    Game->PlaySound(SFX_JUMP);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1654 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1652        EZB_Waitframe(this, ghost, vars);
1653    }
1654    Game->PlaySound(SFX_FALL);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1665 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1663        EZB_Waitframe(this, ghost, vars);
1664    }
1665    Game->PlaySound(SFX_EZB_SHAKE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1668 @ Columns 21-36 - Warning S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.

1666    Screen->Quake = 4;
1667    k = Rand(2, 3);
1668    for(i=0; i<k&&(Screen->NumNPCs() < EZB_TOTAL_SUMMON_CAP && EZB_NumSummons(summons) < EZB_SUMMON_CAP); ++i){
                       ^~~~~~~~~~~~~~~


INFO: Use [NumNPCs] instead!
NewbieBoss.z Line 1676 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1674            j = m-176;
1675    }
1676    Game->PlaySound(SFX_FALL);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1889 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1887    x = -32+Rand(-32, 32);
1888    y = -32+Rand(-32, 32);
1889    Game->PlaySound(SFX_EZB_LASERCHARGE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1904 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1902        EZB_Waitframe(this, ghost, vars);
1903    }
1904    Game->PlaySound(SFX_EZB_LASER);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1961 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1959        y = Link->Y;
1960    }
1961    Game->PlaySound(SFX_EZB_LASERCHARGE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1982 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1980        y = Link->Y;
1981    }
1982    Game->PlaySound(SFX_EZB_LASER);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2043 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2041    Ghost_X = x-ghost->TileWidth*8;
2042    Ghost_Y = y-ghost->TileHeight*8;
2043    Game->PlaySound(SFX_EZB_DASH);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2058 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2056    if(CenterX(ghost)<0||CenterX(ghost)>255||CenterY(ghost)<0||CenterY(ghost)>175)
2057        break;
2058    Game->PlaySound(SFX_EZB_SHAKE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2069 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2067    angle = Angle(CenterX(ghost), CenterY(ghost), Link->X+8, Link->Y+8);
2068    if(fireSFX)
2069        Game->PlaySound(fireSFX);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2078 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2076    angle = Angle(CenterX(ghost), CenterY(ghost), Link->X+8, Link->Y+8);
2077    if(fireSFX)
2078        Game->PlaySound(fireSFX);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2089 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2087    angle = Angle(CenterX(ghost), CenterY(ghost), Link->X+8, Link->Y+8);
2088    if(fireSFX)
2089        Game->PlaySound(fireSFX);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2109 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2107    }
2108    EZB_FiringAnim(this, ghost, vars, 1);
2109    Game->PlaySound(SFX_EZB_LIGHTNING);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2122 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2120    angle = EZB_DirAngle(Ghost_Dir);
2121    EZB_FiringAnim(this, ghost, vars, 1);
2122    Game->PlaySound(SFX_EZB_LIGHTNING);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2140 @ Columns 8-23 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2138    
2139    if(i%10==0){
2140        Game->PlaySound(SFX_EZB_LIGHTNING);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2152 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2150    angle = EZB_DirAngle(Ghost_Dir);
2151    
2152    Game->PlaySound(SFX_EZB_SWORD);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2170 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2168    angle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY());
2169    
2170    Game->PlaySound(SFX_EZB_SWORD);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2194 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2192    m = -1;
2193    for(j=0; j<3; ++j){
2194        Game->PlaySound(SFX_EZB_SWORD);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2221 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2219    
2220    for(j=0; j<5; ++j){
2221        Game->PlaySound(SFX_EZB_SWORD);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2239 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2237    angle = EZB_DirAngle(Ghost_Dir);
2238    
2239    Game->PlaySound(SFX_EZB_SWORD);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2252 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2250        EZB_Waitframe(this, ghost, vars);
2251    }
2252    Game->PlaySound(SFX_EZB_SWORDCHARGE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2259 @ Columns 8-23 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2257    for(i=0; i<18*8; ++i){
2258        if(i%18==0)
2259            Game->PlaySound(SFX_EZB_SWORDSPIN);
                ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2278 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2276    angle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY());
2277    
2278    Game->PlaySound(SFX_EZB_SWORD);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2283 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2281    arr1[2] = arr1[0]-arr1[1]; //Additional reach of sword
2282    
2283    Game->PlaySound(SFX_EZB_SWORD);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2297 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2295        EZB_Waitframe(this, ghost, vars);
2296    }
2297    Game->PlaySound(SFX_EZB_SWORD);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2316 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2314    
2315    for(j=0; j<10; ++j){
2316        Game->PlaySound(SFX_EZB_SWORD);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2332 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2330    angle = EZB_DirAngle(Ghost_Dir);
2331    
2332    Game->PlaySound(SFX_EZB_SWORD);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2345 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2343        EZB_Waitframe(this, ghost, vars);
2344    }
2345    Game->PlaySound(SFX_EZB_SWORDCHARGE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2352 @ Columns 8-23 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2350    for(i=0; i<18*6; ++i){
2351        if(i%18==0)
2352            Game->PlaySound(SFX_EZB_SWORDSPIN);
                ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2367 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2365        EZB_Waitframe(this, ghost, vars);
2366    }
2367    Game->PlaySound(SFX_EZB_SHAKE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2380 @ Columns 8-23 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2378    for(i=0; i<36; ++i){
2379        if(i==0)
2380            Game->PlaySound(SFX_EZB_SWORDSPIN);
                ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2405 @ Columns 9-24 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2403        EZB_Waitframes(this, ghost, vars, 16);
2404    }
2405    Game->PlaySound(SFX_EZB_BARRIERSHIFT_ONDEATH);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2409 @ Columns 9-24 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2407    }
2408    else{
2409        Game->PlaySound(SFX_EZB_BARRIERSHIFT_ONDEATH);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2425 @ Columns 8-23 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2423        --vars[EZBI_TRANSFORMCOOLDOWN];
2424    else if(j){
2425        Game->PlaySound(SFX_EZB_BARRIERSHIFT);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2439 @ Columns 8-23 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2437        --vars[EZBI_TRANSFORMCOOLDOWN];
2438    else if(j){
2439        Game->PlaySound(SFX_EZB_BARRIERSHIFT);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 3863 @ Columns 4-19 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

3861    
3862    if(fireSFX)
3863        Game->PlaySound(fireSFX);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 3880 @ Columns 10-25 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

3878    for(j=0; j<3; ++j){
3879        if(fireSFX)
3880            Game->PlaySound(fireSFX);
                ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 3891 @ Columns 10-25 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

3889    for(j=0; j<4; ++j){
3890        if(fireSFX)
3891            Game->PlaySound(fireSFX);
                ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 3999 @ Columns 4-20 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3997    tmpX = x+VectorX(dist, angle)+VectorX(dist2, angle+90)+VectorX(randOff, angle+90+angleSkew);
3998    tmpY = y+VectorY(dist, angle)+VectorY(dist2, angle+90)+VectorY(randOff, angle+90+angleSkew);
3999    lightning[2*i+0] = tmpX;
        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 4000 @ Columns 4-20 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3998    tmpY = y+VectorY(dist, angle)+VectorY(dist2, angle+90)+VectorY(randOff, angle+90+angleSkew);
3999    lightning[2*i+0] = tmpX;
4000    lightning[2*i+1] = tmpY;
        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 4013 @ Columns 10-26 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

4011    for(int i=0; i<count-1; ++i){
4012        if(endDist>distPerSegment*i&&endDist<distPerSegment*(i+1)){
4013            x1 = lightning[i*2+0];
                     ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 4014 @ Columns 10-26 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

4012    if(endDist>distPerSegment*i&&endDist<distPerSegment*(i+1)){
4013        x1 = lightning[i*2+0];
4014        y1 = lightning[i*2+1];
                 ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 4015 @ Columns 10-30 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

4013    x1 = lightning[i*2+0];
4014    y1 = lightning[i*2+1];
4015    x2 = lightning[(i+1)*2+0];
             ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 4016 @ Columns 10-30 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

4014    y1 = lightning[i*2+1];
4015    x2 = lightning[(i+1)*2+0];
4016    y2 = lightning[(i+1)*2+1];
             ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 4029 @ Columns 10-26 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

4027    }
4028    else if(startDist>distPerSegment*i&&startDist<distPerSegment*(i+1)){
4029        x1 = lightning[i*2+0];
                 ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 4030 @ Columns 10-26 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

4028    else if(startDist>distPerSegment*i&&startDist<distPerSegment*(i+1)){
4029        x1 = lightning[i*2+0];
4030        y1 = lightning[i*2+1];
                 ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 4031 @ Columns 10-30 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

4029    x1 = lightning[i*2+0];
4030    y1 = lightning[i*2+1];
4031    x2 = lightning[(i+1)*2+0];
             ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 4032 @ Columns 10-30 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

4030    y1 = lightning[i*2+1];
4031    x2 = lightning[(i+1)*2+0];
4032    y2 = lightning[(i+1)*2+1];
             ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 4045 @ Columns 10-26 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

4043    }
4044    else if(startDist<=distPerSegment*i&&endDist>=distPerSegment*(i+1)){
4045        x1 = lightning[i*2+0];
                 ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 4046 @ Columns 10-26 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

4044    else if(startDist<=distPerSegment*i&&endDist>=distPerSegment*(i+1)){
4045        x1 = lightning[i*2+0];
4046        y1 = lightning[i*2+1];
                 ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 4047 @ Columns 10-30 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

4045    x1 = lightning[i*2+0];
4046    y1 = lightning[i*2+1];
4047    x2 = lightning[(i+1)*2+0];
             ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 4048 @ Columns 10-30 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

4046    y1 = lightning[i*2+1];
4047    x2 = lightning[(i+1)*2+0];
4048    y2 = lightning[(i+1)*2+1];
             ^~~~~~~~~~~~~~~~~~~~


Pass 5: Checking code paths
Pass 6: Generating object code
Pass 7: Assembling
Debug: could not resolve symbol "fcc"
Debug: could not resolve symbol "fcc"
Success!
Compile finished with exit code '0' (success)

stdout:

{
  "success": true,
  "diagnostics": [
    {
      "range": {
        "start": {
          "line": 3462,
          "character": 3
        },
        "end": {
          "line": 3462,
          "character": 28
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3463,
          "character": 3
        },
        "end": {
          "line": 3463,
          "character": 23
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3465,
          "character": 4
        },
        "end": {
          "line": 3465,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3466,
          "character": 4
        },
        "end": {
          "line": 3466,
          "character": 23
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3466,
          "character": 26
        },
        "end": {
          "line": 3466,
          "character": 46
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3469,
          "character": 4
        },
        "end": {
          "line": 3469,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3470,
          "character": 4
        },
        "end": {
          "line": 3470,
          "character": 23
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3470,
          "character": 26
        },
        "end": {
          "line": 3470,
          "character": 46
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3473,
          "character": 4
        },
        "end": {
          "line": 3473,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3474,
          "character": 4
        },
        "end": {
          "line": 3474,
          "character": 23
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3474,
          "character": 26
        },
        "end": {
          "line": 3474,
          "character": 46
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3479,
          "character": 2
        },
        "end": {
          "line": 3479,
          "character": 29
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3479,
          "character": 15
        },
        "end": {
          "line": 3479,
          "character": 28
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3480,
          "character": 4
        },
        "end": {
          "line": 3480,
          "character": 17
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3499,
          "character": 7
        },
        "end": {
          "line": 3499,
          "character": 17
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `npc` to `npc[]`"
    },
    {
      "range": {
        "start": {
          "line": 3500,
          "character": 4
        },
        "end": {
          "line": 3500,
          "character": 14
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `npc` to `npc[]`"
    },
    {
      "range": {
        "start": {
          "line": 3485,
          "character": 2
        },
        "end": {
          "line": 3485,
          "character": 33
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3485,
          "character": 17
        },
        "end": {
          "line": 3485,
          "character": 32
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3486,
          "character": 4
        },
        "end": {
          "line": 3486,
          "character": 19
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2854,
          "character": 14
        },
        "end": {
          "line": 2854,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3347,
          "character": 5
        },
        "end": {
          "line": 3347,
          "character": 24
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3350,
          "character": 13
        },
        "end": {
          "line": 3350,
          "character": 35
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3309,
          "character": 5
        },
        "end": {
          "line": 3309,
          "character": 24
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3312,
          "character": 15
        },
        "end": {
          "line": 3312,
          "character": 35
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3314,
          "character": 19
        },
        "end": {
          "line": 3314,
          "character": 39
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3315,
          "character": 25
        },
        "end": {
          "line": 3315,
          "character": 45
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3316,
          "character": 19
        },
        "end": {
          "line": 3316,
          "character": 39
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3317,
          "character": 17
        },
        "end": {
          "line": 3317,
          "character": 37
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3318,
          "character": 21
        },
        "end": {
          "line": 3318,
          "character": 41
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3319,
          "character": 19
        },
        "end": {
          "line": 3319,
          "character": 39
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3320,
          "character": 17
        },
        "end": {
          "line": 3320,
          "character": 37
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3321,
          "character": 19
        },
        "end": {
          "line": 3321,
          "character": 39
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3322,
          "character": 20
        },
        "end": {
          "line": 3322,
          "character": 40
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3323,
          "character": 16
        },
        "end": {
          "line": 3323,
          "character": 36
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3326,
          "character": 4
        },
        "end": {
          "line": 3326,
          "character": 15
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3326,
          "character": 18
        },
        "end": {
          "line": 3326,
          "character": 40
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3331,
          "character": 23
        },
        "end": {
          "line": 3331,
          "character": 45
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3334,
          "character": 15
        },
        "end": {
          "line": 3334,
          "character": 35
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3337,
          "character": 2
        },
        "end": {
          "line": 3337,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3337,
          "character": 25
        },
        "end": {
          "line": 3337,
          "character": 45
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3339,
          "character": 5
        },
        "end": {
          "line": 3339,
          "character": 24
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3340,
          "character": 3
        },
        "end": {
          "line": 3340,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3342,
          "character": 3
        },
        "end": {
          "line": 3342,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3255,
          "character": 2
        },
        "end": {
          "line": 3255,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3256,
          "character": 2
        },
        "end": {
          "line": 3256,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3257,
          "character": 2
        },
        "end": {
          "line": 3257,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3258,
          "character": 2
        },
        "end": {
          "line": 3258,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3259,
          "character": 2
        },
        "end": {
          "line": 3259,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3260,
          "character": 2
        },
        "end": {
          "line": 3260,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3261,
          "character": 2
        },
        "end": {
          "line": 3261,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3262,
          "character": 2
        },
        "end": {
          "line": 3262,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3263,
          "character": 2
        },
        "end": {
          "line": 3263,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3264,
          "character": 2
        },
        "end": {
          "line": 3264,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3265,
          "character": 2
        },
        "end": {
          "line": 3265,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3267,
          "character": 3
        },
        "end": {
          "line": 3267,
          "character": 14
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3270,
          "character": 3
        },
        "end": {
          "line": 3270,
          "character": 14
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3272,
          "character": 2
        },
        "end": {
          "line": 3272,
          "character": 10
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3273,
          "character": 2
        },
        "end": {
          "line": 3273,
          "character": 10
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3275,
          "character": 2
        },
        "end": {
          "line": 3275,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3276,
          "character": 2
        },
        "end": {
          "line": 3276,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3277,
          "character": 2
        },
        "end": {
          "line": 3277,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3278,
          "character": 2
        },
        "end": {
          "line": 3278,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3279,
          "character": 2
        },
        "end": {
          "line": 3279,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3280,
          "character": 2
        },
        "end": {
          "line": 3280,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3281,
          "character": 2
        },
        "end": {
          "line": 3281,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3282,
          "character": 2
        },
        "end": {
          "line": 3282,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3283,
          "character": 2
        },
        "end": {
          "line": 3283,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3284,
          "character": 2
        },
        "end": {
          "line": 3284,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3285,
          "character": 2
        },
        "end": {
          "line": 3285,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3287,
          "character": 3
        },
        "end": {
          "line": 3287,
          "character": 14
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3290,
          "character": 3
        },
        "end": {
          "line": 3290,
          "character": 14
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3292,
          "character": 2
        },
        "end": {
          "line": 3292,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3293,
          "character": 2
        },
        "end": {
          "line": 3293,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3295,
          "character": 2
        },
        "end": {
          "line": 3295,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3236,
          "character": 2
        },
        "end": {
          "line": 3236,
          "character": 17
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 3079,
          "character": 46
        },
        "end": {
          "line": 3079,
          "character": 60
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3082,
          "character": 51
        },
        "end": {
          "line": 3082,
          "character": 65
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3082,
          "character": 67
        },
        "end": {
          "line": 3082,
          "character": 81
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3082,
          "character": 83
        },
        "end": {
          "line": 3082,
          "character": 97
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3092,
          "character": 17
        },
        "end": {
          "line": 3092,
          "character": 31
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3092,
          "character": 33
        },
        "end": {
          "line": 3092,
          "character": 47
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3115,
          "character": 17
        },
        "end": {
          "line": 3115,
          "character": 31
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3115,
          "character": 33
        },
        "end": {
          "line": 3115,
          "character": 47
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3115,
          "character": 49
        },
        "end": {
          "line": 3115,
          "character": 63
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2757,
          "character": 14
        },
        "end": {
          "line": 2757,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2923,
          "character": 14
        },
        "end": {
          "line": 2923,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2930,
          "character": 14
        },
        "end": {
          "line": 2930,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2916,
          "character": 14
        },
        "end": {
          "line": 2916,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2685,
          "character": 14
        },
        "end": {
          "line": 2685,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2689,
          "character": 16
        },
        "end": {
          "line": 2689,
          "character": 33
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2690,
          "character": 16
        },
        "end": {
          "line": 2690,
          "character": 33
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2595,
          "character": 22
        },
        "end": {
          "line": 2595,
          "character": 41
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2596,
          "character": 14
        },
        "end": {
          "line": 2596,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2597,
          "character": 14
        },
        "end": {
          "line": 2597,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3612,
          "character": 14
        },
        "end": {
          "line": 3612,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3626,
          "character": 2
        },
        "end": {
          "line": 3626,
          "character": 17
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3627,
          "character": 2
        },
        "end": {
          "line": 3627,
          "character": 17
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3628,
          "character": 5
        },
        "end": {
          "line": 3628,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3629,
          "character": 6
        },
        "end": {
          "line": 3629,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3630,
          "character": 6
        },
        "end": {
          "line": 3630,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3631,
          "character": 6
        },
        "end": {
          "line": 3631,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3632,
          "character": 6
        },
        "end": {
          "line": 3632,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3633,
          "character": 3
        },
        "end": {
          "line": 3633,
          "character": 18
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3633,
          "character": 41
        },
        "end": {
          "line": 3633,
          "character": 56
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3635,
          "character": 26
        },
        "end": {
          "line": 3635,
          "character": 41
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3636,
          "character": 4
        },
        "end": {
          "line": 3636,
          "character": 19
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3637,
          "character": 4
        },
        "end": {
          "line": 3637,
          "character": 19
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3640,
          "character": 27
        },
        "end": {
          "line": 3640,
          "character": 42
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3669,
          "character": 5
        },
        "end": {
          "line": 3669,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3670,
          "character": 5
        },
        "end": {
          "line": 3670,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3671,
          "character": 5
        },
        "end": {
          "line": 3671,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3672,
          "character": 5
        },
        "end": {
          "line": 3672,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3673,
          "character": 5
        },
        "end": {
          "line": 3673,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3674,
          "character": 5
        },
        "end": {
          "line": 3674,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3674,
          "character": 23
        },
        "end": {
          "line": 3674,
          "character": 39
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3676,
          "character": 6
        },
        "end": {
          "line": 3676,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3678,
          "character": 6
        },
        "end": {
          "line": 3678,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3680,
          "character": 6
        },
        "end": {
          "line": 3680,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3684,
          "character": 5
        },
        "end": {
          "line": 3684,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3685,
          "character": 5
        },
        "end": {
          "line": 3685,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3689,
          "character": 10
        },
        "end": {
          "line": 3689,
          "character": 25
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3690,
          "character": 16
        },
        "end": {
          "line": 3690,
          "character": 31
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3690,
          "character": 32
        },
        "end": {
          "line": 3690,
          "character": 48
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3690,
          "character": 50
        },
        "end": {
          "line": 3690,
          "character": 65
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3690,
          "character": 66
        },
        "end": {
          "line": 3690,
          "character": 82
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3691,
          "character": 6
        },
        "end": {
          "line": 3691,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3695,
          "character": 5
        },
        "end": {
          "line": 3695,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3696,
          "character": 6
        },
        "end": {
          "line": 3696,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3698,
          "character": 7
        },
        "end": {
          "line": 3698,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3702,
          "character": 7
        },
        "end": {
          "line": 3702,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3704,
          "character": 7
        },
        "end": {
          "line": 3704,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3706,
          "character": 7
        },
        "end": {
          "line": 3706,
          "character": 23
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3708,
          "character": 4
        },
        "end": {
          "line": 3708,
          "character": 19
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3709,
          "character": 4
        },
        "end": {
          "line": 3709,
          "character": 19
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3368,
          "character": 16
        },
        "end": {
          "line": 3368,
          "character": 34
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3369,
          "character": 2
        },
        "end": {
          "line": 3369,
          "character": 15
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3379,
          "character": 2
        },
        "end": {
          "line": 3379,
          "character": 19
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3382,
          "character": 3
        },
        "end": {
          "line": 3382,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3384,
          "character": 4
        },
        "end": {
          "line": 3384,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3386,
          "character": 4
        },
        "end": {
          "line": 3386,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3420,
          "character": 6
        },
        "end": {
          "line": 3420,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3421,
          "character": 6
        },
        "end": {
          "line": 3421,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3422,
          "character": 6
        },
        "end": {
          "line": 3422,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3425,
          "character": 6
        },
        "end": {
          "line": 3425,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3426,
          "character": 6
        },
        "end": {
          "line": 3426,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3427,
          "character": 6
        },
        "end": {
          "line": 3427,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3435,
          "character": 6
        },
        "end": {
          "line": 3435,
          "character": 34
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3437,
          "character": 6
        },
        "end": {
          "line": 3437,
          "character": 34
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3448,
          "character": 5
        },
        "end": {
          "line": 3448,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3448,
          "character": 22
        },
        "end": {
          "line": 3448,
          "character": 39
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3449,
          "character": 3
        },
        "end": {
          "line": 3449,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3453,
          "character": 5
        },
        "end": {
          "line": 3453,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3454,
          "character": 33
        },
        "end": {
          "line": 3454,
          "character": 70
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3454,
          "character": 53
        },
        "end": {
          "line": 3454,
          "character": 68
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3127,
          "character": 14
        },
        "end": {
          "line": 3127,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3128,
          "character": 14
        },
        "end": {
          "line": 3128,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3361,
          "character": 2
        },
        "end": {
          "line": 3361,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3362,
          "character": 2
        },
        "end": {
          "line": 3362,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3364,
          "character": 2
        },
        "end": {
          "line": 3364,
          "character": 28
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3491,
          "character": 6
        },
        "end": {
          "line": 3491,
          "character": 16
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `npc` to `npc[]`"
    },
    {
      "range": {
        "start": {
          "line": 3529,
          "character": 2
        },
        "end": {
          "line": 3529,
          "character": 17
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 3530,
          "character": 2
        },
        "end": {
          "line": 3530,
          "character": 12
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3531,
          "character": 2
        },
        "end": {
          "line": 3531,
          "character": 18
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3532,
          "character": 2
        },
        "end": {
          "line": 3532,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3533,
          "character": 2
        },
        "end": {
          "line": 3533,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3534,
          "character": 2
        },
        "end": {
          "line": 3534,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3535,
          "character": 2
        },
        "end": {
          "line": 3535,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3536,
          "character": 2
        },
        "end": {
          "line": 3536,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3537,
          "character": 2
        },
        "end": {
          "line": 3537,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3538,
          "character": 2
        },
        "end": {
          "line": 3538,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2773,
          "character": 13
        },
        "end": {
          "line": 2773,
          "character": 28
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2774,
          "character": 14
        },
        "end": {
          "line": 2774,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2775,
          "character": 14
        },
        "end": {
          "line": 2775,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2783,
          "character": 2
        },
        "end": {
          "line": 2783,
          "character": 17
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2647,
          "character": 14
        },
        "end": {
          "line": 2647,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3507,
          "character": 6
        },
        "end": {
          "line": 3507,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3508,
          "character": 7
        },
        "end": {
          "line": 3508,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3509,
          "character": 34
        },
        "end": {
          "line": 3509,
          "character": 40
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3509,
          "character": 42
        },
        "end": {
          "line": 3509,
          "character": 54
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3509,
          "character": 56
        },
        "end": {
          "line": 3509,
          "character": 70
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3509,
          "character": 72
        },
        "end": {
          "line": 3509,
          "character": 86
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3509,
          "character": 111
        },
        "end": {
          "line": 3509,
          "character": 125
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3509,
          "character": 127
        },
        "end": {
          "line": 3509,
          "character": 141
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3510,
          "character": 7
        },
        "end": {
          "line": 3510,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3511,
          "character": 8
        },
        "end": {
          "line": 3511,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3511,
          "character": 24
        },
        "end": {
          "line": 3511,
          "character": 38
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3512,
          "character": 6
        },
        "end": {
          "line": 3512,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 3513,
          "character": 6
        },
        "end": {
          "line": 3513,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3514,
          "character": 6
        },
        "end": {
          "line": 3514,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3517,
          "character": 12
        },
        "end": {
          "line": 3517,
          "character": 26
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3518,
          "character": 34
        },
        "end": {
          "line": 3518,
          "character": 40
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3518,
          "character": 42
        },
        "end": {
          "line": 3518,
          "character": 54
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3518,
          "character": 56
        },
        "end": {
          "line": 3518,
          "character": 70
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3518,
          "character": 72
        },
        "end": {
          "line": 3518,
          "character": 86
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3518,
          "character": 88
        },
        "end": {
          "line": 3518,
          "character": 102
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3518,
          "character": 124
        },
        "end": {
          "line": 3518,
          "character": 138
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3518,
          "character": 140
        },
        "end": {
          "line": 3518,
          "character": 154
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3519,
          "character": 7
        },
        "end": {
          "line": 3519,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3520,
          "character": 8
        },
        "end": {
          "line": 3520,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3520,
          "character": 24
        },
        "end": {
          "line": 3520,
          "character": 38
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3521,
          "character": 6
        },
        "end": {
          "line": 3521,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3522,
          "character": 6
        },
        "end": {
          "line": 3522,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3720,
          "character": 14
        },
        "end": {
          "line": 3720,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3728,
          "character": 6
        },
        "end": {
          "line": 3728,
          "character": 27
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3729,
          "character": 6
        },
        "end": {
          "line": 3729,
          "character": 32
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3730,
          "character": 7
        },
        "end": {
          "line": 3730,
          "character": 32
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3730,
          "character": 33
        },
        "end": {
          "line": 3730,
          "character": 59
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3731,
          "character": 7
        },
        "end": {
          "line": 3731,
          "character": 32
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3732,
          "character": 19
        },
        "end": {
          "line": 3732,
          "character": 39
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3732,
          "character": 41
        },
        "end": {
          "line": 3732,
          "character": 60
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3732,
          "character": 61
        },
        "end": {
          "line": 3732,
          "character": 81
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3732,
          "character": 84
        },
        "end": {
          "line": 3732,
          "character": 109
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3732,
          "character": 110
        },
        "end": {
          "line": 3732,
          "character": 136
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3737,
          "character": 5
        },
        "end": {
          "line": 3737,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3741,
          "character": 4
        },
        "end": {
          "line": 3741,
          "character": 23
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 355,
          "character": 4
        },
        "end": {
          "line": 355,
          "character": 19
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 387,
          "character": 4
        },
        "end": {
          "line": 387,
          "character": 19
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 687,
          "character": 10
        },
        "end": {
          "line": 687,
          "character": 25
        }
      },
      "severity": 2,
      "message": "S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.\nUse [NumNPCs] instead!"
    },
    {
      "range": {
        "start": {
          "line": 688,
          "character": 6
        },
        "end": {
          "line": 688,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 736,
          "character": 5
        },
        "end": {
          "line": 736,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 879,
          "character": 5
        },
        "end": {
          "line": 879,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 884,
          "character": 5
        },
        "end": {
          "line": 884,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 894,
          "character": 5
        },
        "end": {
          "line": 894,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 899,
          "character": 5
        },
        "end": {
          "line": 899,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 910,
          "character": 5
        },
        "end": {
          "line": 910,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 920,
          "character": 5
        },
        "end": {
          "line": 920,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 936,
          "character": 5
        },
        "end": {
          "line": 936,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 947,
          "character": 5
        },
        "end": {
          "line": 947,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 981,
          "character": 10
        },
        "end": {
          "line": 981,
          "character": 25
        }
      },
      "severity": 2,
      "message": "S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.\nUse [NumNPCs] instead!"
    },
    {
      "range": {
        "start": {
          "line": 983,
          "character": 6
        },
        "end": {
          "line": 983,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 990,
          "character": 10
        },
        "end": {
          "line": 990,
          "character": 25
        }
      },
      "severity": 2,
      "message": "S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.\nUse [NumNPCs] instead!"
    },
    {
      "range": {
        "start": {
          "line": 992,
          "character": 6
        },
        "end": {
          "line": 992,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1001,
          "character": 10
        },
        "end": {
          "line": 1001,
          "character": 25
        }
      },
      "severity": 2,
      "message": "S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.\nUse [NumNPCs] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1003,
          "character": 6
        },
        "end": {
          "line": 1003,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1082,
          "character": 5
        },
        "end": {
          "line": 1082,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1088,
          "character": 6
        },
        "end": {
          "line": 1088,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1100,
          "character": 9
        },
        "end": {
          "line": 1100,
          "character": 24
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1111,
          "character": 6
        },
        "end": {
          "line": 1111,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1118,
          "character": 6
        },
        "end": {
          "line": 1118,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1148,
          "character": 5
        },
        "end": {
          "line": 1148,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1162,
          "character": 5
        },
        "end": {
          "line": 1162,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1187,
          "character": 5
        },
        "end": {
          "line": 1187,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1201,
          "character": 5
        },
        "end": {
          "line": 1201,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1221,
          "character": 5
        },
        "end": {
          "line": 1221,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1245,
          "character": 5
        },
        "end": {
          "line": 1245,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1268,
          "character": 5
        },
        "end": {
          "line": 1268,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1281,
          "character": 5
        },
        "end": {
          "line": 1281,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1301,
          "character": 5
        },
        "end": {
          "line": 1301,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1314,
          "character": 5
        },
        "end": {
          "line": 1314,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1334,
          "character": 5
        },
        "end": {
          "line": 1334,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1344,
          "character": 5
        },
        "end": {
          "line": 1344,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1346,
          "character": 5
        },
        "end": {
          "line": 1346,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1358,
          "character": 5
        },
        "end": {
          "line": 1358,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1378,
          "character": 5
        },
        "end": {
          "line": 1378,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1388,
          "character": 5
        },
        "end": {
          "line": 1388,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1403,
          "character": 5
        },
        "end": {
          "line": 1403,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1423,
          "character": 5
        },
        "end": {
          "line": 1423,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1433,
          "character": 5
        },
        "end": {
          "line": 1433,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1436,
          "character": 20
        },
        "end": {
          "line": 1436,
          "character": 35
        }
      },
      "severity": 2,
      "message": "S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.\nUse [NumNPCs] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1444,
          "character": 6
        },
        "end": {
          "line": 1444,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1472,
          "character": 6
        },
        "end": {
          "line": 1472,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1489,
          "character": 6
        },
        "end": {
          "line": 1489,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1507,
          "character": 5
        },
        "end": {
          "line": 1507,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1512,
          "character": 5
        },
        "end": {
          "line": 1512,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1534,
          "character": 5
        },
        "end": {
          "line": 1534,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1556,
          "character": 5
        },
        "end": {
          "line": 1556,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1567,
          "character": 5
        },
        "end": {
          "line": 1567,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1569,
          "character": 5
        },
        "end": {
          "line": 1569,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1582,
          "character": 5
        },
        "end": {
          "line": 1582,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1604,
          "character": 5
        },
        "end": {
          "line": 1604,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1615,
          "character": 5
        },
        "end": {
          "line": 1615,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1631,
          "character": 5
        },
        "end": {
          "line": 1631,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1653,
          "character": 5
        },
        "end": {
          "line": 1653,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1664,
          "character": 5
        },
        "end": {
          "line": 1664,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1667,
          "character": 20
        },
        "end": {
          "line": 1667,
          "character": 35
        }
      },
      "severity": 2,
      "message": "S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.\nUse [NumNPCs] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1675,
          "character": 6
        },
        "end": {
          "line": 1675,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1888,
          "character": 5
        },
        "end": {
          "line": 1888,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1903,
          "character": 5
        },
        "end": {
          "line": 1903,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1960,
          "character": 5
        },
        "end": {
          "line": 1960,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1981,
          "character": 5
        },
        "end": {
          "line": 1981,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2042,
          "character": 6
        },
        "end": {
          "line": 2042,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2057,
          "character": 6
        },
        "end": {
          "line": 2057,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2068,
          "character": 6
        },
        "end": {
          "line": 2068,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2077,
          "character": 6
        },
        "end": {
          "line": 2077,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2088,
          "character": 6
        },
        "end": {
          "line": 2088,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2108,
          "character": 5
        },
        "end": {
          "line": 2108,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2121,
          "character": 5
        },
        "end": {
          "line": 2121,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2139,
          "character": 7
        },
        "end": {
          "line": 2139,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2151,
          "character": 5
        },
        "end": {
          "line": 2151,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2169,
          "character": 5
        },
        "end": {
          "line": 2169,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2193,
          "character": 6
        },
        "end": {
          "line": 2193,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2220,
          "character": 6
        },
        "end": {
          "line": 2220,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2238,
          "character": 5
        },
        "end": {
          "line": 2238,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2251,
          "character": 5
        },
        "end": {
          "line": 2251,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2258,
          "character": 7
        },
        "end": {
          "line": 2258,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2277,
          "character": 5
        },
        "end": {
          "line": 2277,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2282,
          "character": 5
        },
        "end": {
          "line": 2282,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2296,
          "character": 5
        },
        "end": {
          "line": 2296,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2315,
          "character": 6
        },
        "end": {
          "line": 2315,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2331,
          "character": 5
        },
        "end": {
          "line": 2331,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2344,
          "character": 5
        },
        "end": {
          "line": 2344,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2351,
          "character": 7
        },
        "end": {
          "line": 2351,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2366,
          "character": 5
        },
        "end": {
          "line": 2366,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2379,
          "character": 7
        },
        "end": {
          "line": 2379,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2404,
          "character": 8
        },
        "end": {
          "line": 2404,
          "character": 23
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2408,
          "character": 8
        },
        "end": {
          "line": 2408,
          "character": 23
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2424,
          "character": 7
        },
        "end": {
          "line": 2424,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2438,
          "character": 7
        },
        "end": {
          "line": 2438,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 3862,
          "character": 3
        },
        "end": {
          "line": 3862,
          "character": 18
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 3879,
          "character": 9
        },
        "end": {
          "line": 3879,
          "character": 24
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 3890,
          "character": 9
        },
        "end": {
          "line": 3890,
          "character": 24
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 3998,
          "character": 3
        },
        "end": {
          "line": 3998,
          "character": 19
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3999,
          "character": 3
        },
        "end": {
          "line": 3999,
          "character": 19
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4012,
          "character": 9
        },
        "end": {
          "line": 4012,
          "character": 25
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4013,
          "character": 9
        },
        "end": {
          "line": 4013,
          "character": 25
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4014,
          "character": 9
        },
        "end": {
          "line": 4014,
          "character": 29
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4015,
          "character": 9
        },
        "end": {
          "line": 4015,
          "character": 29
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4028,
          "character": 9
        },
        "end": {
          "line": 4028,
          "character": 25
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4029,
          "character": 9
        },
        "end": {
          "line": 4029,
          "character": 25
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4030,
          "character": 9
        },
        "end": {
          "line": 4030,
          "character": 29
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4031,
          "character": 9
        },
        "end": {
          "line": 4031,
          "character": 29
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4044,
          "character": 9
        },
        "end": {
          "line": 4044,
          "character": 25
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4045,
          "character": 9
        },
        "end": {
          "line": 4045,
          "character": 25
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4046,
          "character": 9
        },
        "end": {
          "line": 4046,
          "character": 29
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4047,
          "character": 9
        },
        "end": {
          "line": 4047,
          "character": 29
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    }
  ],
  "metadata": {
    "currentFileSymbols": 392,
    "symbols": 814,
    "identifiers": 10363,
    "elided": true
  }
}

zasm:

PUSHR D0; void run(int) Params
PUSHR REFFFC; void run(int) Body Start
PUSHARGSV 0 0.0047
SETR D4 SP2
STOREV 0 0.0046
STOREV 0 0.0045
STOREV 0 0.0044
STOREV 0 0.0043
STOREV 0 0.0042
STOREV 0 0.0041
STOREV 0 0.0040
STOREV 0 0.0039
STOREV 0 0.0038
STOREV 0 0.0037
ALLOCATEMEMV D2 2 0
STORE D2 0.0036
ALLOCATEMEMV D2 256 0
STORE D2 0.0035
PUSHR D4
LOAD D2 0.0047; UsrFunc[npc Ghost_InitAutoGhost(ffc, int)] Params Start
PUSHR D2
LOAD D2 0.0048
PUSHR D2; UsrFunc[npc Ghost_InitAutoGhost(ffc, int)] Params End
CALLFUNC 2.7328; UsrFunc[npc Ghost_InitAutoGhost(ffc, int)] Call
POP D4
STORE D2 0.0034
ALLOCATEMEMV D2 256 0
STORE D2 0.0033
STOREV 0 0.0032
STOREV 0 0.0031
ALLOCATEMEMV D2 200 0
STORE D2 0.0030
ALLOCATEMEMV D2 6 0
PUSHR D2
WRITEPODARRAY D2 {119,118,124,119,118,124}
POP D2
STORE D2 0.0028
ALLOCATEMEMV D2 400 0
STORE D2 0.0027
SETV D2 0; for() #253 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #253 LoopTest
COMPAREV D2 12
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 67 ==; for() #253 TestFail?
LOAD D2 0.0034; for() #253 Body Start
PUSHR D2
LOAD D2 0.0046
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0046
ADDV D2 300
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #253 Body End
LOAD D2 0.0046; for() #253 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 42; for() #253 End
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0027
SETR D0 D2
POP D2
WRITEPODARRAYVR 312 D2
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 300
STORE D2 0.0026
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 301
STORE D2 0.0025
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 302
STORE D2 0.0024
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 303
STORE D2 0.0023
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 304
STORE D2 0.0022
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 305
STORE D2 0.0021
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 306
STORE D2 0.0020
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 307
STORE D2 0.0019
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 308
STORE D2 0.0018
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0.0017
STOREV 0 0.0016
STOREV 0 0.0015
LOAD D2 0.0025; if() #528 Test
COMPAREV D2 44
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 136 ==; Test 'if'
SETV D2 44; if() #528 Body Start
STORE D2 0.0016
GOTO 167; if() #528 Body End
LOAD D2 0.0025; if() #529 Test AND if() #528 Else Start
COMPAREV D2 45
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 144 ==; Test 'if'
SETV D2 45; if() #529 Body Start
STORE D2 0.0016
GOTO 167; if() #529 Body End
LOAD D2 0.0025; if() #530 Test AND if() #529 Else Start
COMPAREV D2 46
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 152 ==; Test 'if'
SETV D2 46; if() #530 Body Start
STORE D2 0.0016
GOTO 167; if() #530 Body End
LOAD D2 0.0025; if() #531 Test AND if() #530 Else Start
COMPAREV D2 47
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 160 ==; Test 'if'
SETV D2 47; if() #531 Body Start
STORE D2 0.0016
GOTO 167; if() #531 Body End
LOAD D2 0.0025; if() #948 Test AND if() #531 Else Start
COMPAREV D2 48
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 167 ==; Test 'if'
SETV D2 48; if() #948 Body Start
STORE D2 0.0016; if() #948 Body End
LOAD D2 0.0016; if() #531 Else End AND if() #530 Else End AND if() #529 Else End AND if() #528 Else End AND if() #949 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 178 ==; Test 'if'
LOAD D2 0.0024; if() #949 Body Start
STORE D2 0.0025
LOAD D2 0.0023
STORE D2 0.0024
SETV D2 0
STORE D2 0.0023; if() #949 Body End
LOAD D2 0.0022
ANDV D2 15
STORE D2 0.0014
LOAD D2 0.0022; InlineFunc[int Floor(int)] Params Start
RSHIFTV D2 4; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
ANDV D2 15
STORE D2 0.0013
LOAD D2 0.0017; if() #950 Test
ANDV D2 512
COMPAREV D2 0
GOTOCMP 196 !=
LOAD D2 0.0017
ANDV D2 1024
COMPAREV D2 0
GOTOCMP 196 !=
SETV D2 1
GOTO 197
SETV D2 0
COMPAREV D2 0
GOTOCMP 206 ==; Test 'if'
PUSHR D4; if() #950 Body Start
PUSHV 8; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4635; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK D4
PUSHV 16; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4635; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #950 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_GetExtraProperties(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCID
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0025
PUSHR D2
LOAD D2 0.0024
PUSHR D2
LOAD D2 0.0023
PUSHR D2
LOAD D2 0.0030
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_GetExtraProperties(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.4847; UsrFunc[void EZB_GetExtraProperties(ffc, npc, int, int, int, int, int, int, int)] Call
POP D4
LOAD D2 0.0020
ANDV D2 15
STORE D2 0.0012
LOAD D2 0.0020
RSHIFTV D2 4
ANDV D2 15
STORE D2 0.0011
LOAD D2 0.0011; if() #951 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 243 ==; Test 'if'
LOAD D2 0.0012; if() #951 Body Start
STORE D2 0.0011; if() #951 Body End
PUSHR D4
LOAD D2 0.0012; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 4; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0687; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0012
PUSHR D4
LOAD D2 0.0011; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 4; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0687; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0011
LOAD D2 0.0034
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
PUSHR D2
LOAD D2 0.0027
SETR D0 D2
POP D2
WRITEPODARRAYVR 310 D2
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 310
STORE D2 0.0010
PUSHR D4
LOAD D2 0.0047; UsrFunc[void Ghost_Transform(ffc, npc, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
PUSHARGSV -1 0.0002
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0011
PUSHR D2; UsrFunc[void Ghost_Transform(ffc, npc, int, int, int, int)] Params End
CALLFUNC 2.7772; UsrFunc[void Ghost_Transform(ffc, npc, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0034; UsrFunc[void Ghost_SetHitOffsets(npc, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0014
PUSHR D2
LOAD D2 0.0014
PUSHR D2; UsrFunc[void Ghost_SetHitOffsets(npc, int, int, int, int)] Params End
CALLFUNC 2.7536; UsrFunc[void Ghost_SetHitOffsets(npc, int, int, int, int)] Call
POP D4
LOAD D2 0.0017; if() #532 Test
ANDV D2 2
COMPAREV D2 0
GOTOCMP 309 ==; Test 'if'
PUSHR D4; if() #532 Body Start
PUSHV 512; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4635; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4
GOTO 317; if() #532 Body End
LOAD D2 0.0017; if() #952 Test AND if() #532 Else Start
ANDV D2 1
COMPAREV D2 0
GOTOCMP 317 ==; Test 'if'
PUSHR D4; if() #952 Body Start
PUSHV 256; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4635; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #952 Body End
LOAD D2 0.0017; if() #532 Else End AND if() #953 Test
ANDV D2 16
COMPAREV D2 0
GOTOCMP 325 ==; Test 'if'
PUSHR D4; if() #953 Body Start
PUSHV 32; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4635; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #953 Body End
LOAD D2 0.0017; if() #533 Test
ANDV D2 4
COMPAREV D2 0
GOTOCMP 369 ==; Test 'if'
PUSHR D4; if() #533 Body Start
PUSHV 7168; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4635; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK D4
PUSHV 65536; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4635; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4
SETV D2 1
PUSHR D2
LOAD D2 0.0047
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2
LOAD D2 0.0017; if() #954 Test
ANDV D2 16
COMPAREV D2 0
GOTOCMP 359 ==
PUSHR D4
CALLFUNC 2.7519; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 359 !=
SETV D2 1
GOTO 360
SETV D2 0
COMPAREV D2 0
GOTOCMP 377 ==; Test 'if'
PUSHR D4; if() #954 Body Start
PUSHV 16384; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4635; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4
SETV D2 8
SETR GD3 D2; if() #954 Body End
GOTO 377; if() #533 Body End
LOAD D2 0.0017; if() #955 Test AND if() #533 Else Start
ANDV D2 8
COMPAREV D2 0
GOTOCMP 377 ==; Test 'if'
PUSHR D4; if() #955 Body Start
PUSHV 65538; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4635; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #955 Body End
LOAD D2 0.0017; if() #533 Else End AND if() #956 Test
ANDV D2 256
COMPAREV D2 0
GOTOCMP 385 ==; Test 'if'
PUSHR D4; if() #956 Body Start
PUSHV 1; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4635; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #956 Body End
STOREV -1 0.0009
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
MULTV D2 10
STORE D2 0.0008
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0007
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
STORE D2 0.0006
ALLOCATEMEMV D2 16 0
STORE D2 0.0005
STOREV -1 0.0004
STOREV 0 0.0003
LOAD D2 0.0026; if() #958 Test
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 456 ==; Test 'if'
SETV D3 360; InlineFunc[int Rand(int)] Params AND if() #958 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0034; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7499; UsrFunc[int VectorX(int, int)] Call
POP D4
STORE D2 0.0038
PUSHR D4
LOAD D2 0.0034; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7509; UsrFunc[int VectorY(int, int)] Call
POP D4
STORE D2 0.0037; if() #958 Body End
LOAD D2 0.0026; if() #959 Test
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 464 ==; Test 'if'
SETV D3 4; InlineFunc[int Rand(int)] Params AND if() #959 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0007; if() #959 Body End
LOAD D2 0.0026; if() #960 Test
COMPAREV D2 12
GOTOCMP 472 ==
LOAD D2 0.0026
COMPAREV D2 13
GOTOCMP 472 ==
SETV D2 0
GOTO 473
SETV D2 1
COMPAREV D2 0
GOTOCMP 480 ==; Test 'if'
LOAD D2 0.0034; if() #960 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
STORE D2 0.0006; if() #960 Body End
STOREV 0 0.0002; while(true) #9 Body [Opt:AlwaysOn] Start
LOAD D2 0.0026; if() #534 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 521 ==; Test 'if'
PUSHR D4; if() #534 Body Start
LOAD D2 0.0009; UsrFunc[int Ghost_HaltingWalk4(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCSTEP
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCRATE
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCHOMING
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCHUNGER
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCHALTRATE
PUSHV 48; UsrFunc[int Ghost_HaltingWalk4(int, int, int, int, int, int, int)] Params End
CALLFUNC 2.6598; UsrFunc[int Ghost_HaltingWalk4(int, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0009
LOAD D2 0.0009; if() #961 Test
COMPAREV D2 16
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
SETV D2 1; if() #961 Body Start
STORE D2 0.0002; if() #961 Body End
GOTO 3499; if() #534 Body End
LOAD D2 0.0026; if() #535 Test AND if() #534 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 566 ==; Test 'if'
PUSHR D4; if() #535 Body Start
LOAD D2 0.0009; UsrFunc[int Ghost_ConstantWalk4(int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCSTEP
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCRATE
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCHOMING
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCHUNGER; UsrFunc[int Ghost_ConstantWalk4(int, int, int, int, int)] Params End
CALLFUNC 2.4284; UsrFunc[int Ghost_ConstantWalk4(int, int, int, int, int)] Call
POP D4
STORE D2 0.0009
LOAD D2 0.0008; if() #536 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 557 ==; Test 'if'
LOAD D2 0.0008; if() #536 Body Start
SUBV D2 1
STORE D2 0.0008
GOTO 3499; if() #536 Body End
SETV D3 24; InlineFunc[int Rand(int)] Params AND if() #962 Test AND if() #536 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
SETV D2 1; if() #962 Body Start
STORE D2 0.0002; if() #962 Body End
GOTO 3499; if() #536 Else End AND if() #535 Body End
LOAD D2 0.0026; if() #537 Test AND if() #535 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 611 ==; Test 'if'
PUSHR D4; if() #537 Body Start
LOAD D2 0.0009; UsrFunc[int Ghost_ConstantWalk8(int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCSTEP
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCRATE
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCHOMING
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCHUNGER; UsrFunc[int Ghost_ConstantWalk8(int, int, int, int, int)] Params End
CALLFUNC 2.5507; UsrFunc[int Ghost_ConstantWalk8(int, int, int, int, int)] Call
POP D4
STORE D2 0.0009
LOAD D2 0.0008; if() #538 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 602 ==; Test 'if'
LOAD D2 0.0008; if() #538 Body Start
SUBV D2 1
STORE D2 0.0008
GOTO 3499; if() #538 Body End
SETV D3 24; InlineFunc[int Rand(int)] Params AND if() #963 Test AND if() #538 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
SETV D2 1; if() #963 Body Start
STORE D2 0.0002; if() #963 Body End
GOTO 3499; if() #538 Else End AND if() #537 Body End
LOAD D2 0.0026; if() #539 Test AND if() #537 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 761 ==; Test 'if'
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #964 Test AND if() #539 Body Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 8
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 684 ==; Test 'if'
PUSHR D4; if() #964 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHARGSR D4 0.0002; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7476; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4; if() #964 Body End
LOAD D2 0.0034; if() #965 Test
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
COMPAREV D2 0
GOTOCMP 726 <=
SETR D2 LINKACTION
COMPAREV D2 2
GOTOCMP 726 !=
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
POP D3
COMPARER D3 D2
GOTOCMP 726 >=
SETV D2 1
GOTO 727
SETV D2 0
COMPAREV D2 0
GOTOCMP 743 ==; Test 'if'
LOAD D2 0.0008; if() #966 Test AND if() #965 Body Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
MULTV D2 5
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 743 ==; Test 'if'
SETV D2 1; if() #966 Body Start
STORE D2 0.0002; if() #966 Body End
LOAD D2 0.0008; if() #965 Body End AND if() #540 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 752 ==; Test 'if'
LOAD D2 0.0008; if() #540 Body Start
SUBV D2 1
STORE D2 0.0008
GOTO 3499; if() #540 Body End
SETV D3 24; InlineFunc[int Rand(int)] Params AND if() #967 Test AND if() #540 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
SETV D2 1; if() #967 Body Start
STORE D2 0.0002; if() #967 Body End
GOTO 3499; if() #540 Else End AND if() #539 Body End
LOAD D2 0.0026; if() #541 Test AND if() #539 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 894 ==; Test 'if'
PUSHR D4; if() #541 Body Start
LOAD D2 0.0038; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0037
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5023; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0038; if() #968 Test
COMPAREV D2 0
GOTOCMP 785 >=
PUSHR D4
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1543; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 798 ==
LOAD D2 0.0038
COMPAREV D2 0
GOTOCMP 796 <=
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1543; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 798 ==
SETV D2 0
GOTO 799
SETV D2 1
COMPAREV D2 0
GOTOCMP 806 ==; Test 'if'
LOAD D2 0.0038; if() #968 Body Start
SUBV2 0 D2
STORE D2 0.0038
SETV D2 1
STORE D2 0.0015; if() #968 Body End
LOAD D2 0.0037; if() #969 Test
COMPAREV D2 0
GOTOCMP 817 >=
PUSHR D4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1543; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 829 ==
LOAD D2 0.0037
COMPAREV D2 0
GOTOCMP 827 <=
PUSHR D4
PUSHARGSV 1 0.0002; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1543; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 829 ==
SETV D2 0
GOTO 830
SETV D2 1
COMPAREV D2 0
GOTOCMP 842 ==; Test 'if'
LOAD D2 0.0037; if() #969 Body Start
SUBV2 0 D2
STORE D2 0.0037
LOAD D2 0.0015; if() #970 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 842 ==; Test 'if'
SETV D2 1; if() #970 Body Start
STORE D2 0.0015; if() #970 Body End
PUSHR D4; if() #969 Body End
LOAD D2 0.0047; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
PUSHARGSV 0 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0038
MULTV D2 10
PUSHR D2
LOAD D2 0.0037
MULTV D2 10
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params End
CALLFUNC 3.0610; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Call
POP D4
SETR GD4 D2
LOAD D2 0.0017; if() #971 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 876 ==; Test 'if'
PUSHR D4; if() #971 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #971 Body End
LOAD D2 0.0008; if() #542 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 885 ==; Test 'if'
LOAD D2 0.0008; if() #542 Body Start
SUBV D2 1
STORE D2 0.0008
GOTO 3499; if() #542 Body End
SETV D3 24; InlineFunc[int Rand(int)] Params AND if() #972 Test AND if() #542 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
SETV D2 1; if() #972 Body Start
STORE D2 0.0002; if() #972 Body End
GOTO 3499; if() #542 Else End AND if() #541 Body End
LOAD D2 0.0026; if() #543 Test AND if() #541 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1000 ==; Test 'if'
PUSHR D4; if() #543 Body Start
LOAD D2 0.0007; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7476; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params End
CALLFUNC 3.0610; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Call
POP D4
SETR GD4 D2
LOAD D2 0.0017; if() #973 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 935 ==; Test 'if'
PUSHR D4; if() #973 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #973 Body End
LOAD D2 0.0008; if() #544 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 944 ==; Test 'if'
LOAD D2 0.0008; if() #544 Body Start
SUBV D2 1
STORE D2 0.0008
GOTO 952; if() #544 Body End
SETV D3 24; InlineFunc[int Rand(int)] Params AND if() #974 Test AND if() #544 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 952 ==; Test 'if'
SETV D2 1; if() #974 Body Start
STORE D2 0.0002; if() #974 Body End
LOAD D2 0.0009; if() #544 Else End
ADDV D2 1
STORE D2 0.0009
LOAD D2 0.0009; if() #975 Test
COMPAREV D2 80
GOTOCMP 964 <=
SETV D3 10; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
GOTOCMP 964 !=
SETV D2 1
GOTO 965
SETV D2 0
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #975 Body Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0007
SETV D2 0
STORE D2 0.0009
LOAD D2 0.0015; if() #976 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
SETV D2 1; if() #976 Body Start
STORE D2 0.0015; if() #976 Body End
GOTO 3499; if() #975 Body End AND if() #543 Body End
LOAD D2 0.0026; if() #545 Test AND if() #543 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1214 ==; Test 'if'
LOAD D2 0.0034; if() #545 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
MULTV D2 0.0010
STORE D2 0.0001
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
MULTV D2 0.0100
STORE D2 0
PUSHR D4
LOAD D2 0.0038; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
SUBV2 0 D2
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0687; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0038
PUSHR D4
LOAD D2 0.0037; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
SUBV2 0 D2
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0687; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0037
PUSHR D4
LOAD D2 0.0038; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0037
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5023; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0038; if() #977 Test
COMPAREV D2 0
GOTOCMP 1100 >=
PUSHR D4
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1543; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1113 ==
LOAD D2 0.0038
COMPAREV D2 0
GOTOCMP 1111 <=
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1543; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1113 ==
SETV D2 0
GOTO 1114
SETV D2 1
COMPAREV D2 0
GOTOCMP 1126 ==; Test 'if'
LOAD D2 0.0038; if() #977 Body Start
SUBV2 0 D2
STORE D2 0.0038
LOAD D2 0.0015; if() #978 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1126 ==; Test 'if'
SETV D2 1; if() #978 Body Start
STORE D2 0.0015; if() #978 Body End
LOAD D2 0.0037; if() #977 Body End AND if() #979 Test
COMPAREV D2 0
GOTOCMP 1137 >=
PUSHR D4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1543; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1149 ==
LOAD D2 0.0037
COMPAREV D2 0
GOTOCMP 1147 <=
PUSHR D4
PUSHARGSV 1 0.0002; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1543; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1149 ==
SETV D2 0
GOTO 1150
SETV D2 1
COMPAREV D2 0
GOTOCMP 1162 ==; Test 'if'
LOAD D2 0.0037; if() #979 Body Start
SUBV2 0 D2
STORE D2 0.0037
LOAD D2 0.0015; if() #980 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1162 ==; Test 'if'
SETV D2 1; if() #980 Body Start
STORE D2 0.0015; if() #980 Body End
PUSHR D4; if() #979 Body End
LOAD D2 0.0047; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
PUSHARGSV 0 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0038
MULTV D2 10
PUSHR D2
LOAD D2 0.0037
MULTV D2 10
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params End
CALLFUNC 3.0610; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Call
POP D4
SETR GD4 D2
LOAD D2 0.0017; if() #981 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 1196 ==; Test 'if'
PUSHR D4; if() #981 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #981 Body End
LOAD D2 0.0008; if() #546 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1205 ==; Test 'if'
LOAD D2 0.0008; if() #546 Body Start
SUBV D2 1
STORE D2 0.0008
GOTO 3499; if() #546 Body End
SETV D3 24; InlineFunc[int Rand(int)] Params AND if() #982 Test AND if() #546 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
SETV D2 1; if() #982 Body Start
STORE D2 0.0002; if() #982 Body End
GOTO 3499; if() #546 Else End AND if() #545 Body End
LOAD D2 0.0026; if() #547 Test AND if() #545 Else Start
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1426 ==; Test 'if'
PUSHR D4; if() #547 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
MULTV D2 8
PUSHR D2
PUSHVARGV 0; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 8
PUSHVARGV 16; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
LOAD D2 0.0034; if() #548 Test
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1282 ==; Test 'if'
PUSHARGSR D4 0.0002; InlineFunc[int WrapDegrees(int)] Params Start AND if() #548 Body Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHR D4
PUSHV -30; UsrFunc[int Rand(int, int)] Params Start
PUSHV 30; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3; InlineFunc[int WrapDegrees(int)] Params End
WRAPDEGREES D2; InlineFunc[int WrapDegrees(int)] Body
STORE D2 0.0007
GOTO 1322; if() #548 Body End
PUSHARGSR D4 0.0002; InlineFunc[int WrapDegrees(int)] Params Start AND if() #548 Else Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int Rand(int, int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCHOMING; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3; InlineFunc[int WrapDegrees(int)] Params End
WRAPDEGREES D2; InlineFunc[int WrapDegrees(int)] Body
STORE D2 0.0007; if() #548 Else End
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 2.6000
SETR GD5 D2
SETR D2 GD5; while() #10 Test
COMPAREV D2 0
GOTOCMP 1334 >
SETR D2 GD3
COMPAREV D2 0
GOTOCMP 1334 >
SETV D2 0
GOTO 1335
SETV D2 1
COMPAREV D2 0
GOTOCMP 1384 ==; Test 'while'
PUSHR D4; while() #10 Body Start
LOAD D2 0.0047; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params End
CALLFUNC 3.0610; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Call
POP D4
SETR GD4 D2
PUSHR D4
LOAD D2 0.0007; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7476; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4
LOAD D2 0.0017; if() #983 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 1374 ==; Test 'if'
PUSHR D4; if() #983 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #983 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #10 Body End
GOTO 1326; while() #10 End
LOAD D2 0.0006; if() #984 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1392 ==; Test 'if'
LOAD D2 0.0006; if() #984 Body Start
SUBV D2 1
STORE D2 0.0006; if() #984 Body End
LOAD D2 0.0006; if() #985 Test
COMPAREV D2 0
GOTOCMP 1410 <=
LOAD D2 0.0034; InlineFunc[int Ceiling(int)] Params Start AND InlineFunc[int Max(int, int)] Params Start AND InlineFunc[int Rand(int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
MULTV D2 0.5000; InlineFunc[int Ceiling(int)] Params End
CEILING D2; InlineFunc[int Ceiling(int)] Body
PUSHVARGR D2
PUSHVARGV 2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
GOTOCMP 1410 ==
SETV D2 0
GOTO 1411
SETV D2 1
COMPAREV D2 0
GOTOCMP 1420 ==; Test 'if'
SETV D2 1; if() #985 Body Start
STORE D2 0.0002
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
STORE D2 0.0006; if() #985 Body End
LOAD D2 0.0002; unless() #986 Test
COMPAREV D2 0
GOTOCMP 3499 !=; Test 'unless'
SETV D2 1; unless() #986 Body Start
STORE D2 0.0015; unless() #986 Body End
GOTO 3499; if() #547 Body End
LOAD D2 0.0026; if() #549 Test AND if() #547 Else Start
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1503 ==; Test 'if'
PUSHR D4; if() #549 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
MULTV D2 8
PUSHR D2
PUSHVARGV 0; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 8
PUSHVARGV 16; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Teleport(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Teleport(ffc, npc, int)] Params End
CALLFUNC 3.6684; UsrFunc[void EZB_Teleport(ffc, npc, int)] Call
POP D4
LOAD D2 0.0006; if() #987 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1469 ==; Test 'if'
LOAD D2 0.0006; if() #987 Body Start
SUBV D2 1
STORE D2 0.0006; if() #987 Body End
LOAD D2 0.0006; if() #988 Test
COMPAREV D2 0
GOTOCMP 1487 <=
LOAD D2 0.0034; InlineFunc[int Ceiling(int)] Params Start AND InlineFunc[int Max(int, int)] Params Start AND InlineFunc[int Rand(int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
MULTV D2 0.5000; InlineFunc[int Ceiling(int)] Params End
CEILING D2; InlineFunc[int Ceiling(int)] Body
PUSHVARGR D2
PUSHVARGV 2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
GOTOCMP 1487 ==
SETV D2 0
GOTO 1488
SETV D2 1
COMPAREV D2 0
GOTOCMP 1497 ==; Test 'if'
SETV D2 1; if() #988 Body Start
STORE D2 0.0002
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
STORE D2 0.0006; if() #988 Body End
LOAD D2 0.0002; unless() #989 Test
COMPAREV D2 0
GOTOCMP 3499 !=; Test 'unless'
SETV D2 1; unless() #989 Body Start
STORE D2 0.0015; unless() #989 Body End
GOTO 3499; if() #549 Body End
LOAD D2 0.0026; if() #550 Test AND if() #549 Else Start
COMPAREV D2 9
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1758 ==; Test 'if'
PUSHARGSR D4 0.0002; InlineFunc[int WrapDegrees(int)] Params Start AND if() #550 Body Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int Rand(int, int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCHALTRATE; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3; InlineFunc[int WrapDegrees(int)] Params End
WRAPDEGREES D2; InlineFunc[int WrapDegrees(int)] Body
STORE D2 0.0007
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
LOAD D2 0.0034; if() #551 Test
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1561 ==; Test 'if'
SETV D2 2.6000; if() #551 Body Start
SETR GD5 D2
GOTO 1575; if() #551 Body End
LOAD D2 0.0034; if() #551 Else Start
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
MULTV D2 0.0100
SETV D2 0.0100
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
POP D3
MULTR D2 D3
SETR GD5 D2; if() #551 Else End
LOAD D2 0.0034; if() #990 Test
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1622 ==; Test 'if'
SETR D2 GD5; if() #990 Body Start
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
MULTV D2 0.0100
SETV D2 0.0100
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
POP D3
MULTR D2 D3
PUSHR D2
PUSHV 0
PUSHV 80; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0687; UsrFunc[int Clamp(int, int, int)] Call
POP D4
POP D3
MULTR D2 D3
STORE D2 0.0044
SETR D2 GD5
PUSHR D2
PUSHR D4
PUSHV -100; UsrFunc[int Rand(int, int)] Params Start
PUSHV 100; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
MULTV D2 0.0100
PUSHR D2
LOAD D2 0.0044
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
SETR GD5 D2; if() #990 Body End
SETR D2 GD5; while() #11 Test
COMPAREV D2 0
GOTOCMP 1630 >
SETR D2 GD3
COMPAREV D2 0
GOTOCMP 1630 >
SETV D2 0
GOTO 1631
SETV D2 1
COMPAREV D2 0
GOTOCMP 1752 ==; Test 'while'
PUSHR D4; while() #11 Body Start
LOAD D2 0.0047; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params End
CALLFUNC 3.0610; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Call
POP D4
SETR GD4 D2
PUSHR D4
LOAD D2 0.0007; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7476; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4
LOAD D2 0.0017; if() #991 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 1670 ==; Test 'if'
PUSHR D4; if() #991 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #991 Body End
LOAD D2 0.0008; if() #552 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1679 ==; Test 'if'
LOAD D2 0.0008; if() #552 Body Start
SUBV D2 1
STORE D2 0.0008
GOTO 1687; if() #552 Body End
SETV D3 24; InlineFunc[int Rand(int)] Params AND if() #992 Test AND if() #552 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1687 ==; Test 'if'
SETV D2 1; if() #992 Body Start
STORE D2 0.0002; if() #992 Body End
PUSHR D4; if() #552 Else End
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4
LOAD D2 0.0002; if() #993 Test
COMPAREV D2 0
GOTOCMP 1622 ==; Test 'if'
SETR D2 GD3; while() #12 Test AND if() #993 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1622 ==; Test 'while'
PUSHR D4; while() #12 Body Start
LOAD D2 0.0047; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params End
CALLFUNC 3.0610; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Call
POP D4
SETR GD4 D2
PUSHR D4
LOAD D2 0.0007; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7476; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4
LOAD D2 0.0017; if() #994 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 1741 ==; Test 'if'
PUSHR D4; if() #994 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #994 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #12 Body End
GOTO 1699; while() #12 End
GOTO 1622; if() #993 Body End AND while() #11 Body End AND while() #11 End
LOAD D2 0.0002; unless() #995 Test
COMPAREV D2 0
GOTOCMP 3499 !=; Test 'unless'
SETV D2 1; unless() #995 Body Start
STORE D2 0.0015; unless() #995 Body End
GOTO 3499; if() #550 Body End
LOAD D2 0.0026; if() #553 Test AND if() #550 Else Start
COMPAREV D2 10
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2074 ==; Test 'if'
LOAD D2 0.0034; if() #554 Test AND if() #553 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
COMPAREV D2 0
GOTOCMP 1802 ==
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
POP D3
COMPARER D3 D2
GOTOCMP 1802 <
SETV D2 0
GOTO 1803
SETV D2 1
COMPAREV D2 0
GOTOCMP 1968 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #554 Body Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETR D2 GD1
PUSHR D2
PUSHR D4
PUSHV 6; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7499; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0040
SETR D2 GD2
PUSHR D2
PUSHR D4
PUSHV 6; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7509; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0039
LOAD D2 0.0009; if() #555 Test
COMPAREV D2 0
GOTOCMP 1858 <=
LOAD D2 0.0007
COMPAREV D2 -1000
GOTOCMP 1858 ==
SETV D2 1
GOTO 1859
SETV D2 0
COMPAREV D2 0
GOTOCMP 1887 ==; Test 'if'
LOAD D2 0.0009; if() #555 Body Start
SUBV D2 1
STORE D2 0.0009
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 3.3303; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0007; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7476; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4
GOTO 2043; if() #555 Body End
PUSHR D4; if() #556 Test AND if() #555 Else Start
LOAD D2 0.0047; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0039
PUSHR D2; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Params End
CALLFUNC 3.1680; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1933 ==; Test 'if'
LOAD D2 0.0009; if() #996 Test AND if() #556 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1908 ==; Test 'if'
LOAD D2 0.0009; if() #996 Body Start
SUBV D2 1
STORE D2 0.0009; if() #996 Body End
SETV D2 -1000
STORE D2 0.0007
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 3.3303; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7476; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4
GOTO 2043; if() #556 Body End
LOAD D2 0.0042; InlineFunc[int WrapDegrees(int)] Params Start AND if() #556 Else Start
PUSHR D2
PUSHVARGV -140; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 140; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
POP D3
ADDR D2 D3; InlineFunc[int WrapDegrees(int)] Params End
WRAPDEGREES D2; InlineFunc[int WrapDegrees(int)] Body
STORE D2 0.0007
LOAD D2 0.0034; InlineFunc[int Floor(int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
MULTV D2 0.0100
DIVV2 32 D2
SETV D2 32
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
MULTV D2 0.0100
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0009
LOAD D2 0.0015; if() #997 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2043 ==; Test 'if'
SETV D2 1; if() #997 Body Start
STORE D2 0.0015; if() #997 Body End
GOTO 2043; if() #556 Else End AND if() #555 Else End AND if() #554 Body End
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #998 Test AND if() #554 Else Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
ADDV D2 32
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2043 ==; Test 'if'
PUSHR D4; if() #998 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHARGSR D4 0.0002; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7476; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4; if() #998 Body End
LOAD D2 0.0017; if() #554 Else End AND if() #999 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 2056 ==; Test 'if'
PUSHR D4; if() #999 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #999 Body End
LOAD D2 0.0008; if() #557 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2065 ==; Test 'if'
LOAD D2 0.0008; if() #557 Body Start
SUBV D2 1
STORE D2 0.0008
GOTO 3499; if() #557 Body End
SETV D3 24; InlineFunc[int Rand(int)] Params AND if() #1000 Test AND if() #557 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
SETV D2 1; if() #1000 Body Start
STORE D2 0.0002; if() #1000 Body End
GOTO 3499; if() #557 Else End AND if() #553 Body End
LOAD D2 0.0026; if() #558 Test AND if() #553 Else Start
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2450 ==; Test 'if'
LOAD D2 0.0005; if() #1001 Test AND if() #558 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 15
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2109 ==; Test 'if'
PUSHR D4; if() #1001 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR GD4; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params End
CALLFUNC 3.3329; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Call
POP D4
SETR D2 GD4
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
SETV D2 1
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 15 D2; if() #1001 Body End
PUSHR D4; unless() #1002 Test
LOAD D2 0.0005; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1543; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 2399 !=; Test 'unless'
LOAD D2 0.0034; if() #559 Test AND unless() #1002 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2189 ==; Test 'if'
LOAD D2 0.0005; if() #560 Test AND if() #559 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2144 ==; Test 'if'
SETV D2 3; if() #560 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2392; if() #560 Body End
LOAD D2 0.0005; if() #561 Test AND if() #560 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2159 ==; Test 'if'
SETV D2 2; if() #561 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2392; if() #561 Body End
LOAD D2 0.0005; if() #562 Test AND if() #561 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2174 ==; Test 'if'
SETV D2 0; if() #562 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2392; if() #562 Body End
LOAD D2 0.0005; if() #1003 Test AND if() #562 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2392 ==; Test 'if'
SETV D2 1; if() #1003 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; if() #1003 Body End
GOTO 2392; if() #562 Else End AND if() #561 Else End AND if() #560 Else End AND if() #559 Body End
LOAD D2 0.0034; if() #563 Test AND if() #559 Else Start
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2257 ==; Test 'if'
LOAD D2 0.0005; if() #564 Test AND if() #563 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2212 ==; Test 'if'
SETV D2 2; if() #564 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2392; if() #564 Body End
LOAD D2 0.0005; if() #565 Test AND if() #564 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2227 ==; Test 'if'
SETV D2 3; if() #565 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2392; if() #565 Body End
LOAD D2 0.0005; if() #566 Test AND if() #565 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2242 ==; Test 'if'
SETV D2 1; if() #566 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2392; if() #566 Body End
LOAD D2 0.0005; if() #1004 Test AND if() #566 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2392 ==; Test 'if'
SETV D2 0; if() #1004 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; if() #1004 Body End
GOTO 2392; if() #566 Else End AND if() #565 Else End AND if() #564 Else End AND if() #563 Body End
LOAD D2 0.0034; if() #567 Test AND if() #563 Else Start
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2325 ==; Test 'if'
LOAD D2 0.0005; if() #568 Test AND if() #567 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2280 ==; Test 'if'
SETV D2 1; if() #568 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2392; if() #568 Body End
LOAD D2 0.0005; if() #569 Test AND if() #568 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2295 ==; Test 'if'
SETV D2 0; if() #569 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2392; if() #569 Body End
LOAD D2 0.0005; if() #570 Test AND if() #569 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2310 ==; Test 'if'
SETV D2 3; if() #570 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2392; if() #570 Body End
LOAD D2 0.0005; if() #1005 Test AND if() #570 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2392 ==; Test 'if'
SETV D2 2; if() #1005 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; if() #1005 Body End
GOTO 2392; if() #570 Else End AND if() #569 Else End AND if() #568 Else End AND if() #567 Body End
LOAD D2 0.0005; if() #571 Test AND if() #567 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2342 ==; Test 'if'
PUSHVARGV 2; InlineFunc[Direction Choose(Direction)] Params Start AND if() #571 Body Start
PUSHVARGV 3; InlineFunc[Direction Choose(Direction)] Params End
CHOOSEVARG; InlineFunc[Direction Choose(Direction)] Body
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2392; if() #571 Body End
LOAD D2 0.0005; if() #572 Test AND if() #571 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2359 ==; Test 'if'
PUSHVARGV 2; InlineFunc[Direction Choose(Direction)] Params Start AND if() #572 Body Start
PUSHVARGV 3; InlineFunc[Direction Choose(Direction)] Params End
CHOOSEVARG; InlineFunc[Direction Choose(Direction)] Body
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2392; if() #572 Body End
LOAD D2 0.0005; if() #573 Test AND if() #572 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2376 ==; Test 'if'
PUSHVARGV 0; InlineFunc[Direction Choose(Direction)] Params Start AND if() #573 Body Start
PUSHVARGV 1; InlineFunc[Direction Choose(Direction)] Params End
CHOOSEVARG; InlineFunc[Direction Choose(Direction)] Body
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2392; if() #573 Body End
LOAD D2 0.0005; if() #1006 Test AND if() #573 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2392 ==; Test 'if'
PUSHVARGV 0; InlineFunc[Direction Choose(Direction)] Params Start AND if() #1006 Body Start
PUSHVARGV 1; InlineFunc[Direction Choose(Direction)] Params End
CHOOSEVARG; InlineFunc[Direction Choose(Direction)] Body
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; if() #1006 Body End
LOAD D2 0.0015; if() #573 Else End AND if() #572 Else End AND if() #571 Else End AND if() #567 Else End AND if() #563 Else End AND if() #559 Else End AND if() #1007 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2399 ==; Test 'if'
SETV D2 1; if() #1007 Body Start
STORE D2 0.0015; if() #1007 Body End
LOAD D2 0.0005; unless() #1002 Body End
PUSHR D2
POP D0
READPODARRAYV D2 0
SETR GD4 D2
LOAD D2 0.0017; if() #1008 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 2417 ==; Test 'if'
PUSHR D4; if() #1008 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #1008 Body End
PUSHR D4
LOAD D2 0.0005; UsrFunc[void Ghost_Move(int, int, int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 2.6938; UsrFunc[void Ghost_Move(int, int, int)] Call
POP D4
LOAD D2 0.0008; if() #574 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2441 ==; Test 'if'
LOAD D2 0.0008; if() #574 Body Start
SUBV D2 1
STORE D2 0.0008
GOTO 3499; if() #574 Body End
SETV D3 24; InlineFunc[int Rand(int)] Params AND if() #1009 Test AND if() #574 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
SETV D2 1; if() #1009 Body Start
STORE D2 0.0002; if() #1009 Body End
GOTO 3499; if() #574 Else End AND if() #558 Body End
LOAD D2 0.0026; if() #575 Test AND if() #558 Else Start
COMPAREV D2 12
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2712 ==; Test 'if'
LOAD D2 0.0005; if() #1010 Test AND if() #575 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 15
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2490 ==; Test 'if'
SETV D3 4; InlineFunc[int Rand(int)] Params AND if() #1010 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params End
CALLFUNC 3.3329; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Call
POP D4
SETV D2 1
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 15 D2; if() #1010 Body End
LOAD D2 0.0009; if() #576 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2499 ==; Test 'if'
LOAD D2 0.0009; if() #576 Body Start
SUBV D2 1
STORE D2 0.0009
GOTO 2684; if() #576 Body End
SETV D3 4; InlineFunc[int Rand(int)] Params AND if() #576 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
PUSHVARGV 1; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHVARGR NPCRATE; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0046
LOAD D2 0.0046; InlineFunc[int Rand(int)] Params Start AND if() #1011 Test
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2550 ==; Test 'if'
PUSHARGSR D4 0.0003; if() #1011 Body Start AND UsrFunc[int AngleDir4(int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2; UsrFunc[int AngleDir4(int)] Params End
CALLFUNC 2.0431; UsrFunc[int AngleDir4(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; if() #1011 Body End
PUSHARGSR D4 0.0002; unless() #1012 Test AND UsrFunc[bool EZB_CanMoveAngle(int)] Params Start
LOAD D2 0.0005; UsrFunc[int EZB_DirAngle(int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2; UsrFunc[int EZB_DirAngle(int)] Params End
CALLFUNC 3.1987; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
PUSHR D2; UsrFunc[bool EZB_CanMoveAngle(int)] Params End
CALLFUNC 3.1389; UsrFunc[bool EZB_CanMoveAngle(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 2576 !=; Test 'unless'
PUSHR D4; unless() #1012 Body Start
LOAD D2 0.0005; UsrFunc[int OppositeDir(int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2; UsrFunc[int OppositeDir(int)] Params End
CALLFUNC 2.9310; UsrFunc[int OppositeDir(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; unless() #1012 Body End
LOAD D2 0.0005
PUSHR D2
POP D0
READPODARRAYV D2 0
STORE D2 0.0045
SETV D2 0; for() #254 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #254 LoopTest
COMPAREV D2 16
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2639 ==; for() #254 TestFail?
PUSHR D4; for() #254 Body Start
LOAD D2 0.0045; UsrFunc[void Ghost_Move(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 2.6938; UsrFunc[void Ghost_Move(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params End
CALLFUNC 3.3329; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Call
POP D4
LOAD D2 0.0017; if() #1013 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 2626 ==; Test 'if'
PUSHR D4; if() #1013 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #1013 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #254 Body End
LOAD D2 0.0046; for() #254 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 2583; for() #254 End
LOAD D2 0.0006; if() #1014 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2647 ==; Test 'if'
LOAD D2 0.0006; if() #1014 Body Start
SUBV D2 1
STORE D2 0.0006; if() #1014 Body End
LOAD D2 0.0006; if() #1015 Test
COMPAREV D2 0
GOTOCMP 2656 >
SETV D3 2; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
GOTOCMP 2656 !=
SETV D2 1
GOTO 2657
SETV D2 0
COMPAREV D2 0
GOTOCMP 2666 ==; Test 'if'
SETV D2 1; if() #1015 Body Start
STORE D2 0.0002
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
STORE D2 0.0006; if() #1015 Body End
LOAD D2 0.0002; unless() #1016 Test
COMPAREV D2 0
GOTOCMP 2671 !=; Test 'unless'
SETV D2 1; unless() #1016 Body Start
STORE D2 0.0015; unless() #1016 Body End
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
PUSHR D2
LOAD D2 0.0034; InlineFunc[int Rand(int)] Params Start
PUSHR D2
POP REFNPC
SETR D3 NPCHOMING; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0009; if() #576 Else End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params End
CALLFUNC 3.3329; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Call
POP D4
LOAD D2 0.0017; if() #1017 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
PUSHR D4; if() #1017 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #1017 Body End
GOTO 3499; if() #575 Body End
LOAD D2 0.0026; if() #577 Test AND if() #575 Else Start
COMPAREV D2 13
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2974 ==; Test 'if'
LOAD D2 0.0005; if() #1018 Test AND if() #577 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 15
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2752 ==; Test 'if'
SETV D3 8; InlineFunc[int Rand(int)] Params AND if() #1018 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params End
CALLFUNC 3.3329; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Call
POP D4
SETV D2 1
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 15 D2; if() #1018 Body End
LOAD D2 0.0009; if() #578 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2761 ==; Test 'if'
LOAD D2 0.0009; if() #578 Body Start
SUBV D2 1
STORE D2 0.0009
GOTO 2946; if() #578 Body End
SETV D3 8; InlineFunc[int Rand(int)] Params AND if() #578 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
PUSHVARGV 1; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHVARGR NPCRATE; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0046
LOAD D2 0.0046; InlineFunc[int Rand(int)] Params Start AND if() #1019 Test
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2812 ==; Test 'if'
PUSHARGSR D4 0.0003; if() #1019 Body Start AND UsrFunc[int AngleDir8(int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 2.0474; UsrFunc[int AngleDir8(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; if() #1019 Body End
PUSHARGSR D4 0.0002; unless() #1020 Test AND UsrFunc[bool EZB_CanMoveAngle(int)] Params Start
LOAD D2 0.0005; UsrFunc[int EZB_DirAngle(int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2; UsrFunc[int EZB_DirAngle(int)] Params End
CALLFUNC 3.1987; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
PUSHR D2; UsrFunc[bool EZB_CanMoveAngle(int)] Params End
CALLFUNC 3.1389; UsrFunc[bool EZB_CanMoveAngle(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 2838 !=; Test 'unless'
PUSHR D4; unless() #1020 Body Start
LOAD D2 0.0005; UsrFunc[int OppositeDir(int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2; UsrFunc[int OppositeDir(int)] Params End
CALLFUNC 2.9310; UsrFunc[int OppositeDir(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; unless() #1020 Body End
LOAD D2 0.0005
PUSHR D2
POP D0
READPODARRAYV D2 0
STORE D2 0.0045
SETV D2 0; for() #255 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #255 LoopTest
COMPAREV D2 16
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2901 ==; for() #255 TestFail?
PUSHR D4; for() #255 Body Start
LOAD D2 0.0045; UsrFunc[void Ghost_Move(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 2.6938; UsrFunc[void Ghost_Move(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params End
CALLFUNC 3.3329; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Call
POP D4
LOAD D2 0.0017; if() #1021 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 2888 ==; Test 'if'
PUSHR D4; if() #1021 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #1021 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #255 Body End
LOAD D2 0.0046; for() #255 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 2845; for() #255 End
LOAD D2 0.0006; if() #1022 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2909 ==; Test 'if'
LOAD D2 0.0006; if() #1022 Body Start
SUBV D2 1
STORE D2 0.0006; if() #1022 Body End
LOAD D2 0.0006; if() #1023 Test
COMPAREV D2 0
GOTOCMP 2918 >
SETV D3 2; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
GOTOCMP 2918 !=
SETV D2 1
GOTO 2919
SETV D2 0
COMPAREV D2 0
GOTOCMP 2928 ==; Test 'if'
SETV D2 1; if() #1023 Body Start
STORE D2 0.0002
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
STORE D2 0.0006; if() #1023 Body End
LOAD D2 0.0002; unless() #1024 Test
COMPAREV D2 0
GOTOCMP 2933 !=; Test 'unless'
SETV D2 1; unless() #1024 Body Start
STORE D2 0.0015; unless() #1024 Body End
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
PUSHR D2
LOAD D2 0.0034; InlineFunc[int Rand(int)] Params Start
PUSHR D2
POP REFNPC
SETR D3 NPCHOMING; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0009; if() #578 Else End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params End
CALLFUNC 3.3329; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Call
POP D4
LOAD D2 0.0017; if() #1025 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
PUSHR D4; if() #1025 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #1025 Body End
GOTO 3499; if() #577 Body End
LOAD D2 0.0026; if() #579 Test AND if() #577 Else Start
COMPAREV D2 14
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3053 ==; Test 'if'
PUSHR D4; if() #579 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
MULTV D2 8
PUSHR D2
PUSHVARGV 0; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 4
PUSHVARGV 8; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHARGSV -1000 0.0002
PUSHV 4; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Params End
CALLFUNC 3.6698; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Call
POP D4
LOAD D2 0.0006; if() #1026 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 3019 ==; Test 'if'
LOAD D2 0.0006; if() #1026 Body Start
SUBV D2 1
STORE D2 0.0006; if() #1026 Body End
LOAD D2 0.0006; if() #1027 Test
COMPAREV D2 0
GOTOCMP 3037 <=
LOAD D2 0.0034; InlineFunc[int Ceiling(int)] Params Start AND InlineFunc[int Max(int, int)] Params Start AND InlineFunc[int Rand(int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
MULTV D2 0.5000; InlineFunc[int Ceiling(int)] Params End
CEILING D2; InlineFunc[int Ceiling(int)] Body
PUSHVARGR D2
PUSHVARGV 2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
GOTOCMP 3037 ==
SETV D2 0
GOTO 3038
SETV D2 1
COMPAREV D2 0
GOTOCMP 3047 ==; Test 'if'
SETV D2 1; if() #1027 Body Start
STORE D2 0.0002
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
STORE D2 0.0006; if() #1027 Body End
LOAD D2 0.0002; unless() #1028 Test
COMPAREV D2 0
GOTOCMP 3499 !=; Test 'unless'
SETV D2 1; unless() #1028 Body Start
STORE D2 0.0015; unless() #1028 Body End
GOTO 3499; if() #579 Body End
LOAD D2 0.0026; if() #580 Test AND if() #579 Else Start
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3466 ==; Test 'if'
LOAD D2 0.0005; if() #1029 Test AND if() #580 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 15
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3128 ==; Test 'if'
SETV D2 1; if() #1029 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 15 D2
LOAD D2 0.0034; if() #581 Test
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3087 ==; Test 'if'
SETV D2 1; if() #581 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
GOTO 3112; if() #581 Body End
LOAD D2 0.0034; if() #582 Test AND if() #581 Else Start
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3102 ==; Test 'if'
SETV D2 2; if() #582 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
GOTO 3112; if() #582 Body End
PUSHR D4; if() #582 Else Start
PUSHV 1; UsrFunc[int Rand(int, int)] Params Start
PUSHV 2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2; if() #582 Else End
PUSHR D4; if() #581 Else End
LOAD D2 0.0047; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR GD4; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params End
CALLFUNC 3.3329; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Call
POP D4
SETR D2 GD4
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2; if() #1029 Body End
LOAD D2 0.0005
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0005; if() #1030 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 1
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 3412 ==; Test 'if'
SETV D2 0; for() #256 setup AND if() #1030 Body Start
STORE D2 0.0046
LOAD D2 0.0046; for() #256 LoopTest
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP D0
READPODARRAYV D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3412 ==; for() #256 TestFail?
LOAD D2 0.0005; if() #583 Test AND for() #256 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3262 ==; Test 'if'
PUSHR D4; if() #583 Body Start
LOAD D2 0.0005; UsrFunc[int EZB_TurnDir4(int, bool)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
PUSHV 1; UsrFunc[int EZB_TurnDir4(int, bool)] Params End
CALLFUNC 3.7167; UsrFunc[int EZB_TurnDir4(int, bool)] Call
POP D4
STORE D2 0.0045
PUSHR D4; if() #1031 Test
LOAD D2 0.0045; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1543; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3349 ==; Test 'if'
SETR D2 GD1; if() #1031 Body Start
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int EZB_DirX(int, int)] Params Start
PUSHR D2
PUSHV 8; UsrFunc[int EZB_DirX(int, int)] Params End
CALLFUNC 3.2040; UsrFunc[int EZB_DirX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0040
SETR D2 GD2
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int EZB_DirY(int, int)] Params Start
PUSHR D2
PUSHV 8; UsrFunc[int EZB_DirY(int, int)] Params End
CALLFUNC 3.2077; UsrFunc[int EZB_DirY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0039
PUSHR D4; unless() #1032 Test
LOAD D2 0.0040; UsrFunc[bool EZB_CanMoveAtPos(int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_OFFSET_X
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_OFFSET_Y
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_WIDTH
LOAD D2 0.0034
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_HEIGHT
PUSHR D4
LOAD D2 0.0005; UsrFunc[int OppositeDir(int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2; UsrFunc[int OppositeDir(int)] Params End
CALLFUNC 2.9310; UsrFunc[int OppositeDir(int)] Call
POP D4
PUSHR D2; UsrFunc[bool EZB_CanMoveAtPos(int, int, int, int, int)] Params End
CALLFUNC 3.1465; UsrFunc[bool EZB_CanMoveAtPos(int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3349 !=; Test 'unless'
LOAD D2 0.0045; unless() #1032 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2; unless() #1032 Body End
GOTO 3349; if() #1031 Body End AND if() #583 Body End
PUSHR D4; if() #583 Else Start
LOAD D2 0.0005; UsrFunc[int EZB_TurnDir4(int, bool)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
PUSHV 0; UsrFunc[int EZB_TurnDir4(int, bool)] Params End
CALLFUNC 3.7167; UsrFunc[int EZB_TurnDir4(int, bool)] Call
POP D4
STORE D2 0.0045
PUSHR D4; if() #1033 Test
LOAD D2 0.0045; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1543; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3349 ==; Test 'if'
SETR D2 GD1; if() #1033 Body Start
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int EZB_DirX(int, int)] Params Start
PUSHR D2
PUSHV 8; UsrFunc[int EZB_DirX(int, int)] Params End
CALLFUNC 3.2040; UsrFunc[int EZB_DirX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0040
SETR D2 GD2
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int EZB_DirY(int, int)] Params Start
PUSHR D2
PUSHV 8; UsrFunc[int EZB_DirY(int, int)] Params End
CALLFUNC 3.2077; UsrFunc[int EZB_DirY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0039
PUSHR D4; unless() #1034 Test
LOAD D2 0.0040; UsrFunc[bool EZB_CanMoveAtPos(int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_OFFSET_X
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_OFFSET_Y
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_WIDTH
LOAD D2 0.0034
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_HEIGHT
PUSHR D4
LOAD D2 0.0005; UsrFunc[int OppositeDir(int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2; UsrFunc[int OppositeDir(int)] Params End
CALLFUNC 2.9310; UsrFunc[int OppositeDir(int)] Call
POP D4
PUSHR D2; UsrFunc[bool EZB_CanMoveAtPos(int, int, int, int, int)] Params End
CALLFUNC 3.1465; UsrFunc[bool EZB_CanMoveAtPos(int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3349 !=; Test 'unless'
LOAD D2 0.0045; unless() #1034 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2; unless() #1034 Body End
PUSHR D4; if() #1033 Body End AND if() #583 Else End AND unless() #1035 Test
LOAD D2 0.0005; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1543; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3398 !=; Test 'unless'
LOAD D2 0.0005; if() #584 Test AND unless() #1035 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3384 ==; Test 'if'
PUSHR D4; if() #584 Body Start
LOAD D2 0.0005; UsrFunc[int EZB_TurnDir4(int, bool)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
PUSHV 0; UsrFunc[int EZB_TurnDir4(int, bool)] Params End
CALLFUNC 3.7167; UsrFunc[int EZB_TurnDir4(int, bool)] Call
POP D4
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
GOTO 3398; if() #584 Body End
PUSHR D4; if() #584 Else Start
LOAD D2 0.0005; UsrFunc[int EZB_TurnDir4(int, bool)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
PUSHV 1; UsrFunc[int EZB_TurnDir4(int, bool)] Params End
CALLFUNC 3.7167; UsrFunc[int EZB_TurnDir4(int, bool)] Call
POP D4
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2; if() #584 Else End
PUSHR D4; unless() #1035 Body End
LOAD D2 0.0005; UsrFunc[void Ghost_Move(int, int, int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 2.6938; UsrFunc[void Ghost_Move(int, int, int)] Call
POP D4; for() #256 Body End
LOAD D2 0.0046; for() #256 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 3155; for() #256 End
LOAD D2 0.0005; if() #1030 Body End
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0005; InlineFunc[int Floor(int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0005
PUSHR D2
POP D0
READPODARRAYV D2 2
SETR GD4 D2
LOAD D2 0.0017; if() #1036 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 3448 ==; Test 'if'
PUSHR D4; if() #1036 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #1036 Body End
LOAD D2 0.0008; if() #585 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 3457 ==; Test 'if'
LOAD D2 0.0008; if() #585 Body Start
SUBV D2 1
STORE D2 0.0008
GOTO 3499; if() #585 Body End
SETV D3 24; InlineFunc[int Rand(int)] Params AND if() #1037 Test AND if() #585 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
SETV D2 1; if() #1037 Body Start
STORE D2 0.0002; if() #1037 Body End
GOTO 3499; if() #585 Else End AND if() #580 Body End
LOAD D2 0.0026; if() #1038 Test AND if() #580 Else Start
COMPAREV D2 16
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
PUSHR D4; if() #1038 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FishWizardUpdate(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0005
PUSHR D2; UsrFunc[void EZB_FishWizardUpdate(ffc, npc, int, int)] Params End
CALLFUNC 3.4143; UsrFunc[void EZB_FishWizardUpdate(ffc, npc, int, int)] Call
POP D4
LOAD D2 0.0005; if() #586 Test
PUSHR D2
POP D0
READPODARRAYV D2 2
COMPAREV D2 0
GOTOCMP 3491 ==; Test 'if'
SETV D2 1; if() #586 Body Start
STORE D2 0.0002
GOTO 3499; if() #586 Body End
LOAD D2 0.0005; if() #1039 Test AND if() #586 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 3
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
SETV D2 1; if() #1039 Body Start
STORE D2 0.0015; if() #1039 Body End
LOAD D2 0.0015; if() #586 Else End AND if() #1038 Body End AND if() #580 Else End AND if() #579 Else End AND if() #577 Else End AND if() #575 Else End AND if() #558 Else End AND if() #553 Else End AND if() #550 Else End AND if() #549 Else End AND if() #547 Else End AND if() #545 Else End AND if() #543 Else End AND if() #541 Else End AND if() #539 Else End AND if() #537 Else End AND if() #535 Else End AND if() #534 Else End AND if() #1040 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3742 ==; Test 'if'
LOAD D2 0.0016; if() #587 Test AND if() #1040 Body Start
COMPAREV D2 44
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3539 ==; Test 'if'
PUSHR D4; if() #587 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 3.1987; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3462; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
GOTO 3740; if() #587 Body End
LOAD D2 0.0016; if() #588 Test AND if() #587 Else Start
COMPAREV D2 45
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3592 ==; Test 'if'
PUSHR D4; if() #588 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3462; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
GOTO 3740; if() #588 Body End
LOAD D2 0.0016; if() #589 Test AND if() #588 Else Start
COMPAREV D2 46
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3642 ==; Test 'if'
SETR D2 NPCCOUNT; InlineFunc[int screendata::NumNPCs()] Body AND if() #1041 Test AND if() #589 Body Start
COMPAREV D2 40
GOTOCMP 3609 >=
PUSHR D4
LOAD D2 0.0033; UsrFunc[int EZB_NumSummons(npc)] Params Start
PUSHR D2; UsrFunc[int EZB_NumSummons(npc)] Params End
CALLFUNC 3.6199; UsrFunc[int EZB_NumSummons(npc)] Call
POP D4
COMPAREV D2 8
GOTOCMP 3609 >=
SETV D2 1
GOTO 3610
SETV D2 0
COMPAREV D2 0
GOTOCMP 3740 ==; Test 'if'
SETV D2 56; InlineFunc[void Game::PlaySound(int)] Params AND if() #1041 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
LOAD D2 0.0021; UsrFunc[npc CreateNPCAt(int, int, int)] Params Start
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2; UsrFunc[npc CreateNPCAt(int, int, int)] Params End
CALLFUNC 2.0762; UsrFunc[npc CreateNPCAt(int, int, int)] Call
POP D4
STORE D2 0.0032
PUSHR D4
LOAD D2 0.0032; UsrFunc[void EZB_AddSummon(npc, npc)] Params Start
PUSHR D2
LOAD D2 0.0033
PUSHR D2; UsrFunc[void EZB_AddSummon(npc, npc)] Params End
CALLFUNC 3.0518; UsrFunc[void EZB_AddSummon(npc, npc)] Call
POP D4; if() #1041 Body End
GOTO 3740; if() #589 Body End
LOAD D2 0.0016; if() #590 Test AND if() #589 Else Start
COMPAREV D2 47
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3691 ==; Test 'if'
SETV D2 0; for() #257 setup AND if() #590 Body Start
STORE D2 0.0046
LOAD D2 0.0046; for() #257 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3740 ==; for() #257 TestFail?
PUSHR D4; for() #257 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0046
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3462; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #257 Body End
LOAD D2 0.0046; for() #257 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 3649; for() #257 End
GOTO 3740; if() #590 Body End
LOAD D2 0.0016; if() #1042 Test AND if() #590 Else Start
COMPAREV D2 48
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3740 ==; Test 'if'
SETV D2 0; for() #258 setup AND if() #1042 Body Start
STORE D2 0.0046
LOAD D2 0.0046; for() #258 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3740 ==; for() #258 TestFail?
PUSHR D4; for() #258 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0046
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
ADDV D2 45
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3462; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #258 Body End
LOAD D2 0.0046; for() #258 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 3698; for() #258 End
SETV D2 -8; if() #1042 Body End AND if() #590 Else End AND if() #589 Else End AND if() #588 Else End AND if() #587 Else End
STORE D2 0.0015; if() #1040 Body End
LOAD D2 0.0015; if() #1043 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3750 ==; Test 'if'
LOAD D2 0.0015; if() #1043 Body Start
ADDV D2 1
STORE D2 0.0015; if() #1043 Body End
LOAD D2 0.0002; if() #1044 Test
COMPAREV D2 0
GOTOCMP 3767 ==
LOAD D2 0.0030
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
GOTOCMP 3765 !=
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 200
COMPAREV D2 0
GOTOCMP 3767 ==
SETV D2 1
GOTO 3768
SETV D2 0
COMPAREV D2 0
GOTOCMP 20349 ==; Test 'if'
SETV D2 1; if() #1044 Body Start
PUSHR D2
LOAD D2 0.0027
SETR D0 D2
POP D2
WRITEPODARRAYVR 319 D2
STOREV 0 0.0001
LOAD D2 0.0030; InlineFunc[int Rand(int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0046
LOAD D2 0.0030
PUSHR D2
LOAD D2 0.0046
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001
LOAD D2 0.0017; if() #591 Test
ANDV D2 2048
COMPAREV D2 0
GOTOCMP 3816 ==; Test 'if'
LOAD D2 0.0030; if() #591 Body Start
PUSHR D2
LOAD D2 0.0003
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001
LOAD D2 0.0003
ADDV D2 1
STORE D2 0.0003
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0030
PUSHR D2
POP D0
READPODARRAYV D2 0
POP D3
MODR D3 D2
SETR D2 D3
STORE D2 0.0003
GOTO 3853; if() #591 Body End
LOAD D2 0.0004; if() #1046 Test AND if(true) #1045 [Opt:AlwaysOn] AND if() #591 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
GOTOCMP 3830 !=
LOAD D2 0.0030
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 2
GOTOCMP 3830 <=
SETV D2 1
GOTO 3831
SETV D2 0
COMPAREV D2 0
GOTOCMP 3853 ==; Test 'if'
LOAD D2 0.0046; if() #1046 Body Start
ADDV D2 1
STORE D2 0.0046
LOAD D2 0.0046
PUSHR D2
LOAD D2 0.0030
PUSHR D2
POP D0
READPODARRAYV D2 0
POP D3
MODR D3 D2
SETR D2 D3
STORE D2 0.0046
LOAD D2 0.0030
PUSHR D2
LOAD D2 0.0046
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001; if() #1046 Body End
LOAD D2 0.0001; if() #591 Else End
STORE D2 0.0004
LOAD D2 0.0001; if() #1047 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3953 ==; Test 'if'
PUSHR D4; if() #1047 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 2
STORE D2 0.0044
LOAD D2 0.0010
SETR GD10 D2
SETV D2 1; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4; while() #13 Test
LOAD D2 0.0042; UsrFunc[bool EZB_CanMoveAngle(int)] Params Start
PUSHR D2; UsrFunc[bool EZB_CanMoveAngle(int)] Params End
CALLFUNC 3.1389; UsrFunc[bool EZB_CanMoveAngle(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3953 ==; Test 'while'
LOAD D2 0.0044; InlineFunc[int Min(int, int)] Params Start AND while() #13 Body Start
ADDV D2 0.2000
PUSHVARGR D2
PUSHVARGV 5; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0044
PUSHR D4
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7476; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Trail(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Trail(ffc, npc, int)] Params End
CALLFUNC 3.7015; UsrFunc[void EZB_Trail(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #13 Body End
GOTO 3915; while() #13 End
LOAD D2 0.0001; if() #1047 Body End AND if() #1048 Test
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4005 ==; Test 'if'
PUSHR D4; if() #1048 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 3.1987; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3462; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1048 Body End
LOAD D2 0.0001; if() #1049 Test
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4083 ==; Test 'if'
PUSHR D4; if() #1049 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3462; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1049 Body End
LOAD D2 0.0001; if() #1050 Test
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4158 ==; Test 'if'
PUSHR D4; if() #1050 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 -1; for() #259 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #259 LoopTest
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 4148 ==; for() #259 TestFail?
PUSHR D4; for() #259 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 3.1987; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0046
MULTV D2 30
SETV D2 30
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 250; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3462; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #259 Body End
LOAD D2 0.0046; for() #259 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 4100; for() #259 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1050 Body End
LOAD D2 0.0001; if() #1051 Test
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4259 ==; Test 'if'
PUSHR D4; if() #1051 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 -1; for() #260 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #260 LoopTest
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 4249 ==; for() #260 TestFail?
PUSHR D4; for() #260 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0046
MULTV D2 30
SETV D2 30
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 250; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3462; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #260 Body End
LOAD D2 0.0046; for() #260 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 4183; for() #260 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1051 Body End
LOAD D2 0.0001; if() #1052 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4344 ==; Test 'if'
PUSHR D4; if() #1052 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 3.1987; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #261 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #261 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 4334 ==; for() #261 TestFail?
PUSHR D4; for() #261 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 350; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3462; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 8; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #261 Body End
LOAD D2 0.0046; for() #261 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 4290; for() #261 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1052 Body End
LOAD D2 0.0001; if() #1053 Test
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4456 ==; Test 'if'
PUSHR D4; if() #1053 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #262 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #262 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 4446 ==; for() #262 TestFail?
PUSHR D4; for() #262 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 350; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3462; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 8; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #262 Body End
LOAD D2 0.0046; for() #262 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 4402; for() #262 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1053 Body End
LOAD D2 0.0001; if() #1054 Test
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4543 ==; Test 'if'
PUSHR D4; if() #1054 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 3.1987; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #263 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #263 LoopTest
COMPAREV D2 24
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 4543 ==; for() #263 TestFail?
PUSHR D4; for() #263 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHR D4
LOAD D2 0.0046; UsrFunc[int Rand(int, int)] Params Start
SUBV2 -10 D2
PUSHR D2
LOAD D2 0.0046
ADDV D2 10
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 250; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3462; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 4; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #263 Body End
LOAD D2 0.0046; for() #263 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 4487; for() #263 End
LOAD D2 0.0001; if() #1054 Body End AND if() #1055 Test
COMPAREV D2 9
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4657 ==; Test 'if'
PUSHR D4; if() #1055 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #264 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #264 LoopTest
COMPAREV D2 24
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 4657 ==; for() #264 TestFail?
PUSHR D4; for() #264 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHR D4
LOAD D2 0.0046; UsrFunc[int Rand(int, int)] Params Start
SUBV2 -10 D2
PUSHR D2
LOAD D2 0.0046
ADDV D2 10
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 250; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3462; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 4; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #264 Body End
LOAD D2 0.0046; for() #264 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 4601; for() #264 End
LOAD D2 0.0001; if() #1055 Body End AND if() #1056 Test
COMPAREV D2 10
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4756 ==; Test 'if'
PUSHR D4; if() #1056 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
PUSHVARGV -1; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 1; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0044
PUSHR D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 3.1987; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0044
MULTV D2 75
SETV D2 75
PUSHR D2
LOAD D2 0.0044
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0042
SETV D2 0; for() #265 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #265 LoopTest
COMPAREV D2 7
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 4746 ==; for() #265 TestFail?
PUSHR D4; for() #265 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3462; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0044
MULTV D2 25
POP D3
ADDR D2 D3
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 4; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #265 Body End
LOAD D2 0.0046; for() #265 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 4694; for() #265 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 48; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1056 Body End
LOAD D2 0.0001; if() #1057 Test
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4881 ==; Test 'if'
PUSHR D4; if() #1057 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
PUSHVARGV -1; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 1; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0044
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0044
MULTV D2 75
SETV D2 75
PUSHR D2
LOAD D2 0.0044
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0042
SETV D2 0; for() #266 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #266 LoopTest
COMPAREV D2 7
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 4871 ==; for() #266 TestFail?
PUSHR D4; for() #266 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3462; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0044
MULTV D2 25
POP D3
ADDR D2 D3
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #266 Body End
LOAD D2 0.0046; for() #266 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 4819; for() #266 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 48; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1057 Body End
LOAD D2 0.0001; if() #1058 Test
COMPAREV D2 12
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5063 ==; Test 'if'
PUSHR D4; if() #1058 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
SUBV D2 45
STORE D2 0.0042
SETV D2 0; for() #267 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #267 LoopTest
COMPAREV D2 3
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5053 ==; for() #267 TestFail?
SETV D2 -4; for() #268 setup AND for() #267 Body Start
STORE D2 0.0045
LOAD D2 0.0045; for() #268 LoopTest
COMPAREV D2 4
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 4982 ==; for() #268 TestFail?
PUSHR D4; for() #268 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3462; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #268 Body End
LOAD D2 0.0045; for() #268 LoopIncrement
ADDV D2 2
STORE D2 0.0045
GOTO 4937; for() #268 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 16; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 -5; for() #269 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #269 LoopTest
COMPAREV D2 5
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 5039 ==; for() #269 TestFail?
PUSHR D4; for() #269 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3462; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #269 Body End
LOAD D2 0.0045; for() #269 LoopIncrement
ADDV D2 2
STORE D2 0.0045
GOTO 4994; for() #269 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #267 Body End
LOAD D2 0.0046; for() #267 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 4930; for() #267 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1058 Body End
LOAD D2 0.0001; if() #1059 Test
COMPAREV D2 13
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5183 ==; Test 'if'
PUSHR D4; if() #1059 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
PUSHVARGV -1; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 1; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0044
SETV D3 360; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0042
SETV D2 0; for() #270 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #270 LoopTest
COMPAREV D2 15
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5173 ==; for() #270 TestFail?
SETV D2 0; for() #271 setup AND for() #270 Body Start
STORE D2 0.0045
LOAD D2 0.0045; for() #271 LoopTest
COMPAREV D2 5
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5147 ==; for() #271 TestFail?
PUSHR D4; for() #271 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 72
SETV D2 72
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3462; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #271 Body End
LOAD D2 0.0045; for() #271 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 5102; for() #271 End
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0044
MULTV D2 4
SETV D2 4
PUSHR D2
LOAD D2 0.0044
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 4; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #270 Body End
LOAD D2 0.0046; for() #270 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 5095; for() #270 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1059 Body End
LOAD D2 0.0001; if() #1060 Test
COMPAREV D2 14
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5287 ==; Test 'if'
PUSHR D4; if() #1060 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #272 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #272 LoopTest
COMPAREV D2 3
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5277 ==; for() #272 TestFail?
SETV D3 360; InlineFunc[int Rand(int)] Params AND for() #272 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0042
SETV D2 0; for() #273 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #273 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5263 ==; for() #273 TestFail?
PUSHR D4; for() #273 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 36
SETV D2 36
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 180; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3462; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #273 Body End
LOAD D2 0.0045; for() #273 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 5218; for() #273 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 45; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #272 Body End
LOAD D2 0.0046; for() #272 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 5208; for() #272 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1060 Body End
LOAD D2 0.0001; if() #1061 Test
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5432 ==; Test 'if'
PUSHR D4; if() #1061 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #274 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #274 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5381 ==; for() #274 TestFail?
PUSHR D4; for() #274 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 8
LOAD D2 0.0042
PUSHR D2
PUSHV 0
LOAD D2 0.0028
PUSHR D2
PUSHV -1
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 30; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2114; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #274 Body End
LOAD D2 0.0046; for() #274 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 5337; for() #274 End
SETV D2 37; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #275 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #275 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5432 ==; for() #275 TestFail?
PUSHR D4; for() #275 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 8
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
PUSHV -1
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 20; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2114; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #275 Body End
LOAD D2 0.0046; for() #275 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 5385; for() #275 End
LOAD D2 0.0001; if() #1061 Body End AND if() #1062 Test
COMPAREV D2 16
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5579 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1062 Body Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #276 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #276 LoopTest
COMPAREV D2 60
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5526 ==; for() #276 TestFail?
PUSHR D4; for() #276 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 40
LOAD D2 0.0042
PUSHR D2
PUSHV 0
LOAD D2 0.0028
PUSHR D2
PUSHV -1
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 60; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2114; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #276 Body End
LOAD D2 0.0046; for() #276 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 5482; for() #276 End
SETV D2 37; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #277 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #277 LoopTest
COMPAREV D2 40
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5579 ==; for() #277 TestFail?
PUSHR D4; for() #277 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 40
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCWDP
MULTV D2 2
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV -1
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 40; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2114; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #277 Body End
LOAD D2 0.0046; for() #277 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 5530; for() #277 End
LOAD D2 0.0001; if() #1062 Body End AND if() #1063 Test
COMPAREV D2 17
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5896 ==; Test 'if'
PUSHR D4; if() #1063 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
LOAD D2 0.0012
MULTV D2 8
PUSHR D2
LOAD D2 0.0011
MULTV D2 8
POP D3
ADDR D2 D3
DIVV D2 2
STORE D2 0.0044
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #278 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #278 LoopTest
COMPAREV D2 40
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5761 ==; for() #278 TestFail?
LOAD D2 0.0028; InlineFunc[int Choose(int)] Params Start AND for() #278 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0043
SETV D2 -2; for() #279 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #279 LoopTest
COMPAREV D2 2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 5748 ==; for() #279 TestFail?
PUSHR D4; for() #279 Body Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0044; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 30
SETV D2 30
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7499; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0040
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0044; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 30
SETV D2 30
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7509; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0039
PUSHR D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 6
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 30
SETV D2 30
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 0
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 40; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2114; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #279 Body End
LOAD D2 0.0045; for() #279 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 5657; for() #279 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #278 Body End
LOAD D2 0.0046; for() #278 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 5638; for() #278 End
SETV D2 37; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #280 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #280 LoopTest
COMPAREV D2 25
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5896 ==; for() #280 TestFail?
LOAD D2 0.0028; InlineFunc[int Choose(int)] Params Start AND for() #280 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0043
SETV D2 -2; for() #281 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #281 LoopTest
COMPAREV D2 2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 5883 ==; for() #281 TestFail?
PUSHR D4; for() #281 Body Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0044; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 30
SETV D2 30
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7499; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0040
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0044; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 30
SETV D2 30
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7509; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0039
PUSHR D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 6
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 30
SETV D2 30
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 25; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2114; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #281 Body End
LOAD D2 0.0045; for() #281 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 5789; for() #281 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #280 Body End
LOAD D2 0.0046; for() #280 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 5765; for() #280 End
LOAD D2 0.0001; if() #1063 Body End AND if() #1064 Test
COMPAREV D2 18
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6450 ==; Test 'if'
PUSHR D4; if() #1064 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
PUSHVARGV -1; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 1; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0044
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
ADDV D2 45
STORE D2 0.0042
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #282 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #282 LoopTest
COMPAREV D2 40
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6073 ==; for() #282 TestFail?
LOAD D2 0.0028; InlineFunc[int Choose(int)] Params Start AND for() #282 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0043
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1065 Test
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 128
SETV D2 88; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 8
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 6011 ==; Test 'if'
PUSHARGSR D4 0.0003; if() #1065 Body Start AND UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 128
PUSHV 88; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 0.8000
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7476; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4; if() #1065 Body End
SETV D2 0; for() #283 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #283 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6060 ==; for() #283 TestFail?
PUSHR D4; for() #283 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 6
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 0
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 40; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2114; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #283 Body End
LOAD D2 0.0045; for() #283 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 6013; for() #283 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #282 Body End
LOAD D2 0.0046; for() #282 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 5951; for() #282 End
SETV D2 37; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #284 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #284 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6164 ==; for() #284 TestFail?
LOAD D2 0.0028; InlineFunc[int Choose(int)] Params Start AND for() #284 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0043
SETV D2 0; for() #285 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #285 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6151 ==; for() #285 TestFail?
PUSHR D4; for() #285 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 6
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 30; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2114; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #285 Body End
LOAD D2 0.0045; for() #285 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 6101; for() #285 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #284 Body End
LOAD D2 0.0046; for() #284 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 6077; for() #284 End
SETV D2 0; for() #286 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #286 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6259 ==; for() #286 TestFail?
LOAD D2 0.0028; InlineFunc[int Choose(int)] Params Start AND for() #286 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0043
SETV D2 0; for() #287 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #287 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6240 ==; for() #287 TestFail?
PUSHR D4; for() #287 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 6
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 30; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2114; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #287 Body End
LOAD D2 0.0045; for() #287 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 6190; for() #287 End
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0044
POP D3
ADDR D2 D3
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #286 Body End
LOAD D2 0.0046; for() #286 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 6166; for() #286 End
SETV D2 0; for() #288 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #288 LoopTest
COMPAREV D2 120
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6355 ==; for() #288 TestFail?
LOAD D2 0.0028; InlineFunc[int Choose(int)] Params Start AND for() #288 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0043
SETV D2 0; for() #289 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #289 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6335 ==; for() #289 TestFail?
PUSHR D4; for() #289 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 6
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 120; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2114; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #289 Body End
LOAD D2 0.0045; for() #289 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 6285; for() #289 End
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0044
MULTV D2 1.2500
POP D3
ADDR D2 D3
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #288 Body End
LOAD D2 0.0046; for() #288 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 6261; for() #288 End
SETV D2 0; for() #290 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #290 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6450 ==; for() #290 TestFail?
LOAD D2 0.0028; InlineFunc[int Choose(int)] Params Start AND for() #290 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0043
SETV D2 0; for() #291 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #291 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6431 ==; for() #291 TestFail?
PUSHR D4; for() #291 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 6
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 30; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2114; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #291 Body End
LOAD D2 0.0045; for() #291 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 6381; for() #291 End
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0044
POP D3
ADDR D2 D3
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #290 Body End
LOAD D2 0.0046; for() #290 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 6357; for() #290 End
LOAD D2 0.0001; if() #1064 Body End AND if() #1066 Test
COMPAREV D2 19
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6518 ==; Test 'if'
SETR D2 NPCCOUNT; InlineFunc[int screendata::NumNPCs()] Body AND if() #1067 Test AND if() #1066 Body Start
COMPAREV D2 40
GOTOCMP 6467 >=
PUSHR D4
LOAD D2 0.0033; UsrFunc[int EZB_NumSummons(npc)] Params Start
PUSHR D2; UsrFunc[int EZB_NumSummons(npc)] Params End
CALLFUNC 3.6199; UsrFunc[int EZB_NumSummons(npc)] Call
POP D4
COMPAREV D2 8
GOTOCMP 6467 >=
SETV D2 1
GOTO 6468
SETV D2 0
COMPAREV D2 0
GOTOCMP 6518 ==; Test 'if'
PUSHR D4; if() #1067 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 56; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
LOAD D2 0.0021; UsrFunc[npc CreateNPCAt(int, int, int)] Params Start
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2; UsrFunc[npc CreateNPCAt(int, int, int)] Params End
CALLFUNC 2.0762; UsrFunc[npc CreateNPCAt(int, int, int)] Call
POP D4
STORE D2 0.0032
PUSHR D4
LOAD D2 0.0032; UsrFunc[void EZB_AddSummon(npc, npc)] Params Start
PUSHR D2
LOAD D2 0.0033
PUSHR D2; UsrFunc[void EZB_AddSummon(npc, npc)] Params End
CALLFUNC 3.0518; UsrFunc[void EZB_AddSummon(npc, npc)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1067 Body End
LOAD D2 0.0001; if() #1066 Body End AND if() #1068 Test
COMPAREV D2 20
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6614 ==; Test 'if'
SETR D2 NPCCOUNT; InlineFunc[int screendata::NumNPCs()] Body AND if() #1069 Test AND if() #1068 Body Start
COMPAREV D2 40
GOTOCMP 6535 >=
PUSHR D4
LOAD D2 0.0033; UsrFunc[int EZB_NumSummons(npc)] Params Start
PUSHR D2; UsrFunc[int EZB_NumSummons(npc)] Params End
CALLFUNC 3.6199; UsrFunc[int EZB_NumSummons(npc)] Call
POP D4
COMPAREV D2 8
GOTOCMP 6535 >=
SETV D2 1
GOTO 6536
SETV D2 0
COMPAREV D2 0
GOTOCMP 6614 ==; Test 'if'
PUSHR D4; if() #1069 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 56; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #292 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #292 LoopTest
COMPAREV D2 2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6604 ==; for() #292 TestFail?
PUSHR D4; for() #292 Body Start
LOAD D2 0.0021; UsrFunc[npc CreateNPCAt(int, int, int)] Params Start
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
PUSHV -4; UsrFunc[int Rand(int, int)] Params Start
PUSHV 4; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
PUSHV -4; UsrFunc[int Rand(int, int)] Params Start
PUSHV 4; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[npc CreateNPCAt(int, int, int)] Params End
CALLFUNC 2.0762; UsrFunc[npc CreateNPCAt(int, int, int)] Call
POP D4
STORE D2 0.0032
PUSHR D4
LOAD D2 0.0032; UsrFunc[void EZB_AddSummon(npc, npc)] Params Start
PUSHR D2
LOAD D2 0.0033
PUSHR D2; UsrFunc[void EZB_AddSummon(npc, npc)] Params End
CALLFUNC 3.0518; UsrFunc[void EZB_AddSummon(npc, npc)] Call
POP D4; for() #292 Body End
LOAD D2 0.0046; for() #292 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 6552; for() #292 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1069 Body End
LOAD D2 0.0001; if() #1068 Body End AND if() #1070 Test
COMPAREV D2 21
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6710 ==; Test 'if'
SETR D2 NPCCOUNT; InlineFunc[int screendata::NumNPCs()] Body AND if() #1071 Test AND if() #1070 Body Start
COMPAREV D2 40
GOTOCMP 6631 >=
PUSHR D4
LOAD D2 0.0033; UsrFunc[int EZB_NumSummons(npc)] Params Start
PUSHR D2; UsrFunc[int EZB_NumSummons(npc)] Params End
CALLFUNC 3.6199; UsrFunc[int EZB_NumSummons(npc)] Call
POP D4
COMPAREV D2 8
GOTOCMP 6631 >=
SETV D2 1
GOTO 6632
SETV D2 0
COMPAREV D2 0
GOTOCMP 6710 ==; Test 'if'
PUSHR D4; if() #1071 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 56; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #293 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #293 LoopTest
COMPAREV D2 3
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6700 ==; for() #293 TestFail?
PUSHR D4; for() #293 Body Start
LOAD D2 0.0021; UsrFunc[npc CreateNPCAt(int, int, int)] Params Start
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
PUSHV -4; UsrFunc[int Rand(int, int)] Params Start
PUSHV 4; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
PUSHV -4; UsrFunc[int Rand(int, int)] Params Start
PUSHV 4; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[npc CreateNPCAt(int, int, int)] Params End
CALLFUNC 2.0762; UsrFunc[npc CreateNPCAt(int, int, int)] Call
POP D4
STORE D2 0.0032
PUSHR D4
LOAD D2 0.0032; UsrFunc[void EZB_AddSummon(npc, npc)] Params Start
PUSHR D2
LOAD D2 0.0033
PUSHR D2; UsrFunc[void EZB_AddSummon(npc, npc)] Params End
CALLFUNC 3.0518; UsrFunc[void EZB_AddSummon(npc, npc)] Call
POP D4; for() #293 Body End
LOAD D2 0.0046; for() #293 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 6648; for() #293 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1071 Body End
LOAD D2 0.0001; if() #1070 Body End AND if() #1072 Test
COMPAREV D2 22
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6797 ==; Test 'if'
PUSHR D4; if() #1072 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 100; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3462; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
STORE D2 0
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 3
PUSHV 0.0349
PUSHV 120; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9617; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1072 Body End
LOAD D2 0.0001; if() #1073 Test
COMPAREV D2 23
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6895 ==; Test 'if'
PUSHR D4; if() #1073 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #294 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #294 LoopTest
COMPAREV D2 5
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6895 ==; for() #294 TestFail?
PUSHR D4; for() #294 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 200; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3462; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 25; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #294 Body End
LOAD D2 0.0046; for() #294 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 6822; for() #294 End
LOAD D2 0.0001; if() #1073 Body End AND if() #1074 Test
COMPAREV D2 24
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6985 ==; Test 'if'
PUSHR D4; if() #1074 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #295 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #295 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6985 ==; for() #295 TestFail?
PUSHR D4; for() #295 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 200; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3462; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 6; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #295 Body End
LOAD D2 0.0046; for() #295 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 6920; for() #295 End
LOAD D2 0.0001; if() #1074 Body End AND if() #1075 Test
COMPAREV D2 25
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7070 ==; Test 'if'
PUSHR D4; if() #1075 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #296 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #296 LoopTest
COMPAREV D2 12
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7060 ==; for() #296 TestFail?
PUSHR D4; for() #296 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0046
MULTV D2 30
SETV D2 30
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
PUSHR D2
PUSHV 200; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3462; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
STORE D2 0
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 4
PUSHV 1
PUSHV 30; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9617; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
POP D4; for() #296 Body End
LOAD D2 0.0046; for() #296 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 7010; for() #296 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1075 Body End
LOAD D2 0.0001; if() #1076 Test
COMPAREV D2 26
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7138 ==; Test 'if'
PUSHR D4; if() #1076 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #297 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #297 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7128 ==; for() #297 TestFail?
PUSHR D4; for() #297 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0046
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3462; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #297 Body End
LOAD D2 0.0046; for() #297 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 7087; for() #297 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1076 Body End
LOAD D2 0.0001; if() #1077 Test
COMPAREV D2 27
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7207 ==; Test 'if'
PUSHR D4; if() #1077 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #298 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #298 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7197 ==; for() #298 TestFail?
PUSHR D4; for() #298 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0046
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
ADDV D2 45
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3462; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #298 Body End
LOAD D2 0.0046; for() #298 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 7155; for() #298 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1077 Body End
LOAD D2 0.0001; if() #1078 Test
COMPAREV D2 28
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7275 ==; Test 'if'
PUSHR D4; if() #1078 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #299 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #299 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7265 ==; for() #299 TestFail?
PUSHR D4; for() #299 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0046
MULTV D2 45
SETV D2 45
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3462; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #299 Body End
LOAD D2 0.0046; for() #299 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 7224; for() #299 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1078 Body End
LOAD D2 0.0001; if() #1079 Test
COMPAREV D2 29
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7376 ==; Test 'if'
PUSHR D4; if() #1079 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0
STORE D2 0.0042
PUSHR D4; if() #1080 Test
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
COMPAREV D2 128
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7301 ==; Test 'if'
SETV D2 180; if() #1080 Body Start
STORE D2 0.0042; if() #1080 Body End
SETV D2 0; for() #300 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #300 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7366 ==; for() #300 TestFail?
LOAD D2 0.0042; if() #592 Test AND for() #300 Body Start
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7333 ==; Test 'if'
PUSHR D4; if() #592 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0
PUSHR D4
PUSHV 8; UsrFunc[int Rand(int, int)] Params Start
PUSHV 152; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 250; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3462; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
GOTO 7352; if() #592 Body End
PUSHR D4; if() #592 Else Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 240
PUSHR D4
PUSHV 8; UsrFunc[int Rand(int, int)] Params Start
PUSHV 152; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 250; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3462; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; if() #592 Else End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 8; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #300 Body End
LOAD D2 0.0046; for() #300 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 7303; for() #300 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1079 Body End
LOAD D2 0.0001; if() #1081 Test
COMPAREV D2 30
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7555 ==; Test 'if'
PUSHR D4; if() #1081 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHV 8; UsrFunc[int Rand(int, int)] Params Start
PUSHV 152; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0.0044
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #301 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #301 LoopTest
COMPAREV D2 35
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7433 ==; for() #301 TestFail?
PUSHR D4; for() #301 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHV -32
LOAD D2 0.0044
PUSHR D2
PUSHV 8
PUSHARGSV 0 0.0002
LOAD D2 0.0028
PUSHR D2
PUSHV -1
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 35; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2114; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #301 Body End
LOAD D2 0.0046; for() #301 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 7400; for() #301 End
SETV D2 0; for() #302 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #302 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7555 ==; for() #302 TestFail?
SETV D2 37; InlineFunc[void Game::PlaySound(int)] Params AND for() #302 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
LOAD D2 0.0044
STORE D2 0.0039
PUSHR D4
PUSHV 8; UsrFunc[int Rand(int, int)] Params Start
PUSHV 152; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0.0044
LOAD D2 0.0044; while() #14 Test
PUSHR D2
LOAD D2 0.0039
POP D3
SUBR D3 D2
SETR D2 D3
COMPAREV D2 -40
GOTOCMP 7468 <=
LOAD D2 0.0044
PUSHR D2
LOAD D2 0.0039
POP D3
SUBR D3 D2
SETR D2 D3
COMPAREV D2 40
GOTOCMP 7468 >=
SETV D2 1
GOTO 7469
SETV D2 0
COMPAREV D2 0
GOTOCMP 7478 ==; Test 'while'
PUSHR D4; while() #14 Body Start
PUSHV 8; UsrFunc[int Rand(int, int)] Params Start
PUSHV 152; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0.0044; while() #14 Body End
GOTO 7450; while() #14 End
SETV D2 0; for() #303 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #303 LoopTest
COMPAREV D2 35
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7551 ==; for() #303 TestFail?
LOAD D2 0.0046; if() #1082 Test AND for() #303 Body Start
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7510 ==; Test 'if'
PUSHR D4; if() #1082 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHV -32
LOAD D2 0.0039
PUSHR D2
PUSHV 8
PUSHV 0
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
PUSHV -1
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 20; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2114; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; if() #1082 Body End
LOAD D2 0.0045; if() #1083 Test
COMPAREV D2 7
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7538 ==; Test 'if'
LOAD D2 0.0046; if() #1084 Test AND if() #1083 Body Start
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7522 ==; Test 'if'
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params AND if() #1084 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body AND if() #1084 Body End
PUSHR D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHV -32
LOAD D2 0.0044
PUSHR D2
PUSHV 8
PUSHARGSV 0 0.0002
LOAD D2 0.0028
PUSHR D2
PUSHV -1
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 7; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2114; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; if() #1083 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #303 Body End
LOAD D2 0.0046; for() #303 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 7480; for() #303 End
LOAD D2 0.0045; for() #302 Body End AND for() #302 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 7435; for() #302 End
LOAD D2 0.0001; if() #1081 Body End AND if() #1085 Test
COMPAREV D2 31
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7818 ==; Test 'if'
PUSHR D4; if() #1085 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0
STORE D2 0.0044
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params AND while(true) #15 Body [Opt:AlwaysOn] Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #304 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #304 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7640 ==; for() #304 TestFail?
SETV D2 -1; for() #305 setup AND for() #304 Body Start
STORE D2 0.0045
LOAD D2 0.0045; for() #305 LoopTest
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 7627 ==; for() #305 TestFail?
PUSHR D4; for() #305 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0044
MULTV D2 24
SETV D2 24
PUSHR D2
LOAD D2 0.0044
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV -32
PUSHV 12
PUSHV 90
PUSHV 0
LOAD D2 0.0028
PUSHR D2
PUSHV -1
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 30; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2114; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #305 Body End
LOAD D2 0.0045; for() #305 LoopIncrement
ADDV D2 2
STORE D2 0.0045
GOTO 7583; for() #305 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #304 Body End
LOAD D2 0.0046; for() #304 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 7576; for() #304 End
SETV D2 37; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #306 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #306 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7711 ==; for() #306 TestFail?
SETV D2 -1; for() #307 setup AND for() #306 Body Start
STORE D2 0.0045
LOAD D2 0.0045; for() #307 LoopTest
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 7698 ==; for() #307 TestFail?
PUSHR D4; for() #307 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0044
MULTV D2 24
SETV D2 24
PUSHR D2
LOAD D2 0.0044
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV -32
PUSHV 12
PUSHV 90
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
PUSHV -1
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 20; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2114; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #307 Body End
LOAD D2 0.0045; for() #307 LoopIncrement
ADDV D2 2
STORE D2 0.0045
GOTO 7651; for() #307 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #306 Body End
LOAD D2 0.0046; for() #306 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 7644; for() #306 End
LOAD D2 0.0044
ADDV D2 1
STORE D2 0.0044
PUSHR D4; if() #1086 Test
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0044
MULTV D2 24
SETV D2 24
PUSHR D2
LOAD D2 0.0044
POP D3
MULTR D2 D3
MULTV D2 -1
POP D3
ADDR D2 D3
COMPAREV D2 16
GOTOCMP 7749 >=
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0044
MULTV D2 24
SETV D2 24
PUSHR D2
LOAD D2 0.0044
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
COMPAREV D2 224
GOTOCMP 7754 >
LOAD D2 0.0044
COMPAREV D2 10
GOTOCMP 7754 >
SETV D2 0
GOTO 7755
SETV D2 1
COMPAREV D2 0
GOTOCMP 7818 !=; Test 'if' AND break 1; AND if() #1086 Body
LOAD D2 0.0044; if() #1087 Test
COMPAREV D2 2
GOTOCMP 7813 <=
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
SUBV D2 16
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0044
MULTV D2 24
SETV D2 24
PUSHR D2
LOAD D2 0.0044
POP D3
MULTR D2 D3
MULTV D2 -1
POP D3
ADDR D2 D3
POP D3
COMPARER D3 D2
GOTOCMP 7813 <=
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
ADDV D2 16
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0044
MULTV D2 24
SETV D2 24
PUSHR D2
LOAD D2 0.0044
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
POP D3
COMPARER D3 D2
GOTOCMP 7813 >=
SETV D2 1
GOTO 7814
SETV D2 0
COMPAREV D2 0
GOTOCMP 7572 ==; Test 'if'
GOTO 7818; break 1; AND if() #1087 Body
GOTO 7572; while(true) #15 Body [Opt:AlwaysOn] End AND while() #15 End
LOAD D2 0.0001; if() #1085 Body End AND if() #1088 Test
COMPAREV D2 32
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7920 ==; Test 'if'
PUSHR D4; if() #1088 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #308 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #308 LoopTest
COMPAREV D2 2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7910 ==; for() #308 TestFail?
PUSHR D4; for() #308 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
SUBV D2 20
PUSHR D2
LOAD D2 0.0046
MULTV D2 40
SETV D2 40
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 250; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3462; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #308 Body End
LOAD D2 0.0046; for() #308 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 7843; for() #308 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1088 Body End
LOAD D2 0.0001; if() #1089 Test
COMPAREV D2 33
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8021 ==; Test 'if'
PUSHR D4; if() #1089 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 1
STORE D2 0.0044
LOAD D2 0.0010
SETR GD10 D2
SETV D2 1; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #309 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #309 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8021 ==; for() #309 TestFail?
LOAD D2 0.0044; InlineFunc[int Min(int, int)] Params Start AND for() #309 Body Start
ADDV D2 0.5000
PUSHVARGR D2
PUSHVARGV 5; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0044
PUSHR D4
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7476; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Trail(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Trail(ffc, npc, int)] Params End
CALLFUNC 3.7015; UsrFunc[void EZB_Trail(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #309 Body End
LOAD D2 0.0046; for() #309 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 7982; for() #309 End
LOAD D2 0.0001; if() #1089 Body End AND if() #1090 Test
COMPAREV D2 34
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8243 ==; Test 'if'
PUSHR D4; if() #1090 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 2
STORE D2 0.0044
SETV D2 1; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0
STORE D2 0.0046
LOAD D2 0.0010
SETR GD10 D2
PUSHR D4; while() #16 Test
LOAD D2 0.0042; UsrFunc[bool EZB_CanMoveAngle(int)] Params Start
PUSHR D2; UsrFunc[bool EZB_CanMoveAngle(int)] Params End
CALLFUNC 3.1389; UsrFunc[bool EZB_CanMoveAngle(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 8243 ==; Test 'while'
LOAD D2 0.0046; while() #16 Body Start
ADDV D2 1
STORE D2 0.0046
LOAD D2 0.0044; InlineFunc[int Min(int, int)] Params Start
ADDV D2 0.2000
PUSHVARGR D2
PUSHVARGV 5; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0044
PUSHR D4
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7476; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4
LOAD D2 0.0046; if() #1091 Test
MODV D2 4
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8225 ==; Test 'if'
LOAD D2 0.0034; if() #593 Test AND if() #1091 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCWEAPON
COMPAREV D2 140
GOTOCMP 8127 ==
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCWEAPON
COMPAREV D2 139
GOTOCMP 8127 ==
SETV D2 0
GOTO 8128
SETV D2 1
COMPAREV D2 0
GOTOCMP 8178 ==; Test 'if'
PUSHR D4; if() #593 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 0; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3462; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
GOTO 8225; if() #593 Body End
PUSHR D4; if() #593 Else Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3462; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; if() #593 Else End
PUSHR D4; if() #1091 Body End
LOAD D2 0.0047; UsrFunc[void EZB_Trail(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Trail(ffc, npc, int)] Params End
CALLFUNC 3.7015; UsrFunc[void EZB_Trail(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #16 Body End
GOTO 8083; while() #16 End
LOAD D2 0.0001; if() #1090 Body End AND if() #1092 Test
COMPAREV D2 35
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8501 ==; Test 'if'
PUSHR D4; if() #1092 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 2
STORE D2 0.0044
SETV D2 1; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0
STORE D2 0.0046
LOAD D2 0.0010
SETR GD10 D2
SETV D2 0; for() #310 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #310 LoopTest
COMPAREV D2 40
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8346 ==; for() #310 TestFail?
LOAD D2 0.0044; InlineFunc[int Min(int, int)] Params Start AND for() #310 Body Start
ADDV D2 0.1000
PUSHVARGR D2
PUSHVARGV 4; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0044
PUSHR D4
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7476; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Trail(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Trail(ffc, npc, int)] Params End
CALLFUNC 3.7015; UsrFunc[void EZB_Trail(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #310 Body End
LOAD D2 0.0046; for() #310 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 8307; for() #310 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4
SETV D2 2
STORE D2 0.0044
SETV D2 1; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0
STORE D2 0.0046
LOAD D2 0.0010
SETR GD10 D2
SETV D2 0; for() #311 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #311 LoopTest
COMPAREV D2 40
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8501 ==; for() #311 TestFail?
PUSHARGSR D4 0.0002; for() #311 Body Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0045
LOAD D2 0.0046; if() #1093 Test
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8467 ==; Test 'if'
PUSHR D4; InlineFunc[int Abs(int)] Params Start AND if() #1094 Test AND if() #1093 Body Start
LOAD D2 0.0042; UsrFunc[int EZB_AngDiff(int, int)] Params Start
PUSHR D2
LOAD D2 0.0045
PUSHR D2; UsrFunc[int EZB_AngDiff(int, int)] Params End
CALLFUNC 3.0581; UsrFunc[int EZB_AngDiff(int, int)] Call
POP D4; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 1
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 8467 ==; Test 'if'
LOAD D2 0.0042; InlineFunc[int WrapDegrees(int)] Params Start AND if() #1094 Body Start
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
LOAD D2 0.0042; UsrFunc[int EZB_AngDiff(int, int)] Params Start
PUSHR D2
LOAD D2 0.0045
PUSHR D2; UsrFunc[int EZB_AngDiff(int, int)] Params End
CALLFUNC 3.0581; UsrFunc[int EZB_AngDiff(int, int)] Call
POP D4
PUSHR D2; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
POP D3
ADDR D2 D3; InlineFunc[int WrapDegrees(int)] Params End
WRAPDEGREES D2; InlineFunc[int WrapDegrees(int)] Body
STORE D2 0.0042; if() #1094 Body End
LOAD D2 0.0044; if() #1093 Body End AND InlineFunc[int Min(int, int)] Params Start
ADDV D2 0.1000
PUSHVARGR D2
PUSHVARGV 4; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0044
PUSHR D4
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7476; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Trail(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Trail(ffc, npc, int)] Params End
CALLFUNC 3.7015; UsrFunc[void EZB_Trail(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #311 Body End
LOAD D2 0.0046; for() #311 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 8406; for() #311 End
LOAD D2 0.0001; if() #1092 Body End AND if() #1095 Test
COMPAREV D2 36
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8650 ==; Test 'if'
PUSHR D4; if() #1095 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 3.3303; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
POP D4
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 2.6000
SETR GD5 D2
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0041
SETV D2 2
STORE D2 0.0044
LOAD D2 0.0041; if() #594 Test
COMPAREV D2 32
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8596 ==; Test 'if'
SETV D2 0.5000; if() #594 Body Start
STORE D2 0.0044
GOTO 8622; if() #594 Body End
LOAD D2 0.0041; if() #595 Test AND if() #594 Else Start
COMPAREV D2 64
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8604 ==; Test 'if'
SETV D2 1; if() #595 Body Start
STORE D2 0.0044
GOTO 8622; if() #595 Body End
LOAD D2 0.0041; if() #596 Test AND if() #595 Else Start
COMPAREV D2 96
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8612 ==; Test 'if'
SETV D2 2; if() #596 Body Start
STORE D2 0.0044
GOTO 8622; if() #596 Body End
LOAD D2 0.0041; if() #597 Test AND if() #596 Else Start
COMPAREV D2 128
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8620 ==; Test 'if'
SETV D2 3; if() #597 Body Start
STORE D2 0.0044
GOTO 8622; if() #597 Body End
SETV D2 4; if() #597 Else Start
STORE D2 0.0044; if() #597 Else End
SETR D2 GD5; if() #596 Else End AND if() #595 Else End AND if() #594 Else End AND while() #17 Test
COMPAREV D2 0
GOTOCMP 8630 >
SETR D2 GD3
COMPAREV D2 0
GOTOCMP 8630 >
SETV D2 0
GOTO 8631
SETV D2 1
COMPAREV D2 0
GOTOCMP 8650 ==; Test 'while'
PUSHR D4; while() #17 Body Start
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7476; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #17 Body End
GOTO 8622; while() #17 End
LOAD D2 0.0001; if() #1095 Body End AND if() #1096 Test
COMPAREV D2 37
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8868 ==; Test 'if'
PUSHR D4; if() #1096 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 3.3303; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
POP D4
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 2.6000
SETR GD5 D2
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0041
SETV D2 2
STORE D2 0.0044
LOAD D2 0.0041; if() #598 Test
COMPAREV D2 32
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8745 ==; Test 'if'
SETV D2 0.5000; if() #598 Body Start
STORE D2 0.0044
GOTO 8771; if() #598 Body End
LOAD D2 0.0041; if() #599 Test AND if() #598 Else Start
COMPAREV D2 64
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8753 ==; Test 'if'
SETV D2 1; if() #599 Body Start
STORE D2 0.0044
GOTO 8771; if() #599 Body End
LOAD D2 0.0041; if() #600 Test AND if() #599 Else Start
COMPAREV D2 96
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8761 ==; Test 'if'
SETV D2 2; if() #600 Body Start
STORE D2 0.0044
GOTO 8771; if() #600 Body End
LOAD D2 0.0041; if() #601 Test AND if() #600 Else Start
COMPAREV D2 128
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8769 ==; Test 'if'
SETV D2 3; if() #601 Body Start
STORE D2 0.0044
GOTO 8771; if() #601 Body End
SETV D2 4; if() #601 Else Start
STORE D2 0.0044; if() #601 Else End
LOAD D2 0.0010; if() #600 Else End AND if() #599 Else End AND if() #598 Else End
SETR GD10 D2
SETR D2 GD5; while() #18 Test
COMPAREV D2 0
GOTOCMP 8781 >
SETR D2 GD3
COMPAREV D2 0
GOTOCMP 8781 >
SETV D2 0
GOTO 8782
SETV D2 1
COMPAREV D2 0
GOTOCMP 8801 ==; Test 'while'
PUSHR D4; while() #18 Body Start
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7476; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #18 Body End
GOTO 8773; while() #18 End
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 3.3303; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
POP D4
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 2.6000
SETR GD5 D2
SETR D2 GD5; while() #19 Test
COMPAREV D2 0
GOTOCMP 8847 >
SETR D2 GD3
COMPAREV D2 0
GOTOCMP 8847 >
SETV D2 0
GOTO 8848
SETV D2 1
COMPAREV D2 0
GOTOCMP 8868 ==; Test 'while'
PUSHR D4; while() #19 Body Start
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0044
DIVV D2 2
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7476; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #19 Body End
GOTO 8839; while() #19 End
LOAD D2 0.0001; if() #1096 Body End AND if() #1097 Test
COMPAREV D2 38
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 9076 ==; Test 'if'
PUSHR D4; if() #1097 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 3.2000
SETR GD5 D2
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0041
SETV D2 2
STORE D2 0.0044
LOAD D2 0.0041; if() #602 Test
COMPAREV D2 32
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8960 ==; Test 'if'
SETV D2 0.5000; if() #602 Body Start
STORE D2 0.0044
GOTO 8986; if() #602 Body End
LOAD D2 0.0041; if() #603 Test AND if() #602 Else Start
COMPAREV D2 64
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8968 ==; Test 'if'
SETV D2 1; if() #603 Body Start
STORE D2 0.0044
GOTO 8986; if() #603 Body End
LOAD D2 0.0041; if() #604 Test AND if() #603 Else Start
COMPAREV D2 96
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8976 ==; Test 'if'
SETV D2 2; if() #604 Body Start
STORE D2 0.0044
GOTO 8986; if() #604 Body End
LOAD D2 0.0041; if() #605 Test AND if() #604 Else Start
COMPAREV D2 128
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8984 ==; Test 'if'
SETV D2 3; if() #605 Body Start
STORE D2 0.0044
GOTO 8986; if() #605 Body End
SETV D2 4; if() #605 Else Start
STORE D2 0.0044; if() #605 Else End
LOAD D2 0.0010; if() #604 Else End AND if() #603 Else End AND if() #602 Else End
SETR GD10 D2
SETR D2 GD5; while() #20 Test
COMPAREV D2 0
GOTOCMP 8996 >
SETR D2 GD3
COMPAREV D2 0
GOTOCMP 8996 >
SETV D2 0
GOTO 8997
SETV D2 1
COMPAREV D2 0
GOTOCMP 9016 ==; Test 'while'
PUSHR D4; while() #20 Body Start
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7476; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #20 Body End
GOTO 8988; while() #20 End
SETV D2 2; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #312 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #312 LoopTest
COMPAREV D2 96
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9076 ==; for() #312 TestFail?
PUSHR D4; for() #312 Body Start
PUSHV 2; UsrFunc[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0046
PUSHR D2
PUSHV 64
PUSHV 12
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 3
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 4
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 5
PUSHR D2; UsrFunc[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.6545; UsrFunc[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #312 Body End
LOAD D2 0.0046; for() #312 LoopIncrement
ADDV D2 3
STORE D2 0.0046
GOTO 9020; for() #312 End
LOAD D2 0.0001; if() #1097 Body End AND if() #1098 Test
COMPAREV D2 39
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 9446 ==; Test 'if'
PUSHR D4; if() #1098 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4
LOAD D2 0.0010
SETR GD10 D2
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #313 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #313 LoopTest
COMPAREV D2 176
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9201 ==; for() #313 TestFail?
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1099 Test AND for() #313 Body Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9183 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1099 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5023; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1099 Body End
SETR D2 GD3
ADDV D2 4
SETR GD3 D2
SETV D2 0
SETR GD5 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #313 Body End
LOAD D2 0.0046; for() #313 LoopIncrement
ADDV D2 4
STORE D2 0.0046
GOTO 9113; for() #313 End
SETV D2 0; for() #314 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #314 LoopTest
COMPAREV D2 180
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9290 ==; for() #314 TestFail?
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1100 Test AND for() #314 Body Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9275 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1100 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.5000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.5000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5023; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1100 Body End
SETV D2 0
SETR GD5 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #314 Body End
LOAD D2 0.0046; for() #314 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 9203; for() #314 End
SETV D2 38; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETR D2 GD3; while() #21 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9380 ==; Test 'while'
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1101 Test AND while() #21 Body Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9364 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1101 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.2000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.2000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5023; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1101 Body End
SETR D2 GD3; InlineFunc[int Max(int, int)] Params Start
SUBV D2 4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD3 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #21 Body End
GOTO 9292; while() #21 End
SETV D2 3; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 20
PUSHR D2
POP D2
SETR QUAKE D2
SETV D2 2; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #315 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #315 LoopTest
COMPAREV D2 128
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9446 ==; for() #315 TestFail?
PUSHR D4; for() #315 Body Start
PUSHV 2; UsrFunc[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0046
PUSHR D2
PUSHV 80
PUSHV 16
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 3
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 4
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 5
PUSHR D2; UsrFunc[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.6545; UsrFunc[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #315 Body End
LOAD D2 0.0046; for() #315 LoopIncrement
ADDV D2 6
STORE D2 0.0046
GOTO 9390; for() #315 End
LOAD D2 0.0001; if() #1098 Body End AND if() #1102 Test
COMPAREV D2 40
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 9827 ==; Test 'if'
PUSHR D4; if() #1102 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4
LOAD D2 0.0010
SETR GD10 D2
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #316 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #316 LoopTest
COMPAREV D2 176
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9571 ==; for() #316 TestFail?
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1103 Test AND for() #316 Body Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9553 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1103 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5023; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1103 Body End
SETR D2 GD3
ADDV D2 4
SETR GD3 D2
SETV D2 0
SETR GD5 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #316 Body End
LOAD D2 0.0046; for() #316 LoopIncrement
ADDV D2 4
STORE D2 0.0046
GOTO 9483; for() #316 End
SETV D2 0; for() #317 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #317 LoopTest
COMPAREV D2 120
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9660 ==; for() #317 TestFail?
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1104 Test AND for() #317 Body Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9645 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1104 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.5000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.5000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5023; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1104 Body End
SETV D2 0
SETR GD5 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #317 Body End
LOAD D2 0.0046; for() #317 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 9573; for() #317 End
SETV D2 38; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETR D2 GD3; while() #22 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9750 ==; Test 'while'
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1105 Test AND while() #22 Body Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9734 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1105 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.2000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.2000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5023; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1105 Body End
SETR D2 GD3; InlineFunc[int Max(int, int)] Params Start
SUBV D2 4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD3 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #22 Body End
GOTO 9662; while() #22 End
SETV D2 3; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 20
PUSHR D2
POP D2
SETR QUAKE D2
SETV D2 0; for() #318 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #318 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9827 ==; for() #318 TestFail?
PUSHR D4; for() #318 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
PUSHV 16; UsrFunc[int Rand(int, int)] Params Start
PUSHV 224; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2
PUSHR D4
PUSHV 16; UsrFunc[int Rand(int, int)] Params Start
PUSHV 144; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2
SETV D3 360; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
SETV D3 50; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
PUSHV 8; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params End
CALLFUNC 3.3486; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 19
PUSHV 176
PUSHV 1; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9617; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 3
LOAD D2 0.0031
PUSHR D2
POP REFEWPN
PUSHR EWPNPOWER; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 2.9507; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
PUSHV 2; UsrFunc[int Rand(int, int)] Params Start
PUSHV 6; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #318 Body End
LOAD D2 0.0046; for() #318 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 9758; for() #318 End
LOAD D2 0.0001; if() #1102 Body End AND if() #1106 Test
COMPAREV D2 41
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 10272 ==; Test 'if'
PUSHR D4; if() #1106 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4
LOAD D2 0.0010
SETR GD10 D2
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #319 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #319 LoopTest
COMPAREV D2 176
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9952 ==; for() #319 TestFail?
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1107 Test AND for() #319 Body Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9934 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1107 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5023; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1107 Body End
SETR D2 GD3
ADDV D2 4
SETR GD3 D2
SETV D2 0
SETR GD5 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #319 Body End
LOAD D2 0.0046; for() #319 LoopIncrement
ADDV D2 4
STORE D2 0.0046
GOTO 9864; for() #319 End
SETV D2 0; for() #320 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #320 LoopTest
COMPAREV D2 120
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 10041 ==; for() #320 TestFail?
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1108 Test AND for() #320 Body Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 10026 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1108 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.5000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.5000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5023; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1108 Body End
SETV D2 0
SETR GD5 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #320 Body End
LOAD D2 0.0046; for() #320 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 9954; for() #320 End
SETV D2 38; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETR D2 GD3; while() #23 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 10131 ==; Test 'while'
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1109 Test AND while() #23 Body Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 10115 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1109 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.2000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.2000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5023; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1109 Body End
SETR D2 GD3; InlineFunc[int Max(int, int)] Params Start
SUBV D2 4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD3 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #23 Body End
GOTO 10043; while() #23 End
SETV D2 3; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 20
PUSHR D2
POP D2
SETR QUAKE D2
PUSHR D4
PUSHV 4; UsrFunc[int Rand(int, int)] Params Start
PUSHV 7; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0.0044
SETV D2 0; for() #321 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #321 LoopTest
PUSHR D2
LOAD D2 0.0044
POP D3
COMPARER D3 D2
GOTOCMP 10163 >=
SETR D2 NPCCOUNT; InlineFunc[int screendata::NumNPCs()] Body
COMPAREV D2 40
GOTOCMP 10163 >=
PUSHR D4
LOAD D2 0.0033; UsrFunc[int EZB_NumSummons(npc)] Params Start
PUSHR D2; UsrFunc[int EZB_NumSummons(npc)] Params End
CALLFUNC 3.6199; UsrFunc[int EZB_NumSummons(npc)] Call
POP D4
COMPAREV D2 8
GOTOCMP 10163 >=
SETV D2 1
GOTO 10164
SETV D2 0
COMPAREV D2 0
GOTOCMP 10272 ==; for() #321 TestFail?
SETV D3 176; InlineFunc[int Rand(int)] Params AND for() #321 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0045
SETV D2 0; for() #322 setup
STORE D2 0.0043
LOAD D2 0.0043; for() #322 LoopTest
COMPAREV D2 352
GOTOCMP 10198 >=
PUSHR D4
LOAD D2 0.0047; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int ComboX(int)] Params Start
PUSHR D2; UsrFunc[int ComboX(int)] Params End
CALLFUNC 2.0720; UsrFunc[int ComboX(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int ComboY(int)] Params Start
PUSHR D2; UsrFunc[int ComboY(int)] Params End
CALLFUNC 2.0726; UsrFunc[int ComboY(int)] Call
POP D4
PUSHR D2
PUSHARGSV 16 0.0002; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int, int, int)] Params End
CALLFUNC 3.1828; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 10198 !=
SETV D2 1
GOTO 10199
SETV D2 0
COMPAREV D2 0
GOTOCMP 10217 ==; for() #322 TestFail?
LOAD D2 0.0044; if() #606 Test AND for() #322 Body Start
COMPAREV D2 176
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 10210 ==; Test 'if'
SETV D3 176; InlineFunc[int Rand(int)] Params AND if() #606 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0045
GOTO 10213; if() #606 Body End
LOAD D2 0.0043; if() #606 Else Start
SUBV D2 176
STORE D2 0.0045; if() #606 Else End
LOAD D2 0.0043; for() #322 Body End AND for() #322 LoopIncrement
ADDV D2 1
STORE D2 0.0043
GOTO 10171; for() #322 End
SETV D2 38; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
LOAD D2 0.0021; UsrFunc[npc CreateNPCAt(int, int, int)] Params Start
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int ComboX(int)] Params Start
PUSHR D2; UsrFunc[int ComboX(int)] Params End
CALLFUNC 2.0720; UsrFunc[int ComboX(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int ComboY(int)] Params Start
PUSHR D2; UsrFunc[int ComboY(int)] Params End
CALLFUNC 2.0726; UsrFunc[int ComboY(int)] Call
POP D4
PUSHR D2; UsrFunc[npc CreateNPCAt(int, int, int)] Params End
CALLFUNC 2.0762; UsrFunc[npc CreateNPCAt(int, int, int)] Call
POP D4
STORE D2 0.0032
PUSHR D4
LOAD D2 0.0032; UsrFunc[void EZB_AddSummon(npc, npc)] Params Start
PUSHR D2
LOAD D2 0.0033
PUSHR D2; UsrFunc[void EZB_AddSummon(npc, npc)] Params End
CALLFUNC 3.0518; UsrFunc[void EZB_AddSummon(npc, npc)] Call
POP D4
SETV D2 176
PUSHR D2
LOAD D2 0.0032
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
PUSHV 6; UsrFunc[int Rand(int, int)] Params Start
PUSHV 17; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #321 Body End
LOAD D2 0.0046; for() #321 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 10145; for() #321 End
LOAD D2 0.0001; if() #1106 Body End AND if() #1110 Test
COMPAREV D2 42
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 10385 ==; Test 'if'
PUSHR D4; if() #1110 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
LOAD D2 0.0010
SETR GD10 D2
SETV D2 0; for() #323 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #323 LoopTest
COMPAREV D2 300
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 10385 ==; for() #323 TestFail?
PUSHARGSR D4 0.0002; for() #323 Body Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7476; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #323 Body End
LOAD D2 0.0046; for() #323 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 10330; for() #323 End
LOAD D2 0.0001; if() #1110 Body End AND if() #1111 Test
COMPAREV D2 43
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 10639 ==; Test 'if'
PUSHR D4; if() #1111 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETR D2 GD1
PUSHR D2
PUSHR D4
PUSHV 32; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7499; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0040
SETR D2 GD2
PUSHR D2
PUSHR D4
PUSHV 32; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7509; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0039
PUSHR D4; if() #607 Test
LOAD D2 0.0047; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0039
PUSHR D2; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Params End
CALLFUNC 3.1680; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 10546 ==; Test 'if'
SETV D2 3; if() #607 Body Start
STORE D2 0.0044
LOAD D2 0.0010
SETR GD10 D2
SETV D2 1; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #324 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #324 LoopTest
COMPAREV D2 10
GOTOCMP 10477 >=
PUSHR D4
LOAD D2 0.0042; UsrFunc[bool EZB_CanMoveAngle(int)] Params Start
PUSHR D2; UsrFunc[bool EZB_CanMoveAngle(int)] Params End
CALLFUNC 3.1389; UsrFunc[bool EZB_CanMoveAngle(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 10477 ==
SETV D2 1
GOTO 10478
SETV D2 0
COMPAREV D2 0
GOTOCMP 10639 ==; for() #324 TestFail?
PUSHARGSR D4 0.0002; for() #324 Body Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
LOAD D2 0.0044; InlineFunc[int Min(int, int)] Params Start
ADDV D2 0.5000
PUSHVARGR D2
PUSHVARGV 5; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0044
PUSHR D4
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7476; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Trail(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Trail(ffc, npc, int)] Params End
CALLFUNC 3.7015; UsrFunc[void EZB_Trail(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #324 Body End
LOAD D2 0.0046; for() #324 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 10465; for() #324 End
GOTO 10639; if() #607 Body End
PUSHR D4; if() #607 Else Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 2
STORE D2 0.0044
LOAD D2 0.0010
SETR GD10 D2
SETV D2 1; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4; while() #24 Test
LOAD D2 0.0042; UsrFunc[bool EZB_CanMoveAngle(int)] Params Start
PUSHR D2; UsrFunc[bool EZB_CanMoveAngle(int)] Params End
CALLFUNC 3.1389; UsrFunc[bool EZB_CanMoveAngle(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 10639 ==; Test 'while'
LOAD D2 0.0044; InlineFunc[int Min(int, int)] Params Start AND while() #24 Body Start
ADDV D2 0.2000
PUSHVARGR D2
PUSHVARGV 5; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0044
PUSHR D4
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7476; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Trail(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Trail(ffc, npc, int)] Params End
CALLFUNC 3.7015; UsrFunc[void EZB_Trail(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #24 Body End
GOTO 10601; while() #24 End
LOAD D2 0.0001; if() #607 Else End AND if() #1111 Body End AND if() #1112 Test
COMPAREV D2 49
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 10848 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1112 Body Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #325 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #325 LoopTest
COMPAREV D2 90
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 10733 ==; for() #325 TestFail?
PUSHR D4; for() #325 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 64
LOAD D2 0.0042
PUSHR D2
PUSHV 0
LOAD D2 0.0028
PUSHR D2
PUSHV -1
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 90; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2114; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #325 Body End
LOAD D2 0.0046; for() #325 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 10689; for() #325 End
SETV D2 37; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #326 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #326 LoopTest
COMPAREV D2 40
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 10848 ==; for() #326 TestFail?
SETV D2 0; for() #327 setup AND for() #326 Body Start
STORE D2 0.0045
LOAD D2 0.0045; for() #327 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 10804 ==; for() #327 TestFail?
SETR D2 GD1; for() #327 Body Start
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
PUSHV 1; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0042
ADDV D2 180
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7499; UsrFunc[int VectorX(int, int)] Call
POP D4
PUSHR D2; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0040
SETR D2 GD2
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
PUSHV 1; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0042
ADDV D2 180
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7509; UsrFunc[int VectorY(int, int)] Call
POP D4
PUSHR D2; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0039
PUSHR D4; if() #1113 Test
LOAD D2 0.0047; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0039
PUSHR D2; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Params End
CALLFUNC 3.1680; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 10800 ==; Test 'if'
PUSHR D4; if() #1113 Body Start
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
ADDV D2 180
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7476; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4; if() #1113 Body End
LOAD D2 0.0045; for() #327 Body End AND for() #327 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 10744; for() #327 End
PUSHR D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 64
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCWDP
MULTV D2 2
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV -1
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 40; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2114; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #326 Body End
LOAD D2 0.0046; for() #326 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 10737; for() #326 End
LOAD D2 0.0001; if() #1112 Body End AND if() #1114 Test
COMPAREV D2 52
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 11266 ==; Test 'if'
PUSHR D4; if() #1114 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4
SETV D2 4
SETR GD5 D2
LOAD D2 0.0010
SETR GD10 D2
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETR D2 GD5; while() #25 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 10975 ==; Test 'while'
PUSHR D4; while() #25 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 10965 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1115 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 1.3000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 1.3000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5023; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1115 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #25 Body End
GOTO 10885; while() #25 End
SETR D2 GD3
STORE D2 0.0044
SETV D2 0; for() #328 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #328 LoopTest
COMPAREV D2 90
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 11102 ==; for() #328 TestFail?
PUSHR D4; for() #328 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11059 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1116 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.7000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.7000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5023; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1116 Body End
SETV D2 0
SETR GD5 D2
LOAD D2 0.0044
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 2
SETV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
SETR GD3 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #328 Body End
LOAD D2 0.0046; for() #328 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 10979; for() #328 End
SETV D2 38; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETR D2 GD3; while() #26 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11200 ==; Test 'while'
PUSHR D4; while() #26 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11184 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1117 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.3000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.3000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5023; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1117 Body End
SETR D2 GD3; InlineFunc[int Max(int, int)] Params Start
SUBV D2 4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD3 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #26 Body End
GOTO 11104; while() #26 End
SETV D2 3; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 4
PUSHR D2
POP D2
SETR QUAKE D2
SETV D2 2; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #329 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #329 LoopTest
COMPAREV D2 96
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 11266 ==; for() #329 TestFail?
PUSHR D4; for() #329 Body Start
PUSHV 2; UsrFunc[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0046
PUSHR D2
PUSHV 48
PUSHV 16
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 3
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 4
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 5
PUSHR D2; UsrFunc[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.6545; UsrFunc[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #329 Body End
LOAD D2 0.0046; for() #329 LoopIncrement
ADDV D2 6
STORE D2 0.0046
GOTO 11210; for() #329 End
LOAD D2 0.0001; if() #1114 Body End AND if() #1118 Test
COMPAREV D2 53
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 11695 ==; Test 'if'
PUSHR D4; if() #1118 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4
SETV D2 4
SETR GD5 D2
LOAD D2 0.0010
SETR GD10 D2
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETR D2 GD5; while() #27 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11393 ==; Test 'while'
PUSHR D4; while() #27 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11383 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1119 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 1.3000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 1.3000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5023; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1119 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #27 Body End
GOTO 11303; while() #27 End
SETR D2 GD3
STORE D2 0.0044
SETV D2 0; for() #330 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #330 LoopTest
COMPAREV D2 90
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 11520 ==; for() #330 TestFail?
PUSHR D4; for() #330 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11477 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1120 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.7000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.7000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5023; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1120 Body End
SETV D2 0
SETR GD5 D2
LOAD D2 0.0044
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 2
SETV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
SETR GD3 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #330 Body End
LOAD D2 0.0046; for() #330 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 11397; for() #330 End
SETV D2 38; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETR D2 GD3; while() #28 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11618 ==; Test 'while'
PUSHR D4; while() #28 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11602 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1121 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.3000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.3000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5023; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1121 Body End
SETR D2 GD3; InlineFunc[int Max(int, int)] Params Start
SUBV D2 4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD3 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #28 Body End
GOTO 11522; while() #28 End
SETV D2 3; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 4
PUSHR D2
POP D2
SETR QUAKE D2
SETV D2 0; for() #331 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #331 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 11695 ==; for() #331 TestFail?
PUSHR D4; for() #331 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
PUSHV 16; UsrFunc[int Rand(int, int)] Params Start
PUSHV 224; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2
PUSHR D4
PUSHV 16; UsrFunc[int Rand(int, int)] Params Start
PUSHV 144; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2
SETV D3 360; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
SETV D3 50; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
PUSHV 8; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params End
CALLFUNC 3.3486; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 19
PUSHV 176
PUSHV 1; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9617; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 3
LOAD D2 0.0031
PUSHR D2
POP REFEWPN
PUSHR EWPNPOWER; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 2.9507; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
PUSHV 4; UsrFunc[int Rand(int, int)] Params Start
PUSHV 12; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #331 Body End
LOAD D2 0.0046; for() #331 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 11626; for() #331 End
LOAD D2 0.0001; if() #1118 Body End AND if() #1122 Test
COMPAREV D2 54
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12188 ==; Test 'if'
PUSHR D4; if() #1122 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4
SETV D2 4
SETR GD5 D2
LOAD D2 0.0010
SETR GD10 D2
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETR D2 GD5; while() #29 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11822 ==; Test 'while'
PUSHR D4; while() #29 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11812 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1123 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 1.3000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 1.3000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5023; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1123 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #29 Body End
GOTO 11732; while() #29 End
SETR D2 GD3
STORE D2 0.0044
SETV D2 0; for() #332 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #332 LoopTest
COMPAREV D2 90
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 11949 ==; for() #332 TestFail?
PUSHR D4; for() #332 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11906 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1124 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.7000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.7000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5023; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1124 Body End
SETV D2 0
SETR GD5 D2
LOAD D2 0.0044
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 2
SETV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
SETR GD3 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #332 Body End
LOAD D2 0.0046; for() #332 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 11826; for() #332 End
SETV D2 38; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETR D2 GD3; while() #30 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 12047 ==; Test 'while'
PUSHR D4; while() #30 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 12031 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1125 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.3000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.3000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5023; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1125 Body End
SETR D2 GD3; InlineFunc[int Max(int, int)] Params Start
SUBV D2 4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD3 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #30 Body End
GOTO 11951; while() #30 End
SETV D2 3; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 4
PUSHR D2
POP D2
SETR QUAKE D2
PUSHR D4
PUSHV 2; UsrFunc[int Rand(int, int)] Params Start
PUSHV 3; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0.0044
SETV D2 0; for() #333 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #333 LoopTest
PUSHR D2
LOAD D2 0.0044
POP D3
COMPARER D3 D2
GOTOCMP 12079 >=
SETR D2 NPCCOUNT; InlineFunc[int screendata::NumNPCs()] Body
COMPAREV D2 40
GOTOCMP 12079 >=
PUSHR D4
LOAD D2 0.0033; UsrFunc[int EZB_NumSummons(npc)] Params Start
PUSHR D2; UsrFunc[int EZB_NumSummons(npc)] Params End
CALLFUNC 3.6199; UsrFunc[int EZB_NumSummons(npc)] Call
POP D4
COMPAREV D2 8
GOTOCMP 12079 >=
SETV D2 1
GOTO 12080
SETV D2 0
COMPAREV D2 0
GOTOCMP 12188 ==; for() #333 TestFail?
SETV D3 176; InlineFunc[int Rand(int)] Params AND for() #333 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0045
SETV D2 0; for() #334 setup
STORE D2 0.0043
LOAD D2 0.0043; for() #334 LoopTest
COMPAREV D2 352
GOTOCMP 12114 >=
PUSHR D4
LOAD D2 0.0047; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int ComboX(int)] Params Start
PUSHR D2; UsrFunc[int ComboX(int)] Params End
CALLFUNC 2.0720; UsrFunc[int ComboX(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int ComboY(int)] Params Start
PUSHR D2; UsrFunc[int ComboY(int)] Params End
CALLFUNC 2.0726; UsrFunc[int ComboY(int)] Call
POP D4
PUSHR D2
PUSHARGSV 16 0.0002; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int, int, int)] Params End
CALLFUNC 3.1828; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 12114 !=
SETV D2 1
GOTO 12115
SETV D2 0
COMPAREV D2 0
GOTOCMP 12133 ==; for() #334 TestFail?
LOAD D2 0.0044; if() #608 Test AND for() #334 Body Start
COMPAREV D2 176
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 12126 ==; Test 'if'
SETV D3 176; InlineFunc[int Rand(int)] Params AND if() #608 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0045
GOTO 12129; if() #608 Body End
LOAD D2 0.0043; if() #608 Else Start
SUBV D2 176
STORE D2 0.0045; if() #608 Else End
LOAD D2 0.0043; for() #334 Body End AND for() #334 LoopIncrement
ADDV D2 1
STORE D2 0.0043
GOTO 12087; for() #334 End
SETV D2 38; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
LOAD D2 0.0021; UsrFunc[npc CreateNPCAt(int, int, int)] Params Start
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int ComboX(int)] Params Start
PUSHR D2; UsrFunc[int ComboX(int)] Params End
CALLFUNC 2.0720; UsrFunc[int ComboX(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int ComboY(int)] Params Start
PUSHR D2; UsrFunc[int ComboY(int)] Params End
CALLFUNC 2.0726; UsrFunc[int ComboY(int)] Call
POP D4
PUSHR D2; UsrFunc[npc CreateNPCAt(int, int, int)] Params End
CALLFUNC 2.0762; UsrFunc[npc CreateNPCAt(int, int, int)] Call
POP D4
STORE D2 0.0032
PUSHR D4
LOAD D2 0.0032; UsrFunc[void EZB_AddSummon(npc, npc)] Params Start
PUSHR D2
LOAD D2 0.0033
PUSHR D2; UsrFunc[void EZB_AddSummon(npc, npc)] Params End
CALLFUNC 3.0518; UsrFunc[void EZB_AddSummon(npc, npc)] Call
POP D4
SETV D2 176
PUSHR D2
LOAD D2 0.0032
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
PUSHV 6; UsrFunc[int Rand(int, int)] Params Start
PUSHV 17; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #333 Body End
LOAD D2 0.0046; for() #333 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 12061; for() #333 End
LOAD D2 0.0001; if() #1122 Body End AND if() #1126 Test
COMPAREV D2 55
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12281 ==; Test 'if'
PUSHR D4; if() #1126 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 3.1987; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #335 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #335 LoopTest
COMPAREV D2 5
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 12271 ==; for() #335 TestFail?
PUSHR D4; for() #335 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 350; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3462; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHARGSV 16 0.0002; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9617; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 8; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #335 Body End
LOAD D2 0.0046; for() #335 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 12219; for() #335 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1126 Body End
LOAD D2 0.0001; if() #1127 Test
COMPAREV D2 56
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12401 ==; Test 'if'
PUSHR D4; if() #1127 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #336 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #336 LoopTest
COMPAREV D2 5
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 12391 ==; for() #336 TestFail?
PUSHR D4; for() #336 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 250; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3462; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHARGSV 16 0.0002; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9617; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #336 Body End
LOAD D2 0.0046; for() #336 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 12339; for() #336 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1127 Body End
LOAD D2 0.0001; if() #1128 Test
COMPAREV D2 57
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12521 ==; Test 'if'
PUSHR D4; if() #1128 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D3 360; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
PUSHVARGV -40; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 40; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0045
SETV D2 0; for() #337 setup
STORE D2 0.0044
LOAD D2 0.0044; for() #337 LoopTest
COMPAREV D2 3
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 12511 ==; for() #337 TestFail?
SETV D2 0; for() #338 setup AND for() #337 Body Start
STORE D2 0.0046
LOAD D2 0.0046; for() #338 LoopTest
COMPAREV D2 5
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 12497 ==; for() #338 TestFail?
PUSHR D4; for() #338 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 72
SETV D2 72
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 250; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3462; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 1
LOAD D2 0.0045
PUSHR D2
PUSHV 4; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9617; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
POP D4; for() #338 Body End
LOAD D2 0.0046; for() #338 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 12442; for() #338 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 4; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #337 Body End
LOAD D2 0.0044; for() #337 LoopIncrement
ADDV D2 1
STORE D2 0.0044
GOTO 12435; for() #337 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 32; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1128 Body End
LOAD D2 0.0001; if() #1129 Test
COMPAREV D2 58
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12635 ==; Test 'if'
PUSHR D4; if() #1129 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 3.1987; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 -1; for() #339 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #339 LoopTest
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 12625 ==; for() #339 TestFail?
PUSHR D4; for() #339 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 25
SETV D2 25
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 300; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3462; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
SETV D2 0
STORE D2 0.0045
LOAD D2 0.0034; if() #1130 Test
PUSHR D2
POP REFNPC
SETR D2 NPCWEAPON
COMPAREV D2 129
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12606 ==; Test 'if'
SETV D2 16; if() #1130 Body Start
STORE D2 0.0045; if() #1130 Body End
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 1
LOAD D2 0.0045
ADDV D2 24
PUSHR D2; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Params End
CALLFUNC 2.9571; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Call
PEEK D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 2
PUSHV 16; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 2.9507; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4; for() #339 Body End
LOAD D2 0.0046; for() #339 LoopIncrement
ADDV D2 2
STORE D2 0.0046
GOTO 12552; for() #339 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1129 Body End
LOAD D2 0.0001; if() #1131 Test
COMPAREV D2 59
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12776 ==; Test 'if'
PUSHR D4; if() #1131 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 -1; for() #340 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #340 LoopTest
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 12766 ==; for() #340 TestFail?
PUSHR D4; for() #340 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 45
SETV D2 45
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 300; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3462; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
SETV D2 0
STORE D2 0.0045
LOAD D2 0.0034; if() #1132 Test
PUSHR D2
POP REFNPC
SETR D2 NPCWEAPON
COMPAREV D2 129
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12747 ==; Test 'if'
SETV D2 16; if() #1132 Body Start
STORE D2 0.0045; if() #1132 Body End
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 1
LOAD D2 0.0045
ADDV D2 24
PUSHR D2; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Params End
CALLFUNC 2.9571; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Call
PEEK D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 2
PUSHV 16; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 2.9507; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4; for() #340 Body End
LOAD D2 0.0046; for() #340 LoopIncrement
ADDV D2 2
STORE D2 0.0046
GOTO 12693; for() #340 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1131 Body End
LOAD D2 0.0001; if() #1133 Test
COMPAREV D2 60
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12904 ==; Test 'if'
PUSHR D4; if() #1133 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 150
PUSHV 9; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params End
CALLFUNC 3.3486; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 15
PUSHV 3.6000
PUSHV 1; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9617; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0031; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params Start
PUSHR D2; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params End
CALLFUNC 3.6299; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1133 Body End
LOAD D2 0.0001; if() #1134 Test
COMPAREV D2 61
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13032 ==; Test 'if'
PUSHR D4; if() #1134 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 200
PUSHV 9; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params End
CALLFUNC 3.3486; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 15
PUSHV -1
PUSHV 1; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9617; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0031; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params Start
PUSHR D2; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params End
CALLFUNC 3.6299; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1134 Body End
LOAD D2 0.0001; if() #1135 Test
COMPAREV D2 62
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13181 ==; Test 'if'
PUSHR D4; if() #1135 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #341 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #341 LoopTest
COMPAREV D2 16
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 13171 ==; for() #341 TestFail?
PUSHARGSR D4 0.0002; for() #341 Body Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 200
PUSHV 9; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params End
CALLFUNC 3.3486; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 15
PUSHV -1
PUSHV 1; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9617; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0031; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params Start
PUSHR D2; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params End
CALLFUNC 3.6299; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 6; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #341 Body End
LOAD D2 0.0046; for() #341 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 13090; for() #341 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1135 Body End
LOAD D2 0.0001; if() #1136 Test
COMPAREV D2 63
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13331 ==; Test 'if'
PUSHR D4; if() #1136 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 -2; for() #342 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #342 LoopTest
COMPAREV D2 2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 13321 ==; for() #342 TestFail?
PUSHR D4; for() #342 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 20
SETV D2 20
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 200
PUSHV 9; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params End
CALLFUNC 3.3486; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 15
PUSHV 3.6000
PUSHV 1; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9617; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0031; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params Start
PUSHR D2; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params End
CALLFUNC 3.6299; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Call
POP D4; for() #342 Body End
LOAD D2 0.0046; for() #342 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 13262; for() #342 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1136 Body End
LOAD D2 0.0001; if() #1137 Test
COMPAREV D2 64
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13490 ==; Test 'if'
PUSHR D4; if() #1137 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 0; for() #343 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #343 LoopTest
COMPAREV D2 6
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 13480 ==; for() #343 TestFail?
PUSHR D4; for() #343 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHR D4
PUSHV -30; UsrFunc[int Rand(int, int)] Params Start
PUSHV 30; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
PUSHV 100; UsrFunc[int Rand(int, int)] Params Start
PUSHV 300; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2
PUSHV 9; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params End
CALLFUNC 3.3486; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 15
PUSHR D4
PUSHV 24; UsrFunc[int Rand(int, int)] Params Start
PUSHV 36; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
DIVV D2 10
PUSHR D2
PUSHV 1; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9617; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0031; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params Start
PUSHR D2; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params End
CALLFUNC 3.6299; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Call
POP D4; for() #343 Body End
LOAD D2 0.0046; for() #343 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 13412; for() #343 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1137 Body End
LOAD D2 0.0001; if() #1138 Test
COMPAREV D2 65
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13600 ==; Test 'if'
PUSHR D4; if() #1138 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 0; for() #344 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #344 LoopTest
COMPAREV D2 18
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 13600 ==; for() #344 TestFail?
PUSHR D4; for() #344 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
SETV D3 360; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
PUSHR D4
PUSHV 100; UsrFunc[int Rand(int, int)] Params Start
PUSHV 400; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2
PUSHV 9; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params End
CALLFUNC 3.3486; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 15
PUSHR D4
PUSHV 24; UsrFunc[int Rand(int, int)] Params Start
PUSHV 36; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
DIVV D2 10
PUSHR D2
PUSHV 1; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9617; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0031; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params Start
PUSHR D2; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params End
CALLFUNC 3.6299; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Call
POP D4; for() #344 Body End
LOAD D2 0.0046; for() #344 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 13539; for() #344 End
LOAD D2 0.0001; if() #1138 Body End AND if() #1139 Test
COMPAREV D2 66
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13675 ==; Test 'if'
PUSHR D4; if() #1139 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #345 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #345 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 13665 ==; for() #345 TestFail?
PUSHR D4; for() #345 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 3.1987; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0046
DIVV D2 7
MULTV D2 400
SETV D2 400
PUSHR D2
LOAD D2 0.0046
DIVV D2 7
POP D3
MULTR D2 D3
ADDV D2 200
PUSHR D2; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3462; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #345 Body End
LOAD D2 0.0046; for() #345 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 13617; for() #345 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1139 Body End
LOAD D2 0.0001; if() #1140 Test
COMPAREV D2 67
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13779 ==; Test 'if'
PUSHR D4; if() #1140 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 0; for() #346 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #346 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 13769 ==; for() #346 TestFail?
PUSHR D4; for() #346 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
DIVV D2 7
MULTV D2 400
SETV D2 400
PUSHR D2
LOAD D2 0.0046
DIVV D2 7
POP D3
MULTR D2 D3
ADDV D2 200
PUSHR D2; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3462; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #346 Body End
LOAD D2 0.0046; for() #346 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 13724; for() #346 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1140 Body End
LOAD D2 0.0001; if() #1141 Test
COMPAREV D2 68
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13878 ==; Test 'if'
PUSHR D4; if() #1141 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_Teleport(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Teleport(ffc, npc, int)] Params End
CALLFUNC 3.6684; UsrFunc[void EZB_Teleport(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3462; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1141 Body End
LOAD D2 0.0001; if() #1142 Test
COMPAREV D2 69
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 14000 ==; Test 'if'
PUSHR D4; if() #1142 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_Teleport(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Teleport(ffc, npc, int)] Params End
CALLFUNC 3.6684; UsrFunc[void EZB_Teleport(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 -1; for() #347 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #347 LoopTest
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 13990 ==; for() #347 TestFail?
PUSHR D4; for() #347 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 20
SETV D2 20
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 250; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3462; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #347 Body End
LOAD D2 0.0046; for() #347 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 13945; for() #347 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1142 Body End
LOAD D2 0.0001; if() #1143 Test
COMPAREV D2 70
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 14133 ==; Test 'if'
SETV D2 0; for() #348 setup AND if() #1143 Body Start
STORE D2 0.0046
LOAD D2 0.0046; for() #348 LoopTest
COMPAREV D2 3
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14034 ==; for() #348 TestFail?
PUSHR D4; for() #348 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 4; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Teleport(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Teleport(ffc, npc, int)] Params End
CALLFUNC 3.6684; UsrFunc[void EZB_Teleport(ffc, npc, int)] Call
POP D4; for() #348 Body End
LOAD D2 0.0046; for() #348 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 14007; for() #348 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 0; for() #349 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #349 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14123 ==; for() #349 TestFail?
PUSHR D4; for() #349 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
DIVV D2 7
MULTV D2 400
SETV D2 400
PUSHR D2
LOAD D2 0.0046
DIVV D2 7
POP D3
MULTR D2 D3
ADDV D2 200
PUSHR D2; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3462; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #349 Body End
LOAD D2 0.0046; for() #349 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 14078; for() #349 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1143 Body End
LOAD D2 0.0001; if() #1144 Test
COMPAREV D2 72
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 14559 ==; Test 'if'
PUSHR D4; if() #1144 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHV -32; UsrFunc[int Rand(int, int)] Params Start
PUSHV 32; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
ADDV D2 -32
STORE D2 0.0040
PUSHR D4
PUSHV -32; UsrFunc[int Rand(int, int)] Params Start
PUSHV 32; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
ADDV D2 -32
STORE D2 0.0039
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #350 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #350 LoopTest
COMPAREV D2 60
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14350 ==; for() #350 TestFail?
LOAD D2 0.0028; InlineFunc[int Choose(int)] Params Start AND for() #350 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0043
PUSHR D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 2
PUSHV 45
PUSHV 0
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 60; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2114; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4
SETV D2 1; for() #351 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #351 LoopTest
COMPAREV D2 12
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14269 ==; for() #351 TestFail?
PUSHR D4; for() #351 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0045
MULTV D2 48
SETV D2 48
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 2
PUSHV 45
PUSHV 0
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 60; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2114; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0045
MULTV D2 48
SETV D2 48
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 2
PUSHV 135
PUSHV 0
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 60; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2114; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #351 Body End
LOAD D2 0.0045; for() #351 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 14203; for() #351 End
SETV D2 1; for() #352 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #352 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14337 ==; for() #352 TestFail?
PUSHR D4; for() #352 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0045
MULTV D2 48
SETV D2 48
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 2
PUSHV 45
PUSHV 0
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 60; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2114; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0045
MULTV D2 48
SETV D2 48
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 2
PUSHV -45
PUSHV 0
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 60; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2114; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #352 Body End
LOAD D2 0.0045; for() #352 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 14271; for() #352 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #350 Body End
LOAD D2 0.0046; for() #350 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 14165; for() #350 End
SETV D2 37; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #353 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #353 LoopTest
COMPAREV D2 16
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14559 ==; for() #353 TestFail?
LOAD D2 0.0028; InlineFunc[int Choose(int)] Params Start AND for() #353 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0043
PUSHR D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 2
PUSHV 45
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 16; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2114; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4
SETV D2 1; for() #354 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #354 LoopTest
COMPAREV D2 12
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14472 ==; for() #354 TestFail?
PUSHR D4; for() #354 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0045
MULTV D2 48
SETV D2 48
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 2
PUSHV 45
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 16; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2114; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0045
MULTV D2 48
SETV D2 48
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 2
PUSHV 135
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 16; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2114; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #354 Body End
LOAD D2 0.0045; for() #354 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 14400; for() #354 End
SETV D2 1; for() #355 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #355 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14546 ==; for() #355 TestFail?
PUSHR D4; for() #355 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0045
MULTV D2 48
SETV D2 48
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 2
PUSHV 45
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 16; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2114; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0045
MULTV D2 48
SETV D2 48
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 2
PUSHV -45
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 16; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2114; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #355 Body End
LOAD D2 0.0045; for() #355 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 14474; for() #355 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #353 Body End
LOAD D2 0.0046; for() #353 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 14354; for() #353 End
LOAD D2 0.0001; if() #1144 Body End AND if() #1145 Test
COMPAREV D2 73
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 14839 ==; Test 'if'
PUSHR D4; if() #1145 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHVARGV -60; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 60; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
PUSHV -15; UsrFunc[int Rand(int, int)] Params Start
PUSHV 15; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0042
SETV D2 0; for() #356 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #356 LoopTest
COMPAREV D2 256
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14635 ==; for() #356 TestFail?
SETV D2 0; for() #356 Body Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0046
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #356 Body End
LOAD D2 0.0046; for() #356 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 14617; for() #356 End
SETV D2 0; for() #357 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #357 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14669 ==; for() #357 TestFail?
PUSHR D4; for() #357 Body Start
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
PUSHV 2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7476; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #357 Body End
LOAD D2 0.0046; for() #357 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 14637; for() #357 End
SETV D2 0; for() #358 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #358 LoopTest
COMPAREV D2 64
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14804 ==; for() #358 TestFail?
LOAD D2 0.0046; if() #1146 Test AND for() #358 Body Start
MODV D2 4
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 14770 ==; Test 'if'
LOAD D2 0.0046; if() #1146 Body Start
DIVV D2 4
STORE D2 0.0045
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0044
LOAD D2 0.0012
MULTV D2 8
PUSHR D2
LOAD D2 0.0011
MULTV D2 8
POP D3
ADDR D2 D3
DIVV D2 2
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0035; UsrFunc[void EZB_SetLaserArray(int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 16
LOAD D2 0.0045
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0043; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0044
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7499; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0043; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0044
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7509; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 4
LOAD D2 0.0044
PUSHR D2
PUSHV 32
PUSHV 16
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_SetLaserArray(int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.6420; UsrFunc[void EZB_SetLaserArray(int, int, int, int, int, int, int, int, int, int)] Call
POP D4; if() #1146 Body End
PUSHR D4
LOAD D2 0.0035; UsrFunc[void EZB_UpdateLaserArray(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 16; UsrFunc[void EZB_UpdateLaserArray(int, int, int)] Params End
CALLFUNC 3.7277; UsrFunc[void EZB_UpdateLaserArray(int, int, int)] Call
PEEK D4
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
PUSHV 2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7476; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #358 Body End
LOAD D2 0.0046; for() #358 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 14671; for() #358 End
SETV D2 0; for() #359 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #359 LoopTest
COMPAREV D2 48
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14839 ==; for() #359 TestFail?
PUSHR D4; for() #359 Body Start
LOAD D2 0.0035; UsrFunc[void EZB_UpdateLaserArray(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 16; UsrFunc[void EZB_UpdateLaserArray(int, int, int)] Params End
CALLFUNC 3.7277; UsrFunc[void EZB_UpdateLaserArray(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #359 Body End
LOAD D2 0.0046; for() #359 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 14806; for() #359 End
LOAD D2 0.0001; if() #1145 Body End AND if() #1147 Test
COMPAREV D2 74
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 15425 ==; Test 'if'
SETV D2 0.0001; if() #1147 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
STORE D2 0.0040
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D3 2; InlineFunc[int Rand(int)] Params AND if() #1148 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
GOTOCMP 14878 ==; Test 'if'
SETV D2 0.0001; if() #1148 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
STORE D2 0.0040
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
STORE D2 0.0039; if() #1148 Body End
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #360 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #360 LoopTest
COMPAREV D2 40
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 15150 ==; for() #360 TestFail?
LOAD D2 0.0028; InlineFunc[int Choose(int)] Params Start AND for() #360 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0043
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 128
SETV D2 88; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0041
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 128
PUSHV 88; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0041; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0046
DIVV D2 40
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7499; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0036
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0041; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0046
DIVV D2 40
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7509; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0036
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
SETV D2 0; for() #361 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #361 LoopTest
COMPAREV D2 5
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 15065 ==; for() #361 TestFail?
LOAD D2 0.0036; for() #361 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
PUSHR D4
LOAD D2 0.0046; UsrFunc[int VectorX(int, int)] Params Start
MULTV D2 4
PUSHR D2
LOAD D2 0.0046
MULTV D2 5
PUSHR D2
LOAD D2 0.0045
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7499; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
PUSHR D4
LOAD D2 0.0046; UsrFunc[int VectorY(int, int)] Params Start
MULTV D2 4
PUSHR D2
LOAD D2 0.0046
MULTV D2 5
PUSHR D2
LOAD D2 0.0045
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7509; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
ADDV D2 5
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #361 Body End
LOAD D2 0.0045; for() #361 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 14987; for() #361 End
SETV D2 0; for() #362 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #362 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 15137 ==; for() #362 TestFail?
PUSHR D4; for() #362 Body Start
LOAD D2 0.0035; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0045
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
ADDV D2 5
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
ADDV D2 1
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
ADDV D2 5
ADDV D2 1
POP D0
READPODARRAYR D2 D2
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
ADDV D2 5
POP D0
READPODARRAYR D2 D2
PUSHR D2
PUSHV 6
LOAD D2 0.0042
PUSHR D2
PUSHV 0
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 40; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2114; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #362 Body End
LOAD D2 0.0045; for() #362 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 15067; for() #362 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #360 Body End
LOAD D2 0.0046; for() #360 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 14882; for() #360 End
SETV D3 2; InlineFunc[int Rand(int)] Params AND if() #1149 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
GOTOCMP 15164 ==; Test 'if'
SETV D2 0.0001; if() #1149 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
STORE D2 0.0040
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
STORE D2 0.0039; if() #1149 Body End
SETV D2 37; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #363 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #363 LoopTest
COMPAREV D2 80
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 15425 ==; for() #363 TestFail?
LOAD D2 0.0028; InlineFunc[int Choose(int)] Params Start AND for() #363 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0043
PUSHV 128; InlineFunc[int Distance(int, int, int, int)] Params Start
PUSHV 88
LOAD D2 0.0040
ADDV D2 8
PUSHR D2
LOAD D2 0.0039
ADDV D2 8; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0041
PUSHR D4
PUSHV 128; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHV 88
LOAD D2 0.0040
ADDV D2 8
PUSHR D2
LOAD D2 0.0039
ADDV D2 8
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0041; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0046
DIVV D2 80
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7499; UsrFunc[int VectorX(int, int)] Call
POP D4
ADDV D2 128
PUSHR D2
LOAD D2 0.0036
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
PUSHR D4
LOAD D2 0.0041; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0046
DIVV D2 80
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7509; UsrFunc[int VectorY(int, int)] Call
POP D4
ADDV D2 88
PUSHR D2
LOAD D2 0.0036
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
SETV D2 0; for() #364 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #364 LoopTest
COMPAREV D2 5
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 15337 ==; for() #364 TestFail?
LOAD D2 0.0046; InlineFunc[int Max(int, int)] Params Start AND for() #364 Body Start
MULTV D2 2
SUBV2 160 D2
PUSHVARGR D2
PUSHVARGV 40; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0044
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
PUSHR D4
LOAD D2 0.0044; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0046
MULTV D2 5
ADDV D2 200
PUSHR D2
LOAD D2 0.0045
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7499; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
PUSHR D4
LOAD D2 0.0044; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0046
MULTV D2 5
ADDV D2 200
PUSHR D2
LOAD D2 0.0045
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7509; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
ADDV D2 5
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #364 Body End
LOAD D2 0.0045; for() #364 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 15252; for() #364 End
SETV D2 0; for() #365 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #365 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 15412 ==; for() #365 TestFail?
PUSHR D4; for() #365 Body Start
LOAD D2 0.0035; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0045
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
ADDV D2 5
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
ADDV D2 1
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
ADDV D2 5
ADDV D2 1
POP D0
READPODARRAYR D2 D2
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
ADDV D2 5
POP D0
READPODARRAYR D2 D2
PUSHR D2
PUSHV 6
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 40; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2114; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #365 Body End
LOAD D2 0.0045; for() #365 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 15339; for() #365 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #363 Body End
LOAD D2 0.0046; for() #363 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 15168; for() #363 End
LOAD D2 0.0001; if() #1147 Body End AND if() #1150 Test
COMPAREV D2 75
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 16040 ==; Test 'if'
PUSHR D4; if() #1150 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #366 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #366 LoopTest
COMPAREV D2 80
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 15744 ==; for() #366 TestFail?
LOAD D2 0.0028; InlineFunc[int Choose(int)] Params Start AND for() #366 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
STORE D2 0.0040
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
STORE D2 0.0039
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 3.3303; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
PEEK D4
PUSHV 8; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7499; UsrFunc[int VectorX(int, int)] Call
POP D4
STORE D2 0.0038
PUSHR D4
PUSHV 8; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7509; UsrFunc[int VectorY(int, int)] Call
POP D4
STORE D2 0.0037
SETV D2 0; for() #367 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #367 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 15731 ==; for() #367 TestFail?
SETV D2 0; for() #368 setup AND for() #367 Body Start
STORE D2 0.0044
LOAD D2 0.0044; for() #368 LoopTest
COMPAREV D2 256
GOTOCMP 15562 >=
LOAD D2 0.0040; InlineFunc[bool screendata::isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 15562 !=
SETV D2 1
GOTO 15563
SETV D2 0
COMPAREV D2 0
GOTOCMP 15581 ==; for() #368 TestFail?
LOAD D2 0.0040; for() #368 Body Start
PUSHR D2
LOAD D2 0.0038
POP D3
ADDR D2 D3
STORE D2 0.0040
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0037
POP D3
ADDR D2 D3
STORE D2 0.0039; for() #368 Body End
LOAD D2 0.0044; for() #368 LoopIncrement
ADDV D2 8
STORE D2 0.0044
GOTO 15549; for() #368 End
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
ADDV D2 1
MULTV D2 2
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
ADDV D2 1
MULTV D2 2
ADDV D2 1
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0046; if() #1151 Test
MODV D2 4
COMPAREV D2 2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 15637 ==; Test 'if'
PUSHV 4; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Params Start AND if() #1151 Body Start
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
MULTV D2 2
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
MULTV D2 2
ADDV D2 1
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 128; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Params End
LINER; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Body End AND if() #1151 Body End
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0038
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0040
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0037
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0039
LOAD D2 0.0038; if() #1152 Test
COMPAREV D2 0
GOTOCMP 15663 >=
LOAD D2 0.0040; InlineFunc[bool screendata::isSolid(int, int)] Params Start
SUBV D2 8
PUSHR D2
LOAD D2 0.0039
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 15677 !=
LOAD D2 0.0038
COMPAREV D2 0
GOTOCMP 15675 <=
LOAD D2 0.0040; InlineFunc[bool screendata::isSolid(int, int)] Params Start
ADDV D2 8
PUSHR D2
LOAD D2 0.0039
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 15677 !=
SETV D2 0
GOTO 15678
SETV D2 1
COMPAREV D2 0
GOTOCMP 15689 ==; Test 'if'
LOAD D2 0.0038; if() #1152 Body Start
SUBV2 0 D2
STORE D2 0.0038
LOAD D2 0.0040; InlineFunc[int Floor(int)] Params Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MULTV D2 8
ADDV D2 4
STORE D2 0.0040; if() #1152 Body End
LOAD D2 0.0037; if() #1153 Test
COMPAREV D2 0
GOTOCMP 15701 >=
LOAD D2 0.0040; InlineFunc[bool screendata::isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
SUBV D2 8
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 15715 !=
LOAD D2 0.0037
COMPAREV D2 0
GOTOCMP 15713 <=
LOAD D2 0.0040; InlineFunc[bool screendata::isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
ADDV D2 8
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 15715 !=
SETV D2 0
GOTO 15716
SETV D2 1
COMPAREV D2 0
GOTOCMP 15727 ==; Test 'if'
LOAD D2 0.0037; if() #1153 Body Start
SUBV2 0 D2
STORE D2 0.0037
LOAD D2 0.0039; InlineFunc[int Floor(int)] Params Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MULTV D2 8
ADDV D2 4
STORE D2 0.0039; if() #1153 Body End
LOAD D2 0.0045; for() #367 Body End AND for() #367 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 15542; for() #367 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #366 Body End
LOAD D2 0.0046; for() #366 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 15442; for() #366 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 48; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #369 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #369 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 16004 ==; for() #369 TestFail?
LOAD D2 0.0035; for() #369 Body Start
PUSHR D2
LOAD D2 0.0046
MULTV D2 2
POP D0
READPODARRAYR D2 D2
STORE D2 0.0040
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0046
MULTV D2 2
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0039
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
MULTV D2 8
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2
SETV D2 1; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #370 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #370 LoopTest
COMPAREV D2 64
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 15961 ==; for() #370 TestFail?
PUSHR D4; for() #370 Body Start
LOAD D2 0.0040; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0046
ADDV D2 1
MULTV D2 2
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0046
ADDV D2 1
MULTV D2 2
ADDV D2 1
POP D0
READPODARRAYR D2 D2
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 3.3303; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
POP D4
LOAD D2 0.0040
PUSHR D2
PUSHR D4
PUSHV 8; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7499; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0040
LOAD D2 0.0039
PUSHR D2
PUSHR D4
PUSHV 8; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7509; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0039
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
MULTV D2 8
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2
LOAD D2 0.0040; InlineFunc[int Distance(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0046
ADDV D2 1
MULTV D2 2
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0046
ADDV D2 1
MULTV D2 2
ADDV D2 1
POP D0
READPODARRAYR D2 D2; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0041
LOAD D2 0.0041; if() #1154 Test
COMPAREV D2 8
GOTOCMP 15945 <
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
COMPAREV D2 0
GOTOCMP 15945 <
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
COMPAREV D2 255
GOTOCMP 15945 >
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
COMPAREV D2 0
GOTOCMP 15945 <
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
COMPAREV D2 175
GOTOCMP 15945 >
SETV D2 0
GOTO 15946
SETV D2 1
COMPAREV D2 0
GOTOCMP 15961 !=; Test 'if' AND break 1; AND if() #1154 Body
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #370 Body End
LOAD D2 0.0045; for() #370 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 15802; for() #370 End
PUSHR D4; if() #1155 Test
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
COMPAREV D2 0
GOTOCMP 15991 <
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
COMPAREV D2 255
GOTOCMP 15991 >
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
COMPAREV D2 0
GOTOCMP 15991 <
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
COMPAREV D2 175
GOTOCMP 15991 >
SETV D2 0
GOTO 15992
SETV D2 1
COMPAREV D2 0
GOTOCMP 16004 !=; Test 'if' AND break 1; AND if() #1155 Body
SETV D2 3; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 10
PUSHR D2
POP D2
SETR QUAKE D2; for() #369 Body End
LOAD D2 0.0046; for() #369 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 15756; for() #369 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
MULTV D2 8
POP D3
SUBR D3 D2
PUSHR D3
PUSHV 16; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Params End
CALLFUNC 3.6698; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Call
POP D4; if() #1150 Body End
LOAD D2 0.0001; if() #1156 Test
COMPAREV D2 76
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 16130 ==; Test 'if'
PUSHR D4; if() #1156 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
LOAD D2 0.0019; if() #1157 Test
COMPAREV D2 0
GOTOCMP 16095 ==; Test 'if'
LOAD D2 0.0019; InlineFunc[void Game::PlaySound(int)] Params AND if() #1157 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body AND if() #1157 Body End
PUSHR D4
PUSHV 1; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int EZB_WeaponTypeToID(int)] Params Start
PUSHR D2
POP REFNPC
PUSHR NPCWEAPON; UsrFunc[int EZB_WeaponTypeToID(int)] Params End
CALLFUNC 3.3614; UsrFunc[int EZB_WeaponTypeToID(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 200
LOAD D2 0.0018
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.6226; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Call
POP D4; if() #1156 Body End
LOAD D2 0.0001; if() #1158 Test
COMPAREV D2 77
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 16241 ==; Test 'if'
PUSHR D4; if() #1158 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
LOAD D2 0.0019; if() #1159 Test
COMPAREV D2 0
GOTOCMP 16185 ==; Test 'if'
LOAD D2 0.0019; InlineFunc[void Game::PlaySound(int)] Params AND if() #1159 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body AND if() #1159 Body End
SETV D2 -1; for() #371 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #371 LoopTest
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 16241 ==; for() #371 TestFail?
PUSHR D4; for() #371 Body Start
PUSHV 1; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int EZB_WeaponTypeToID(int)] Params Start
PUSHR D2
POP REFNPC
PUSHR NPCWEAPON; UsrFunc[int EZB_WeaponTypeToID(int)] Params End
CALLFUNC 3.3614; UsrFunc[int EZB_WeaponTypeToID(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 45
SETV D2 45
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 200
LOAD D2 0.0018
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.6226; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Call
POP D4; for() #371 Body End
LOAD D2 0.0046; for() #371 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 16187; for() #371 End
LOAD D2 0.0001; if() #1158 Body End AND if() #1160 Test
COMPAREV D2 78
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 16331 ==; Test 'if'
PUSHR D4; if() #1160 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
LOAD D2 0.0019; if() #1161 Test
COMPAREV D2 0
GOTOCMP 16296 ==; Test 'if'
LOAD D2 0.0019; InlineFunc[void Game::PlaySound(int)] Params AND if() #1161 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body AND if() #1161 Body End
PUSHR D4
PUSHV 1; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int EZB_WeaponTypeToID(int)] Params Start
PUSHR D2
POP REFNPC
PUSHR NPCWEAPON; UsrFunc[int EZB_WeaponTypeToID(int)] Params End
CALLFUNC 3.3614; UsrFunc[int EZB_WeaponTypeToID(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 400
LOAD D2 0.0018
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.6226; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Call
POP D4; if() #1160 Body End
LOAD D2 0.0001; if() #1162 Test
COMPAREV D2 79
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 16417 ==; Test 'if'
PUSHR D4; if() #1162 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
PUSHV 2; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int EZB_WeaponTypeToID(int)] Params Start
PUSHR D2
POP REFNPC
PUSHR NPCWEAPON; UsrFunc[int EZB_WeaponTypeToID(int)] Params End
CALLFUNC 3.3614; UsrFunc[int EZB_WeaponTypeToID(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0018
PUSHR D2
LOAD D2 0.0019
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.6226; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Call
POP D4; if() #1162 Body End
LOAD D2 0.0001; if() #1163 Test
COMPAREV D2 80
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 16598 ==; Test 'if'
PUSHR D4; if() #1163 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV -1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 1
SETR GD4 D2
SETV D2 0; for() #372 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #372 LoopTest
COMPAREV D2 80
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 16502 ==; for() #372 TestFail?
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1164 Test AND for() #372 Body Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
SETV D2 40; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 16502 !=; Test 'if' AND break 1; AND if() #1164 Body
PUSHARGSR D4 0.0003; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHV 40; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7476; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #372 Body End
LOAD D2 0.0046; for() #372 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 16436; for() #372 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 54; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
PUSHV 3; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
PUSHV 90; UsrFunc[int EZB_AngDiff(int, int)] Params Start
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2; UsrFunc[int EZB_AngDiff(int, int)] Params End
CALLFUNC 3.0581; UsrFunc[int EZB_AngDiff(int, int)] Call
POP D4
PUSHR D2; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
PUSHR D2
PUSHR D4
PUSHV 0; UsrFunc[int Rand(int, int)] Params Start
PUSHV 35; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
MULTR D2 D3
ADDV D2 90
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.6226; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 40; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1163 Body End
LOAD D2 0.0001; if() #1165 Test
COMPAREV D2 81
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 16727 ==; Test 'if'
PUSHR D4; if() #1165 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_Teleport(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Teleport(ffc, npc, int)] Params End
CALLFUNC 3.6684; UsrFunc[void EZB_Teleport(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 3.3303; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
PEEK D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 3.1987; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 54; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
PUSHV 3; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.6226; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 40; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1165 Body End
LOAD D2 0.0001; if() #1166 Test
COMPAREV D2 82
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 16900 ==; Test 'if'
SETV D2 0; for() #373 setup AND if() #1166 Body Start
STORE D2 0.0046
LOAD D2 0.0046; for() #373 LoopTest
COMPAREV D2 5
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 16763 ==; for() #373 TestFail?
PUSHR D4; for() #373 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHARGSV -1000 0.0002
PUSHV 4; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Params End
CALLFUNC 3.6698; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Call
POP D4; for() #373 Body End
LOAD D2 0.0046; for() #373 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 16734; for() #373 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #374 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #374 LoopTest
COMPAREV D2 80
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 16900 ==; for() #374 TestFail?
PUSHR D4; for() #374 Body Start
LOAD D2 0.0042; UsrFunc[int EZB_TurnToAngle(int, int, int)] Params Start
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 1; UsrFunc[int EZB_TurnToAngle(int, int, int)] Params End
CALLFUNC 3.7238; UsrFunc[int EZB_TurnToAngle(int, int, int)] Call
POP D4
STORE D2 0.0042
LOAD D2 0.0046; if() #1167 Test
MODV D2 10
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 16887 ==; Test 'if'
SETV D2 54; InlineFunc[void Game::PlaySound(int)] Params AND if() #1167 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
PUSHV 4; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.6226; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Call
POP D4; if() #1167 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #374 Body End
LOAD D2 0.0046; for() #374 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 16807; for() #374 End
LOAD D2 0.0001; if() #1166 Body End AND if() #1168 Test
COMPAREV D2 83
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 17055 ==; Test 'if'
PUSHR D4; if() #1168 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 3.1987; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
STORE D2 0.0042
SETV D2 30; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SUBV D2 1
MULTV D2 8
ADDV D2 16
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
MULTV D2 8
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 0; for() #375 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #375 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 17055 ==; for() #375 TestFail?
PUSHR D4; for() #375 Body Start
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 3
ADDV D2 0.7500
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7476; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
SUBV D2 80
PUSHR D2
LOAD D2 0.0046
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0042
SUBV D2 60
PUSHR D2
LOAD D2 0.0046
MULTV D2 6
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.3098; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #375 Body End
LOAD D2 0.0046; for() #375 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 16964; for() #375 End
LOAD D2 0.0001; if() #1168 Body End AND if() #1169 Test
COMPAREV D2 84
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 17237 ==; Test 'if'
PUSHR D4; if() #1169 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 30; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SUBV D2 1
MULTV D2 8
ADDV D2 16
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
MULTV D2 8
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 0; for() #376 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #376 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 17237 ==; for() #376 TestFail?
PUSHR D4; for() #376 Body Start
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 3
ADDV D2 0.7500
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7476; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
SUBV D2 80
PUSHR D2
LOAD D2 0.0046
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0042
SUBV D2 60
PUSHR D2
LOAD D2 0.0046
MULTV D2 6
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.3098; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #376 Body End
LOAD D2 0.0046; for() #376 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 17146; for() #376 End
LOAD D2 0.0001; if() #1169 Body End AND if() #1170 Test
COMPAREV D2 85
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 17510 ==; Test 'if'
PUSHR D4; if() #1170 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SUBV D2 1
MULTV D2 8
ADDV D2 16
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
MULTV D2 8
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 -1
STORE D2 0.0043
SETV D2 0; for() #377 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #377 LoopTest
COMPAREV D2 3
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 17510 ==; for() #377 TestFail?
SETV D2 30; InlineFunc[void Game::PlaySound(int)] Params AND for() #377 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #378 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #378 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 17456 ==; for() #378 TestFail?
PUSHR D4; for() #378 Body Start
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 2
ADDV D2 0.5000
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7476; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0043
MULTV D2 80
SETV D2 80
PUSHR D2
LOAD D2 0.0043
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0046
MULTV D2 8
PUSHR D2
LOAD D2 0.0043
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0043
MULTV D2 60
SETV D2 60
PUSHR D2
LOAD D2 0.0043
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0046
MULTV D2 6
PUSHR D2
LOAD D2 0.0043
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.3098; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #378 Body End
LOAD D2 0.0046; for() #378 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 17337; for() #378 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 8; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
LOAD D2 0.0043
SUBV2 0 D2
STORE D2 0.0043
LOAD D2 0.0045; if() #1171 Test
COMPAREV D2 2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 17506 ==; Test 'if'
PUSHR D4; if() #1171 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042; if() #1171 Body End
LOAD D2 0.0045; for() #377 Body End AND for() #377 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 17328; for() #377 End
LOAD D2 0.0001; if() #1170 Body End AND if() #1172 Test
COMPAREV D2 86
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 17762 ==; Test 'if'
PUSHR D4; if() #1172 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SUBV D2 1
MULTV D2 8
ADDV D2 16
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
MULTV D2 4
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 0; for() #379 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #379 LoopTest
COMPAREV D2 5
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 17762 ==; for() #379 TestFail?
SETV D2 30; InlineFunc[void Game::PlaySound(int)] Params AND for() #379 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
PUSHV -20; UsrFunc[int Rand(int, int)] Params Start
PUSHV 20; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0.0043
SETV D2 0; for() #380 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #380 LoopTest
COMPAREV D2 12
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 17758 ==; for() #380 TestFail?
PUSHR D4; for() #380 Body Start
LOAD D2 0.0042; UsrFunc[int EZB_TurnToAngle(int, int, int)] Params Start
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 1; UsrFunc[int EZB_TurnToAngle(int, int, int)] Params End
CALLFUNC 3.7238; UsrFunc[int EZB_TurnToAngle(int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 3.3303; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 15
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 2
ADDV D2 1.5000
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7476; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0043
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 15
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 5
SETV D2 5
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 15
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0043
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 15
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.3098; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #380 Body End
LOAD D2 0.0046; for() #380 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 17615; for() #380 End
LOAD D2 0.0045; for() #379 Body End AND for() #379 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 17600; for() #379 End
LOAD D2 0.0001; if() #1172 Body End AND if() #1173 Test
COMPAREV D2 87
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 18215 ==; Test 'if'
PUSHR D4; if() #1173 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 3.1987; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
STORE D2 0.0042
SETV D2 30; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SUBV D2 1
MULTV D2 8
ADDV D2 16
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
MULTV D2 8
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 0; for() #381 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #381 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 17905 ==; for() #381 TestFail?
PUSHR D4; for() #381 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
SUBV D2 80
PUSHR D2
LOAD D2 0.0046
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0042
SUBV D2 60
PUSHR D2
LOAD D2 0.0046
MULTV D2 6
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.3098; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #381 Body End
LOAD D2 0.0046; for() #381 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 17826; for() #381 End
SETV D2 0; for() #382 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #382 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 17960 ==; for() #382 TestFail?
PUSHR D4; for() #382 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.3098; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #382 Body End
LOAD D2 0.0046; for() #382 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 17907; for() #382 End
SETV D2 35; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #383 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #383 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18017 ==; for() #383 TestFail?
PUSHR D4; for() #383 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.3098; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #383 Body End
LOAD D2 0.0046; for() #383 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 17964; for() #383 End
SETV D2 0; for() #384 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #384 LoopTest
COMPAREV D2 144
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18133 ==; for() #384 TestFail?
LOAD D2 0.0046; if() #1174 Test AND for() #384 Body Start
MODV D2 18
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 18032 ==; Test 'if'
SETV D2 54; InlineFunc[void Game::PlaySound(int)] Params AND if() #1174 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body AND if() #1174 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0042; InlineFunc[int WrapDegrees(int)] Params Start
PUSHR D2
LOAD D2 0.0046
MULTV D2 20
POP D3
ADDR D2 D3; InlineFunc[int WrapDegrees(int)] Params End
WRAPDEGREES D2; InlineFunc[int WrapDegrees(int)] Body
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 3.3303; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
PEEK D4
PUSHARGSR D4 0.0002; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 0.7500
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7476; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 20
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 20
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.3098; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #384 Body End
LOAD D2 0.0046; for() #384 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 18019; for() #384 End
SETV D2 0; for() #385 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #385 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18215 ==; for() #385 TestFail?
PUSHR D4; for() #385 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 6
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
ADDV D2 90
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCWDP
MULTV D2 2
PUSHR D2; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.3098; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #385 Body End
LOAD D2 0.0046; for() #385 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 18135; for() #385 End
LOAD D2 0.0001; if() #1173 Body End AND if() #1175 Test
COMPAREV D2 88
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 18571 ==; Test 'if'
PUSHR D4; if() #1175 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 30; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SUBV D2 1
MULTV D2 8
ADDV D2 16
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
MULTV D2 8
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 30; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #386 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #386 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18379 ==; for() #386 TestFail?
PUSHR D4; for() #386 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
SUBV D2 120
PUSHR D2
LOAD D2 0.0042
SUBV D2 130
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCWDP
MULTV D2 2
PUSHR D2; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2813; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #386 Body End
LOAD D2 0.0046; for() #386 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 18308; for() #386 End
SETV D2 0; for() #387 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #387 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18474 ==; for() #387 TestFail?
PUSHR D4; for() #387 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
PUSHV 0.5000
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7476; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
SUBV D2 120
PUSHR D2
LOAD D2 0.0042
SUBV D2 130
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2813; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #387 Body End
LOAD D2 0.0046; for() #387 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 18381; for() #387 End
SETV D2 30; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #388 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #388 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18571 ==; for() #388 TestFail?
PUSHR D4; for() #388 Body Start
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 3
ADDV D2 0.7500
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7476; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
SUBV D2 120
PUSHR D2
LOAD D2 0.0046
MULTV D2 10
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0042
SUBV D2 130
PUSHR D2
LOAD D2 0.0046
MULTV D2 10
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCWDP
MULTV D2 2
PUSHR D2; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2813; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #388 Body End
LOAD D2 0.0046; for() #388 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 18478; for() #388 End
LOAD D2 0.0001; if() #1175 Body End AND if() #1176 Test
COMPAREV D2 89
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 18792 ==; Test 'if'
PUSHR D4; if() #1176 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SUBV D2 1
MULTV D2 8
ADDV D2 16
ADDV D2 8
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
MULTV D2 4
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 0; for() #389 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #389 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18792 ==; for() #389 TestFail?
SETV D2 30; InlineFunc[void Game::PlaySound(int)] Params AND for() #389 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
PUSHV -20; UsrFunc[int Rand(int, int)] Params Start
PUSHV 20; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0.0043
SETV D2 0; for() #390 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #390 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18788 ==; for() #390 TestFail?
LOAD D2 0.0045; if() #1177 Test AND for() #390 Body Start
COMPAREV D2 1
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18700 ==; Test 'if'
PUSHR D4; if() #1177 Body Start
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 22.5000
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 4
ADDV D2 4
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7476; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4; if() #1177 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0043
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 22.5000
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 5
SETV D2 5
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 22.5000
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0043
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 22.5000
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCWDP
MULTV D2 2
PUSHR D2; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2813; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #390 Body End
LOAD D2 0.0046; for() #390 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 18677; for() #390 End
LOAD D2 0.0045; for() #389 Body End AND for() #389 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 18662; for() #389 End
LOAD D2 0.0001; if() #1176 Body End AND if() #1178 Test
COMPAREV D2 90
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19572 ==; Test 'if'
PUSHR D4; if() #1178 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3737; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 3.1987; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
STORE D2 0.0042
SETV D2 30; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SUBV D2 1
MULTV D2 8
ADDV D2 16
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
MULTV D2 8
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 0; for() #391 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #391 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18935 ==; for() #391 TestFail?
PUSHR D4; for() #391 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
SUBV D2 80
PUSHR D2
LOAD D2 0.0046
MULTV D2 4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0042
SUBV D2 60
PUSHR D2
LOAD D2 0.0046
MULTV D2 3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 4.5000
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2813; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #391 Body End
LOAD D2 0.0046; for() #391 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 18856; for() #391 End
SETV D2 0; for() #392 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #392 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18990 ==; for() #392 TestFail?
PUSHR D4; for() #392 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2813; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #392 Body End
LOAD D2 0.0046; for() #392 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 18937; for() #392 End
SETV D2 35; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #393 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #393 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 19047 ==; for() #393 TestFail?
PUSHR D4; for() #393 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2813; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #393 Body End
LOAD D2 0.0046; for() #393 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 18994; for() #393 End
SETV D2 0; for() #394 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #394 LoopTest
COMPAREV D2 108
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 19163 ==; for() #394 TestFail?
LOAD D2 0.0046; if() #1179 Test AND for() #394 Body Start
MODV D2 18
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19062 ==; Test 'if'
SETV D2 54; InlineFunc[void Game::PlaySound(int)] Params AND if() #1179 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body AND if() #1179 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0042; InlineFunc[int WrapDegrees(int)] Params Start
PUSHR D2
LOAD D2 0.0046
MULTV D2 20
POP D3
ADDR D2 D3; InlineFunc[int WrapDegrees(int)] Params End
WRAPDEGREES D2; InlineFunc[int WrapDegrees(int)] Body
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 3.3303; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
PEEK D4
PUSHARGSR D4 0.0002; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 0.7500
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7476; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 20
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 20
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2813; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #394 Body End
LOAD D2 0.0046; for() #394 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 19049; for() #394 End
SETV D2 0; for() #395 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #395 LoopTest
COMPAREV D2 3
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 19271 ==; for() #395 TestFail?
PUSHR D4; for() #395 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0042; InlineFunc[int WrapDegrees(int)] Params Start
PUSHR D2
LOAD D2 0.0046
MULTV D2 20
POP D3
ADDR D2 D3; InlineFunc[int WrapDegrees(int)] Params End
WRAPDEGREES D2; InlineFunc[int WrapDegrees(int)] Body
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 3.3303; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
PEEK D4
PUSHARGSR D4 0.0002; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 0.5000
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7476; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 20
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 20
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2813; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #395 Body End
LOAD D2 0.0046; for() #395 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 19165; for() #395 End
SETV D2 3; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 40
PUSHR D2
POP D2
SETR QUAKE D2
SETV D2 0; for() #396 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #396 LoopTest
COMPAREV D2 24
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 19370 ==; for() #396 TestFail?
PUSHR D4; for() #396 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ADDV D2 16
PUSHR D2
LOAD D2 0.0042
ADDV D2 60
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7499; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ADDV D2 16
PUSHR D2
LOAD D2 0.0042
ADDV D2 60
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7509; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
SETV D3 360; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
PUSHR D4
PUSHV 100; UsrFunc[int Rand(int, int)] Params Start
PUSHV 400; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2
PUSHV 9; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params End
CALLFUNC 3.3486; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 15
PUSHR D4
PUSHV 24; UsrFunc[int Rand(int, int)] Params Start
PUSHV 36; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
DIVV D2 10
PUSHR D2
PUSHV 1; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9617; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0031; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params Start
PUSHR D2; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params End
CALLFUNC 3.6299; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Call
POP D4; for() #396 Body End
LOAD D2 0.0046; for() #396 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 19279; for() #396 End
SETV D2 0; for() #397 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #397 LoopTest
COMPAREV D2 60
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 19427 ==; for() #397 TestFail?
PUSHR D4; for() #397 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
ADDV D2 60
PUSHR D2
LOAD D2 0.0042
ADDV D2 60
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2813; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #397 Body End
LOAD D2 0.0046; for() #397 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 19372; for() #397 End
SETV D2 0; for() #398 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #398 LoopTest
COMPAREV D2 36
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 19501 ==; for() #398 TestFail?
LOAD D2 0.0046; if() #1180 Test AND for() #398 Body Start
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19441 ==; Test 'if'
SETV D2 54; InlineFunc[void Game::PlaySound(int)] Params AND if() #1180 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body AND if() #1180 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
ADDV D2 60
PUSHR D2
LOAD D2 0.0042
ADDV D2 60
PUSHR D2
LOAD D2 0.0046
MULTV D2 20
SETV D2 20
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2813; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #398 Body End
LOAD D2 0.0046; for() #398 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 19429; for() #398 End
SETV D2 0; for() #399 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #399 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 19572 ==; for() #399 TestFail?
PUSHR D4; for() #399 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
ADDV D2 60
PUSHR D2
LOAD D2 0.0042
ADDV D2 60
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2813; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #399 Body End
LOAD D2 0.0046; for() #399 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 19503; for() #399 End
SETV D2 0; if() #1178 Body End
STORE D2 0.0046
LOAD D2 0.0027; if() #1181 Test
PUSHR D2
POP D0
READPODARRAYV D2 200
COMPAREV D2 0
GOTOCMP 19789 ==; Test 'if'
LOAD D2 0.0027; if() #609 Test AND if() #1181 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 200
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19667 ==; Test 'if'
LOAD D2 0.0027; if() #1182 Test AND if() #609 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 202
COMPAREV D2 0
GOTOCMP 19789 ==; Test 'if'
PUSHR D4; if(true) #610 [Opt:AlwaysOn] AND if() #1182 Body Start
LOAD D2 0.0034; UsrFunc[int EZB_BarrierShift_TransformAnimSize(npc, int)] Params Start
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[int EZB_BarrierShift_TransformAnimSize(npc, int)] Params End
CALLFUNC 3.0634; UsrFunc[int EZB_BarrierShift_TransformAnimSize(npc, int)] Call
POP D4
STORE D2 0.0045
LOAD D2 0.0045; InlineFunc[int Max(int, int)] Params Start AND if(true) #1183 [Opt:AlwaysOn]
PUSHVARGR D2
LOAD D2 0.0034; InlineFunc[int Max(int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHVARGR SPRITE_TILE_W
LOAD D2 0.0034
PUSHR D2
POP REFSPRITE
PUSHVARGR SPRITE_TILE_H; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
MULTV D2 8
ADDV D2 8
STORE D2 0.0044
PUSHR D4
PUSHV 0; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0047; UsrFunc[int CenterX(ffc)] Params Start
PUSHR D2; UsrFunc[int CenterX(ffc)] Params End
CALLFUNC 2.0583; UsrFunc[int CenterX(ffc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[int CenterY(ffc)] Params Start
PUSHR D2; UsrFunc[int CenterY(ffc)] Params End
CALLFUNC 2.0629; UsrFunc[int CenterY(ffc)] Call
POP D4
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 12
PUSHARGSV 0 0.0003; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.6226; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 16; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7641; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 56; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
LOAD D2 0.0034; UsrFunc[void EZB_Barriershift_Load(npc, int, bool, bool)] Params Start
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0
PUSHV 1; UsrFunc[void EZB_Barriershift_Load(npc, int, bool, bool)] Params End
CALLFUNC 3.0692; UsrFunc[void EZB_Barriershift_Load(npc, int, bool, bool)] Call
POP D4
SETV D2 0
PUSHR D2
LOAD D2 0.0027
SETR D0 D2
POP D2
WRITEPODARRAYVR 202 D2
SETV D2 1
STORE D2 0.0046; if() #1182 Body End
GOTO 19789; if() #609 Body End
LOAD D2 0.0027; if() #611 Test AND if() #609 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 200
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19733 ==; Test 'if'
SETV D2 0; if() #611 Body Start
STORE D2 0.0045
LOAD D2 0.0027; if() #612 Test
PUSHR D2
POP D0
READPODARRAYV D2 314
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19688 ==; Test 'if'
SETV D2 1; if() #612 Body Start
STORE D2 0.0045
GOTO 19700; if() #612 Body End
LOAD D2 0.0027; InlineFunc[int Rand(int)] Params Start AND if() #1184 Test AND if() #612 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 314
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19700 ==; Test 'if'
SETV D2 1; if() #1184 Body Start
STORE D2 0.0045; if() #1184 Body End
LOAD D2 0.0027; if() #612 Else End AND if() #613 Test
PUSHR D2
POP D0
READPODARRAYV D2 313
COMPAREV D2 0
GOTOCMP 19717 ==; Test 'if'
LOAD D2 0.0027; if() #613 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 313
SUBV D2 1
PUSHR D2
LOAD D2 0.0027
SETR D0 D2
POP D2
WRITEPODARRAYVR 313 D2
GOTO 19789; if() #613 Body End
LOAD D2 0.0045; if() #1185 Test AND if() #613 Else Start
COMPAREV D2 0
GOTOCMP 19789 ==; Test 'if'
SETV D2 56; InlineFunc[void Game::PlaySound(int)] Params AND if() #1185 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
LOAD D2 0.0034; UsrFunc[void EZB_Barriershift_Load(npc, int, bool, bool)] Params Start
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHARGSV 0 0.0002; UsrFunc[void EZB_Barriershift_Load(npc, int, bool, bool)] Params End
CALLFUNC 3.0692; UsrFunc[void EZB_Barriershift_Load(npc, int, bool, bool)] Call
POP D4
SETV D2 1
STORE D2 0.0046; if() #1185 Body End
GOTO 19789; if() #613 Else End AND if() #611 Body End
SETV D2 0; if() #611 Else Start
STORE D2 0.0045
LOAD D2 0.0027; if() #614 Test
PUSHR D2
POP D0
READPODARRAYV D2 314
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19746 ==; Test 'if'
SETV D2 1; if() #614 Body Start
STORE D2 0.0045
GOTO 19758; if() #614 Body End
LOAD D2 0.0027; InlineFunc[int Rand(int)] Params Start AND if() #1186 Test AND if() #614 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 314
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19758 ==; Test 'if'
SETV D2 1; if() #1186 Body Start
STORE D2 0.0045; if() #1186 Body End
LOAD D2 0.0027; if() #614 Else End AND if() #615 Test
PUSHR D2
POP D0
READPODARRAYV D2 313
COMPAREV D2 0
GOTOCMP 19775 ==; Test 'if'
LOAD D2 0.0027; if() #615 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 313
SUBV D2 1
PUSHR D2
LOAD D2 0.0027
SETR D0 D2
POP D2
WRITEPODARRAYVR 313 D2
GOTO 19789; if() #615 Body End
LOAD D2 0.0045; if() #1187 Test AND if() #615 Else Start
COMPAREV D2 0
GOTOCMP 19789 ==; Test 'if'
SETV D2 56; InlineFunc[void Game::PlaySound(int)] Params AND if() #1187 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
LOAD D2 0.0034; UsrFunc[void EZB_Barriershift_Load(npc, int, bool, bool)] Params Start
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[void EZB_Barriershift_Load(npc, int, bool, bool)] Params End
CALLFUNC 3.0692; UsrFunc[void EZB_Barriershift_Load(npc, int, bool, bool)] Call
POP D4; if() #1187 Body End
LOAD D2 0.0046; if() #615 Else End AND if() #611 Else End AND if() #609 Else End AND if() #1181 Body End AND if() #1188 Test
COMPAREV D2 0
GOTOCMP 20293 ==; Test 'if'
PUSHR D4; if() #1188 Body Start
PUSHV 512; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.4996; UsrFunc[void Ghost_UnsetFlag(int)] Call
PEEK D4
PUSHV 256; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.4996; UsrFunc[void Ghost_UnsetFlag(int)] Call
PEEK D4
PUSHV 32; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.4996; UsrFunc[void Ghost_UnsetFlag(int)] Call
PEEK D4
PUSHV 7168; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.4996; UsrFunc[void Ghost_UnsetFlag(int)] Call
PEEK D4
PUSHV 65536; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.4996; UsrFunc[void Ghost_UnsetFlag(int)] Call
PEEK D4
PUSHV 16384; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.4996; UsrFunc[void Ghost_UnsetFlag(int)] Call
PEEK D4
PUSHV 65538; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.4996; UsrFunc[void Ghost_UnsetFlag(int)] Call
PEEK D4
PUSHV 1; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.4996; UsrFunc[void Ghost_UnsetFlag(int)] Call
PEEK D4
PUSHV 16384; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.4996; UsrFunc[void Ghost_UnsetFlag(int)] Call
PEEK D4
PUSHV 16; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.4996; UsrFunc[void Ghost_UnsetFlag(int)] Call
PEEK D4
PUSHV 8; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.4996; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP D4
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 300
STORE D2 0.0026
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 301
STORE D2 0.0025
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 302
STORE D2 0.0024
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 303
STORE D2 0.0023
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 304
STORE D2 0.0022
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 305
STORE D2 0.0021
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 306
STORE D2 0.0020
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 307
STORE D2 0.0019
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 308
STORE D2 0.0018
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0.0017
SETV D2 0
PUSHR D2
LOAD D2 0.0030
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0030
SETR D0 D2
POP D2
WRITEPODARRAYVR 100 D2
PUSHR D4
LOAD D2 0.0027; UsrFunc[void EZB_InitVars(int)] Params Start
PUSHR D2; UsrFunc[void EZB_InitVars(int)] Params End
CALLFUNC 3.5402; UsrFunc[void EZB_InitVars(int)] Call
POP D4
SETV D2 0
STORE D2 0.0016
SETV D2 0
STORE D2 0.0015
LOAD D2 0.0025; if() #616 Test
COMPAREV D2 44
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19905 ==; Test 'if'
SETV D2 44; if() #616 Body Start
STORE D2 0.0016
GOTO 19936; if() #616 Body End
LOAD D2 0.0025; if() #617 Test AND if() #616 Else Start
COMPAREV D2 45
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19913 ==; Test 'if'
SETV D2 45; if() #617 Body Start
STORE D2 0.0016
GOTO 19936; if() #617 Body End
LOAD D2 0.0025; if() #618 Test AND if() #617 Else Start
COMPAREV D2 46
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19921 ==; Test 'if'
SETV D2 46; if() #618 Body Start
STORE D2 0.0016
GOTO 19936; if() #618 Body End
LOAD D2 0.0025; if() #619 Test AND if() #618 Else Start
COMPAREV D2 47
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19929 ==; Test 'if'
SETV D2 47; if() #619 Body Start
STORE D2 0.0016
GOTO 19936; if() #619 Body End
LOAD D2 0.0025; if() #1189 Test AND if() #619 Else Start
COMPAREV D2 48
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19936 ==; Test 'if'
SETV D2 48; if() #1189 Body Start
STORE D2 0.0016; if() #1189 Body End
LOAD D2 0.0016; if() #619 Else End AND if() #618 Else End AND if() #617 Else End AND if() #616 Else End AND if() #1190 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 19947 ==; Test 'if'
LOAD D2 0.0024; if() #1190 Body Start
STORE D2 0.0025
LOAD D2 0.0023
STORE D2 0.0024
SETV D2 0
STORE D2 0.0023; if() #1190 Body End
LOAD D2 0.0022
ANDV D2 15
STORE D2 0.0014
LOAD D2 0.0022; InlineFunc[int Floor(int)] Params Start
RSHIFTV D2 4; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
ANDV D2 15
STORE D2 0.0013
LOAD D2 0.0017; if() #1191 Test
ANDV D2 512
COMPAREV D2 0
GOTOCMP 19965 !=
LOAD D2 0.0017
ANDV D2 1024
COMPAREV D2 0
GOTOCMP 19965 !=
SETV D2 1
GOTO 19966
SETV D2 0
COMPAREV D2 0
GOTOCMP 19975 ==; Test 'if'
PUSHR D4; if() #1191 Body Start
PUSHV 8; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4635; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK D4
PUSHV 16; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4635; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #1191 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_GetExtraProperties(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 312
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0025
PUSHR D2
LOAD D2 0.0024
PUSHR D2
LOAD D2 0.0023
PUSHR D2
LOAD D2 0.0030
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_GetExtraProperties(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.4847; UsrFunc[void EZB_GetExtraProperties(ffc, npc, int, int, int, int, int, int, int)] Call
POP D4
LOAD D2 0.0020
ANDV D2 15
STORE D2 0.0012
LOAD D2 0.0020
RSHIFTV D2 4
ANDV D2 15
STORE D2 0.0011
LOAD D2 0.0011; if() #1192 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 20013 ==; Test 'if'
LOAD D2 0.0012; if() #1192 Body Start
STORE D2 0.0011; if() #1192 Body End
PUSHR D4
LOAD D2 0.0012; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 4; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0687; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0012
PUSHR D4
LOAD D2 0.0011; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 4; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0687; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0011
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 310
STORE D2 0.0010
SETR D2 GD12; if() #1193 Test
PUSHR D2
LOAD D2 0.0012
POP D3
COMPARER D3 D2
GOTOCMP 20048 !=
SETR D2 GD13
PUSHR D2
LOAD D2 0.0011
POP D3
COMPARER D3 D2
GOTOCMP 20048 !=
SETV D2 0
GOTO 20049
SETV D2 1
COMPAREV D2 0
GOTOCMP 20063 ==; Test 'if'
PUSHR D4; if() #1193 Body Start
LOAD D2 0.0047; UsrFunc[void Ghost_Transform(ffc, npc, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
PUSHARGSV -1 0.0002
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0011
PUSHR D2; UsrFunc[void Ghost_Transform(ffc, npc, int, int, int, int)] Params End
CALLFUNC 2.7772; UsrFunc[void Ghost_Transform(ffc, npc, int, int, int, int)] Call
POP D4; if() #1193 Body End
PUSHR D4
LOAD D2 0.0034; UsrFunc[void Ghost_SetHitOffsets(npc, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0014
PUSHR D2
LOAD D2 0.0014
PUSHR D2; UsrFunc[void Ghost_SetHitOffsets(npc, int, int, int, int)] Params End
CALLFUNC 2.7536; UsrFunc[void Ghost_SetHitOffsets(npc, int, int, int, int)] Call
POP D4
LOAD D2 0.0017; if() #620 Test
ANDV D2 2
COMPAREV D2 0
GOTOCMP 20085 ==; Test 'if'
PUSHR D4; if() #620 Body Start
PUSHV 512; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4635; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4
GOTO 20093; if() #620 Body End
LOAD D2 0.0017; if() #1194 Test AND if() #620 Else Start
ANDV D2 1
COMPAREV D2 0
GOTOCMP 20093 ==; Test 'if'
PUSHR D4; if() #1194 Body Start
PUSHV 256; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4635; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #1194 Body End
LOAD D2 0.0017; if() #620 Else End AND if() #1195 Test
ANDV D2 16
COMPAREV D2 0
GOTOCMP 20101 ==; Test 'if'
PUSHR D4; if() #1195 Body Start
PUSHV 32; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4635; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #1195 Body End
LOAD D2 0.0017; if() #621 Test
ANDV D2 4
COMPAREV D2 0
GOTOCMP 20145 ==; Test 'if'
PUSHR D4; if() #621 Body Start
PUSHV 7168; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4635; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK D4
PUSHV 65536; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4635; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4
SETV D2 1
PUSHR D2
LOAD D2 0.0047
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2
LOAD D2 0.0017; if() #1196 Test
ANDV D2 16
COMPAREV D2 0
GOTOCMP 20135 ==
PUSHR D4
CALLFUNC 2.7519; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 20135 !=
SETV D2 1
GOTO 20136
SETV D2 0
COMPAREV D2 0
GOTOCMP 20153 ==; Test 'if'
PUSHR D4; if() #1196 Body Start
PUSHV 16384; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4635; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4
SETV D2 8
SETR GD3 D2; if() #1196 Body End
GOTO 20153; if() #621 Body End
LOAD D2 0.0017; if() #1197 Test AND if() #621 Else Start
ANDV D2 8
COMPAREV D2 0
GOTOCMP 20153 ==; Test 'if'
PUSHR D4; if() #1197 Body Start
PUSHV 65538; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4635; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #1197 Body End
LOAD D2 0.0017; if() #621 Else End AND if() #1198 Test
ANDV D2 256
COMPAREV D2 0
GOTOCMP 20161 ==; Test 'if'
PUSHR D4; if() #1198 Body Start
PUSHV 1; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4635; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #1198 Body End
SETV D2 -1
STORE D2 0.0009
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
MULTV D2 10
STORE D2 0.0008
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0007
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
STORE D2 0.0006
SETV D2 0
STORE D2 0.0038
SETV D2 0
STORE D2 0.0037
SETV D2 -1
STORE D2 0.0004
LOAD D2 0.0026; if() #1200 Test
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 20235 ==; Test 'if'
SETV D3 360; InlineFunc[int Rand(int)] Params AND if() #1200 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0034; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7499; UsrFunc[int VectorX(int, int)] Call
POP D4
STORE D2 0.0038
PUSHR D4
LOAD D2 0.0034; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7509; UsrFunc[int VectorY(int, int)] Call
POP D4
STORE D2 0.0037; if() #1200 Body End
LOAD D2 0.0026; if() #1201 Test
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 20243 ==; Test 'if'
SETV D3 4; InlineFunc[int Rand(int)] Params AND if() #1201 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0007; if() #1201 Body End
LOAD D2 0.0026; if() #1202 Test
COMPAREV D2 12
GOTOCMP 20251 ==
LOAD D2 0.0026
COMPAREV D2 13
GOTOCMP 20251 ==
SETV D2 0
GOTO 20252
SETV D2 1
COMPAREV D2 0
GOTOCMP 20259 ==; Test 'if'
LOAD D2 0.0034; if() #1202 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
STORE D2 0.0006; if() #1202 Body End
LOAD D2 0.0027; if() #1203 Test
PUSHR D2
POP D0
READPODARRAYV D2 200
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 20273 ==; Test 'if'
SETV D2 0; if() #1203 Body Start
PUSHR D2
LOAD D2 0.0027
SETR D0 D2
POP D2
WRITEPODARRAYVR 200 D2; if() #1203 Body End
SETV D2 0; for() #400 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #400 LoopTest
COMPAREV D2 16
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 20293 ==; for() #400 TestFail?
SETV D2 0; for() #400 Body Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0046
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #400 Body End
LOAD D2 0.0046; for() #400 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 20275; for() #400 End
LOAD D2 0.0010; if() #1188 Body End
SETR GD10 D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
MULTV D2 10
STORE D2 0.0008
LOAD D2 0.0026; if() #1204 Test
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 20333 ==; Test 'if'
SETV D3 360; InlineFunc[int Rand(int)] Params AND if() #1204 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0034; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7499; UsrFunc[int VectorX(int, int)] Call
POP D4
STORE D2 0.0038
PUSHR D4
LOAD D2 0.0034; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7509; UsrFunc[int VectorY(int, int)] Call
POP D4
STORE D2 0.0037; if() #1204 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR GD4; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params End
CALLFUNC 3.3329; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Call
POP D4
SETV D2 0
PUSHR D2
LOAD D2 0.0027
SETR D0 D2
POP D2
WRITEPODARRAYVR 319 D2; if() #1044 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while(true) #9 Body [Opt:AlwaysOn] End
GOTO 480; while() #9 End
LOAD D3 0.0005
DEALLOCATEMEMR D3
LOAD D3 0.0027
DEALLOCATEMEMR D3
LOAD D3 0.0028
DEALLOCATEMEMR D3
LOAD D3 0.0030
DEALLOCATEMEMR D3
LOAD D3 0.0033
DEALLOCATEMEMR D3
LOAD D3 0.0035
DEALLOCATEMEMR D3
LOAD D3 0.0036
DEALLOCATEMEMR D3; [Opt:NeverRet] AND void run(int) Body End
SETR D4 SP2; Func[int DirNormal(int)] Body Start
LOAD D2 0; switch() #9 Key
SETR SWITCHKEY D2; Store key
COMPAREV SWITCHKEY 8
GOTOCMP 20393 ==; case '80000'
COMPAREV SWITCHKEY 9
GOTOCMP 20395 ==; case '90000'
COMPAREV SWITCHKEY 10
GOTOCMP 20397 ==; case '100000'
COMPAREV SWITCHKEY 11
GOTOCMP 20399 ==; case '110000'
COMPAREV SWITCHKEY 12
GOTOCMP 20401 ==; case '120000'
COMPAREV SWITCHKEY 13
GOTOCMP 20403 ==; case '130000'
COMPAREV SWITCHKEY 14
GOTOCMP 20405 ==; case '140000'
COMPAREV SWITCHKEY 15
GOTOCMP 20407 ==; case '150000'
GOTO 20409; switch() #9 NoMatch
SETV D2 0; Case block AND return Start
GOTO 20410; return End
SETV D2 5; Case block AND return Start
GOTO 20410; return End
SETV D2 3; Case block AND return Start
GOTO 20410; return End
SETV D2 7; Case block AND return Start
GOTO 20410; return End
SETV D2 1; Case block AND return Start
GOTO 20410; return End
SETV D2 6; Case block AND return Start
GOTO 20410; return End
SETV D2 2; Case block AND return Start
GOTO 20410; return End
SETV D2 4; Case block AND return Start
GOTO 20410; return End
LOAD D2 0; Case block AND return Start
POP D5; return End
RETURNFUNC; Func[int DirNormal(int)] Body End
SETR D4 SP2; Func[int Angle(int, int, int, int)] Body Start
LOAD D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start AND return Start
PUSHR D2
LOAD D2 0.0003
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
SETR D3 D2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
POPARGS D5 0.0004; return End
RETURNFUNC; Func[int Angle(int, int, int, int)] Body End
SETR D4 SP2; Func[int AngleDir4(int)] Body Start
LOAD D2 0; if() #4 Test
COMPAREV D2 135
GOTOCMP 20440 >
LOAD D2 0
COMPAREV D2 45
GOTOCMP 20440 <=
SETV D2 1
GOTO 20441
SETV D2 0
COMPAREV D2 0
GOTOCMP 20445 ==; Test 'if'
SETV D2 1; return Start AND if() #4 Body Start
GOTO 20472; return End AND if() #4 Body End
LOAD D2 0; if() #5 Test AND if() #4 Else Start
COMPAREV D2 45
GOTOCMP 20453 >
LOAD D2 0
COMPAREV D2 -45
GOTOCMP 20453 <=
SETV D2 1
GOTO 20454
SETV D2 0
COMPAREV D2 0
GOTOCMP 20458 ==; Test 'if'
SETV D2 3; return Start AND if() #5 Body Start
GOTO 20472; return End AND if() #5 Body End
LOAD D2 0; if() #6 Test AND if() #5 Else Start
COMPAREV D2 -45
GOTOCMP 20466 >
LOAD D2 0
COMPAREV D2 -135
GOTOCMP 20466 <=
SETV D2 1
GOTO 20467
SETV D2 0
COMPAREV D2 0
GOTOCMP 20471 ==; Test 'if'
SETV D2 0; return Start AND if() #6 Body Start
GOTO 20472; return End AND if() #6 Body End
SETV D2 2; return Start AND if() #6 Else Start
POP D5; return End AND if() #6 Else End AND if() #5 Else End AND if() #4 Else End
RETURNFUNC; Func[int AngleDir4(int)] Body End
SETR D4 SP2; Func[int AngleDir8(int)] Body Start
LOAD D2 0; if() #7 Test
COMPAREV D2 157.5000
GOTOCMP 20483 >
LOAD D2 0
COMPAREV D2 112.5000
GOTOCMP 20483 <=
SETV D2 1
GOTO 20484
SETV D2 0
COMPAREV D2 0
GOTOCMP 20488 ==; Test 'if'
SETV D2 6; return Start AND if() #7 Body Start
GOTO 20567; return End AND if() #7 Body End
LOAD D2 0; if() #8 Test AND if() #7 Else Start
COMPAREV D2 112.5000
GOTOCMP 20496 >
LOAD D2 0
COMPAREV D2 67.5000
GOTOCMP 20496 <=
SETV D2 1
GOTO 20497
SETV D2 0
COMPAREV D2 0
GOTOCMP 20501 ==; Test 'if'
SETV D2 1; return Start AND if() #8 Body Start
GOTO 20567; return End AND if() #8 Body End
LOAD D2 0; if() #9 Test AND if() #8 Else Start
COMPAREV D2 67.5000
GOTOCMP 20509 >
LOAD D2 0
COMPAREV D2 22.5000
GOTOCMP 20509 <=
SETV D2 1
GOTO 20510
SETV D2 0
COMPAREV D2 0
GOTOCMP 20514 ==; Test 'if'
SETV D2 7; return Start AND if() #9 Body Start
GOTO 20567; return End AND if() #9 Body End
LOAD D2 0; if() #10 Test AND if() #9 Else Start
COMPAREV D2 22.5000
GOTOCMP 20522 >
LOAD D2 0
COMPAREV D2 -22.5000
GOTOCMP 20522 <=
SETV D2 1
GOTO 20523
SETV D2 0
COMPAREV D2 0
GOTOCMP 20527 ==; Test 'if'
SETV D2 3; return Start AND if() #10 Body Start
GOTO 20567; return End AND if() #10 Body End
LOAD D2 0; if() #11 Test AND if() #10 Else Start
COMPAREV D2 -22.5000
GOTOCMP 20535 >
LOAD D2 0
COMPAREV D2 -67.5000
GOTOCMP 20535 <=
SETV D2 1
GOTO 20536
SETV D2 0
COMPAREV D2 0
GOTOCMP 20540 ==; Test 'if'
SETV D2 5; return Start AND if() #11 Body Start
GOTO 20567; return End AND if() #11 Body End
LOAD D2 0; if() #12 Test AND if() #11 Else Start
COMPAREV D2 -67.5000
GOTOCMP 20548 >
LOAD D2 0
COMPAREV D2 -112.5000
GOTOCMP 20548 <=
SETV D2 1
GOTO 20549
SETV D2 0
COMPAREV D2 0
GOTOCMP 20553 ==; Test 'if'
SETV D2 0; return Start AND if() #12 Body Start
GOTO 20567; return End AND if() #12 Body End
LOAD D2 0; if() #13 Test AND if() #12 Else Start
COMPAREV D2 -112.5000
GOTOCMP 20561 >
LOAD D2 0
COMPAREV D2 -157.5000
GOTOCMP 20561 <=
SETV D2 1
GOTO 20562
SETV D2 0
COMPAREV D2 0
GOTOCMP 20566 ==; Test 'if'
SETV D2 4; return Start AND if() #13 Body Start
GOTO 20567; return End AND if() #13 Body End
SETV D2 2; return Start AND if() #13 Else Start
POP D5; return End AND if() #13 Else End AND if() #12 Else End AND if() #11 Else End AND if() #10 Else End AND if() #9 Else End AND if() #8 Else End AND if() #7 Else End
RETURNFUNC; Func[int AngleDir8(int)] Body End
SETR D4 SP2; Func[int CenterLinkX()] Body Start
SETV D2 0.0001; return Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
RETURNFUNC; return End AND Func[int CenterLinkX()] Body End
SETR D4 SP2; Func[int CenterLinkY()] Body Start
SETV D2 0.0001; return Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
RETURNFUNC; return End AND Func[int CenterLinkY()] Body End
SETR D4 SP2; Func[int CenterX(ffc)] Body Start
LOAD D2 0; return Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
POP D5; return End
RETURNFUNC; Func[int CenterX(ffc)] Body End
SETR D4 SP2; Func[int CenterX(npc)] Body Start
LOAD D2 0; return Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
POP D5; return End
RETURNFUNC; Func[int CenterX(npc)] Body End
SETR D4 SP2; Func[int CenterY(ffc)] Body Start
LOAD D2 0; return Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
POP D5; return End
RETURNFUNC; Func[int CenterY(ffc)] Body End
SETR D4 SP2; Func[int CenterY(npc)] Body Start
LOAD D2 0; return Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
POP D5; return End
RETURNFUNC; Func[int CenterY(npc)] Body End
SETR D4 SP2; Func[int Rand(int, int)] Body Start
SETV D2 0; InlineFunc[int randgen::Rand(int, int)] Params Start AND return Start
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0001
SETR D3 D2; InlineFunc[int randgen::Rand(int, int)] Params End
POP D2; InlineFunc[int randgen::Rand(int, int)] Body Start
POP REFRNG
RNGRAND3 D2 D3; InlineFunc[int randgen::Rand(int, int)] Body End
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int Rand(int, int)] Body End
SETR D4 SP2; Func[int Clamp(int, int, int)] Body Start
LOAD D2 0.0002; if() #20 Test
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 20699 ==; Test 'if'
LOAD D2 0.0001; if() #20 Body Start
STORE D2 0.0002
GOTO 20709; if() #20 Body End
LOAD D2 0.0002; if() #83 Test AND if() #20 Else Start
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 20709 ==; Test 'if'
LOAD D2 0; if() #83 Body Start
STORE D2 0.0002; if() #83 Body End
LOAD D2 0.0002; if() #20 Else End AND return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[int Clamp(int, int, int)] Body End
SETR D4 SP2; Func[bool ClockIsActive()] Body Start
SETR D2 GD26; return Start
PUSHR D2
POP D0
READPODARRAYV D2 6
COMPAREV D2 0
SETCMP D2 I!=
RETURNFUNC; return End AND Func[bool ClockIsActive()] Body End
SETR D4 SP2; Func[int ComboX(int)] Body Start
LOAD D2 0; return Start
MODV D2 16
MULTV D2 16
POP D5; return End
RETURNFUNC; Func[int ComboX(int)] Body End
SETR D4 SP2; Func[int ComboY(int)] Body Start
LOAD D2 0; return Start
ANDV D2 240
POP D5; return End
RETURNFUNC; Func[int ComboY(int)] Body End
PUSHV 0; Func[lweapon CreateLWeaponAt(int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0003; InlineFunc[lweapon screendata::CreateLWeapon(int)] Params
CREATELWEAPONR D2; InlineFunc[lweapon screendata::CreateLWeapon(int)] Body Start
SETR D2 REFLWPN; InlineFunc[lweapon screendata::CreateLWeapon(int)] Body End
STORE D2 0
LOAD D2 0; InlineFunc[bool lweapon::isValid()] Params AND if() #109 Test
ISVALIDLWPN D2; InlineFunc[bool lweapon::isValid()] Body
COMPAREV D2 0
GOTOCMP 20759 ==; Test 'if'
LOAD D2 0.0002; if() #109 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2; if() #109 Body End
LOAD D2 0; return Start
POPARGS D5 0.0004; return End
RETURNFUNC; Func[lweapon CreateLWeaponAt(int, int, int)] Body End
PUSHV 0; Func[npc CreateNPCAt(int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0003; InlineFunc[npc screendata::CreateNPC(int)] Params
CREATENPCR D2; InlineFunc[npc screendata::CreateNPC(int)] Body Start
SETR D2 REFNPC; InlineFunc[npc screendata::CreateNPC(int)] Body End
STORE D2 0
LOAD D2 0; InlineFunc[bool npc::isValid()] Params AND if() #110 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 20790 ==; Test 'if'
LOAD D2 0.0002; if() #110 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2; if() #110 Body End
LOAD D2 0; return Start
POPARGS D5 0.0004; return End
RETURNFUNC; Func[npc CreateNPCAt(int, int, int)] Body End
PUSHV 0; Func[bool IsWater(int)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
POP D0
SETR D2 COMBOTD
STORE D2 0
LOAD D2 0; if() #364 Test
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 20807 ==; Test 'if'
SETV D2 1; return Start AND if() #364 Body Start
GOTO 20835; return End AND if() #364 Body End
LOAD D2 0; if() #365 Test
COMPAREV D2 18
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 20814 ==; Test 'if'
SETV D2 1; return Start AND if() #365 Body Start
GOTO 20835; return End AND if() #365 Body End
LOAD D2 0; if() #366 Test
COMPAREV D2 19
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 20821 ==; Test 'if'
SETV D2 1; return Start AND if() #366 Body Start
GOTO 20835; return End AND if() #366 Body End
LOAD D2 0; if() #367 Test
COMPAREV D2 86
GOTOCMP 20829 <
LOAD D2 0
COMPAREV D2 91
GOTOCMP 20829 >
SETV D2 1
GOTO 20830
SETV D2 0
COMPAREV D2 0
GOTOCMP 20834 ==; Test 'if'
SETV D2 1; return Start AND if() #367 Body Start
GOTO 20835; return End AND if() #367 Body End
SETV D2 0; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[bool IsWater(int)] Body End
SETR D4 SP2; Func[bool __IsPit(int)] Body Start
PUSHR D4; return Start
LOAD D2 0; UsrFunc[bool IsPit(int)] Params Start
PUSHR D2; UsrFunc[bool IsPit(int)] Params End
CALLFUNC 2.9237; UsrFunc[bool IsPit(int)] Call
POP D4
POP D5; return End
RETURNFUNC; Func[bool __IsPit(int)] Body End
PUSHV 0; Func[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0003; if() #172 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 20858 ==; Test 'if'
PUSHR D4; if() #172 Body Start
LOAD D2 0.0009; UsrFunc[int GetDefaultEWeaponSprite(int)] Params Start
PUSHR D2; UsrFunc[int GetDefaultEWeaponSprite(int)] Params End
CALLFUNC 2.0995; UsrFunc[int GetDefaultEWeaponSprite(int)] Call
POP D4
STORE D2 0.0003; if() #172 Body End
LOAD D2 0.0002; if() #173 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 20869 ==; Test 'if'
PUSHR D4; if() #173 Body Start
LOAD D2 0.0009; UsrFunc[int GetDefaultEWeaponSound(int)] Params Start
PUSHR D2; UsrFunc[int GetDefaultEWeaponSound(int)] Params End
CALLFUNC 2.1155; UsrFunc[int GetDefaultEWeaponSound(int)] Call
POP D4
STORE D2 0.0002; if() #173 Body End
LOAD D2 0.0009; InlineFunc[eweapon screendata::CreateEWeapon(int)] Params
CREATEEWEAPONR D2; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body Start
SETR D2 REFEWPN; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body End
STORE D2 0
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNPOWER D2
SETV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNANGULAR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
LOAD D2 0.0003; if() #174 Test
COMPAREV D2 0
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 20939 ==; Test 'if'
LOAD D2 0; InlineFunc[void eweapon::UseSprite(int)] Params Start AND if() #174 Body Start
PUSHR D2
LOAD D2 0.0003; InlineFunc[void eweapon::UseSprite(int)] Params End
POP D3; InlineFunc[void eweapon::UseSprite(int)] Body Start
SETR REFEWPN D3
EWPNUSESPRITER D2; InlineFunc[void eweapon::UseSprite(int)] Body End AND if() #174 Body End
LOAD D2 0.0001
ORV D2 512
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 2.1208; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0.0001; if() #175 Test
ANDV D2 32
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 20973 ==; Test 'if'
SETV D2 0; if() #175 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNCOLLDET D2; if() #175 Body End
LOAD D2 0; if() #176 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 20990 ==; Test 'if'
PUSHR D4; if() #176 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 2.1318; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #176 Body End
LOAD D2 0.0002; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
LOAD D2 0; return Start
POPARGS D5 0.0010; return End
RETURNFUNC; Func[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0003; Func[int GetDefaultEWeaponSprite(int)] Body Start
SETR D4 SP2
LOAD D2 0.0003; if() #58 Test
COMPAREV D2 129
GOTOCMP 21005 ==
LOAD D2 0.0003
COMPAREV D2 145
GOTOCMP 21005 ==
SETV D2 0
GOTO 21006
SETV D2 1
COMPAREV D2 0
GOTOCMP 21010 ==; Test 'if'
SETV D2 17; return Start AND if() #58 Body Start
GOTO 21153; return End AND if() #58 Body End
LOAD D2 0.0003; if() #59 Test AND if() #58 Else Start
COMPAREV D2 133
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21017 ==; Test 'if'
SETV D2 18; return Start AND if() #59 Body Start
GOTO 21153; return End AND if() #59 Body End
LOAD D2 0.0003; if() #60 Test AND if() #59 Else Start
COMPAREV D2 130
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21024 ==; Test 'if'
SETV D2 19; return Start AND if() #60 Body Start
GOTO 21153; return End AND if() #60 Body End
LOAD D2 0.0003; if() #61 Test AND if() #60 Else Start
COMPAREV D2 140
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21031 ==; Test 'if'
SETV D2 35; return Start AND if() #61 Body Start
GOTO 21153; return End AND if() #61 Body End
LOAD D2 0.0003; if() #62 Test AND if() #61 Else Start
COMPAREV D2 142
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21038 ==; Test 'if'
SETV D2 81; return Start AND if() #62 Body Start
GOTO 21153; return End AND if() #62 Body End
LOAD D2 0.0003; if() #63 Test AND if() #62 Else Start
COMPAREV D2 139
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21045 ==; Test 'if'
SETV D2 80; return Start AND if() #63 Body Start
GOTO 21153; return End AND if() #63 Body End
LOAD D2 0.0003; if() #64 Test AND if() #63 Else Start
COMPAREV D2 134
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21052 ==; Test 'if'
SETV D2 21; return Start AND if() #64 Body Start
GOTO 21153; return End AND if() #64 Body End
LOAD D2 0.0003; if() #65 Test AND if() #64 Else Start
COMPAREV D2 132
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21059 ==; Test 'if'
SETV D2 20; return Start AND if() #65 Body Start
GOTO 21153; return End AND if() #65 Body End
LOAD D2 0.0003; if() #66 Test AND if() #65 Else Start
COMPAREV D2 141
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21066 ==; Test 'if'
SETV D2 36; return Start AND if() #66 Body Start
GOTO 21153; return End AND if() #66 Body End
LOAD D2 0.0003; if() #67 Test AND if() #66 Else Start
COMPAREV D2 137
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21073 ==; Test 'if'
SETV D2 76; return Start AND if() #67 Body Start
GOTO 21153; return End AND if() #67 Body End
LOAD D2 0.0003; if() #68 Test AND if() #67 Else Start
COMPAREV D2 138
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21080 ==; Test 'if'
SETV D2 77; return Start AND if() #68 Body Start
GOTO 21153; return End AND if() #68 Body End
LOAD D2 0.0003; if() #69 Test AND if() #68 Else Start
COMPAREV D2 131
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21152 ==; Test 'if'
STOREV 0 0.0002; if() #69 Body Start
STOREV 0 0.0001
STOREV 0 0; for() #44 setup
LOAD D2 0; for() #44 LoopTest
COMPAREV D2 256
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 21136 ==; for() #44 TestFail?
LOAD D2 0; unless() #205 Test AND for() #44 Body Start
PUSHR D2
POP D0
SETR D2 LINKITEMD
COMPAREV D2 0
GOTOCMP 21132 ==; Test 'unless' AND continue 1; AND unless() #205 Body
LOAD D2 0; InlineFunc[itemdata Game::LoadItemData(int)] Params
LOADITEMDATAR D2; InlineFunc[itemdata Game::LoadItemData(int)] Body Start
SETR D2 REFITEMCLASS; InlineFunc[itemdata Game::LoadItemData(int)] Body End
STORE D2 0.0001
LOAD D2 0.0001; if() #206 Test
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATAFAMILY
COMPAREV D2 1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 21132 !=; Test 'if' AND continue 1; AND if() #206 Body
LOAD D2 0.0001; if() #207 Test
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATALEVEL
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 21132 ==; Test 'if'
LOAD D2 0.0001; if() #207 Body Start
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATALEVEL
STORE D2 0.0002
LOAD D2 0.0002; if() #208 Test
COMPAREV D2 3
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 21136 !=; Test 'if' AND break 1; AND if() #208 Body
LOAD D2 0; if() #207 Body End AND for() #44 Body End AND for() #44 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 21088; for() #44 End
LOAD D2 0.0002; if() #70 Test
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 21143 ==; Test 'if'
SETV D2 4; return Start AND if() #70 Body Start
GOTO 21153; return End AND if() #70 Body End
LOAD D2 0.0002; if() #71 Test AND if() #70 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21150 ==; Test 'if'
SETV D2 5; return Start AND if() #71 Body Start
GOTO 21153; return End AND if() #71 Body End
SETV D2 6; return Start AND if() #71 Else Start
GOTO 21153; return End AND if() #71 Else End AND if() #70 Else End AND if() #69 Body End
SETV D2 0; return Start AND if() #69 Else Start
POPARGS D5 0.0004; return End AND if() #69 Else End AND if() #68 Else End AND if() #67 Else End AND if() #66 Else End AND if() #65 Else End AND if() #64 Else End AND if() #63 Else End AND if() #62 Else End AND if() #61 Else End AND if() #60 Else End AND if() #59 Else End AND if() #58 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSprite(int)] Body End
SETR D4 SP2; Func[int GetDefaultEWeaponSound(int)] Body Start
LOAD D2 0; if() #54 Test
COMPAREV D2 129
GOTOCMP 21164 ==
LOAD D2 0
COMPAREV D2 145
GOTOCMP 21164 ==
SETV D2 0
GOTO 21165
SETV D2 1
COMPAREV D2 0
GOTOCMP 21169 ==; Test 'if'
SETV D2 40; return Start AND if() #54 Body Start
GOTO 21206; return End AND if() #54 Body End
LOAD D2 0; if() #55 Test AND if() #54 Else Start
COMPAREV D2 134
GOTOCMP 21177 ==
LOAD D2 0
COMPAREV D2 141
GOTOCMP 21177 ==
SETV D2 0
GOTO 21178
SETV D2 1
COMPAREV D2 0
GOTOCMP 21182 ==; Test 'if'
SETV D2 32; return Start AND if() #55 Body Start
GOTO 21206; return End AND if() #55 Body End
LOAD D2 0; if() #56 Test AND if() #55 Else Start
COMPAREV D2 140
GOTOCMP 21193 ==
LOAD D2 0
COMPAREV D2 142
GOTOCMP 21193 ==
LOAD D2 0
COMPAREV D2 139
GOTOCMP 21193 ==
SETV D2 0
GOTO 21194
SETV D2 1
COMPAREV D2 0
GOTOCMP 21198 ==; Test 'if'
SETV D2 13; return Start AND if() #56 Body Start
GOTO 21206; return End AND if() #56 Body End
LOAD D2 0; if() #57 Test AND if() #56 Else Start
COMPAREV D2 133
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21205 ==; Test 'if'
SETV D2 51; return Start AND if() #57 Body Start
GOTO 21206; return End AND if() #57 Body End
SETV D2 0; return Start AND if() #57 Else Start
POP D5; return End AND if() #57 Else End AND if() #56 Else End AND if() #55 Else End AND if() #54 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSound(int)] Body End
PUSHARGSV 0 0.0002; Func[void SetEWeaponDir(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
MODV D2 6.2832
STORE D2 0.0001
STOREV 0 0
LOAD D2 0.0001; if() #509 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 21225 ==; Test 'if'
LOAD D2 0.0001; if() #509 Body Start
ADDV D2 6.2832
STORE D2 0.0001; if() #509 Body End
LOAD D2 0.0001; if() #193 Test
COMPAREV D2 0.3927
GOTOCMP 21233 <
LOAD D2 0.0001
COMPAREV D2 5.8905
GOTOCMP 21233 >
SETV D2 0
GOTO 21234
SETV D2 1
COMPAREV D2 0
GOTOCMP 21239 ==; Test 'if'
SETV D2 3; if() #193 Body Start
STORE D2 0
GOTO 21289; if() #193 Body End
LOAD D2 0.0001; if() #194 Test AND if() #193 Else Start
COMPAREV D2 1.1781
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 21247 ==; Test 'if'
SETV D2 7; if() #194 Body Start
STORE D2 0
GOTO 21289; if() #194 Body End
LOAD D2 0.0001; if() #195 Test AND if() #194 Else Start
COMPAREV D2 1.9635
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 21255 ==; Test 'if'
SETV D2 1; if() #195 Body Start
STORE D2 0
GOTO 21289; if() #195 Body End
LOAD D2 0.0001; if() #196 Test AND if() #195 Else Start
COMPAREV D2 2.7489
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 21263 ==; Test 'if'
SETV D2 6; if() #196 Body Start
STORE D2 0
GOTO 21289; if() #196 Body End
LOAD D2 0.0001; if() #197 Test AND if() #196 Else Start
COMPAREV D2 3.5343
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 21271 ==; Test 'if'
SETV D2 2; if() #197 Body Start
STORE D2 0
GOTO 21289; if() #197 Body End
LOAD D2 0.0001; if() #198 Test AND if() #197 Else Start
COMPAREV D2 4.3197
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 21279 ==; Test 'if'
SETV D2 4; if() #198 Body Start
STORE D2 0
GOTO 21289; if() #198 Body End
LOAD D2 0.0001; if() #199 Test AND if() #198 Else Start
COMPAREV D2 5.1051
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 21287 ==; Test 'if'
SETV D2 0; if() #199 Body Start
STORE D2 0
GOTO 21289; if() #199 Body End
SETV D2 5; if() #199 Else Start
STORE D2 0; if() #199 Else End
LOAD D2 0.0002; if() #198 Else End AND if() #197 Else End AND if() #196 Else End AND if() #195 Else End AND if() #194 Else End AND if() #193 Else End AND if() #510 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 21307 ==; Test 'if'
PUSHR D4; if() #510 Body Start
LOAD D2 0; UsrFunc[int __UnblockableDir(int)] Params Start
PUSHR D2; UsrFunc[int __UnblockableDir(int)] Params End
CALLFUNC 2.1483; UsrFunc[int __UnblockableDir(int)] Call
POP D4
STORE D2 0; if() #510 Body End
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_DIR D2
POPARGS D5 0.0003
RETURNFUNC; Func[void SetEWeaponDir(eweapon)] Body End
PUSHV 0; Func[void SetEWeaponRotation(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #217 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 21401 ==; Test 'if'
LOAD D2 0.0001; if() #217 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
MODV D2 6.2832
STORE D2 0
LOAD D2 0; if() #515 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 21340 ==; Test 'if'
LOAD D2 0; if() #515 Body Start
ADDV D2 6.2832
STORE D2 0; if() #515 Body End
LOAD D2 0; if() #218 Test
COMPAREV D2 0.7854
GOTOCMP 21348 <
LOAD D2 0
COMPAREV D2 5.4978
GOTOCMP 21348 >
SETV D2 0
GOTO 21349
SETV D2 1
COMPAREV D2 0
GOTOCMP 21361 ==; Test 'if'
SETV D2 4; if() #218 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 21481; if() #218 Body End
LOAD D2 0; if() #219 Test AND if() #218 Else Start
COMPAREV D2 2.3562
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 21376 ==; Test 'if'
SETV D2 3; if() #219 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 21481; if() #219 Body End
LOAD D2 0; if() #220 Test AND if() #219 Else Start
COMPAREV D2 3.9270
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 21391 ==; Test 'if'
SETV D2 7; if() #220 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 21481; if() #220 Body End
SETV D2 0; if() #220 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2; if() #220 Else End
GOTO 21481; if() #219 Else End AND if() #218 Else End AND if() #217 Body End
PUSHR D4; if() #217 Else Start
LOAD D2 0.0001; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 2.1619; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #221 Test
COMPAREV D2 0
GOTOCMP 21420 ==
LOAD D2 0
COMPAREV D2 5
GOTOCMP 21420 ==
LOAD D2 0
COMPAREV D2 4
GOTOCMP 21420 ==
SETV D2 0
GOTO 21421
SETV D2 1
COMPAREV D2 0
GOTOCMP 21433 ==; Test 'if'
SETV D2 0; if() #221 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 21481; if() #221 Body End
LOAD D2 0; if() #222 Test AND if() #221 Else Start
COMPAREV D2 1
GOTOCMP 21444 ==
LOAD D2 0
COMPAREV D2 7
GOTOCMP 21444 ==
LOAD D2 0
COMPAREV D2 6
GOTOCMP 21444 ==
SETV D2 0
GOTO 21445
SETV D2 1
COMPAREV D2 0
GOTOCMP 21457 ==; Test 'if'
SETV D2 3; if() #222 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 21481; if() #222 Body End
LOAD D2 0; if() #223 Test AND if() #222 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21472 ==; Test 'if'
SETV D2 7; if() #223 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 21481; if() #223 Body End
SETV D2 4; if() #223 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2; if() #223 Else End
POPARGS D5 0.0002; if() #222 Else End AND if() #221 Else End AND if() #217 Else End
RETURNFUNC; Func[void SetEWeaponRotation(eweapon)] Body End
SETR D4 SP2; Func[int __UnblockableDir(int)] Body Start
LOAD D2 0; if() #704 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21491 ==; Test 'if'
SETV D2 8; return Start AND if() #704 Body Start
GOTO 21541; return End AND if() #704 Body End
LOAD D2 0; if() #705 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21498 ==; Test 'if'
SETV D2 12; return Start AND if() #705 Body Start
GOTO 21541; return End AND if() #705 Body End
LOAD D2 0; if() #706 Test
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21505 ==; Test 'if'
SETV D2 14; return Start AND if() #706 Body Start
GOTO 21541; return End AND if() #706 Body End
LOAD D2 0; if() #707 Test
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21512 ==; Test 'if'
SETV D2 10; return Start AND if() #707 Body Start
GOTO 21541; return End AND if() #707 Body End
LOAD D2 0; if() #708 Test
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21519 ==; Test 'if'
SETV D2 15; return Start AND if() #708 Body Start
GOTO 21541; return End AND if() #708 Body End
LOAD D2 0; if() #709 Test
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21526 ==; Test 'if'
SETV D2 9; return Start AND if() #709 Body Start
GOTO 21541; return End AND if() #709 Body End
LOAD D2 0; if() #710 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21533 ==; Test 'if'
SETV D2 13; return Start AND if() #710 Body Start
GOTO 21541; return End AND if() #710 Body End
LOAD D2 0; if() #711 Test
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21540 ==; Test 'if'
SETV D2 11; return Start AND if() #711 Body Start
GOTO 21541; return End AND if() #711 Body End
LOAD D2 0; return Start
POP D5; return End
RETURNFUNC; Func[int __UnblockableDir(int)] Body End
SETR D4 SP2; Func[bool Ghost_CanMove(int, int, int)] Body Start
PUSHR D4; return Start
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
SETR D2 GD3
COMPAREV D2 0
SETCMP D2 I>
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 2.1559; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
POPARGS D5 0.0003; return End
RETURNFUNC; Func[bool Ghost_CanMove(int, int, int)] Body End
SETR D4 SP2; Func[bool Ghost_CanMove(int, int, int, bool)] Body Start
LOAD D2 0.0002; if() #235 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21567 ==; Test 'if'
SETV D2 1; return Start AND if() #235 Body Start
GOTO 21617; return End AND if() #235 Body End
LOAD D2 0.0003; if() #236 Test
COMPAREV D2 4
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 21575 ==; Test 'if'
LOAD D2 0.0002; if() #236 Body Start
MULTV D2 0.7071
STORE D2 0.0002; if() #236 Body End
PUSHR D4
LOAD D2 0.0003; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 2.1619; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0.0003
LOAD D2 0.0002; while() #1 Test
COMPAREV D2 8
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 21606 ==; Test 'while'
PUSHR D4; unless() #237 Test AND while() #1 Body Start
LOAD D2 0.0003; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
SUBV D2 8
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params End
CALLFUNC 2.1692; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 21602 !=; Test 'unless'
SETV D2 0; return Start AND unless() #237 Body Start
GOTO 21617; return End AND unless() #237 Body End
LOAD D2 0.0002
SUBV D2 8
STORE D2 0.0002; while() #1 Body End
GOTO 21581; while() #1 End
PUSHR D4; return Start
LOAD D2 0.0003; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params End
CALLFUNC 2.1692; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Call
POP D4
POPARGS D5 0.0004; return End
RETURNFUNC; Func[bool Ghost_CanMove(int, int, int, bool)] Body End
SETR D4 SP2; Func[int __NormalizeDir(int)] Body Start
LOAD D2 0; if() #690 Test
COMPAREV D2 0
GOTOCMP 21628 <
LOAD D2 0
COMPAREV D2 7
GOTOCMP 21628 >
SETV D2 1
GOTO 21629
SETV D2 0
COMPAREV D2 0
GOTOCMP 21633 ==; Test 'if'
LOAD D2 0; return Start AND if() #690 Body Start
GOTO 21690; return End AND if() #690 Body End
LOAD D2 0; if() #691 Test
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21640 ==; Test 'if'
SETV D2 0; return Start AND if() #691 Body Start
GOTO 21690; return End AND if() #691 Body End
LOAD D2 0; if() #692 Test
COMPAREV D2 9
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21647 ==; Test 'if'
SETV D2 5; return Start AND if() #692 Body Start
GOTO 21690; return End AND if() #692 Body End
LOAD D2 0; if() #693 Test
COMPAREV D2 10
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21654 ==; Test 'if'
SETV D2 3; return Start AND if() #693 Body Start
GOTO 21690; return End AND if() #693 Body End
LOAD D2 0; if() #694 Test
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21661 ==; Test 'if'
SETV D2 7; return Start AND if() #694 Body Start
GOTO 21690; return End AND if() #694 Body End
LOAD D2 0; if() #695 Test
COMPAREV D2 12
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21668 ==; Test 'if'
SETV D2 1; return Start AND if() #695 Body Start
GOTO 21690; return End AND if() #695 Body End
LOAD D2 0; if() #696 Test
COMPAREV D2 13
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21675 ==; Test 'if'
SETV D2 6; return Start AND if() #696 Body Start
GOTO 21690; return End AND if() #696 Body End
LOAD D2 0; if() #697 Test
COMPAREV D2 14
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21682 ==; Test 'if'
SETV D2 2; return Start AND if() #697 Body Start
GOTO 21690; return End AND if() #697 Body End
LOAD D2 0; if() #698 Test
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21689 ==; Test 'if'
SETV D2 4; return Start AND if() #698 Body Start
GOTO 21690; return End AND if() #698 Body End
SETV D2 0; return Start
POP D5; return End
RETURNFUNC; Func[int __NormalizeDir(int)] Body End
PUSHARGSV 0 0.0006; Func[bool __Ghost_CanMoveSingle(int, int, int, bool)] Body Start
SETR D4 SP2
STOREV 0 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
LOAD D2 0.0009; if() #309 Test
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21821 ==; Test 'if'
SETR D2 GD13; if() #309 Body Start
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
PUSHR D2
SETR D2 GD23
RSHIFTV D2 8
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
SETR D2 GD23
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0003
SETR D2 GD1
PUSHR D2
SETR D2 GD22
RSHIFTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0004
SETR D2 GD2
PUSHR D2
SETR D2 GD23
RSHIFTV D2 8
POP D3
ADDR D2 D3
STORE D2 0.0002
LOAD D2 0.0003
DIVV D2 8
SUBV D2 1
STORE D2 0.0001
SETV D2 1; for() #164 setup
STORE D2 0.0005
LOAD D2 0.0005; for() #164 LoopTest
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 21779 ==; for() #164 TestFail?
PUSHR D4; unless() #599 Test AND for() #164 Body Start
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0005
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.2488; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 21775 !=; Test 'unless'
SETV D2 0; return Start AND unless() #599 Body Start
GOTO 22472; return End AND unless() #599 Body End
LOAD D2 0.0005; for() #164 Body End AND for() #164 LoopIncrement
ADDV D2 1
STORE D2 0.0005
GOTO 21749; for() #164 End
PUSHR D4; unless() #600 Test
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.2488; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 21796 !=; Test 'unless'
SETV D2 0; return Start AND unless() #600 Body Start
GOTO 22472; return End AND unless() #600 Body End
PUSHR D4; unless() #601 Test
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.2488; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 21819 !=; Test 'unless'
SETV D2 0; return Start AND unless() #601 Body Start
GOTO 22472; return End AND unless() #601 Body End
SETV D2 1; return Start
GOTO 22472; return End AND if() #309 Body End
LOAD D2 0.0009; if() #310 Test AND if() #309 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21954 ==; Test 'if'
SETR D2 GD13; if() #310 Body Start
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
PUSHR D2
SETR D2 GD23
RSHIFTV D2 8
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
SETR D2 GD23
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0003
SETR D2 GD1
PUSHR D2
SETR D2 GD12
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
SETR D2 GD22
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
STORE D2 0.0004
SETR D2 GD2
PUSHR D2
SETR D2 GD23
RSHIFTV D2 8
POP D3
ADDR D2 D3
STORE D2 0.0002
LOAD D2 0.0003
DIVV D2 8
SUBV D2 1
STORE D2 0.0001
SETV D2 1; for() #165 setup
STORE D2 0.0005
LOAD D2 0.0005; for() #165 LoopTest
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 21912 ==; for() #165 TestFail?
PUSHR D4; unless() #602 Test AND for() #165 Body Start
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0005
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.2488; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 21908 !=; Test 'unless'
SETV D2 0; return Start AND unless() #602 Body Start
GOTO 22472; return End AND unless() #602 Body End
LOAD D2 0.0005; for() #165 Body End AND for() #165 LoopIncrement
ADDV D2 1
STORE D2 0.0005
GOTO 21882; for() #165 End
PUSHR D4; unless() #603 Test
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.2488; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 21929 !=; Test 'unless'
SETV D2 0; return Start AND unless() #603 Body Start
GOTO 22472; return End AND unless() #603 Body End
PUSHR D4; unless() #604 Test
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.2488; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 21952 !=; Test 'unless'
SETV D2 0; return Start AND unless() #604 Body Start
GOTO 22472; return End AND unless() #604 Body End
SETV D2 1; return Start
GOTO 22472; return End AND if() #310 Body End
LOAD D2 0.0009; if() #311 Test AND if() #310 Else Start
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22094 ==; Test 'if'
PUSHR D4; if() #605 Test AND if() #311 Body Start
CALLFUNC 2.7519; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 21972 ==
PUSHR D4
PUSHV 32; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 21972 !=
SETV D2 1
GOTO 21973
SETV D2 0
COMPAREV D2 0
GOTOCMP 21977 ==; Test 'if'
SETV D2 0; return Start AND if() #605 Body Start
GOTO 22472; return End AND if() #605 Body End
SETR D2 GD12
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
PUSHR D2
SETR D2 GD22
RSHIFTV D2 8
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
SETR D2 GD22
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0003
SETR D2 GD2
PUSHR D2
SETR D2 GD23
RSHIFTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0004
SETR D2 GD1
PUSHR D2
SETR D2 GD22
RSHIFTV D2 8
POP D3
ADDR D2 D3
STORE D2 0.0002
LOAD D2 0.0003
DIVV D2 8
SUBV D2 1
STORE D2 0.0001
SETV D2 1; for() #166 setup
STORE D2 0.0005
LOAD D2 0.0005; for() #166 LoopTest
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 22052 ==; for() #166 TestFail?
PUSHR D4; unless() #606 Test AND for() #166 Body Start
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0005
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.2488; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22048 !=; Test 'unless'
SETV D2 0; return Start AND unless() #606 Body Start
GOTO 22472; return End AND unless() #606 Body End
LOAD D2 0.0005; for() #166 Body End AND for() #166 LoopIncrement
ADDV D2 1
STORE D2 0.0005
GOTO 22022; for() #166 End
PUSHR D4; unless() #607 Test
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.2488; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22069 !=; Test 'unless'
SETV D2 0; return Start AND unless() #607 Body Start
GOTO 22472; return End AND unless() #607 Body End
PUSHR D4; unless() #608 Test
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.2488; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22092 !=; Test 'unless'
SETV D2 0; return Start AND unless() #608 Body Start
GOTO 22472; return End AND unless() #608 Body End
SETV D2 1; return Start
GOTO 22472; return End AND if() #311 Body End
LOAD D2 0.0009; if() #312 Test AND if() #311 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22227 ==; Test 'if'
SETR D2 GD12; if() #312 Body Start
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
PUSHR D2
SETR D2 GD22
RSHIFTV D2 8
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
SETR D2 GD22
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0003
SETR D2 GD2
PUSHR D2
SETR D2 GD13
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
SETR D2 GD23
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
STORE D2 0.0004
SETR D2 GD1
PUSHR D2
SETR D2 GD22
RSHIFTV D2 8
POP D3
ADDR D2 D3
STORE D2 0.0002
LOAD D2 0.0003
DIVV D2 8
SUBV D2 1
STORE D2 0.0001
SETV D2 1; for() #167 setup
STORE D2 0.0005
LOAD D2 0.0005; for() #167 LoopTest
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 22185 ==; for() #167 TestFail?
PUSHR D4; unless() #609 Test AND for() #167 Body Start
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0005
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.2488; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22181 !=; Test 'unless'
SETV D2 0; return Start AND unless() #609 Body Start
GOTO 22472; return End AND unless() #609 Body End
LOAD D2 0.0005; for() #167 Body End AND for() #167 LoopIncrement
ADDV D2 1
STORE D2 0.0005
GOTO 22155; for() #167 End
PUSHR D4; unless() #610 Test
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.2488; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22202 !=; Test 'unless'
SETV D2 0; return Start AND unless() #610 Body Start
GOTO 22472; return End AND unless() #610 Body End
PUSHR D4; unless() #611 Test
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.2488; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22225 !=; Test 'unless'
SETV D2 0; return Start AND unless() #611 Body Start
GOTO 22472; return End AND unless() #611 Body End
SETV D2 1; return Start
GOTO 22472; return End AND if() #312 Body End
LOAD D2 0.0009; if() #313 Test AND if() #312 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22288 ==; Test 'if'
STOREV 0 0; if() #313 Body Start
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2
PUSHR D4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 2.1559; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD1 D2
LOAD D2 0; unless() #612 Test
COMPAREV D2 0
GOTOCMP 22262 !=; Test 'unless'
SETV D2 0; return Start AND unless() #612 Body Start
GOTO 22472; return End AND unless() #612 Body End
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2
PUSHR D4
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 2.1559; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD2 D2
LOAD D2 0; return Start
GOTO 22472; return End AND if() #313 Body End
LOAD D2 0.0009; if() #314 Test AND if() #313 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22349 ==; Test 'if'
STOREV 0 0; if() #314 Body Start
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD1 D2
PUSHR D4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 2.1559; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2
LOAD D2 0; unless() #613 Test
COMPAREV D2 0
GOTOCMP 22323 !=; Test 'unless'
SETV D2 0; return Start AND unless() #613 Body Start
GOTO 22472; return End AND unless() #613 Body End
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 2.1559; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD2 D2
LOAD D2 0; return Start
GOTO 22472; return End AND if() #314 Body End
LOAD D2 0.0009; if() #315 Test AND if() #314 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22410 ==; Test 'if'
STOREV 0 0; if() #315 Body Start
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2
PUSHR D4
PUSHV 1; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 2.1559; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD1 D2
LOAD D2 0; unless() #614 Test
COMPAREV D2 0
GOTOCMP 22384 !=; Test 'unless'
SETV D2 0; return Start AND unless() #614 Body Start
GOTO 22472; return End AND unless() #614 Body End
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD2 D2
PUSHR D4
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 2.1559; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2
LOAD D2 0; return Start
GOTO 22472; return End AND if() #315 Body End
LOAD D2 0.0009; if() #316 Test AND if() #315 Else Start
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22471 ==; Test 'if'
STOREV 0 0; if() #316 Body Start
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD1 D2
PUSHR D4
PUSHV 1; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 2.1559; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2
LOAD D2 0; unless() #615 Test
COMPAREV D2 0
GOTOCMP 22445 !=; Test 'unless'
SETV D2 0; return Start AND unless() #615 Body Start
GOTO 22472; return End AND unless() #615 Body End
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD2 D2
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 2.1559; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2
LOAD D2 0; return Start
GOTO 22472; return End AND if() #316 Body End
SETV D2 0; return Start AND if() #316 Else Start
POPARGS D5 0.0010; return End AND if() #316 Else End AND if() #315 Else End AND if() #314 Else End AND if() #313 Else End AND if() #312 Else End AND if() #311 Else End AND if() #310 Else End AND if() #309 Else End
RETURNFUNC; Func[bool __Ghost_CanMoveSingle(int, int, int, bool)] Body End
SETR D4 SP2; Func[bool Ghost_CanMovePixel(int, int)] Body Start
PUSHR D4; return Start
LOAD D2 0.0001; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2
SETR D2 GD3
COMPAREV D2 0
SETCMP D2 I>
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.2488; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
POPARGS D5 0.0002; return End
RETURNFUNC; Func[bool Ghost_CanMovePixel(int, int)] Body End
PUSHV 0; Func[bool Ghost_CanMovePixel(int, int, bool)] Body Start
SETR D4 SP2
LOAD D2 0.0003; if() #238 Test
COMPAREV D2 0
GOTOCMP 22504 <
LOAD D2 0.0003
COMPAREV D2 255
GOTOCMP 22504 >
LOAD D2 0.0002
COMPAREV D2 0
GOTOCMP 22504 <
LOAD D2 0.0002
COMPAREV D2 175
GOTOCMP 22504 >
SETV D2 0
GOTO 22505
SETV D2 1
COMPAREV D2 0
GOTOCMP 22512 ==; Test 'if'
PUSHR D4; return Start AND if() #238 Body Start
PUSHV 8192; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
GOTO 22705; return End AND if() #238 Body End
LOAD D2 0.0003; InlineFunc[int ComboAt(int, int)] Params Start
PUSHR D2
LOAD D2 0.0002
SETR D3 D2; InlineFunc[int ComboAt(int, int)] Params End
POP D2; InlineFunc[int ComboAt(int, int)] Body Start
COMBO_AT D2 D3; InlineFunc[int ComboAt(int, int)] Body End
STORE D2 0
PUSHR D4; unless() #239 Test
PUSHV 65537; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22616 !=; Test 'unless'
LOAD D2 0; if() #240 Test AND unless() #239 Body Start
PUSHR D2
POP D0
SETR D2 COMBOTD
COMPAREV D2 110
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22535 ==; Test 'if'
SETV D2 0; return Start AND if() #240 Body Start
GOTO 22705; return End AND if() #240 Body End
LOAD D2 0; if() #241 Test
PUSHR D2
POP D0
SETR D2 COMBOFD
COMPAREV D2 96
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22545 ==; Test 'if'
SETV D2 0; return Start AND if() #241 Body Start
GOTO 22705; return End AND if() #241 Body End
LOAD D2 0; if() #242 Test
PUSHR D2
POP D0
SETR D2 COMBOID
COMPAREV D2 96
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22555 ==; Test 'if'
SETV D2 0; return Start AND if() #242 Body Start
GOTO 22705; return End AND if() #242 Body End
PUSHR D4; if() #80 Test
PUSHV 65536; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22572 ==; Test 'if'
LOAD D2 0; if() #243 Test AND if() #80 Body Start
PUSHR D2
POP D0
SETR D2 COMBOTD
COMPAREV D2 44
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22616 ==; Test 'if'
SETV D2 0; return Start AND if() #243 Body Start
GOTO 22705; return End AND if() #243 Body End
GOTO 22616; if() #80 Body End
LOAD D2 0.0001; if() #81 Test AND if() #80 Else Start
COMPAREV D2 0
GOTOCMP 22586 ==; Test 'if'
LOAD D2 0; if() #244 Test AND if() #81 Body Start
PUSHR D2
POP D0
SETR D2 COMBOTD
COMPAREV D2 54
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22616 ==; Test 'if'
SETV D2 0; return Start AND if() #244 Body Start
GOTO 22705; return End AND if() #244 Body End
GOTO 22616; if() #81 Body End
LOAD D2 0; if() #245 Test AND if() #81 Else Start
PUSHR D2
POP D0
SETR D2 COMBOTD
COMPAREV D2 128
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22596 ==; Test 'if'
SETV D2 0; return Start AND if() #245 Body Start
GOTO 22705; return End AND if() #245 Body End
LOAD D2 0; if() #246 Test
PUSHR D2
POP D0
SETR D2 COMBOFD
COMPAREV D2 97
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22606 ==; Test 'if'
SETV D2 0; return Start AND if() #246 Body Start
GOTO 22705; return End AND if() #246 Body End
LOAD D2 0; if() #247 Test
PUSHR D2
POP D0
SETR D2 COMBOID
COMPAREV D2 97
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22616 ==; Test 'if'
SETV D2 0; return Start AND if() #247 Body Start
GOTO 22705; return End AND if() #247 Body End
PUSHR D4; if() #81 Else End AND if() #80 Else End AND unless() #239 Body End AND if() #248 Test
PUSHV 65539; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22628 ==; Test 'if'
PUSHR D4; return Start AND if() #248 Body Start
LOAD D2 0; UsrFunc[bool IsWater(int)] Params Start
PUSHR D2; UsrFunc[bool IsWater(int)] Params End
CALLFUNC 2.0793; UsrFunc[bool IsWater(int)] Call
POP D4
GOTO 22705; return End AND if() #248 Body End
PUSHR D4; if() #249 Test
PUSHV 65538; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22651 ==; Test 'if'
PUSHR D4; return Start AND if() #249 Body Start
LOAD D2 0; UsrFunc[bool IsWater(int)] Params Start
PUSHR D2; UsrFunc[bool IsWater(int)] Params End
CALLFUNC 2.0793; UsrFunc[bool IsWater(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22649 !=
LOAD D2 0
PUSHR D2
POP D0
SETR D2 COMBOTD
COMPAREV D2 58
GOTOCMP 22649 ==
SETV D2 0
GOTO 22705
SETV D2 1
GOTO 22705; return End AND if() #249 Body End
PUSHR D4; if() #250 Test
LOAD D2 0; UsrFunc[bool IsWater(int)] Params Start
PUSHR D2; UsrFunc[bool IsWater(int)] Params End
CALLFUNC 2.0793; UsrFunc[bool IsWater(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22663 ==; Test 'if'
PUSHR D4; return Start AND if() #250 Body Start
PUSHV 2048; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
GOTO 22705; return End AND if() #250 Body End
PUSHR D4; if() #251 Test
LOAD D2 0; UsrFunc[bool __IsPit(int)] Params Start
PUSHR D2; UsrFunc[bool __IsPit(int)] Params End
CALLFUNC 2.0837; UsrFunc[bool __IsPit(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22675 ==; Test 'if'
PUSHR D4; return Start AND if() #251 Body Start
PUSHV 4096; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
GOTO 22705; return End AND if() #251 Body End
PUSHR D4; if() #82 Test
PUSHV 1024; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22683 ==; Test 'if'
SETV D2 1; return Start AND if() #82 Body Start
GOTO 22705; return End AND if() #82 Body End
PUSHR D4; if() #83 Test AND if() #82 Else Start
PUSHV 32768; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22697 ==; Test 'if'
PUSHR D4; return Start AND if() #83 Body Start
LOAD D2 0.0003; UsrFunc[bool __FullTileWalkable(int, int)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[bool __FullTileWalkable(int, int)] Params End
CALLFUNC 2.2738; UsrFunc[bool __FullTileWalkable(int, int)] Call
POP D4
GOTO 22705; return End AND if() #83 Body End
LOAD D2 0.0003; InlineFunc[bool screendata::isSolid(int, int)] Params Start AND return Start AND if() #83 Else Start
PUSHR D2
LOAD D2 0.0002
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
SETCMP D2 I==
POPARGS D5 0.0004; return End AND if() #83 Else End AND if() #82 Else End
RETURNFUNC; Func[bool Ghost_CanMovePixel(int, int, bool)] Body End
SETR D4 SP2; Func[bool Ghost_FlagIsSet(int)] Body Start
LOAD D2 0; if() #116 Test
ANDV D2 65536
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 22726 ==; Test 'if'
SETR D2 GD16; return Start AND if() #116 Body Start
PUSHR D2
LOAD D2 0
ANDV D2 65535
SETV D3 1
LSHIFTR D3 D2
SETR D2 D3
POP D3
ANDR D2 D3
COMPAREV D2 0
SETCMP D2 I!=
GOTO 22736; return End AND if() #116 Body End
SETR D2 GD15; return Start AND if() #116 Else Start
PUSHR D2
LOAD D2 0
POP D3
ANDR D2 D3
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I==
POP D5; return End AND if() #116 Else End
RETURNFUNC; Func[bool Ghost_FlagIsSet(int)] Body End
SETR D4 SP2; Func[bool __FullTileWalkable(int, int)] Body Start
LOAD D2 0.0001; if() #589 Test
COMPAREV D2 0
GOTOCMP 22753 <
LOAD D2 0
COMPAREV D2 0
GOTOCMP 22753 <
LOAD D2 0.0001
COMPAREV D2 256
GOTOCMP 22753 >=
LOAD D2 0
COMPAREV D2 176
GOTOCMP 22753 >=
SETV D2 0
GOTO 22754
SETV D2 1
COMPAREV D2 0
GOTOCMP 22761 ==; Test 'if'
PUSHR D4; return Start AND if() #589 Body Start
PUSHV 8192; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
GOTO 22821; return End AND if() #589 Body End
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0001
MODV D2 16
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0001
LOAD D2 0
PUSHR D2
LOAD D2 0
MODV D2 16
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0
LOAD D2 0.0001; InlineFunc[bool screendata::isSolid(int, int)] Params Start AND if() #590 Test
PUSHR D2
LOAD D2 0
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 22815 !=
LOAD D2 0.0001; InlineFunc[bool screendata::isSolid(int, int)] Params Start
ADDV D2 8
PUSHR D2
LOAD D2 0
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 22815 !=
LOAD D2 0.0001; InlineFunc[bool screendata::isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0
ADDV D2 8
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 22815 !=
LOAD D2 0.0001; InlineFunc[bool screendata::isSolid(int, int)] Params Start
ADDV D2 8
PUSHR D2
LOAD D2 0
ADDV D2 8
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 22815 !=
SETV D2 0
GOTO 22816
SETV D2 1
COMPAREV D2 0
GOTOCMP 22820 ==; Test 'if'
SETV D2 0; return Start AND if() #590 Body Start
GOTO 22821; return End AND if() #590 Body End
SETV D2 1; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[bool __FullTileWalkable(int, int)] Body End
PUSHARGSV 0 0.0004; Func[bool Ghost_CheckFreeze(ffc, npc)] Body Start
SETR D4 SP2
PUSHR D4; if() #252 Test
PUSHV 16; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22836 ==
PUSHR D4
CALLFUNC 2.0712; UsrFunc[bool ClockIsActive()] Call
POP D4
COMPAREV D2 0
GOTOCMP 22850 !=
PUSHR D4
PUSHV 8; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22848 ==
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCSTUN
COMPAREV D2 0
GOTOCMP 22850 >
SETV D2 0
GOTO 22851
SETV D2 1
COMPAREV D2 0
GOTOCMP 23079 ==; Test 'if'
LOAD D2 0.0005; if() #252 Body Start
PUSHR D2
POP REFFFC
SETR D2 XD
STORE D2 0.0003
LOAD D2 0.0005
PUSHR D2
POP REFFFC
SETR D2 YD
STORE D2 0.0002
LOAD D2 0.0005
PUSHR D2
POP REFFFC
SETR D2 XD2
STORE D2 0.0001
LOAD D2 0.0005
PUSHR D2
POP REFFFC
SETR D2 YD2
STORE D2 0
SETV D2 0
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD2 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD2 D2
SETR D2 GD17
ORV D2 2
SETR GD17 D2
PUSHR D4; while() #2 Test
PUSHV 16; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22923 ==
PUSHR D4
CALLFUNC 2.0712; UsrFunc[bool ClockIsActive()] Call
POP D4
COMPAREV D2 0
GOTOCMP 22937 !=
PUSHR D4
PUSHV 8; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22935 ==
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCSTUN
COMPAREV D2 0
GOTOCMP 22937 >
SETV D2 0
GOTO 22938
SETV D2 1
COMPAREV D2 0
GOTOCMP 23043 ==; Test 'while'
PUSHR D4; while() #2 Body Start
LOAD D2 0.0005; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Params End
CALLFUNC 2.3082; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Call
PEEK D4
LOAD D2 0.0004; UsrFunc[void __Ghost_DrawShadow(npc)] Params Start
PUSHR D2; UsrFunc[void __Ghost_DrawShadow(npc)] Params End
CALLFUNC 2.3167; UsrFunc[void __Ghost_DrawShadow(npc)] Call
PEEK D4
LOAD D2 0.0005; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params End
CALLFUNC 2.3332; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Call
POP D4
LOAD D2 0.0004; InlineFunc[bool npc::isValid()] Params AND unless() #84 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 22964 !=; Test 'unless'
SETV D2 0; return Start AND unless() #84 Body Start
GOTO 23080; return End
GOTO 22974; unless() #84 Body End
LOAD D2 0.0004; if() #253 Test AND unless() #84 Else Start
PUSHR D2
POP REFNPC
SETR D2 NPCHP
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 22974 ==; Test 'if'
SETV D2 0; return Start AND if() #253 Body Start
GOTO 23080; return End AND if() #253 Body End
PUSHR D4; unless() #84 Else End
LOAD D2 0.0005; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 2.3732; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
PEEK D4
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 23003 ==; Test 'if'
SETR D2 GD10; if() #85 Body Start
PUSHR D2
PUSHR D4
PUSHR GD4; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 2.1619; UsrFunc[int __NormalizeDir(int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
GOTO 23035; if() #85 Body End
PUSHR D4; if() #86 Test AND if() #85 Else Start
PUSHV 256; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 23026 ==; Test 'if'
SETR D2 GD10; if() #86 Body Start
PUSHR D2
PUSHR D4
PUSHR GD4; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 2.1619; UsrFunc[int __NormalizeDir(int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
GOTO 23035; if() #86 Body End
SETR D2 GD10; if() #86 Else Start
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #86 Else End
PUSHR D4; if() #85 Else End
LOAD D2 0.0005; UsrFunc[void Ghost_CheckHit(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_CheckHit(ffc, npc)] Params End
CALLFUNC 2.3866; UsrFunc[void Ghost_CheckHit(ffc, npc)] Call
POP D4; while() #2 Body End
GOTO 22912; while() #2 End
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD2 D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD2 D2; if() #252 Body End
SETV D2 1; return Start
POPARGS D5 0.0006; return End
RETURNFUNC; Func[bool Ghost_CheckFreeze(ffc, npc)] Body End
PUSHV 0; Func[void __Ghost_UpdateFlashing(ffc, npc)] Body Start
SETR D4 SP2
STOREV 0 0
SETR D2 GD20; if() #656 Test
COMPAREV D2 1
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 23100 ==; Test 'if'
SETR D2 GD20; if() #656 Body Start
SUBV D2 1
SETR GD20 D2
SETR D2 GD20; if() #657 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 23100 ==; Test 'if'
SETV D2 1; if() #657 Body Start
STORE D2 0; if() #657 Body End
SETR D2 GD17; if() #656 Body End AND if() #658 Test
ANDV D2 8
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 23165 ==; Test 'if'
SETR D2 GD20; if() #345 Test AND if() #658 Body Start
COMPAREV D2 0
GOTOCMP 23111 <=
SETV D2 1
GOTO 23112
SETV D2 0
COMPAREV D2 0
GOTOCMP 23129 ==; Test 'if'
SETR D2 GD26; if() #345 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
RSHIFTV D2 1
SUBV2 9 D2
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2
GOTO 23165; if() #345 Body End
LOAD D2 0.0001; if() #346 Test AND if() #345 Else Start
PUSHR D2
POP REFNPC
SETR D2 NPCMFLAGS
ANDV D2 64
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 23153 ==; Test 'if'
SETR D2 GD26; if() #346 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
ANDV D2 3
ADDV D2 6
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2
GOTO 23165; if() #346 Body End
LOAD D2 0; if() #659 Test AND if() #346 Else Start
COMPAREV D2 0
GOTOCMP 23165 ==; Test 'if'
SETR D2 GD11; if() #659 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2; if() #659 Body End
POPARGS D5 0.0003; if() #346 Else End AND if() #345 Else End AND if() #658 Body End
RETURNFUNC; Func[void __Ghost_UpdateFlashing(ffc, npc)] Body End
PUSHARGSV 0 0.0004; Func[void __Ghost_DrawShadow(npc)] Body Start
SETR D4 SP2
SETR D2 GD3; if() #616 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 23330 !=; Test 'if' AND return (Void) AND if() #616 Body
PUSHR D4; unless() #617 Test
PUSHV 16384; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 23194 !=
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_EXTEND
COMPAREV D2 4
GOTOCMP 23194 ==
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCTYPE
COMPAREV D2 40
GOTOCMP 23194 ==
SETV D2 0
GOTO 23195
SETV D2 1
COMPAREV D2 0
GOTOCMP 23330 ==; Test 'unless' AND return (Void) AND unless() #617 Body
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
STOREV 0 0
SETR D2 GD12; if() #317 Test
COMPAREV D2 3
GOTOCMP 23209 <
SETR D2 GD13
COMPAREV D2 3
GOTOCMP 23209 <
SETV D2 0
GOTO 23210
SETV D2 1
COMPAREV D2 0
GOTOCMP 23258 ==; Test 'if'
SETR D2 GD1; if() #317 Body Start
PUSHR D2
SETR D2 GD12
SUBV D2 1
MULTV D2 8
SETV D2 8
PUSHR D2
SETR D2 GD12
SUBV D2 1
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0003
SETR D2 GD2
PUSHR D2
SETR D2 GD13
SUBV D2 1
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
SUBV D2 1
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0002
SETV D2 1
STORE D2 0
PUSHR D4; if() #318 Test
PUSHV 65540; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 23251 ==; Test 'if'
SETV D2 27400; if() #318 Body Start
STORE D2 0.0001
GOTO 23312; if() #318 Body End
SETR D2 GD26; if() #318 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 2
ADDV D2 27400
STORE D2 0.0001; if() #318 Else End
GOTO 23312; if() #317 Body End
SETR D2 GD1; if() #317 Else Start
PUSHR D2
SETR D2 GD12
SUBV D2 2
MULTV D2 8
SETV D2 8
PUSHR D2
SETR D2 GD12
SUBV D2 2
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0003
SETR D2 GD2
PUSHR D2
SETR D2 GD13
SUBV D2 2
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
SUBV D2 2
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0002
SETV D2 2
STORE D2 0
PUSHR D4; if() #319 Test
PUSHV 65540; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 23297 ==; Test 'if'
SETV D2 27392; if() #319 Body Start
STORE D2 0.0001
GOTO 23312; if() #319 Body End
SETR D2 GD26; if() #319 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 4
MULTV D2 2
SETV D2 2
PUSHR D2
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 4
POP D3
MULTR D2 D3
ADDV D2 27392
STORE D2 0.0001; if() #319 Else End
PUSHV 1; if() #317 Else End AND InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if(true) #320 [Opt:AlwaysOn]
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 7
PUSHARGSV -1 0.0002
PUSHARGSV 0 0.0004
PUSHV 1
PUSHV 64; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILER; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0015; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS D5 0.0005
RETURNFUNC; Func[void __Ghost_DrawShadow(npc)] Body End
PUSHARGSV 0 0.0004; Func[void Ghost_WaitframeLight(ffc, npc)] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 24 0
PUSHR D2
SETR D0 D2
PUSHR D0
SETR D2 GD1
POP D0
WRITEPODARRAYVR 0 D2
PUSHR D0
SETR D2 GD2
POP D0
WRITEPODARRAYVR 1 D2
PUSHR D0
SETR D2 GD3
POP D0
WRITEPODARRAYVR 2 D2
PUSHR D0
SETR D2 GD5
POP D0
WRITEPODARRAYVR 3 D2
PUSHR D0
SETR D2 GD6
POP D0
WRITEPODARRAYVR 4 D2
PUSHR D0
SETR D2 GD7
POP D0
WRITEPODARRAYVR 5 D2
PUSHR D0
SETR D2 GD8
POP D0
WRITEPODARRAYVR 6 D2
PUSHR D0
SETR D2 GD9
POP D0
WRITEPODARRAYVR 7 D2
PUSHR D0
SETR D2 GD18
POP D0
WRITEPODARRAYVR 8 D2
PUSHR D0
SETR D2 GD19
POP D0
WRITEPODARRAYVR 9 D2
PUSHR D0
SETR D2 GD11
POP D0
WRITEPODARRAYVR 10 D2
PUSHR D0
SETR D2 GD4
POP D0
WRITEPODARRAYVR 11 D2
PUSHR D0
SETR D2 GD10
POP D0
WRITEPODARRAYVR 12 D2
PUSHR D0
SETR D2 GD12
POP D0
WRITEPODARRAYVR 13 D2
PUSHR D0
SETR D2 GD13
POP D0
WRITEPODARRAYVR 14 D2
PUSHR D0
SETR D2 GD15
POP D0
WRITEPODARRAYVR 15 D2
PUSHR D0
SETR D2 GD16
POP D0
WRITEPODARRAYVR 16 D2
PUSHR D0
SETR D2 GD17
POP D0
WRITEPODARRAYVR 17 D2
PUSHR D0
SETR D2 GD20
POP D0
WRITEPODARRAYVR 18 D2
PUSHR D0
SETR D2 GD21
POP D0
WRITEPODARRAYVR 19 D2
PUSHR D0
SETR D2 GD14
POP D0
WRITEPODARRAYVR 20 D2
PUSHR D0
SETR D2 GD22
POP D0
WRITEPODARRAYVR 21 D2
PUSHR D0
SETR D2 GD23
POP D0
WRITEPODARRAYVR 22 D2
POP D2
STORE D2 0.0002
ALLOCATEMEMV D2 21 0
STORE D2 0.0001
SETR D2 GD25; if() #349 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 23464 ==; Test 'if'
STOREV 0 0; for() #63 setup AND if() #349 Body Start
LOAD D2 0; for() #63 LoopTest
COMPAREV D2 21
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 23464 ==; for() #63 TestFail?
SETR D2 GD25; for() #63 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #63 Body End
LOAD D2 0; for() #63 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 23442; for() #63 End
LOAD D2 0.0004; if() #349 Body End AND InlineFunc[bool npc::isValid()] Params AND if() #350 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 23481 ==; Test 'if'
LOAD D2 0.0002; if() #350 Body Start
ORV D2 65536
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #350 Body End
LOAD D2 0.0004; InlineFunc[bool npc::isValid()] Params AND if() #165 Test AND do-while() #2 Body Start
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 23543 ==; Test 'if'
SETR D2 GD25; if() #167 Test AND if(true) #166 [Opt:AlwaysOn] AND if() #165 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 23518 ==; Test 'if'
ALLOCATEMEMV D2 34 0; if() #167 Body Start
STORE D2 0
PUSHR D4
LOAD D2 0.0005; UsrFunc[void __SetUpDrawingArray(ffc, npc, int[])] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[void __SetUpDrawingArray(ffc, npc, int[])] Params End
CALLFUNC 2.8892; UsrFunc[void __SetUpDrawingArray(ffc, npc, int[])] Call
POP D4
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 23 D2
PUSHR D4
LOAD D2 0.0005; UsrFunc[void __HideFFCAndWait(ffc)] Params Start
PUSHR D2; UsrFunc[void __HideFFCAndWait(ffc)] Params End
CALLFUNC 2.9167; UsrFunc[void __HideFFCAndWait(ffc)] Call
POP D4
LOAD D3 0
DEALLOCATEMEMR D3
GOTO 23548; if() #167 Body End
ALLOCATEMEMV D2 10 0; if() #167 Else Start
STORE D2 0
PUSHR D4
LOAD D2 0.0005; UsrFunc[void __SetUpDrawingArray(ffc, npc, int[])] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[void __SetUpDrawingArray(ffc, npc, int[])] Params End
CALLFUNC 2.8892; UsrFunc[void __SetUpDrawingArray(ffc, npc, int[])] Call
POP D4
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 23 D2
PUSHR D4
LOAD D2 0.0005; UsrFunc[void __HideFFCAndWait(ffc)] Params Start
PUSHR D2; UsrFunc[void __HideFFCAndWait(ffc)] Params End
CALLFUNC 2.9167; UsrFunc[void __HideFFCAndWait(ffc)] Call
POP D4
LOAD D3 0
DEALLOCATEMEMR D3; if() #167 Else End
GOTO 23548; if() #165 Body End
PUSHR D4; if() #165 Else Start
LOAD D2 0.0005; UsrFunc[void __HideFFCAndWait(ffc)] Params Start
PUSHR D2; UsrFunc[void __HideFFCAndWait(ffc)] Params End
CALLFUNC 2.9167; UsrFunc[void __HideFFCAndWait(ffc)] Call
POP D4; if() #165 Else End
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 0
SETR GD1 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 1
SETR GD2 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 2
SETR GD3 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 3
SETR GD5 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 4
SETR GD6 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 5
SETR GD7 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 6
SETR GD8 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 7
SETR GD9 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 8
SETR GD18 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 9
SETR GD19 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 10
SETR GD11 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 11
SETR GD4 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 12
SETR GD10 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 13
SETR GD12 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 14
SETR GD13 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 15
SETR GD15 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 16
SETR GD16 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 17
SETR GD17 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 18
SETR GD20 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 19
SETR GD21 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 20
SETR GD14 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 21
SETR GD22 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 22
SETR GD23 D2
LOAD D2 0.0001; if() #168 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 23695 ==; Test 'if'
STOREV 0 0; for() #64 setup AND if() #168 Body Start
LOAD D2 0; for() #64 LoopTest
COMPAREV D2 21
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 23701 ==; for() #64 TestFail?
LOAD D2 0.0001; for() #64 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
PUSHR D2
SETR D2 GD25
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #64 Body End
LOAD D2 0; for() #64 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 23672; for() #64 End
GOTO 23701; if() #168 Body End
SETV D2 0; if() #168 Else Start
PUSHR D2
SETR D2 GD25
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; if() #168 Else End
SETR D2 GD26; do-while() #2 Body End AND do-while() #2 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 23481 !=; Test 'while'
LOAD D2 0.0004; InlineFunc[bool npc::isValid()] Params AND if() #351 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 23726 ==; Test 'if'
SETV D2 65536; if() #351 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #351 Body End
LOAD D3 0.0001
DEALLOCATEMEMR D3
LOAD D3 0.0002
DEALLOCATEMEMR D3
POPARGS D5 0.0006
RETURNFUNC; Func[void Ghost_WaitframeLight(ffc, npc)] Body End
SETR D4 SP2; Func[void Ghost_SetPosition(ffc, npc)] Body Start
LOAD D2 0; InlineFunc[bool npc::isValid()] Params AND unless() #318 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 23864 ==; Test 'unless' AND return (Void) AND unless() #318 Body
PUSHR D4; if() #159 Test
PUSHV 16384; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 23745 !=
SETV D2 1
GOTO 23746
SETV D2 0
COMPAREV D2 0
GOTOCMP 23776 ==; Test 'if'
SETR D2 GD1; if() #159 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
SETR D2 GD2
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETR D2 GD3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
GOTO 23808; if() #159 Body End
SETR D2 GD1; if() #159 Else Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
SETR D2 GD2
PUSHR D2
SETR D2 GD3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2; if() #159 Else End
PUSHR D4
SETR D2 GD1; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X_OFFSET
POP D3
ADDR D2 D3
PUSHR D2
PUSHV -64
PUSHV 256; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0687; UsrFunc[int Clamp(int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
PUSHR D4
SETR D2 GD2; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
SETR D2 GD3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y_OFFSET
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z_OFFSET
POP D3
SUBR D3 D2
PUSHR D3
PUSHV -64
PUSHV 176; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0687; UsrFunc[int Clamp(int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
POPARGS D5 0.0002
RETURNFUNC; Func[void Ghost_SetPosition(ffc, npc)] Body End
PUSHARGSV 0 0.0005; Func[void Ghost_CheckHit(ffc, npc)] Body Start
SETR D4 SP2
LOAD D2 0.0005; if() #254 Test
PUSHR D2
POP REFNPC
SETR D2 NPCHP
PUSHR D2
SETR D2 GD14
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 24047 ==; Test 'if'
SETR D2 GD17; if() #254 Body Start
ORV D2 1
SETR GD17 D2
LOAD D2 0.0005
PUSHR D2
POP REFNPC
SETR D2 NPCHP
SETR GD14 D2
SETR D2 GD20; if() #255 Test
COMPAREV D2 32
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 23894 ==; Test 'if'
SETV D2 32; if() #255 Body Start
SETR GD20 D2; if() #255 Body End
PUSHR D4; if() #256 Test
PUSHV 1; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24047 ==; Test 'if'
SETV D2 0.0001; if() #256 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
SETR D2 GD1
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0004
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
SETR D2 GD2
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0003
LOAD D2 0.0004; InlineFunc[int Abs(int)] Params AND if() #87 Test
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
SETR D2 GD12
ADDV D2 1
MULTV D2 16
POP D3
COMPARER D3 D2
GOTOCMP 23940 >=
LOAD D2 0.0003; InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
SETR D2 GD13
ADDV D2 1
MULTV D2 16
POP D3
COMPARER D3 D2
GOTOCMP 23940 >=
SETV D2 1
GOTO 23941
SETV D2 0
COMPAREV D2 0
GOTOCMP 23976 ==; Test 'if'
SETV D2 0.0001; if() #257 Test AND if() #87 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_DIR
ANDV D2 2
PUSHR D2
SETR D2 GD4
ANDV D2 2
POP D3
COMPARER D3 D2
GOTOCMP 23965 ==
SETR D2 GD4
COMPAREV D2 3
GOTOCMP 23965 >
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 23965 !=
SETV D2 0
GOTO 23966
SETV D2 1
COMPAREV D2 0
GOTOCMP 24047 ==; Test 'if'
SETV D2 0.0001; if() #257 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_DIR
LSHIFTV D2 12
ORV D2 16
SETR GD21 D2; if() #257 Body End
GOTO 24047; if() #87 Body End
LOAD D2 0.0004; InlineFunc[int Abs(int)] Params AND if() #88 Test AND if() #87 Else Start
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0.0003; InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 24017 ==; Test 'if'
SETR D2 GD4; if() #258 Test AND if() #88 Body Start
COMPAREV D2 0
GOTOCMP 24003 ==
SETR D2 GD4
COMPAREV D2 1
GOTOCMP 24003 ==
SETR D2 GD4
COMPAREV D2 3
GOTOCMP 24003 >
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24003 !=
SETV D2 0
GOTO 24004
SETV D2 1
COMPAREV D2 0
GOTOCMP 24047 ==; Test 'if'
LOAD D2 0.0003; if() #89 Test AND if() #258 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 24014 ==; Test 'if'
SETV D2 16; if() #89 Body Start
SETR GD21 D2
GOTO 24047; if() #89 Body End
SETV D2 4112; if() #89 Else Start
SETR GD21 D2; if() #89 Else End
GOTO 24047; if() #258 Body End AND if() #88 Body End
SETR D2 GD4; if() #259 Test AND if() #88 Else Start
COMPAREV D2 2
GOTOCMP 24034 ==
SETR D2 GD4
COMPAREV D2 3
GOTOCMP 24034 ==
SETR D2 GD4
COMPAREV D2 3
GOTOCMP 24034 >
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24034 !=
SETV D2 0
GOTO 24035
SETV D2 1
COMPAREV D2 0
GOTOCMP 24047 ==; Test 'if'
LOAD D2 0.0004; if() #90 Test AND if() #259 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 24045 ==; Test 'if'
SETV D2 8208; if() #90 Body Start
SETR GD21 D2
GOTO 24047; if() #90 Body End
SETV D2 12304; if() #90 Else Start
SETR GD21 D2; if() #90 Else End
SETR D2 GD21; if() #259 Body End AND if() #88 Else End AND if() #87 Else End AND if() #256 Body End AND if() #254 Body End AND if() #260 Test
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 24274 ==; Test 'if'
SETR D2 GD21; if() #260 Body Start
RSHIFTV D2 12
STORE D2 0.0004
SETR D2 GD21
ANDV D2 4095
STORE D2 0.0003
STOREV 4 0.0002
PUSHR D4; if() #261 Test
PUSHV 5; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24068 ==; Test 'if'
LOAD D2 0.0002; if() #261 Body Start
DIVV D2 2
STORE D2 0.0002; if() #261 Body End
PUSHR D4; if() #91 Test
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1543; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24176 ==; Test 'if'
STOREV 0 0.0001; if() #91 Body Start
STOREV 0 0
LOAD D2 0.0003
SUBV D2 1
STORE D2 0.0003
LOAD D2 0.0003; if() #92 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 24096 ==; Test 'if'
LOAD D2 0.0004; if() #92 Body Start
LSHIFTV D2 12
PUSHR D2
LOAD D2 0.0003
POP D3
ORR D2 D3
SETR GD21 D2
GOTO 24098; if() #92 Body End
SETV D2 0; if() #92 Else Start
SETR GD21 D2; if() #92 Else End
LOAD D2 0.0004; if() #93 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24107 ==; Test 'if'
LOAD D2 0.0002; if() #93 Body Start
SUBV2 0 D2
STORE D2 0
GOTO 24126; if() #93 Body End
LOAD D2 0.0004; if() #94 Test AND if() #93 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24115 ==; Test 'if'
LOAD D2 0.0002; if() #94 Body Start
STORE D2 0
GOTO 24126; if() #94 Body End
LOAD D2 0.0004; if() #95 Test AND if() #94 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24124 ==; Test 'if'
LOAD D2 0.0002; if() #95 Body Start
SUBV2 0 D2
STORE D2 0.0001
GOTO 24126; if() #95 Body End
LOAD D2 0.0002; if() #95 Else Start
STORE D2 0.0001; if() #95 Else End
LOAD D2 0.0001; if() #94 Else End AND if() #93 Else End AND if() #96 Test
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 24151 ==; Test 'if'
SETR D2 GD1; if() #96 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
SETR GD1 D2
SETR D2 GD18
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
SETR GD18 D2
PUSHR D4
LOAD D2 0.0006; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 2.3732; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
POP D4
GOTO 24274; if() #96 Body End
LOAD D2 0; if() #262 Test AND if() #96 Else Start
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 24274 ==; Test 'if'
SETR D2 GD2; if() #262 Body Start
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR GD2 D2
SETR D2 GD19
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR GD19 D2
PUSHR D4
LOAD D2 0.0006; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 2.3732; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
POP D4; if() #262 Body End
GOTO 24274; if() #96 Else End AND if() #91 Body End
STOREV -1 0.0001; if() #91 Else Start
STOREV -1 0
SETV D2 0
SETR GD21 D2
SETR D2 GD17
ORV D2 16
SETR GD17 D2
LOAD D2 0.0004; if() #97 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24194 ==; Test 'if'
SETR D2 GD2; InlineFunc[int Floor(int)] Params Start AND if() #97 Body Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MULTV D2 8
STORE D2 0
GOTO 24223; if() #97 Body End
LOAD D2 0.0004; if() #98 Test AND if() #97 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24206 ==; Test 'if'
SETR D2 GD2; InlineFunc[int Ceiling(int)] Params Start AND if() #98 Body Start
LSHIFTV D2 0
DIVV D2 8; InlineFunc[int Ceiling(int)] Params End
CEILING D2; InlineFunc[int Ceiling(int)] Body
MULTV D2 8
STORE D2 0
GOTO 24223; if() #98 Body End
LOAD D2 0.0004; if() #99 Test AND if() #98 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24217 ==; Test 'if'
SETR D2 GD1; InlineFunc[int Floor(int)] Params Start AND if() #99 Body Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MULTV D2 8
STORE D2 0.0001
GOTO 24223; if() #99 Body End
SETR D2 GD1; InlineFunc[int Ceiling(int)] Params Start AND if() #99 Else Start
LSHIFTV D2 0
DIVV D2 8; InlineFunc[int Ceiling(int)] Params End
CEILING D2; InlineFunc[int Ceiling(int)] Body
MULTV D2 8
STORE D2 0.0001; if() #99 Else End
LOAD D2 0.0001; if() #98 Else End AND if() #97 Else End AND if() #100 Test
COMPAREV D2 -1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 24249 ==; Test 'if'
SETR D2 GD18; if() #100 Body Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETR D2 GD1
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
SETR GD18 D2
LOAD D2 0.0001
SETR GD1 D2
PUSHR D4
LOAD D2 0.0006; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 2.3732; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
POP D4
GOTO 24274; if() #100 Body End
LOAD D2 0; if() #263 Test AND if() #100 Else Start
COMPAREV D2 -1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 24274 ==; Test 'if'
SETR D2 GD19; if() #263 Body Start
PUSHR D2
LOAD D2 0
PUSHR D2
SETR D2 GD2
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
SETR GD19 D2
LOAD D2 0
SETR GD2 D2
PUSHR D4
LOAD D2 0.0006; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 2.3732; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
POP D4; if() #263 Body End
POPARGS D5 0.0007; if() #100 Else End AND if() #91 Else End AND if() #260 Body End
RETURNFUNC; Func[void Ghost_CheckHit(ffc, npc)] Body End
SETR D4 SP2; Func[void Ghost_ClearCombos()] Body Start
SETV D2 0
PUSHR D2
SETR D2 GD25
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
RETURNFUNC; Func[void Ghost_ClearCombos()] Body End
PUSHARGSV 0 0.0005; Func[int Ghost_ConstantWalk4(int, int, int, int, int)] Body Start
SETR D4 SP2
SETR D2 GD21; if() #264 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 24293 ==; Test 'if'
LOAD D2 0.0009; return Start AND if() #264 Body Start
GOTO 24633; return End AND if() #264 Body End
STOREV 0 0.0004
STOREV 0 0.0003
PUSHR D4
PUSHV 32768; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
STORE D2 0.0002
PUSHR D4; unless() #265 Test
PUSHV 1024; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24310 !=; Test 'unless'
PUSHR D4; unless() #265 Body Start
PUSHV 32768; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4635; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; unless() #265 Body End
LOAD D2 0.0008
DIVV D2 100
STORE D2 0.0008
SETR D2 GD17; if() #266 Test
ANDV D2 16
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 24454 ==; Test 'if'
SETR D2 GD1; if() #101 Test AND if() #266 Body Start
MODV D2 16
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24382 ==; Test 'if'
PUSHR D4; if() #101 Body Start
PUSHV 2; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4661; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
STORE D2 0.0001
PUSHR D4
PUSHV 3; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4661; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
STORE D2 0
LOAD D2 0.0001; if() #102 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 BI==
COMPAREV D2 0
GOTOCMP 24363 ==; Test 'if'
SETR D2 GD4; unless() #267 Test AND if() #102 Body Start
COMPAREV D2 2
GOTOCMP 24355 ==
SETR D2 GD4
COMPAREV D2 3
GOTOCMP 24355 ==
SETV D2 0
GOTO 24356
SETV D2 1
COMPAREV D2 0
GOTOCMP 24371 !=; Test 'unless'
PUSHVARGV 2; InlineFunc[Direction Choose(Direction)] Params Start AND unless() #267 Body Start
PUSHVARGV 3; InlineFunc[Direction Choose(Direction)] Params End
CHOOSEVARG; InlineFunc[Direction Choose(Direction)] Body
SETR GD4 D2; unless() #267 Body End
GOTO 24371; if() #102 Body End
LOAD D2 0.0001; if() #103 Test AND if() #102 Else Start
COMPAREV D2 0
GOTOCMP 24369 ==; Test 'if'
SETV D2 2; if() #103 Body Start
SETR GD4 D2
GOTO 24371; if() #103 Body End
SETV D2 3; if() #103 Else Start
SETR GD4 D2; if() #103 Else End
LOAD D2 0.0008; if() #102 Else End AND InlineFunc[int Floor(int)] Params Start
DIVV2 8 D2
SETV D2 8
PUSHR D2
LOAD D2 0.0008
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0009
GOTO 24454; if() #101 Body End
SETR D2 GD2; if() #104 Test AND if() #101 Else Start
MODV D2 16
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24444 ==; Test 'if'
PUSHR D4; if() #104 Body Start
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4661; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
STORE D2 0.0001
PUSHR D4
PUSHARGSV 1 0.0002; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4661; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
STORE D2 0
LOAD D2 0.0001; if() #105 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 BI==
COMPAREV D2 0
GOTOCMP 24425 ==; Test 'if'
SETR D2 GD4; unless() #268 Test AND if() #105 Body Start
COMPAREV D2 0
GOTOCMP 24417 ==
SETR D2 GD4
COMPAREV D2 1
GOTOCMP 24417 ==
SETV D2 0
GOTO 24418
SETV D2 1
COMPAREV D2 0
GOTOCMP 24433 !=; Test 'unless'
PUSHVARGV 0; InlineFunc[Direction Choose(Direction)] Params Start AND unless() #268 Body Start
PUSHVARGV 1; InlineFunc[Direction Choose(Direction)] Params End
CHOOSEVARG; InlineFunc[Direction Choose(Direction)] Body
SETR GD4 D2; unless() #268 Body End
GOTO 24433; if() #105 Body End
LOAD D2 0.0001; if() #106 Test AND if() #105 Else Start
COMPAREV D2 0
GOTOCMP 24431 ==; Test 'if'
SETV D2 0; if() #106 Body Start
SETR GD4 D2
GOTO 24433; if() #106 Body End
SETV D2 1; if() #106 Else Start
SETR GD4 D2; if() #106 Else End
LOAD D2 0.0008; if() #105 Else End AND InlineFunc[int Floor(int)] Params Start
DIVV2 8 D2
SETV D2 8
PUSHR D2
LOAD D2 0.0008
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0009
GOTO 24454; if() #104 Body End
LOAD D2 0.0008; InlineFunc[int Floor(int)] Params Start AND if() #104 Else Start
DIVV2 16 D2
SETV D2 16
PUSHR D2
LOAD D2 0.0008
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0009; if() #104 Else End
LOAD D2 0.0009; if() #101 Else End AND if() #266 Body End AND if() #269 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 24488 ==; Test 'if'
PUSHR D4; if() #269 Body Start
CALLFUNC 2.4711; UsrFunc[void __Ghost_FixCoords()] Call
PEEK D4
LOAD D2 0.0007; UsrFunc[void __Ghost_NewDir4(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2; UsrFunc[void __Ghost_NewDir4(int, int, int)] Params End
CALLFUNC 2.4767; UsrFunc[void __Ghost_NewDir4(int, int, int)] Call
POP D4
LOAD D2 0.0008; if() #107 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24478 ==; Test 'if'
SETV D2 0; if() #107 Body Start
STORE D2 0.0009
GOTO 24488; if() #107 Body End
LOAD D2 0.0008; InlineFunc[int Floor(int)] Params Start AND if() #107 Else Start
DIVV2 16 D2
SETV D2 16
PUSHR D2
LOAD D2 0.0008
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0009; if() #107 Else End
SETR D2 GD1; if() #269 Body End AND InlineFunc[int Abs(int)] Params Start AND if() #108 Test
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 16
GOTOCMP 24514 >=
SETR D2 GD2; InlineFunc[int Abs(int)] Params Start
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 16
GOTOCMP 24514 >=
SETV D2 1
GOTO 24515
SETV D2 0
COMPAREV D2 0
GOTOCMP 24551 ==; Test 'if'
SETR D2 LINKACTION; if() #270 Test AND if() #108 Body Start
COMPAREV D2 7
GOTOCMP 24526 !=
SETR D2 GD17
ANDV D2 32
COMPAREV D2 0
GOTOCMP 24526 !=
SETV D2 1
GOTO 24527
SETV D2 0
COMPAREV D2 0
GOTOCMP 24554 ==; Test 'if'
SETR D2 GD4; if() #270 Body Start
XORV D2 1
SETR GD4 D2
LOAD D2 0.0008; InlineFunc[int Floor(int)] Params Start
DIVV2 16 D2
SETV D2 16
PUSHR D2
LOAD D2 0.0008
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
PUSHR D2
LOAD D2 0.0009
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0009
SETR D2 GD17
ORV D2 32
SETR GD17 D2; if() #270 Body End
GOTO 24554; if() #108 Body End
SETR D2 GD17; if() #108 Else Start
ANDV D2 -33
SETR GD17 D2; if() #108 Else End
SETR D2 GD4; if() #271 Test
COMPAREV D2 0
GOTOCMP 24562 ==
SETR D2 GD4
COMPAREV D2 1
GOTOCMP 24562 ==
SETV D2 1
GOTO 24563
SETV D2 0
COMPAREV D2 0
GOTOCMP 24585 ==; Test 'if'
SETR D2 GD4; if() #109 Test AND if() #271 Body Start
COMPAREV D2 2
GOTOCMP 24576 ==
SETR D2 GD4
COMPAREV D2 4
GOTOCMP 24576 ==
SETR D2 GD4
COMPAREV D2 6
GOTOCMP 24576 ==
SETV D2 0
GOTO 24577
SETV D2 1
COMPAREV D2 0
GOTOCMP 24583 ==; Test 'if'
LOAD D2 0.0008; if() #109 Body Start
SUBV2 0 D2
STORE D2 0.0004
GOTO 24585; if() #109 Body End
LOAD D2 0.0008; if() #109 Else Start
STORE D2 0.0004; if() #109 Else End
SETR D2 GD4; if() #271 Body End AND if() #272 Test
COMPAREV D2 2
GOTOCMP 24593 ==
SETR D2 GD4
COMPAREV D2 3
GOTOCMP 24593 ==
SETV D2 1
GOTO 24594
SETV D2 0
COMPAREV D2 0
GOTOCMP 24616 ==; Test 'if'
SETR D2 GD4; if() #110 Test AND if() #272 Body Start
COMPAREV D2 0
GOTOCMP 24607 ==
SETR D2 GD4
COMPAREV D2 4
GOTOCMP 24607 ==
SETR D2 GD4
COMPAREV D2 5
GOTOCMP 24607 ==
SETV D2 0
GOTO 24608
SETV D2 1
COMPAREV D2 0
GOTOCMP 24614 ==; Test 'if'
LOAD D2 0.0008; if() #110 Body Start
SUBV2 0 D2
STORE D2 0.0003
GOTO 24616; if() #110 Body End
LOAD D2 0.0008; if() #110 Else Start
STORE D2 0.0003; if() #110 Else End
LOAD D2 0.0002; if() #272 Body End AND unless() #273 Test
COMPAREV D2 0
GOTOCMP 24623 !=; Test 'unless'
PUSHR D4; unless() #273 Body Start
PUSHV 32768; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.4996; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP D4; unless() #273 Body End
PUSHR D4
LOAD D2 0.0004; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5023; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0009; return Start
SUBV D2 1
POPARGS D5 0.0010; return End
RETURNFUNC; Func[int Ghost_ConstantWalk4(int, int, int, int, int)] Body End
SETR D4 SP2; Func[void Ghost_SetFlag(int)] Body Start
LOAD D2 0; if() #158 Test
ANDV D2 65536
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 24653 ==; Test 'if'
SETR D2 GD16; if() #158 Body Start
PUSHR D2
LOAD D2 0
ANDV D2 65535
SETV D3 1
LSHIFTR D3 D2
SETR D2 D3
POP D3
ORR D2 D3
SETR GD16 D2
GOTO 24659; if() #158 Body End
SETR D2 GD15; if() #158 Else Start
PUSHR D2
LOAD D2 0
POP D3
ORR D2 D3
SETR GD15 D2; if() #158 Else End
POP D5
RETURNFUNC; Func[void Ghost_SetFlag(int)] Body End
SETR D4 SP2; Func[bool __Ghost_CanMoveNES(int, int, int)] Body Start
LOAD D2 0.0001; if() #597 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24669 ==; Test 'if'
SETV D2 1; return Start AND if() #597 Body Start
GOTO 24709; return End AND if() #597 Body End
LOAD D2 0.0001; while() #7 Test
COMPAREV D2 8
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 24696 ==; Test 'while'
PUSHR D4; unless() #598 Test AND while() #7 Body Start
LOAD D2 0.0002; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0001
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
SETR D2 GD3
COMPAREV D2 0
SETCMP D2 I>
PUSHR D2; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params End
CALLFUNC 2.1692; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24692 !=; Test 'unless'
SETV D2 0; return Start AND unless() #598 Body Start
GOTO 24709; return End AND unless() #598 Body End
LOAD D2 0.0001
SUBV D2 8
STORE D2 0.0001; while() #7 Body End
GOTO 24669; while() #7 End
PUSHR D4; return Start
LOAD D2 0.0002; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
SETR D2 GD3
COMPAREV D2 0
SETCMP D2 I>
PUSHR D2; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params End
CALLFUNC 2.1692; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Call
POP D4
POPARGS D5 0.0003; return End
RETURNFUNC; Func[bool __Ghost_CanMoveNES(int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[void __Ghost_FixCoords()] Body Start
SETR D4 SP2
SETR D2 GD1
ANDV D2 240
STORE D2 0.0001
SETR D2 GD1; if() #620 Test
ANDV D2 8
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 24725 ==; Test 'if'
LOAD D2 0.0001; if() #620 Body Start
ADDV D2 16
STORE D2 0.0001; if() #620 Body End
LOAD D2 0.0001
SETR GD1 D2
SETV D2 0; if() #322 Test
PUSHR D2
POP D0
SETR D2 SCREENFLAGSD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 24751 ==; Test 'if'
SETR D2 GD2; if() #322 Body Start
ANDV D2 248
STORE D2 0
SETR D2 GD2; if() #621 Test
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 24748 ==; Test 'if'
LOAD D2 0; if() #621 Body Start
ADDV D2 8
STORE D2 0; if() #621 Body End
LOAD D2 0
SETR GD2 D2
GOTO 24765; if() #322 Body End
SETR D2 GD2; if() #322 Else Start
ANDV D2 240
STORE D2 0
SETR D2 GD2; if() #622 Test
ANDV D2 8
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 24763 ==; Test 'if'
LOAD D2 0; if() #622 Body Start
ADDV D2 16
STORE D2 0; if() #622 Body End
LOAD D2 0
SETR GD2 D2; if() #322 Else End
POPARGS D5 0.0002
RETURNFUNC; Func[void __Ghost_FixCoords()] Body End
PUSHARGSV 0 0.0005; Func[void __Ghost_NewDir4(int, int, int)] Body Start
SETR D4 SP2
STOREV -1 0.0004
SETV D3 4; InlineFunc[int Rand(int)] Params AND if() #632 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0005
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 24858 ==; Test 'if'
PUSHR D4; if() #632 Body Start
PUSHV 11; UsrFunc[lweapon LoadLWeaponOf(int)] Params
CALLFUNC 2.9274; UsrFunc[lweapon LoadLWeaponOf(int)] Call
POP D4
STORE D2 0.0003
LOAD D2 0.0003; InlineFunc[bool lweapon::isValid()] Params AND if() #633 Test
ISVALIDLWPN D2; InlineFunc[bool lweapon::isValid()] Body
COMPAREV D2 0
GOTOCMP 24858 ==; Test 'if'
SETR D2 GD2; InlineFunc[int Abs(int)] Params Start AND if() #634 Test AND if() #633 Body Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 14
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 24830 ==; Test 'if'
LOAD D2 0.0003; if() #332 Test AND if() #634 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
SETR D2 GD2
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 24816 ==; Test 'if'
SETV D2 0; if() #332 Body Start
STORE D2 0.0004
GOTO 24818; if() #332 Body End
SETV D2 1; if() #332 Else Start
STORE D2 0.0004; if() #332 Else End
PUSHR D4; if() #635 Test
LOAD D2 0.0004; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHR D2
PUSHV 16
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4661; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24830 ==; Test 'if'
LOAD D2 0.0004; if() #635 Body Start
SETR GD4 D2
GOTO 24994; return (Void) AND if() #635 Body End
LOAD D2 0.0003; if() #634 Body End AND if() #333 Test
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
SETR D2 GD1
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 24844 ==; Test 'if'
SETV D2 2; if() #333 Body Start
STORE D2 0.0004
GOTO 24846; if() #333 Body End
SETV D2 3; if() #333 Else Start
STORE D2 0.0004; if() #333 Else End
PUSHR D4; if() #636 Test
LOAD D2 0.0004; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHR D2
PUSHV 16
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4661; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24858 ==; Test 'if'
LOAD D2 0.0004; if() #636 Body Start
SETR GD4 D2
GOTO 24994; return (Void) AND if() #636 Body End
SETV D3 256; if() #633 Body End AND if() #632 Body End AND InlineFunc[int Rand(int)] Params AND if() #637 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0006
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 24893 ==; Test 'if'
PUSHR D4; if() #637 Body Start
PUSHV 8; UsrFunc[int __Ghost_LinedUp(int, bool)] Params Start
PUSHV 0; UsrFunc[int __Ghost_LinedUp(int, bool)] Params End
CALLFUNC 3.0246; UsrFunc[int __Ghost_LinedUp(int, bool)] Call
POP D4
STORE D2 0.0004
LOAD D2 0.0004; if() #638 Test
COMPAREV D2 0
GOTOCMP 24887 <
PUSHR D4
LOAD D2 0.0004; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHR D2
PUSHV 16
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4661; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24887 ==
SETV D2 1
GOTO 24888
SETV D2 0
COMPAREV D2 0
GOTOCMP 24893 ==; Test 'if'
LOAD D2 0.0004; if() #638 Body Start
SETR GD4 D2
GOTO 24994; return (Void) AND if() #638 Body End
ALLOCATEMEMV D2 4 0; if() #637 Body End
STORE D2 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
STOREV 0 0; for() #170 setup
LOAD D2 0; for() #170 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 24928 ==; for() #170 TestFail?
PUSHR D4; if() #639 Test AND for() #170 Body Start
LOAD D2 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHR D2
PUSHV 16
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4661; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24924 ==; Test 'if'
SETV D2 1; if() #639 Body Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0002
ADDV D2 1
STORE D2 0.0002; if() #639 Body End
LOAD D2 0; for() #170 Body End AND for() #170 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 24898; for() #170 End
LOAD D2 0.0002; if() #640 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24938 ==; Test 'if'
SETV D2 -1; if() #640 Body Start
SETR GD4 D2
LOAD D3 0.0003
DEALLOCATEMEMR D3
GOTO 24994; return (Void) AND if() #640 Body End
SETV D3 16; InlineFunc[int Rand(int)] Params AND if() #641 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0007
POP D3
COMPARER D3 D2
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 24957 ==; Test 'if'
LOAD D2 0.0003; if() #642 Test AND if() #641 Body Start
PUSHR D2
SETR D2 GD4
POP D0
READPODARRAYR D2 D2
COMPAREV D2 0
GOTOCMP 24957 ==; Test 'if'
LOAD D3 0.0003; if() #642 Body Start
DEALLOCATEMEMR D3
GOTO 24994; return (Void) AND if() #642 Body End
LOAD D2 0.0002; if() #641 Body End AND InlineFunc[int Rand(int)] Params Start
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0001
STOREV 0 0; for() #171 setup
LOAD D2 0; for() #171 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 24992 ==; for() #171 TestFail?
LOAD D2 0.0003; unless() #643 Test AND for() #171 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
COMPAREV D2 0
GOTOCMP 24988 ==; Test 'unless' AND continue 1; AND unless() #643 Body
LOAD D2 0.0001; if() #334 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24985 ==; Test 'if'
LOAD D2 0; if() #334 Body Start
SETR GD4 D2
LOAD D3 0.0003
DEALLOCATEMEMR D3
GOTO 24994; return (Void)
GOTO 24988; if() #334 Body End
LOAD D2 0.0001; if() #334 Else Start
SUBV D2 1
STORE D2 0.0001; if() #334 Else End
LOAD D2 0; for() #171 Body End AND for() #171 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 24962; for() #171 End
LOAD D3 0.0003
DEALLOCATEMEMR D3
POPARGS D5 0.0008
RETURNFUNC; Func[void __Ghost_NewDir4(int, int, int)] Body End
SETR D4 SP2; Func[void Ghost_UnsetFlag(int)] Body Start
LOAD D2 0; if() #160 Test
ANDV D2 65536
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 25014 ==; Test 'if'
SETR D2 GD16; if() #160 Body Start
PUSHR D2
LOAD D2 0
ANDV D2 65535
SETV D3 -2
LSHIFTR D3 D2
SETR D2 D3
POP D3
ANDR D2 D3
SETR GD16 D2
GOTO 25021; if() #160 Body End
SETR D2 GD15; if() #160 Else Start
PUSHR D2
LOAD D2 0
BITNOT D2
POP D3
ANDR D2 D3
SETR GD15 D2; if() #160 Else End
POP D5
RETURNFUNC; Func[void Ghost_UnsetFlag(int)] Body End
PUSHARGSV 0 0.0004; Func[void Ghost_MoveXY(int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0005; if() #310 Test
COMPAREV D2 0
GOTOCMP 25041 >=
PUSHR D4
CALLFUNC 2.7519; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 25041 ==
PUSHR D4
PUSHV 32; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25041 !=
SETV D2 1
GOTO 25042
SETV D2 0
COMPAREV D2 0
GOTOCMP 25046 ==; Test 'if'
SETV D2 0; if() #310 Body Start
STORE D2 0.0005; if() #310 Body End
LOAD D2 0.0006; while() #3 Test AND InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 8
GOTOCMP 25056 >
LOAD D2 0.0005; InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 8
GOTOCMP 25056 >
SETV D2 0
GOTO 25057
SETV D2 1
COMPAREV D2 0
GOTOCMP 25123 ==; Test 'while'
LOAD D2 0.0006; InlineFunc[int Abs(int)] Params AND if() #141 Test AND while() #3 Body Start
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0.0005; InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
POP D3
COMPARER D3 D2
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 25096 ==; Test 'if'
LOAD D2 0.0006; if() #142 Test AND if() #141 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 25085 ==; Test 'if'
PUSHR D4; if() #142 Body Start
PUSHV 8; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV 0
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5023; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0006
SUBV D2 8
STORE D2 0.0006
GOTO 25046; if() #142 Body End
PUSHR D4; if() #142 Else Start
PUSHV -8; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV 0
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5023; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0006
ADDV D2 8
STORE D2 0.0006; if() #142 Else End
GOTO 25046; if() #141 Body End
LOAD D2 0.0005; if() #143 Test AND if() #141 Else Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 25112 ==; Test 'if'
PUSHR D4; if() #143 Body Start
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV 8
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5023; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0005
SUBV D2 8
STORE D2 0.0005
GOTO 25046; if() #143 Body End
PUSHR D4; if() #143 Else Start
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV -8
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5023; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0005
ADDV D2 8
STORE D2 0.0005; if() #143 Else End
GOTO 25046; if() #141 Else End AND while() #3 Body End AND while() #3 End
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
STOREV 0 0
LOAD D2 0.0006; if() #144 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25198 ==; Test 'if'
SETR D2 GD22; if() #144 Body Start
RSHIFTV D2 8
STORE D2 0.0002
SETR D2 GD1
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
STORE D2 0.0003
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0001
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
PUSHR D2
LOAD D2 0.0006
POP D3
ADDR D2 D3
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0
LOAD D2 0.0001; if() #145 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 25168 ==; Test 'if'
LOAD D2 0.0003; if() #145 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 25190; if() #145 Body End
PUSHR D4; if() #146 Test AND if() #145 Else Start
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOAD D2 0.0006
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1543; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25186 ==; Test 'if'
LOAD D2 0.0003; if() #146 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 25190; if() #146 Body End
LOAD D2 0.0003; if() #146 Else Start
RSHIFTV D2 3
LSHIFTV D2 3
STORE D2 0.0003; if() #146 Else End
LOAD D2 0.0003; if() #145 Else End
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2
GOTO 25281; if() #144 Body End
LOAD D2 0.0006; if() #311 Test AND if() #144 Else Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 25281 ==; Test 'if'
SETR D2 GD12; if() #311 Body Start
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
PUSHR D2
SETR D2 GD22
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
STORE D2 0.0002
SETR D2 GD1
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
STORE D2 0.0003
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0001
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
PUSHR D2
LOAD D2 0.0006
POP D3
ADDR D2 D3
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0
LOAD D2 0.0001; if() #147 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 25251 ==; Test 'if'
LOAD D2 0.0003; if() #147 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 25274; if() #147 Body End
PUSHR D4; if() #148 Test AND if() #147 Else Start
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1543; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25268 ==; Test 'if'
LOAD D2 0.0003; if() #148 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 25274; if() #148 Body End
LOAD D2 0.0003; if() #148 Else Start
ADDV D2 7
RSHIFTV D2 3
LSHIFTV D2 3
SUBV D2 1
STORE D2 0.0003; if() #148 Else End
LOAD D2 0.0003; if() #147 Else End
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2; if() #311 Body End
LOAD D2 0.0005; if() #144 Else End AND if() #149 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25352 ==; Test 'if'
SETR D2 GD23; if() #149 Body Start
RSHIFTV D2 8
STORE D2 0.0002
SETR D2 GD2
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
STORE D2 0.0003
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0001
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0
LOAD D2 0.0001; if() #150 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 25322 ==; Test 'if'
LOAD D2 0.0003; if() #150 Body Start
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 25344; if() #150 Body End
PUSHR D4; if() #151 Test AND if() #150 Else Start
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOAD D2 0.0005
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1543; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25340 ==; Test 'if'
LOAD D2 0.0003; if() #151 Body Start
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 25344; if() #151 Body End
LOAD D2 0.0003; if() #151 Else Start
RSHIFTV D2 3
LSHIFTV D2 3
STORE D2 0.0003; if() #151 Else End
LOAD D2 0.0003; if() #150 Else End
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2
GOTO 25435; if() #149 Body End
LOAD D2 0.0005; if() #312 Test AND if() #149 Else Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 25435 ==; Test 'if'
SETR D2 GD13; if() #312 Body Start
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
PUSHR D2
SETR D2 GD23
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
STORE D2 0.0002
SETR D2 GD2
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
STORE D2 0.0003
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0001
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0
LOAD D2 0.0001; if() #152 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 25405 ==; Test 'if'
LOAD D2 0.0003; if() #152 Body Start
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 25428; if() #152 Body End
PUSHR D4; if() #153 Test AND if() #152 Else Start
PUSHV 1; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1543; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25422 ==; Test 'if'
LOAD D2 0.0003; if() #153 Body Start
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 25428; if() #153 Body End
LOAD D2 0.0003; if() #153 Else Start
ADDV D2 7
RSHIFTV D2 3
LSHIFTV D2 3
SUBV D2 1
STORE D2 0.0003; if() #153 Else End
LOAD D2 0.0003; if() #152 Else End
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2; if() #312 Body End
PUSHR D4; if() #149 Else End AND if() #313 Test
PUSHV 64; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25447 ==
SETR D2 GD17
ANDV D2 4
COMPAREV D2 0
GOTOCMP 25447 !=
SETV D2 1
GOTO 25448
SETV D2 0
COMPAREV D2 0
GOTOCMP 25505 ==; Test 'if'
PUSHR D4; if() #154 Test AND if() #313 Body Start
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25470 ==; Test 'if'
PUSHR D4; if() #154 Body Start
LOAD D2 0.0006; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int WrapAngle(int)] Params Start AND UsrFunc[int AngleDir8(int)] Params Start
PUSHR D2
LOAD D2 0.0005
SETR D1 D2; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End AND InlineFunc[int WrapAngle(int)] Params End
WRAPRADIANS D2; InlineFunc[int WrapAngle(int)] Body
MULTV D2 57.2958
PUSHR D2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 2.0474; UsrFunc[int AngleDir8(int)] Call
POP D4
SETR GD4 D2
GOTO 25501; if() #154 Body End
LOAD D2 0.0006; InlineFunc[int Abs(int)] Params AND if() #155 Test AND if() #154 Else Start
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0.0005; InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25491 ==; Test 'if'
LOAD D2 0.0005; if() #156 Test AND if() #155 Body Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25488 ==; Test 'if'
SETV D2 0; if() #156 Body Start
SETR GD4 D2
GOTO 25501; if() #156 Body End
SETV D2 1; if() #156 Else Start
SETR GD4 D2; if() #156 Else End
GOTO 25501; if() #155 Body End
LOAD D2 0.0006; if() #157 Test AND if() #155 Else Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25499 ==; Test 'if'
SETV D2 2; if() #157 Body Start
SETR GD4 D2
GOTO 25501; if() #157 Body End
SETV D2 3; if() #157 Else Start
SETR GD4 D2; if() #157 Else End
SETR D2 GD1; if() #155 Else End AND if() #154 Else End
SETR GD18 D2
SETR D2 GD2
SETR GD19 D2; if() #313 Body End
POPARGS D5 0.0007
RETURNFUNC; Func[void Ghost_MoveXY(int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[int Ghost_ConstantWalk8(int, int, int, int, int)] Body Start
SETR D4 SP2
SETR D2 GD21; if() #274 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 25516 ==; Test 'if'
LOAD D2 0.0006; return Start AND if() #274 Body Start
GOTO 25617; return End AND if() #274 Body End
STOREV 0 0.0001
STOREV 0 0
LOAD D2 0.0005
DIVV D2 100
STORE D2 0.0005
LOAD D2 0.0006; if() #275 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 25545 ==; Test 'if'
PUSHR D4; if() #275 Body Start
LOAD D2 0.0004; UsrFunc[void __Ghost_NewDir8(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[void __Ghost_NewDir8(int, int, int)] Params End
CALLFUNC 2.5619; UsrFunc[void __Ghost_NewDir8(int, int, int)] Call
POP D4
LOAD D2 0.0005; InlineFunc[int Floor(int)] Params Start
DIVV2 8 D2
SETV D2 8
PUSHR D2
LOAD D2 0.0005
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0006; if() #275 Body End
SETR D2 GD4; if() #276 Test
COMPAREV D2 0
GOTOCMP 25553 ==
SETR D2 GD4
COMPAREV D2 1
GOTOCMP 25553 ==
SETV D2 1
GOTO 25554
SETV D2 0
COMPAREV D2 0
GOTOCMP 25576 ==; Test 'if'
SETR D2 GD4; if() #111 Test AND if() #276 Body Start
COMPAREV D2 2
GOTOCMP 25567 ==
SETR D2 GD4
COMPAREV D2 4
GOTOCMP 25567 ==
SETR D2 GD4
COMPAREV D2 6
GOTOCMP 25567 ==
SETV D2 0
GOTO 25568
SETV D2 1
COMPAREV D2 0
GOTOCMP 25574 ==; Test 'if'
LOAD D2 0.0005; if() #111 Body Start
SUBV2 0 D2
STORE D2 0.0001
GOTO 25576; if() #111 Body End
LOAD D2 0.0005; if() #111 Else Start
STORE D2 0.0001; if() #111 Else End
SETR D2 GD4; if() #276 Body End AND if() #277 Test
COMPAREV D2 2
GOTOCMP 25584 ==
SETR D2 GD4
COMPAREV D2 3
GOTOCMP 25584 ==
SETV D2 1
GOTO 25585
SETV D2 0
COMPAREV D2 0
GOTOCMP 25607 ==; Test 'if'
SETR D2 GD4; if() #112 Test AND if() #277 Body Start
COMPAREV D2 0
GOTOCMP 25598 ==
SETR D2 GD4
COMPAREV D2 4
GOTOCMP 25598 ==
SETR D2 GD4
COMPAREV D2 5
GOTOCMP 25598 ==
SETV D2 0
GOTO 25599
SETV D2 1
COMPAREV D2 0
GOTOCMP 25605 ==; Test 'if'
LOAD D2 0.0005; if() #112 Body Start
SUBV2 0 D2
STORE D2 0
GOTO 25607; if() #112 Body End
LOAD D2 0.0005; if() #112 Else Start
STORE D2 0; if() #112 Else End
PUSHR D4; if() #277 Body End
LOAD D2 0.0001; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5023; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0006; return Start
SUBV D2 1
POPARGS D5 0.0007; return End
RETURNFUNC; Func[int Ghost_ConstantWalk8(int, int, int, int, int)] Body End
PUSHARGSV 0 0.0005; Func[void __Ghost_NewDir8(int, int, int)] Body Start
SETR D4 SP2
STOREV -1 0.0004
PUSHR D4; if() #644 Test
PUSHR GD4; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHV 8
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4661; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25800 ==; Test 'if'
SETV D3 4; InlineFunc[int Rand(int)] Params AND if() #645 Test AND if() #644 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0005
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25750 ==; Test 'if'
PUSHR D4; if() #645 Body Start
PUSHV 11; UsrFunc[lweapon LoadLWeaponOf(int)] Params
CALLFUNC 2.9274; UsrFunc[lweapon LoadLWeaponOf(int)] Call
POP D4
STORE D2 0.0003
LOAD D2 0.0003; InlineFunc[bool lweapon::isValid()] Params AND if() #646 Test
ISVALIDLWPN D2; InlineFunc[bool lweapon::isValid()] Body
COMPAREV D2 0
GOTOCMP 25750 ==; Test 'if'
LOAD D2 0.0003; if() #335 Test AND if() #646 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
SETR D2 GD1
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25662 ==; Test 'if'
SETV D2 2; if() #335 Body Start
STORE D2 0.0004
GOTO 25678; if() #335 Body End
LOAD D2 0.0003; if() #336 Test AND if() #335 Else Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
SETR D2 GD1
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 25676 ==; Test 'if'
SETV D2 3; if() #336 Body Start
STORE D2 0.0004
GOTO 25678; if() #336 Body End
SETV D2 0; if() #336 Else Start
STORE D2 0.0004; if() #336 Else End
SETR D2 GD2; if() #335 Else End AND InlineFunc[int Abs(int)] Params Start AND if() #647 Test
PUSHR D2
LOAD D2 0.0003
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 14
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 25732 ==; Test 'if'
LOAD D2 0.0004; if() #337 Test AND if() #647 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 25716 ==; Test 'if'
LOAD D2 0.0003; if() #338 Test AND if() #337 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
SETR D2 GD2
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25712 ==; Test 'if'
LOAD D2 0.0004; if() #338 Body Start
ADDV D2 2
STORE D2 0.0004
GOTO 25732; if() #338 Body End
LOAD D2 0.0004; if() #338 Else Start
ADDV D2 4
STORE D2 0.0004; if() #338 Else End
GOTO 25732; if() #337 Body End
LOAD D2 0.0003; if() #339 Test AND if() #337 Else Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
SETR D2 GD2
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25730 ==; Test 'if'
SETV D2 0; if() #339 Body Start
STORE D2 0.0004
GOTO 25732; if() #339 Body End
SETV D2 1; if() #339 Else Start
STORE D2 0.0004; if() #339 Else End
PUSHR D4; if() #337 Else End AND if() #647 Body End AND if() #648 Test
LOAD D2 0.0004; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHR D2
PUSHV 8
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4661; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25750 ==; Test 'if'
LOAD D2 0.0004; if() #648 Body Start
SETR GD4 D2
SETR D2 GD1
LSHIFTV D2 0
SETR GD1 D2
SETR D2 GD2
LSHIFTV D2 0
SETR GD2 D2
GOTO 25894; return (Void) AND if() #648 Body End
SETV D3 256; if() #646 Body End AND if() #645 Body End AND InlineFunc[int Rand(int)] Params AND if() #649 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0006
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25791 ==; Test 'if'
PUSHR D4; if() #649 Body Start
PUSHV 8; UsrFunc[int __Ghost_LinedUp(int, bool)] Params Start
PUSHV 1; UsrFunc[int __Ghost_LinedUp(int, bool)] Params End
CALLFUNC 3.0246; UsrFunc[int __Ghost_LinedUp(int, bool)] Call
POP D4
STORE D2 0.0004
LOAD D2 0.0004; if() #650 Test
COMPAREV D2 0
GOTOCMP 25779 <
PUSHR D4
LOAD D2 0.0004; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHR D2
PUSHV 8
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4661; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25779 ==
SETV D2 1
GOTO 25780
SETV D2 0
COMPAREV D2 0
GOTOCMP 25791 ==; Test 'if'
LOAD D2 0.0004; if() #650 Body Start
SETR GD4 D2
SETR D2 GD1
LSHIFTV D2 0
SETR GD1 D2
SETR D2 GD2
LSHIFTV D2 0
SETR GD2 D2
GOTO 25894; return (Void) AND if() #650 Body End
SETV D3 16; if() #649 Body End AND InlineFunc[int Rand(int)] Params AND if() #651 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0007
POP D3
COMPARER D3 D2
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 25894 !=; Test 'if' AND return (Void) AND if() #651 Body
ALLOCATEMEMV D2 8 0; if() #644 Body End
STORE D2 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
STOREV 0 0; for() #172 setup
LOAD D2 0; for() #172 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25835 ==; for() #172 TestFail?
PUSHR D4; if() #652 Test AND for() #172 Body Start
LOAD D2 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHR D2
PUSHV 8
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4661; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25831 ==; Test 'if'
LOAD D2 0.0002; if() #652 Body Start
ADDV D2 1
STORE D2 0.0002
SETV D2 1
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; if() #652 Body End
LOAD D2 0; for() #172 Body End AND for() #172 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 25805; for() #172 End
LOAD D2 0.0002; if() #653 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 25851 ==; Test 'if'
SETV D2 -1; if() #653 Body Start
SETR GD4 D2
SETR D2 GD1
LSHIFTV D2 0
SETR GD1 D2
SETR D2 GD2
LSHIFTV D2 0
SETR GD2 D2
LOAD D3 0.0003
DEALLOCATEMEMR D3
GOTO 25894; return (Void) AND if() #653 Body End
LOAD D2 0.0002; InlineFunc[int Rand(int)] Params Start
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0001
STOREV 0 0; for() #173 setup
LOAD D2 0; for() #173 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25892 ==; for() #173 TestFail?
LOAD D2 0.0003; unless() #654 Test AND for() #173 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
COMPAREV D2 0
GOTOCMP 25888 ==; Test 'unless' AND continue 1; AND unless() #654 Body
LOAD D2 0.0001; if() #340 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 25885 ==; Test 'if'
LOAD D2 0; if() #340 Body Start
SETR GD4 D2
SETR D2 GD1
LSHIFTV D2 0
SETR GD1 D2
SETR D2 GD2
LSHIFTV D2 0
SETR GD2 D2
LOAD D3 0.0003
DEALLOCATEMEMR D3
GOTO 25894; return (Void)
GOTO 25888; if() #340 Body End
LOAD D2 0.0001; if() #340 Else Start
SUBV D2 1
STORE D2 0.0001; if() #340 Else End
LOAD D2 0; for() #173 Body End AND for() #173 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 25856; for() #173 End
LOAD D3 0.0003
DEALLOCATEMEMR D3
POPARGS D5 0.0008
RETURNFUNC; Func[void __Ghost_NewDir8(int, int, int)] Body End
SETR D4 SP2; Func[void Ghost_DeathAnimation(ffc, npc, int)] Body Start
LOAD D2 0; if() #113 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 25911 ==; Test 'if'
PUSHR D4; if() #113 Body Start
LOAD D2 0.0002; UsrFunc[void __Ghost_Explode(ffc, npc, bool)] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
PUSHV 0; UsrFunc[void __Ghost_Explode(ffc, npc, bool)] Params End
CALLFUNC 2.6020; UsrFunc[void __Ghost_Explode(ffc, npc, bool)] Call
POP D4
GOTO 26018; if() #113 Body End
LOAD D2 0; if() #114 Test AND if() #113 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 25925 ==; Test 'if'
PUSHR D4; if() #114 Body Start
LOAD D2 0.0002; UsrFunc[void __Ghost_Explode(ffc, npc, bool)] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
PUSHV 1; UsrFunc[void __Ghost_Explode(ffc, npc, bool)] Params End
CALLFUNC 2.6020; UsrFunc[void __Ghost_Explode(ffc, npc, bool)] Call
POP D4
GOTO 26018; if() #114 Body End
LOAD D2 0; if() #115 Test AND if() #114 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 25938 ==; Test 'if'
PUSHR D4; if() #115 Body Start
LOAD D2 0.0002; UsrFunc[void __Ghost_ShrinkAway(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[void __Ghost_ShrinkAway(ffc, npc)] Params End
CALLFUNC 2.6189; UsrFunc[void __Ghost_ShrinkAway(ffc, npc)] Call
POP D4
GOTO 26018; if() #115 Body End
LOAD D2 0.0001; InlineFunc[bool npc::isValid()] Params AND if() #278 Test AND if() #115 Else Start
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 26011 ==; Test 'if'
SETV D2 1; if() #278 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
SETV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
SETR D2 GD1
PUSHR D2
SETR D2 GD12
SUBV D2 1
MULTV D2 8
SETV D2 8
PUSHR D2
SETR D2 GD12
SUBV D2 1
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
SETR D2 GD2
PUSHR D2
SETR D2 GD13
SUBV D2 1
MULTV D2 8
SETV D2 8
PUSHR D2
SETR D2 GD13
SUBV D2 1
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETR D2 GD3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2; if() #278 Body End
PUSHR D4
LOAD D2 0.0002; UsrFunc[void __GhCleanUp(ffc)] Params Start
PUSHR D2; UsrFunc[void __GhCleanUp(ffc)] Params End
CALLFUNC 2.6456; UsrFunc[void __GhCleanUp(ffc)] Call
POP D4
SETV D2 0
SETR GD10 D2; if() #115 Else End
POPARGS D5 0.0003; if() #114 Else End AND if() #113 Else End
RETURNFUNC; Func[void Ghost_DeathAnimation(ffc, npc, int)] Body End
PUSHARGSV 0 0.0005; Func[void __Ghost_Explode(ffc, npc, bool)] Body Start
SETR D4 SP2
STOREV 0 0.0004
SETR D2 GD1
PUSHR D2
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X_OFFSET
POP D3
ADDR D2 D3
STORE D2 0.0003
SETR D2 GD2
PUSHR D2
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y_OFFSET
POP D3
ADDR D2 D3
PUSHR D2
SETR D2 GD3
PUSHR D2
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z_OFFSET
POP D3
ADDR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0002
PUSHR D4
LOAD D2 0.0007; UsrFunc[void __DeathAnimStart(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[void __DeathAnimStart(ffc, npc)] Params End
CALLFUNC 3.0155; UsrFunc[void __DeathAnimStart(ffc, npc)] Call
PEEK D4
LOAD D2 0.0006; UsrFunc[void __DeathAnimSFX(int, int)] Params Start
PUSHR D2
POP REFNPC
PUSHR NPCID
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X; UsrFunc[void __DeathAnimSFX(int, int)] Params End
CALLFUNC 3.0099; UsrFunc[void __DeathAnimSFX(int, int)] Call
POP D4
LOAD D2 0.0005; if() #321 Test
COMPAREV D2 0
GOTOCMP 26076 ==; Test 'if'
SETV D2 10000; if() #321 Body Start
SETR GD20 D2
GOTO 26078; if() #321 Body End
SETV D2 0; if() #321 Else Start
SETR GD20 D2; if() #321 Else End
STOREV 0 0.0001; for() #168 setup
LOAD D2 0.0001; for() #168 LoopTest
COMPAREV D2 15
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 26180 ==; for() #168 TestFail?
SETV D2 4; InlineFunc[lweapon screendata::CreateLWeapon(int)] Params AND for() #168 Body Start
CREATELWEAPONR D2; InlineFunc[lweapon screendata::CreateLWeapon(int)] Body Start
SETR D2 REFLWPN; InlineFunc[lweapon screendata::CreateLWeapon(int)] Body End
STORE D2 0.0004
LOAD D2 0.0003
PUSHR D2
SETR D2 GD12; InlineFunc[int Rand(int)] Params Start
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
POP D3
ADDR D2 D3
SUBV D2 8
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0002
PUSHR D2
SETR D2 GD13; InlineFunc[int Rand(int)] Params Start
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
POP D3
ADDR D2 D3
SUBV D2 8
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFLWPN
SETR LWPNCOLLDET D2
STOREV 0 0; for() #169 setup
LOAD D2 0; for() #169 LoopTest
COMPAREV D2 16
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 26176 ==; for() #169 TestFail?
PUSHR D4; for() #169 Body Start
LOAD D2 0.0007; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 2.3732; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
POP D4
LOAD D2 0.0005; if() #619 Test
COMPAREV D2 0
GOTOCMP 26165 ==; Test 'if'
PUSHR D4; if() #619 Body Start
LOAD D2 0.0007; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Params End
CALLFUNC 2.3082; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Call
POP D4; if() #619 Body End
PUSHR D4
LOAD D2 0.0007; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params End
CALLFUNC 2.3332; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Call
POP D4; for() #169 Body End
LOAD D2 0; for() #169 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 26143; for() #169 End
LOAD D2 0.0001; for() #168 Body End AND for() #168 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 26079; for() #168 End
PUSHR D4
LOAD D2 0.0007; UsrFunc[void __DeathAnimEnd(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[void __DeathAnimEnd(ffc, npc)] Params End
CALLFUNC 3.0028; UsrFunc[void __DeathAnimEnd(ffc, npc)] Call
POP D4
POPARGS D5 0.0008
RETURNFUNC; Func[void __Ghost_Explode(ffc, npc, bool)] Body End
PUSHARGSV 0 0.0011; Func[void __Ghost_ShrinkAway(ffc, npc)] Body Start
SETR D4 SP2
SETR D2 GD1
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X_OFFSET
POP D3
ADDR D2 D3
STORE D2 0.0010
SETR D2 GD2
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y_OFFSET
POP D3
ADDR D2 D3
PUSHR D2
SETR D2 GD3
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z_OFFSET
POP D3
ADDR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0009
SETR D2 GD12
MULTV D2 16
STORE D2 0.0008
SETR D2 GD13
MULTV D2 16
STORE D2 0.0007
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE
STORE D2 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
LOAD D2 0.0012; if() #341 Test
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 26246 ==; Test 'if'
SETV D2 4; if() #341 Body Start
STORE D2 0.0005
GOTO 26260; if() #341 Body End
SETV D2 1; if() #342 Test AND if() #341 Else Start
PUSHR D2
POP D0
SETR D2 SCREENFLAGSD
ANDV D2 16
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 26258 ==; Test 'if'
SETV D2 1; if() #342 Body Start
STORE D2 0.0005
GOTO 26260; if() #342 Body End
SETV D2 2; if() #342 Else Start
STORE D2 0.0005; if() #342 Else End
LOAD D2 0.0011; if() #341 Else End AND if() #343 Test
PUSHR D2
POP REFNPC
SETR D2 NPCMFLAGS
ANDV D2 256
COMPAREV D2 0
GOTOCMP 26278 !=
LOAD D2 0.0012
PUSHR D2
SETV D2 1
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 26278 !=
SETV D2 0
GOTO 26279
SETV D2 1
COMPAREV D2 0
GOTOCMP 26284 ==; Test 'if'
SETV D2 64; if() #343 Body Start
STORE D2 0.0004
GOTO 26286; if() #343 Body End
SETV D2 128; if() #343 Else Start
STORE D2 0.0004; if() #343 Else End
PUSHR D4
LOAD D2 0.0012; UsrFunc[void __DeathAnimStart(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2; UsrFunc[void __DeathAnimStart(ffc, npc)] Params End
CALLFUNC 3.0155; UsrFunc[void __DeathAnimStart(ffc, npc)] Call
POP D4
SETV D2 1024
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
SETV D2 0
SETR GD20 D2
STOREV 0 0.0003; for() #174 setup
LOAD D2 0.0003; for() #174 LoopTest
COMPAREV D2 120
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 26447 ==; for() #174 TestFail?
LOAD D2 0.0003; InlineFunc[int Cos(int)] Params Start AND for() #174 Body Start
SUBV D2 30
SETR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
PUSHR D2
SETV D3 30; InlineFunc[int Cos(int)] Params
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
DIVR D3 D2
SETR D2 D3
STORE D2 0.0002
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0002
POP D3
MULTR D2 D3
STORE D2 0.0001
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0002
POP D3
MULTR D2 D3
STORE D2 0
LOAD D2 0.0003; if() #655 Test
COMPAREV D2 30
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26349 ==; Test 'if'
PUSHR D4; if() #655 Body Start
LOAD D2 0.0011; UsrFunc[void __DeathAnimSFX(int, int)] Params Start
PUSHR D2
POP REFNPC
PUSHR NPCID
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X; UsrFunc[void __DeathAnimSFX(int, int)] Params End
CALLFUNC 3.0099; UsrFunc[void __DeathAnimSFX(int, int)] Call
POP D4; if() #655 Body End
SETR D2 GD10; if() #344 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26396 ==; Test 'if'
LOAD D2 0.0005; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #344 Body Start
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
DIVV D2 2
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0009
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
SETR D2 D3
DIVV D2 2
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0006
PUSHR D2
PUSHR GD12
PUSHR GD13
PUSHR GD11
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHARGSV 0 0.0004
PUSHV 1
LOAD D2 0.0004
PUSHR D2; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILER; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0015; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
GOTO 26436; if() #344 Body End
LOAD D2 0.0005; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #344 Else Start
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
DIVV D2 2
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0009
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
SETR D2 D3
DIVV D2 2
POP D3
SUBR D3 D2
PUSHR D3
PUSHR GD10
PUSHR GD12
PUSHR GD13
PUSHR GD11
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHARGSV 0 0.0005
PUSHV 1
LOAD D2 0.0004
PUSHR D2; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWCOMBOR; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0016; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End AND if() #344 Else End
PUSHR D4
LOAD D2 0.0012; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params End
CALLFUNC 2.3332; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Call
POP D4; for() #174 Body End
LOAD D2 0.0003; for() #174 LoopIncrement
ADDV D2 1
STORE D2 0.0003
GOTO 26305; for() #174 End
PUSHR D4
LOAD D2 0.0012; UsrFunc[void __DeathAnimEnd(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2; UsrFunc[void __DeathAnimEnd(ffc, npc)] Params End
CALLFUNC 3.0028; UsrFunc[void __DeathAnimEnd(ffc, npc)] Call
POP D4
POPARGS D5 0.0013
RETURNFUNC; Func[void __Ghost_ShrinkAway(ffc, npc)] Body End
PUSHV 0; Func[void __GhCleanUp(ffc)] Body Start
SETR D4 SP2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD2 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD2 D2
SETV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
SETV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
SETV D2 16
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFCWIDTH D2
SETV D2 16
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFCHEIGHT D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DELAY D2
STOREV 0 0; for() #163 setup
LOAD D2 0; for() #163 LoopTest
COMPAREV D2 11
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 26588 ==; for() #163 TestFail?
SETV D2 0; for() #163 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
LOAD D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2; for() #163 Body End
LOAD D2 0; for() #163 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 26567; for() #163 End
POPARGS D5 0.0002
RETURNFUNC; Func[void __GhCleanUp(ffc)] Body End
SETR D4 SP2; Func[void Ghost_ForceDir(int)] Body Start
LOAD D2 0
SETR GD4 D2
SETR D2 GD17
ORV D2 4
SETR GD17 D2
POP D5
RETURNFUNC; Func[void Ghost_ForceDir(int)] Body End
PUSHARGSV 0 0.0005; Func[int Ghost_HaltingWalk4(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
SETR D2 GD21; if() #290 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 26607 ==; Test 'if'
LOAD D2 0.0011; return Start AND if() #290 Body Start
GOTO 26936; return End AND if() #290 Body End
STOREV 0 0.0004
STOREV 0 0.0003
LOAD D2 0.0011; if() #122 Test
COMPAREV D2 -1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26619 ==; Test 'if'
SETV D2 0; if() #122 Body Start
STORE D2 0.0004
SETV D2 0
STORE D2 0.0003
GOTO 26625; if() #122 Body End
LOAD D2 0.0011; if() #122 Else Start
MULTV D2 10000
STORE D2 0.0004
LOAD D2 0.0011
RSHIFTV D2 0
STORE D2 0.0003; if() #122 Else End
LOAD D2 0.0003; if() #291 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 26633 ==; Test 'if'
LOAD D2 0.0003; return Start AND if() #291 Body Start
SUBV D2 1
GOTO 26936; return End AND if() #291 Body End
PUSHR D4
PUSHV 32768; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
STORE D2 0.0002
PUSHR D4; unless() #292 Test
PUSHV 1024; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 26648 !=; Test 'unless'
PUSHR D4; unless() #292 Body Start
PUSHV 32768; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4635; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; unless() #292 Body End
LOAD D2 0.0010
DIVV D2 100
STORE D2 0.0010
SETR D2 GD17; if() #293 Test
ANDV D2 16
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 26792 ==; Test 'if'
SETR D2 GD1; if() #123 Test AND if() #293 Body Start
MODV D2 16
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26720 ==; Test 'if'
PUSHR D4; if() #123 Body Start
PUSHV 2; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4661; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
STORE D2 0.0001
PUSHR D4
PUSHV 3; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4661; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
STORE D2 0
LOAD D2 0.0001; if() #124 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 BI==
COMPAREV D2 0
GOTOCMP 26701 ==; Test 'if'
SETR D2 GD4; unless() #294 Test AND if() #124 Body Start
COMPAREV D2 2
GOTOCMP 26693 ==
SETR D2 GD4
COMPAREV D2 3
GOTOCMP 26693 ==
SETV D2 0
GOTO 26694
SETV D2 1
COMPAREV D2 0
GOTOCMP 26709 !=; Test 'unless'
PUSHVARGV 2; InlineFunc[Direction Choose(Direction)] Params Start AND unless() #294 Body Start
PUSHVARGV 3; InlineFunc[Direction Choose(Direction)] Params End
CHOOSEVARG; InlineFunc[Direction Choose(Direction)] Body
SETR GD4 D2; unless() #294 Body End
GOTO 26709; if() #124 Body End
LOAD D2 0.0001; if() #125 Test AND if() #124 Else Start
COMPAREV D2 0
GOTOCMP 26707 ==; Test 'if'
SETV D2 2; if() #125 Body Start
SETR GD4 D2
GOTO 26709; if() #125 Body End
SETV D2 3; if() #125 Else Start
SETR GD4 D2; if() #125 Else End
LOAD D2 0.0010; if() #124 Else End AND InlineFunc[int Floor(int)] Params Start
DIVV2 8 D2
SETV D2 8
PUSHR D2
LOAD D2 0.0010
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0004
GOTO 26792; if() #123 Body End
SETR D2 GD2; if() #126 Test AND if() #123 Else Start
MODV D2 16
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26782 ==; Test 'if'
PUSHR D4; if() #126 Body Start
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4661; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
STORE D2 0.0001
PUSHR D4
PUSHARGSV 1 0.0002; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4661; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
STORE D2 0
LOAD D2 0.0001; if() #127 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 BI==
COMPAREV D2 0
GOTOCMP 26763 ==; Test 'if'
SETR D2 GD4; unless() #295 Test AND if() #127 Body Start
COMPAREV D2 0
GOTOCMP 26755 ==
SETR D2 GD4
COMPAREV D2 1
GOTOCMP 26755 ==
SETV D2 0
GOTO 26756
SETV D2 1
COMPAREV D2 0
GOTOCMP 26771 !=; Test 'unless'
PUSHVARGV 0; InlineFunc[Direction Choose(Direction)] Params Start AND unless() #295 Body Start
PUSHVARGV 1; InlineFunc[Direction Choose(Direction)] Params End
CHOOSEVARG; InlineFunc[Direction Choose(Direction)] Body
SETR GD4 D2; unless() #295 Body End
GOTO 26771; if() #127 Body End
LOAD D2 0.0001; if() #128 Test AND if() #127 Else Start
COMPAREV D2 0
GOTOCMP 26769 ==; Test 'if'
SETV D2 0; if() #128 Body Start
SETR GD4 D2
GOTO 26771; if() #128 Body End
SETV D2 1; if() #128 Else Start
SETR GD4 D2; if() #128 Else End
LOAD D2 0.0010; if() #127 Else End AND InlineFunc[int Floor(int)] Params Start
DIVV2 8 D2
SETV D2 8
PUSHR D2
LOAD D2 0.0010
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0004
GOTO 26792; if() #126 Body End
LOAD D2 0.0010; InlineFunc[int Floor(int)] Params Start AND if() #126 Else Start
DIVV2 16 D2
SETV D2 16
PUSHR D2
LOAD D2 0.0010
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0004; if() #126 Else End
LOAD D2 0.0004; if() #123 Else End AND if() #293 Body End AND if() #296 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26844 ==; Test 'if'
PUSHR D4; if() #296 Body Start
CALLFUNC 2.4711; UsrFunc[void __Ghost_FixCoords()] Call
POP D4
LOAD D2 0.0010; InlineFunc[int Floor(int)] Params Start
DIVV2 16 D2
SETV D2 16
PUSHR D2
LOAD D2 0.0010
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0004
LOAD D2 0.0011; if() #297 Test
COMPAREV D2 -1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26844 ==; Test 'if'
PUSHR D4; if() #297 Body Start
LOAD D2 0.0009; UsrFunc[void __Ghost_NewDir4(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[void __Ghost_NewDir4(int, int, int)] Params End
CALLFUNC 2.4767; UsrFunc[void __Ghost_NewDir4(int, int, int)] Call
POP D4
SETV D3 16; InlineFunc[int Rand(int)] Params AND if() #298 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0006
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 26844 ==; Test 'if'
LOAD D2 0.0002; unless() #299 Test AND if() #298 Body Start
COMPAREV D2 0
GOTOCMP 26840 !=; Test 'unless'
PUSHR D4; unless() #299 Body Start
PUSHV 32768; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.4996; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP D4; unless() #299 Body End
LOAD D2 0.0005
STORE D2 0.0003
LOAD D2 0.0003; return Start
GOTO 26936; return End AND if() #298 Body End
SETR D2 GD1; if() #297 Body End AND if() #296 Body End AND InlineFunc[int Abs(int)] Params Start AND if() #129 Test
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 16
GOTOCMP 26870 >=
SETR D2 GD2; InlineFunc[int Abs(int)] Params Start
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 16
GOTOCMP 26870 >=
SETV D2 1
GOTO 26871
SETV D2 0
COMPAREV D2 0
GOTOCMP 26907 ==; Test 'if'
SETR D2 LINKACTION; if() #300 Test AND if() #129 Body Start
COMPAREV D2 7
GOTOCMP 26882 !=
SETR D2 GD17
ANDV D2 32
COMPAREV D2 0
GOTOCMP 26882 !=
SETV D2 1
GOTO 26883
SETV D2 0
COMPAREV D2 0
GOTOCMP 26910 ==; Test 'if'
SETR D2 GD4; if() #300 Body Start
XORV D2 1
SETR GD4 D2
LOAD D2 0.0010; InlineFunc[int Floor(int)] Params Start
DIVV2 16 D2
SETV D2 16
PUSHR D2
LOAD D2 0.0010
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0004
SETR D2 GD17
ORV D2 32
SETR GD17 D2; if() #300 Body End
GOTO 26910; if() #129 Body End
SETR D2 GD17; if() #129 Else Start
ANDV D2 -33
SETR GD17 D2; if() #129 Else End
LOAD D2 0.0004
SUBV D2 1
STORE D2 0.0004
PUSHR D4
PUSHR GD4; UsrFunc[void Ghost_Move(int, int, int)] Params Start
LOAD D2 0.0010
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 2.6938; UsrFunc[void Ghost_Move(int, int, int)] Call
POP D4
LOAD D2 0.0002; unless() #301 Test
COMPAREV D2 0
GOTOCMP 26927 !=; Test 'unless'
PUSHR D4; unless() #301 Body Start
PUSHV 32768; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.4996; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP D4; unless() #301 Body End
LOAD D2 0.0004; if() #130 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 26935 ==; Test 'if'
LOAD D2 0.0004; return Start AND if() #130 Body Start
DIVV D2 10000
GOTO 26936; return End AND if() #130 Body End
SETV D2 -1; return Start AND if() #130 Else Start
POPARGS D5 0.0012; return End AND if() #130 Else End
RETURNFUNC; Func[int Ghost_HaltingWalk4(int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[void Ghost_Move(int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0001
STOREV 0 0
LOAD D2 0.0004; if() #133 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26951 ==; Test 'if'
LOAD D2 0.0003; if() #133 Body Start
SUBV2 0 D2
STORE D2 0
GOTO 27029; if() #133 Body End
LOAD D2 0.0004; if() #134 Test AND if() #133 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26959 ==; Test 'if'
LOAD D2 0.0003; if() #134 Body Start
STORE D2 0
GOTO 27029; if() #134 Body End
LOAD D2 0.0004; if() #135 Test AND if() #134 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26968 ==; Test 'if'
LOAD D2 0.0003; if() #135 Body Start
SUBV2 0 D2
STORE D2 0.0001
GOTO 27029; if() #135 Body End
LOAD D2 0.0004; if() #136 Test AND if() #135 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26976 ==; Test 'if'
LOAD D2 0.0003; if() #136 Body Start
STORE D2 0.0001
GOTO 27029; if() #136 Body End
LOAD D2 0.0004; if() #137 Test AND if() #136 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26990 ==; Test 'if'
LOAD D2 0.0003; if() #137 Body Start
SUBV2 0 D2
MULTV D2 0.7071
STORE D2 0.0001
LOAD D2 0.0003
SUBV2 0 D2
MULTV D2 0.7071
STORE D2 0
GOTO 27029; if() #137 Body End
LOAD D2 0.0004; if() #138 Test AND if() #137 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 27003 ==; Test 'if'
LOAD D2 0.0003; if() #138 Body Start
MULTV D2 0.7071
STORE D2 0.0001
LOAD D2 0.0003
SUBV2 0 D2
MULTV D2 0.7071
STORE D2 0
GOTO 27029; if() #138 Body End
LOAD D2 0.0004; if() #139 Test AND if() #138 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 27016 ==; Test 'if'
LOAD D2 0.0003; if() #139 Body Start
SUBV2 0 D2
MULTV D2 0.7071
STORE D2 0.0001
LOAD D2 0.0003
MULTV D2 0.7071
STORE D2 0
GOTO 27029; if() #139 Body End
LOAD D2 0.0004; if() #140 Test AND if() #139 Else Start
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 27038 ==; Test 'if'
LOAD D2 0.0003; if() #140 Body Start
MULTV D2 0.7071
STORE D2 0.0001
LOAD D2 0.0003
MULTV D2 0.7071
STORE D2 0
GOTO 27029; if() #140 Body End
GOTO 27038; return (Void) AND if() #140 Else
PUSHR D4; if() #139 Else End AND if() #138 Else End AND if() #137 Else End AND if() #136 Else End AND if() #135 Else End AND if() #134 Else End AND if() #133 Else End
LOAD D2 0.0001; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5023; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
POPARGS D5 0.0005
RETURNFUNC; Func[void Ghost_Move(int, int, int)] Body End
SETR D4 SP2; Func[void __Ghost_InitInternal(ffc, npc, bool, int, int)] Body Start
LOAD D2 0.0001; if() #623 Test
COMPAREV D2 -1
GOTOCMP 27049 ==
LOAD D2 0.0001
COMPAREV D2 -2
GOTOCMP 27049 ==
SETV D2 0
GOTO 27050
SETV D2 1
COMPAREV D2 0
GOTOCMP 27054 ==; Test 'if'
SETV D2 1; if() #623 Body Start
STORE D2 0.0001; if() #623 Body End
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
LOAD D2 0.0001
SETR GD10 D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2
LOAD D2 0
SETR GD11 D2
LOAD D2 0.0002; if() #323 Test
COMPAREV D2 0
GOTOCMP 27100 ==; Test 'if'
LOAD D2 0.0003; if() #323 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
SETR GD1 D2
LOAD D2 0.0003
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
SETR GD2 D2
LOAD D2 0.0003
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
SETR GD3 D2
LOAD D2 0.0003
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_JUMP
SETR GD5 D2
GOTO 27132; if() #323 Body End
LOAD D2 0.0004; if() #323 Else Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
SETR GD1 D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
SETR GD2 D2
SETV D2 0
SETR GD3 D2
SETV D2 0
SETR GD5 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
SETV D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_JUMP D2; if() #323 Else End
PUSHR D4
LOAD D2 0.0004; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 2.3732; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
POP D4
LOAD D2 0.0003
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_DIR
SETR GD4 D2
SETV D2 0
SETR GD6 D2
SETV D2 0
SETR GD7 D2
SETV D2 0
SETR GD8 D2
SETV D2 0
SETR GD9 D2
SETR D2 GD1
SETR GD18 D2
SETR D2 GD2
SETR GD19 D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
SETR GD12 D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
SETR GD13 D2
SETV D2 0
SETR GD22 D2
SETV D2 0
SETR GD23 D2
LOAD D2 0.0001; if() #624 Test
COMPAREV D2 1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 27250 ==; Test 'if'
SETV D2 3; if(true) #324 [Opt:AlwaysOn] AND if() #624 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_EXTEND D2
SETV D2 65456
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCOTILE D2
SETV D2 65456; if(true) #625 [Opt:AlwaysOn]
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE D2
SETR D2 GD12
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
SETR D2 GD13
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
SETR D2 GD12
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_WIDTH D2
SETR D2 GD13
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_HEIGHT D2; if() #624 Body End
SETV D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
LOAD D2 0.0003; if() #325 Test
PUSHR D2
POP REFNPC
SETR D2 NPCMFLAGS
ANDV D2 32
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 27281 ==; Test 'if'
SETV D2 1; if() #325 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2
GOTO 27293; if() #325 Body End
SETV D2 0; if() #325 Else Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2; if() #325 Else End
LOAD D2 0.0003
PUSHR D2
POP REFNPC
SETR D2 NPCHP
SETR GD14 D2
SETV D2 0
SETR GD15 D2
SETV D2 0
SETR GD16 D2
SETV D2 0
SETR GD20 D2
SETV D2 0
SETR GD21 D2
SETV D2 0
SETR GD17 D2
SETV D2 0
PUSHR D2
SETR D2 GD25
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
SETV D2 65536
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
POPARGS D5 0.0005
RETURNFUNC; Func[void __Ghost_InitInternal(ffc, npc, bool, int, int)] Body End
PUSHARGSV 0 0.0008; Func[npc Ghost_InitAutoGhost(ffc, int)] Body Start
SETR D4 SP2
STOREV 0 0.0007
STOREV 0 0.0006
SETR D2 NPCCOUNT; for() #51 setup
STORE D2 0.0005
LOAD D2 0.0005; for() #51 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 27429 ==; for() #51 TestFail?
LOAD D2 0.0005; InlineFunc[npc screendata::LoadNPC(int)] Params AND for() #51 Body Start
SUBV D2 1; InlineFunc[npc screendata::LoadNPC(int)] Body Start
LOADNPCR D2
SETR D2 REFNPC; InlineFunc[npc screendata::LoadNPC(int)] Body End
STORE D2 0.0007
LOAD D2 0.0007; if() #131 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 27359 ==; Test 'if'
SETV D2 0; if() #131 Body Start
STORE D2 0.0006
GOTO 27425; continue 1;
GOTO 27361; if() #131 Body End
SETV D2 1; if() #131 Else Start
STORE D2 0.0006; if() #131 Else End
LOAD D2 0.0007; if() #302 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 65536
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 27376 ==; Test 'if'
SETV D2 0; if() #302 Body Start
STORE D2 0.0006
GOTO 27425; continue 1; AND if() #302 Body End
LOAD D2 0.0006; if() #132 Test
COMPAREV D2 0
GOTOCMP 27429 ==; Test 'if'
PUSHR D4; if() #132 Body Start
LOAD D2 0.0009; UsrFunc[void __Ghost_InitInternal(ffc, npc, bool, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
PUSHV 1
LOAD D2 0.0007
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 65535
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_CSET; UsrFunc[void __Ghost_InitInternal(ffc, npc, bool, int, int)] Params End
CALLFUNC 2.7040; UsrFunc[void __Ghost_InitInternal(ffc, npc, bool, int, int)] Call
POP D4
LOAD D2 0.0007; if() #303 Test
PUSHR D2
POP REFNPC
SETR D2 NPCMFLAGS
ANDV D2 256
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 27421 ==; Test 'if'
SETV D2 1; if() #303 Body Start
PUSHR D2
LOAD D2 0.0009
POP D3
PUSHR D2
PUSHR D3
SETV D2 1
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2; if() #303 Body End
LOAD D2 0.0007; return Start
GOTO 27474; return End
GOTO 27425; if() #132 Body End
GOTO 27429; break 1; AND if() #132 Else
LOAD D2 0.0005; for() #51 Body End AND for() #51 LoopIncrement
SUBV D2 1
STORE D2 0.0005
GOTO 27334; for() #51 End
ALLOCATEMEMV D2 60 0
WRITEPODSTRING D2 "ghost.zh: AutoGhost initialization failed - enemy missing.\n"
STORE D2 0.0004
ALLOCATEMEMV D2 30 0
WRITEPODSTRING D2 "  DMap %d, screen %X\n"
STORE D2 0.0002
ALLOCATEMEMV D2 30 0
WRITEPODSTRING D2 "  Script %d, enemy ID %d\n"
STORE D2 0
LOAD D2 0.0004; InlineFunc[void printf(char32[])] Params Start
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0.0002; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
PUSHVARGR CURDMAP
PUSHVARGR CURDSCR; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
LOAD D2 0.0009
PUSHR D2
POP REFFFC
PUSHVARGR FFSCRIPT
LOAD D2 0.0008
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
SETV D2 0
PUSHR D2
LOAD D2 0.0009
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
QUIT; InlineFunc[void Quit()] Body
LOAD D3 0
DEALLOCATEMEMR D3
LOAD D3 0.0002
DEALLOCATEMEMR D3
LOAD D3 0.0004
DEALLOCATEMEMR D3
POPARGS D5 0.0010
RETURNFUNC; Func[npc Ghost_InitAutoGhost(ffc, int)] Body End
SETR D4 SP2; Func[void Ghost_MoveAtAngle(int, int, int)] Body Start
PUSHARGSR D4 0.0002; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
LOAD D2 0.0001; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7499; UsrFunc[int VectorX(int, int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7509; UsrFunc[int VectorY(int, int)] Call
POP D4
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5023; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
POPARGS D5 0.0003
RETURNFUNC; Func[void Ghost_MoveAtAngle(int, int, int)] Body End
SETR D4 SP2; Func[int VectorX(int, int)] Body Start
LOAD D2 0; InlineFunc[int Cos(int)] Params Start AND return Start
SETR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int VectorX(int, int)] Body End
SETR D4 SP2; Func[int VectorY(int, int)] Body Start
LOAD D2 0; InlineFunc[int Sin(int)] Params Start AND return Start
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int VectorY(int, int)] Body End
SETR D4 SP2; Func[bool IsSideview()] Body Start
SETV D2 0; return Start
PUSHR D2
POP D0
SETR D2 SCREENFLAGSD
ANDV D2 4
PUSHR D2
SETR D2 CURDMAP; InlineFunc[dmapdata Game::LoadDMapData(int)] Params
LOADDMAPDATAR D2; InlineFunc[dmapdata Game::LoadDMapData(int)] Body Start
SETR D2 REFDMAPDATA; InlineFunc[dmapdata Game::LoadDMapData(int)] Body End
PUSHR D2
POP REFDMAPDATA
SETR D2 DMAPDATASIDEVIEW
POP D3
COMPARER D3 D2
SETCMP D2 BI!=
RETURNFUNC; return End AND Func[bool IsSideview()] Body End
SETR D4 SP2; Func[void Ghost_SetHitOffsets(npc, int, int, int, int)] Body Start
SETR D2 GD13
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
SETR D2 GD12
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
LOAD D2 0.0003; if() #314 Test
COMPAREV D2 0
GOTOCMP 27563 <=
LOAD D2 0.0003
COMPAREV D2 1
GOTOCMP 27563 >=
SETV D2 1
GOTO 27564
SETV D2 0
COMPAREV D2 0
GOTOCMP 27577 ==; Test 'if'
PUSHR D4; if() #314 Body Start
LOAD D2 0.0003; UsrFunc[int Round(int)] Params Start
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
MULTV D2 16
PUSHR D2; UsrFunc[int Round(int)] Params End
CALLFUNC 2.7757; UsrFunc[int Round(int)] Call
POP D4
STORE D2 0.0003; if() #314 Body End
LOAD D2 0.0002; if() #315 Test
COMPAREV D2 0
GOTOCMP 27585 <=
LOAD D2 0.0002
COMPAREV D2 1
GOTOCMP 27585 >=
SETV D2 1
GOTO 27586
SETV D2 0
COMPAREV D2 0
GOTOCMP 27599 ==; Test 'if'
PUSHR D4; if() #315 Body Start
LOAD D2 0.0002; UsrFunc[int Round(int)] Params Start
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
MULTV D2 16
PUSHR D2; UsrFunc[int Round(int)] Params End
CALLFUNC 2.7757; UsrFunc[int Round(int)] Call
POP D4
STORE D2 0.0002; if() #315 Body End
LOAD D2 0.0001; if() #316 Test
COMPAREV D2 0
GOTOCMP 27607 <=
LOAD D2 0.0001
COMPAREV D2 1
GOTOCMP 27607 >=
SETV D2 1
GOTO 27608
SETV D2 0
COMPAREV D2 0
GOTOCMP 27621 ==; Test 'if'
PUSHR D4; if() #316 Body Start
LOAD D2 0.0001; UsrFunc[int Round(int)] Params Start
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
MULTV D2 16
PUSHR D2; UsrFunc[int Round(int)] Params End
CALLFUNC 2.7757; UsrFunc[int Round(int)] Call
POP D4
STORE D2 0.0001; if() #316 Body End
LOAD D2 0; if() #317 Test
COMPAREV D2 0
GOTOCMP 27629 <=
LOAD D2 0
COMPAREV D2 1
GOTOCMP 27629 >=
SETV D2 1
GOTO 27630
SETV D2 0
COMPAREV D2 0
GOTOCMP 27643 ==; Test 'if'
PUSHR D4; if() #317 Body Start
LOAD D2 0; UsrFunc[int Round(int)] Params Start
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
MULTV D2 16
PUSHR D2; UsrFunc[int Round(int)] Params End
CALLFUNC 2.7757; UsrFunc[int Round(int)] Call
POP D4
STORE D2 0; if() #317 Body End
PUSHR D4
LOAD D2 0.0003; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 0
PUSHV 64; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0687; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0003
PUSHR D4
LOAD D2 0.0002; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 0
PUSHV 64; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0687; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0002
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 0
PUSHV 64; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0687; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0001
PUSHR D4
LOAD D2 0; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 0
PUSHV 64; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0687; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_OFFSET_X D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_OFFSET_Y D2
SETR D2 GD12
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_WIDTH D2
SETR D2 GD13
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_HEIGHT D2
LOAD D2 0.0001
LSHIFTV D2 8
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR GD22 D2
LOAD D2 0.0003
LSHIFTV D2 8
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
SETR GD23 D2
POPARGS D5 0.0005
RETURNFUNC; Func[void Ghost_SetHitOffsets(npc, int, int, int, int)] Body End
SETR D4 SP2; Func[int Round(int)] Body Start
LOAD D2 0; return Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 27767 ==
LOAD D2 0
SUBV D2 0.5000
LSHIFTV D2 0
GOTO 27770
LOAD D2 0
ADDV D2 0.5000
LSHIFTV D2 0
POP D5; return End
RETURNFUNC; Func[int Round(int)] Body End
PUSHV 0; Func[void Ghost_Transform(ffc, npc, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0
LOAD D2 0.0004; if() #331 Test
COMPAREV D2 0
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 27791 ==; Test 'if'
LOAD D2 0.0004; if() #331 Body Start
SETR GD10 D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #331 Body End
LOAD D2 0.0003; if() #332 Test
COMPAREV D2 0
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 27816 ==; Test 'if'
LOAD D2 0.0003; if() #332 Body Start
SETR GD11 D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2; if() #332 Body End
LOAD D2 0.0002; if() #333 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 27883 ==; Test 'if'
SETR D2 GD12; if() #333 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
MULTV D2 8
SETV D2 8
PUSHR D2
SETR D2 GD12
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
STORE D2 0
LOAD D2 0.0002
SETR GD12 D2
SETR D2 GD12
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
SETR D2 GD12
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
SETR D2 GD1
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR GD1 D2
SETR D2 GD1
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
SETR D2 GD1
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2; if() #333 Body End
LOAD D2 0.0001; if() #334 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 27950 ==; Test 'if'
SETR D2 GD13; if() #334 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
SUBR D3 D2
SETR D2 D3
MULTV D2 8
SETV D2 8
PUSHR D2
SETR D2 GD13
PUSHR D2
LOAD D2 0.0001
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
STORE D2 0
LOAD D2 0.0001
SETR GD13 D2
SETR D2 GD13
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
SETR D2 GD13
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
SETR D2 GD2
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR GD2 D2
SETR D2 GD2
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETR D2 GD2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2; if() #334 Body End
PUSHR D4
LOAD D2 0.0005; UsrFunc[void Ghost_SetHitOffsets(npc, int, int, int, int)] Params Start
PUSHR D2
PUSHARGSV 0 0.0004; UsrFunc[void Ghost_SetHitOffsets(npc, int, int, int, int)] Params End
CALLFUNC 2.7536; UsrFunc[void Ghost_SetHitOffsets(npc, int, int, int, int)] Call
POP D4
POPARGS D5 0.0007
RETURNFUNC; Func[void Ghost_Transform(ffc, npc, int, int, int, int)] Body End
SETR D4 SP2; Func[void Ghost_Waitframe(ffc, npc)] Body Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHARGSV 1 0.0002; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Params End
CALLFUNC 2.7969; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Call
POP D4
POPARGS D5 0.0002
RETURNFUNC; Func[void Ghost_Waitframe(ffc, npc)] Body End
PUSHV 0; Func[bool Ghost_Waitframe(ffc, npc, bool, bool)] Body Start
SETR D4 SP2
SETV D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_JUMP D2
PUSHR D4; unless() #340 Test
PUSHV 32; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 28126 !=; Test 'unless'
PUSHR D4; if() #161 Test AND unless() #340 Body Start
CALLFUNC 2.7519; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 28089 ==; Test 'if'
SETR D2 GD5; if() #341 Test AND if() #161 Body Start
COMPAREV D2 0
GOTOCMP 28003 !=
PUSHR D4
PUSHARGSV 1 0.0002; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1543; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 28003 !=
SETV D2 0
GOTO 28004
SETV D2 1
COMPAREV D2 0
GOTOCMP 28126 ==; Test 'if'
PUSHR D4; if() #341 Body Start
PUSHV 64; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
STORE D2 0
PUSHR D4
PUSHV 64; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.4996; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP D4
SETR D2 GD5; if() #162 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 28058 ==; Test 'if'
PUSHR D4; if() #162 Body Start
PUSHV 32; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4635; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK D4
PUSHV 0; UsrFunc[void Ghost_Move(int, int, int)] Params Start
PUSHR GD5
PUSHV 2; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 2.6938; UsrFunc[void Ghost_Move(int, int, int)] Call
POP D4
SETR D2 GD5; InlineFunc[int Max(int, int)] Params Start
SUBV D2 0.1600
PUSHVARGR D2
PUSHVARGV -3.2000; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD5 D2
SETR D2 GD5; if() #342 Test
COMPAREV D2 0
GOTOCMP 28048 <=
PUSHR D4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1543; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 28048 !=
SETV D2 1
GOTO 28049
SETV D2 0
COMPAREV D2 0
GOTOCMP 28053 ==; Test 'if'
SETV D2 0; if() #342 Body Start
SETR GD5 D2; if() #342 Body End
PUSHR D4
PUSHV 32; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.4996; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP D4
GOTO 28081; if() #162 Body End
PUSHR D4; if() #162 Else Start
PUSHV 1; UsrFunc[void Ghost_Move(int, int, int)] Params Start
SETR D2 GD5
SUBV2 0 D2
PUSHR D2
PUSHV 2; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 2.6938; UsrFunc[void Ghost_Move(int, int, int)] Call
PEEK D4
PUSHARGSV 1 0.0002; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1543; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 28079 ==; Test 'if'
SETR D2 GD5; InlineFunc[int Max(int, int)] Params Start AND if() #163 Body Start
SUBV D2 0.1600
PUSHVARGR D2
PUSHVARGV -3.2000; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD5 D2
GOTO 28081; if() #163 Body End
SETV D2 0; if() #163 Else Start
SETR GD5 D2; if() #163 Else End
LOAD D2 0; if() #162 Else End AND if() #343 Test
COMPAREV D2 0
GOTOCMP 28126 ==; Test 'if'
PUSHR D4; if() #343 Body Start
PUSHV 64; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4635; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #343 Body End
GOTO 28126; if() #341 Body End AND if() #161 Body End
SETR D2 GD5; if() #344 Test AND if() #161 Else Start
COMPAREV D2 0
GOTOCMP 28097 !=
SETR D2 GD3
COMPAREV D2 0
GOTOCMP 28097 >
SETV D2 0
GOTO 28098
SETV D2 1
COMPAREV D2 0
GOTOCMP 28126 ==; Test 'if'
SETR D2 GD3; if() #164 Test AND if() #344 Body Start
PUSHR D2
SETR D2 GD5
POP D3
ADDR D2 D3
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 28114 ==; Test 'if'
SETV D2 0; if() #164 Body Start
SETR GD3 D2
SETV D2 0
SETR GD5 D2
GOTO 28126; if() #164 Body End
SETR D2 GD3; if() #164 Else Start
PUSHR D2
SETR D2 GD5
POP D3
ADDR D2 D3
SETR GD3 D2
SETR D2 GD5; InlineFunc[int Max(int, int)] Params Start
SUBV D2 0.1600
PUSHVARGR D2
PUSHVARGV -3.2000; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD5 D2; if() #164 Else End
SETR D2 GD6; if() #344 Body End AND if() #161 Else End AND unless() #340 Body End AND if() #345 Test
COMPAREV D2 0
GOTOCMP 28140 !=
SETR D2 GD7
COMPAREV D2 0
GOTOCMP 28140 !=
SETR D2 GD8
COMPAREV D2 0
GOTOCMP 28140 !=
SETR D2 GD9
COMPAREV D2 0
GOTOCMP 28140 !=
SETV D2 0
GOTO 28141
SETV D2 1
COMPAREV D2 0
GOTOCMP 28164 ==; Test 'if'
SETR D2 GD6; if() #345 Body Start
PUSHR D2
SETR D2 GD8
POP D3
ADDR D2 D3
SETR GD6 D2
SETR D2 GD7
PUSHR D2
SETR D2 GD9
POP D3
ADDR D2 D3
SETR GD7 D2
PUSHR D4
PUSHR GD6; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR GD7
PUSHV 2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5023; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
PEEK D4
PUSHR GD4; UsrFunc[void Ghost_ForceDir(int)] Params
CALLFUNC 2.6590; UsrFunc[void Ghost_ForceDir(int)] Call
POP D4; if() #345 Body End
PUSHR D4
LOAD D2 0.0004; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 2.3732; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
PEEK D4
LOAD D2 0.0004; UsrFunc[void __Ghost_WaitframePart1(ffc, npc, bool)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV 0; UsrFunc[void __Ghost_WaitframePart1(ffc, npc, bool)] Params End
CALLFUNC 2.8235; UsrFunc[void __Ghost_WaitframePart1(ffc, npc, bool)] Call
PEEK D4
LOAD D2 0.0004; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Params End
CALLFUNC 2.3082; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Call
PEEK D4
LOAD D2 0.0004; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params End
CALLFUNC 2.3332; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Call
POP D4
SETR D2 GD17
ANDV D2 32
SETR GD17 D2
PUSHR D4; return Start
LOAD D2 0.0004; UsrFunc[bool __Ghost_WaitframePart2(ffc, npc, bool, bool)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[bool __Ghost_WaitframePart2(ffc, npc, bool, bool)] Params End
CALLFUNC 2.8739; UsrFunc[bool __Ghost_WaitframePart2(ffc, npc, bool, bool)] Call
POP D4
POPARGS D5 0.0005; return End
RETURNFUNC; Func[bool Ghost_Waitframe(ffc, npc, bool, bool)] Body End
SETR D4 SP2; Func[bool Ghost_Waitframe(ffc, npc, int, bool)] Body Start
PUSHR D4; unless() #338 Test
LOAD D2 0.0003; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHARGSV 0 0.0002; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Params End
CALLFUNC 2.7969; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 28232 !=; Test 'unless'
PUSHR D4; unless() #338 Body Start
LOAD D2 0.0003; UsrFunc[void Ghost_DeathAnimation(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[void Ghost_DeathAnimation(ffc, npc, int)] Params End
CALLFUNC 2.5896; UsrFunc[void Ghost_DeathAnimation(ffc, npc, int)] Call
POP D4
LOAD D2 0; if() #339 Test
COMPAREV D2 0
GOTOCMP 28230 ==; Test 'if'
QUIT; InlineFunc[void Quit()] Body AND if() #339 Body
SETV D2 0; return Start
GOTO 28233; return End AND unless() #338 Body End
SETV D2 1; return Start
POPARGS D5 0.0004; return End
RETURNFUNC; Func[bool Ghost_Waitframe(ffc, npc, int, bool)] Body End
PUSHARGSV 0 0.0002; Func[void __Ghost_WaitframePart1(ffc, npc, bool)] Body Start
SETR D4 SP2
SETR D2 GD17; if() #347 Test
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 28253 ==; Test 'if'
SETR D2 GD4; if() #347 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_DIR D2
GOTO 28350; if() #347 Body End
LOAD D2 0.0002; if() #348 Test AND if() #347 Else Start
COMPAREV D2 0
GOTOCMP 28262 ==; Test 'if'
LOAD D2 0.0003; if() #348 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_DIR
SETR GD4 D2
GOTO 28350; if() #348 Body End
PUSHR D4; if() #660 Test AND if() #348 Else Start
PUSHV 64; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 28282 ==
SETR D2 GD18
PUSHR D2
SETR D2 GD1
POP D3
COMPARER D3 D2
GOTOCMP 28280 !=
SETR D2 GD19
PUSHR D2
SETR D2 GD2
POP D3
COMPARER D3 D2
GOTOCMP 28282 ==
SETV D2 1
GOTO 28283
SETV D2 0
COMPAREV D2 0
GOTOCMP 28350 ==; Test 'if'
SETR D2 GD1; if() #660 Body Start
PUSHR D2
SETR D2 GD18
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0001
SETR D2 GD2
PUSHR D2
SETR D2 GD19
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0
PUSHR D4; if() #349 Test
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 28319 ==; Test 'if'
PUSHR D4; if() #349 Body Start
LOAD D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int WrapAngle(int)] Params Start AND UsrFunc[int AngleDir8(int)] Params Start
PUSHR D2
LOAD D2 0
SETR D1 D2; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End AND InlineFunc[int WrapAngle(int)] Params End
WRAPRADIANS D2; InlineFunc[int WrapAngle(int)] Body
MULTV D2 57.2958
PUSHR D2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 2.0474; UsrFunc[int AngleDir8(int)] Call
POP D4
SETR GD4 D2
GOTO 28350; if() #349 Body End
LOAD D2 0.0001; InlineFunc[int Abs(int)] Params AND if() #350 Test AND if() #349 Else Start
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0; InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 28340 ==; Test 'if'
LOAD D2 0.0001; if() #351 Test AND if() #350 Body Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 28337 ==; Test 'if'
SETV D2 2; if() #351 Body Start
SETR GD4 D2
GOTO 28350; if() #351 Body End
SETV D2 3; if() #351 Else Start
SETR GD4 D2; if() #351 Else End
GOTO 28350; if() #350 Body End
LOAD D2 0; if() #352 Test AND if() #350 Else Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 28348 ==; Test 'if'
SETV D2 0; if() #352 Body Start
SETR GD4 D2
GOTO 28350; if() #352 Body End
SETV D2 1; if() #352 Else Start
SETR GD4 D2; if() #352 Else End
SETR D2 GD4; if() #350 Else End AND if() #349 Else End AND if() #660 Body End AND if() #348 Else End AND if() #347 Else End
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_DIR D2
SETR D2 GD1
SETR GD18 D2
SETR D2 GD2
SETR GD19 D2
SETR D2 GD10; if() #353 Test
COMPAREV D2 0
GOTOCMP 28371 ==
SETR D2 GD10
COMPAREV D2 1
GOTOCMP 28371 ==
SETV D2 0
GOTO 28372
SETV D2 1
COMPAREV D2 0
GOTOCMP 28395 ==; Test 'if'
LOAD D2 0.0004; if() #661 Test AND if() #353 Body Start
PUSHR D2
POP REFFFC
SETR D2 DATA
PUSHR D2
SETR D2 GD10
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 28491 ==; Test 'if'
SETR D2 GD10; if() #661 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #661 Body End
GOTO 28491; if() #353 Body End
PUSHR D4; if() #354 Test AND if() #353 Else Start
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 28433 ==; Test 'if'
LOAD D2 0.0004; if() #662 Test AND if() #354 Body Start
PUSHR D2
POP REFFFC
SETR D2 DATA
PUSHR D2
SETR D2 GD10
PUSHR D2
SETR D2 GD4
POP D3
ADDR D2 D3
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 28491 ==; Test 'if'
SETR D2 GD10; if() #662 Body Start
PUSHR D2
PUSHR D4
PUSHR GD4; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 2.1619; UsrFunc[int __NormalizeDir(int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #662 Body End
GOTO 28491; if() #354 Body End
PUSHR D4; if() #355 Test AND if() #354 Else Start
PUSHV 256; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 28471 ==; Test 'if'
LOAD D2 0.0004; if() #663 Test AND if() #355 Body Start
PUSHR D2
POP REFFFC
SETR D2 DATA
PUSHR D2
SETR D2 GD10
PUSHR D2
SETR D2 GD4
POP D3
ADDR D2 D3
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 28491 ==; Test 'if'
SETR D2 GD10; if() #663 Body Start
PUSHR D2
PUSHR D4
PUSHR GD4; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 2.1619; UsrFunc[int __NormalizeDir(int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #663 Body End
GOTO 28491; if() #355 Body End
LOAD D2 0.0004; if() #664 Test AND if() #355 Else Start
PUSHR D2
POP REFFFC
SETR D2 DATA
PUSHR D2
SETR D2 GD10
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 28491 ==; Test 'if'
SETR D2 GD10; if() #664 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #664 Body End
LOAD D2 0.0004; if() #355 Else End AND if() #354 Else End AND if() #353 Else End AND if() #665 Test
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
PUSHR D2
SETR D2 GD12
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 28511 ==; Test 'if'
SETR D2 GD12; if() #665 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2; if() #665 Body End
LOAD D2 0.0003; if() #666 Test
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
PUSHR D2
SETR D2 GD12
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 28555 ==; Test 'if'
SETR D2 GD12; if() #666 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
SETR D2 GD12
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_WIDTH D2
SETV D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_OFFSET_X D2; if() #666 Body End
LOAD D2 0.0004; if() #667 Test
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
PUSHR D2
SETR D2 GD13
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 28575 ==; Test 'if'
SETR D2 GD13; if() #667 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2; if() #667 Body End
LOAD D2 0.0003; if() #668 Test
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
PUSHR D2
SETR D2 GD13
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 28619 ==; Test 'if'
SETR D2 GD13; if() #668 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
SETR D2 GD13
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_HEIGHT D2
SETV D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_OFFSET_Y D2; if() #668 Body End
PUSHR D4; if() #669 Test
PUSHV 128; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 28684 ==; Test 'if'
SETR D2 GD3; if() #356 Test AND if() #669 Body Start
COMPAREV D2 32
GOTOCMP 28639 <
LOAD D2 0.0004
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 28639 !=
SETV D2 1
GOTO 28640
SETV D2 0
COMPAREV D2 0
GOTOCMP 28655 ==; Test 'if'
SETV D2 1; if() #356 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2
GOTO 28684; if() #356 Body End
SETR D2 GD3; if() #670 Test AND if() #356 Else Start
COMPAREV D2 32
GOTOCMP 28669 >=
LOAD D2 0.0004
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 28669 ==
SETV D2 1
GOTO 28670
SETV D2 0
COMPAREV D2 0
GOTOCMP 28684 ==; Test 'if'
SETV D2 0; if() #670 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2; if() #670 Body End
SETR D2 GD14; if() #356 Else End AND if() #669 Body End
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHP D2
SETR D2 GD11
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2
SETR D2 GD17; if() #357 Test
ANDV D2 8
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 28718 ==; Test 'if'
SETR D2 GD11; if() #357 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2
GOTO 28732; if() #357 Body End
SETR D2 GD20; if() #671 Test AND if() #357 Else Start
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 28732 ==; Test 'if'
SETR D2 GD11; if() #671 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2; if() #671 Body End
PUSHR D4; if() #357 Else End
LOAD D2 0.0003; UsrFunc[void __Ghost_DrawShadow(npc)] Params Start
PUSHR D2; UsrFunc[void __Ghost_DrawShadow(npc)] Params End
CALLFUNC 2.3167; UsrFunc[void __Ghost_DrawShadow(npc)] Call
POP D4
POPARGS D5 0.0005
RETURNFUNC; Func[void __Ghost_WaitframePart1(ffc, npc, bool)] Body End
PUSHV 0; Func[bool __Ghost_WaitframePart2(ffc, npc, bool, bool)] Body Start
SETR D4 SP2
LOAD D2 0.0003; InlineFunc[bool npc::isValid()] Params AND unless() #672 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 28766 !=; Test 'unless'
LOAD D2 0.0002; if() #673 Test AND unless() #672 Body Start
COMPAREV D2 0
GOTOCMP 28758 ==; Test 'if'
PUSHR D4; if() #673 Body Start
LOAD D2 0.0004; UsrFunc[void __GhCleanUp(ffc)] Params Start
PUSHR D2; UsrFunc[void __GhCleanUp(ffc)] Params End
CALLFUNC 2.6456; UsrFunc[void __GhCleanUp(ffc)] Call
POP D4
SETV D2 0
SETR GD10 D2
PUSHR D4
CALLFUNC 2.4276; UsrFunc[void Ghost_ClearCombos()] Call
POP D4; if() #673 Body End
LOAD D2 0.0001; if() #674 Test
COMPAREV D2 0
GOTOCMP 28762 ==; Test 'if'
QUIT; InlineFunc[void Quit()] Body AND if() #674 Body
SETV D2 0
SETR GD14 D2
SETV D2 0; return Start
GOTO 28890; return End AND unless() #672 Body End
STOREV 0 0
LOAD D2 0.0003; if() #675 Test
PUSHR D2
POP REFNPC
SETR D2 NPCHP
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 28777 ==; Test 'if'
SETV D2 1; if() #675 Body Start
STORE D2 0; if() #675 Body End
LOAD D2 0; unless() #676 Test
COMPAREV D2 0
GOTOCMP 28796 !=; Test 'unless'
PUSHR D4; unless() #676 Body Start
LOAD D2 0.0004; UsrFunc[void Ghost_CheckHit(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[void Ghost_CheckHit(ffc, npc)] Params End
CALLFUNC 2.3866; UsrFunc[void Ghost_CheckHit(ffc, npc)] Call
PEEK D4
LOAD D2 0.0004; UsrFunc[bool Ghost_CheckFreeze(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[bool Ghost_CheckFreeze(ffc, npc)] Params End
CALLFUNC 2.2823; UsrFunc[bool Ghost_CheckFreeze(ffc, npc)] Call
POP D4
COMPAREV D2 0
SETCMP D2 I==
STORE D2 0; unless() #676 Body End
LOAD D2 0.0003
PUSHR D2
POP REFNPC
SETR D2 NPCHP
SETR GD14 D2
LOAD D2 0; if() #677 Test
COMPAREV D2 0
GOTOCMP 28889 ==; Test 'if'
LOAD D2 0.0002; if() #678 Test AND if() #677 Body Start
COMPAREV D2 0
GOTOCMP 28883 ==; Test 'if'
SETV D2 1; if() #678 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
SETV D2 1
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
SETR D2 GD1
PUSHR D2
SETR D2 GD12
SUBV D2 1
MULTV D2 8
SETV D2 8
PUSHR D2
SETR D2 GD12
SUBV D2 1
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
SETR D2 GD2
PUSHR D2
SETR D2 GD13
SUBV D2 1
MULTV D2 8
SETV D2 8
PUSHR D2
SETR D2 GD13
SUBV D2 1
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETR D2 GD3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
PUSHR D4
LOAD D2 0.0004; UsrFunc[void __GhCleanUp(ffc)] Params Start
PUSHR D2; UsrFunc[void __GhCleanUp(ffc)] Params End
CALLFUNC 2.6456; UsrFunc[void __GhCleanUp(ffc)] Call
POP D4
SETV D2 0
SETR GD10 D2; if() #678 Body End
LOAD D2 0.0001; if() #679 Test
COMPAREV D2 0
GOTOCMP 28887 ==; Test 'if'
QUIT; InlineFunc[void Quit()] Body AND if() #679 Body
SETV D2 0; return Start
GOTO 28890; return End AND if() #677 Body End
SETV D2 1; return Start
POPARGS D5 0.0005; return End
RETURNFUNC; Func[bool __Ghost_WaitframePart2(ffc, npc, bool, bool)] Body End
PUSHARGSV 0 0.0006; Func[void __SetUpDrawingArray(ffc, npc, int[])] Body Start
SETR D4 SP2
STOREV 0 0.0005
LOAD D2 0.0008; if() #699 Test
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 28907 ==; Test 'if'
LOAD D2 0.0005; if() #699 Body Start
ORV D2 4
STORE D2 0.0005; if() #699 Body End
LOAD D2 0.0008; if() #700 Test
PUSHR D2
SETV D2 1
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 28919 ==; Test 'if'
LOAD D2 0.0005; if() #700 Body Start
ORV D2 1
STORE D2 0.0005; if() #700 Body End
PUSHR D4; if() #701 Test
LOAD D2 0.0007; UsrFunc[bool __Ghost_IsFlickering(npc)] Params Start
PUSHR D2; UsrFunc[bool __Ghost_IsFlickering(npc)] Params End
CALLFUNC 3.0231; UsrFunc[bool __Ghost_IsFlickering(npc)] Call
POP D4
COMPAREV D2 0
GOTOCMP 28929 ==; Test 'if'
LOAD D2 0.0005; if() #701 Body Start
ORV D2 2
STORE D2 0.0005; if() #701 Body End
LOAD D2 0.0008
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_CSET
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
STOREV 3 0.0004
SETR D2 GD1
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X_OFFSET
POP D3
ADDR D2 D3
STORE D2 0.0003
SETR D2 GD2
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y_OFFSET
POP D3
ADDR D2 D3
PUSHR D2
SETR D2 GD3
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z_OFFSET
POP D3
ADDR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0002
SETR D2 GD25; if() #702 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 29097 ==; Test 'if'
STOREV 1 0.0001; if() #702 Body Start
STOREV 0 0; for() #175 setup
LOAD D2 0; for() #175 LoopTest
PUSHR D2
SETR D2 GD25
PUSHR D2
POP D0
READPODARRAYV D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 29097 ==; for() #175 TestFail?
SETR D2 GD25; for() #175 Body Start
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0003
PUSHR D2
SETR D2 GD25
PUSHR D2
LOAD D2 0.0001
ADDV D2 1
POP D0
READPODARRAYR D2 D2
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 1
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0002
PUSHR D2
SETR D2 GD25
PUSHR D2
LOAD D2 0.0001
ADDV D2 2
POP D0
READPODARRAYR D2 D2
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 2
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETR D2 GD25
PUSHR D2
LOAD D2 0.0001
ADDV D2 3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETR D2 GD25
PUSHR D2
LOAD D2 0.0001
ADDV D2 4
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 4
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0004
ADDV D2 6
STORE D2 0.0004
LOAD D2 0.0001
ADDV D2 6
STORE D2 0.0001
LOAD D2 0.0006
PUSHR D2
POP D0
READPODARRAYV D2 0
ADDV D2 1
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; for() #175 Body End
LOAD D2 0; for() #175 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 28985; for() #175 End
LOAD D2 0.0008; if() #702 Body End AND if(true) #703 [Opt:AlwaysOn]
PUSHR D2
POP REFFFC
SETR D2 DATA
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 1
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 2
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0008
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0008
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 4
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0006
PUSHR D2
POP D0
READPODARRAYV D2 0
ADDV D2 1
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
POPARGS D5 0.0009
RETURNFUNC; Func[void __SetUpDrawingArray(ffc, npc, int[])] Body End
PUSHV 0; Func[void __HideFFCAndWait(ffc)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 DATA
STORE D2 0
SETV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
WAITFRAME; InlineFunc[void Waitframe()] Body
LOAD D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __HideFFCAndWait(ffc)] Body End
SETR D4 SP2; Func[int InFrontX(int, int)] Body Start
PUSHR D4; switch() #21 Key
LOAD D2 0.0001; UsrFunc[int DirNormal(int)] Params Start
PUSHR D2; UsrFunc[int DirNormal(int)] Params End
CALLFUNC 2.0373; UsrFunc[int DirNormal(int)] Call
POP D4
SETR SWITCHKEY D2; Store key
COMPAREV SWITCHKEY 2
GOTOCMP 29207 ==; case '20000'
COMPAREV SWITCHKEY 3
GOTOCMP 29210 ==; case '30000'
GOTO 29213; switch() #21 NoMatch
LOAD D2 0; Case block AND return Start
SUBV D2 16
GOTO 29214; return End
LOAD D2 0; Case block AND return Start
SUBV2 16 D2
GOTO 29214; return End
SETV D2 0; Case block AND return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int InFrontX(int, int)] Body End
SETR D4 SP2; Func[int InFrontY(int, int)] Body Start
PUSHR D4; switch() #22 Key
LOAD D2 0.0001; UsrFunc[int DirNormal(int)] Params Start
PUSHR D2; UsrFunc[int DirNormal(int)] Params End
CALLFUNC 2.0373; UsrFunc[int DirNormal(int)] Call
POP D4
SETR SWITCHKEY D2; Store key
COMPAREV SWITCHKEY 0
GOTOCMP 29228 ==; case '0'
COMPAREV SWITCHKEY 1
GOTOCMP 29231 ==; case '10000'
GOTO 29234; switch() #22 NoMatch
LOAD D2 0; Case block AND return Start
SUBV D2 16
GOTO 29235; return End
LOAD D2 0; Case block AND return Start
SUBV2 16 D2
GOTO 29235; return End
SETV D2 0; Case block AND return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int InFrontY(int, int)] Body End
PUSHV 0; Func[bool IsPit(int)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
POP D0
SETR D2 COMBOTD
STORE D2 0
LOAD D2 0; if() #361 Test
COMPAREV D2 41
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 29251 ==; Test 'if'
SETV D2 1; return Start AND if() #361 Body Start
GOTO 29272; return End AND if() #361 Body End
LOAD D2 0; if() #362 Test
COMPAREV D2 93
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 29258 ==; Test 'if'
SETV D2 1; return Start AND if() #362 Body Start
GOTO 29272; return End AND if() #362 Body End
LOAD D2 0; if() #363 Test
COMPAREV D2 80
GOTOCMP 29266 <
LOAD D2 0
COMPAREV D2 82
GOTOCMP 29266 >
SETV D2 1
GOTO 29267
SETV D2 0
COMPAREV D2 0
GOTOCMP 29271 ==; Test 'if'
SETV D2 1; return Start AND if() #363 Body Start
GOTO 29272; return End AND if() #363 Body End
SETV D2 0; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[bool IsPit(int)] Body End
PUSHARGSV 0 0.0002; Func[lweapon LoadLWeaponOf(int)] Body Start
SETR D4 SP2
STOREV 0 0.0001
SETR D2 LWPNCOUNT; for() #79 setup
STORE D2 0
LOAD D2 0; for() #79 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 29306 ==; for() #79 TestFail?
LOAD D2 0; InlineFunc[lweapon screendata::LoadLWeapon(int)] Params AND for() #79 Body Start
SUBV D2 1; InlineFunc[lweapon screendata::LoadLWeapon(int)] Body Start
LOADLWEAPONR D2
SETR D2 REFLWPN; InlineFunc[lweapon screendata::LoadLWeapon(int)] Body End
STORE D2 0.0001
LOAD D2 0.0001; if() #403 Test
PUSHR D2
POP REFLWPN
SETR D2 LWPNID
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 29302 ==; Test 'if'
LOAD D2 0.0001; return Start AND if() #403 Body Start
GOTO 29308; return End AND if() #403 Body End
LOAD D2 0; for() #79 Body End AND for() #79 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 29279; for() #79 End
STOREV 0 0
LOAD D2 0; return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[lweapon LoadLWeaponOf(int)] Body End
SETR D4 SP2; Func[int OppositeDir(int)] Body Start
LOAD D2 0; if() #456 Test
COMPAREV D2 7
GOTOCMP 29319 <=
LOAD D2 0
COMPAREV D2 16
GOTOCMP 29319 >=
SETV D2 1
GOTO 29320
SETV D2 0
COMPAREV D2 0
GOTOCMP 29327 ==; Test 'if'
LOAD D2 0; return Start AND if() #456 Body Start
ADDV D2 4
MODV D2 8
ADDV D2 8
GOTO 29337; return End AND if() #456 Body End
LOAD D2 0; return Start
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 29335 ==
LOAD D2 0
XORV D2 1
GOTO 29337
LOAD D2 0
XORV D2 3
POP D5; return End
RETURNFUNC; Func[int OppositeDir(int)] Body End
PUSHARGSV 0 0.0003; Func[int RunFFCScript(int, untyped[])] Body Start
SETR D4 SP2
LOAD D2 0.0004; if() #475 Test
COMPAREV D2 0
GOTOCMP 29349 <
LOAD D2 0.0004
COMPAREV D2 511
GOTOCMP 29349 >
SETV D2 0
GOTO 29350
SETV D2 1
COMPAREV D2 0
GOTOCMP 29354 ==; Test 'if'
SETV D2 0; return Start AND if() #475 Body Start
GOTO 29458; return End AND if() #475 Body End
STOREV 0 0.0002
STOREV 1 0.0001; for() #122 setup
LOAD D2 0.0001; for() #122 LoopTest
COMPAREV D2 128
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 29457 ==; for() #122 TestFail?
LOAD D2 0.0001; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #122 Body Start
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0002
LOAD D2 0.0002; if() #476 Test
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
COMPAREV D2 0
GOTOCMP 29393 !=
LOAD D2 0.0002
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 0
GOTOCMP 29382 ==
LOAD D2 0.0002
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 1
GOTOCMP 29393 !=
LOAD D2 0.0002
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 29393 !=
SETV D2 0
GOTO 29394
SETV D2 1
COMPAREV D2 0
GOTOCMP 29453 !=; Test 'if' AND continue 1; AND if() #476 Body
SETV D2 1
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFSCRIPT D2
LOAD D2 0.0003; if() #477 Test
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 29451 ==; Test 'if'
LOAD D2 0.0003; InlineFunc[int SizeOfArray(untyped[])] Params AND InlineFunc[int Min(int, int)] Params Start AND for() #123 setup AND if() #477 Body Start
ARRAYSIZE D2; InlineFunc[int SizeOfArray(untyped[])] Body
PUSHVARGR D2
PUSHVARGV 8; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
SUBV D2 1
STORE D2 0
LOAD D2 0; for() #123 LoopTest
COMPAREV D2 0
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 29451 ==; for() #123 TestFail?
LOAD D2 0.0003; for() #123 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
LOAD D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFINITDD D2; for() #123 Body End
LOAD D2 0; for() #123 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 29426; for() #123 End
LOAD D2 0.0001; if() #477 Body End AND return Start
GOTO 29458; return End AND for() #122 Body End
LOAD D2 0.0001; for() #122 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 29356; for() #122 End
SETV D2 0; return Start
POPARGS D5 0.0005; return End
RETURNFUNC; Func[int RunFFCScript(int, untyped[])] Body End
PUSHARGSV 0 0.0002; Func[int ScreenFlag(int, int)] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 10 0
PUSHR D2
WRITEPODARRAY D2 {3,9,4,6,7,4,4,2,3,7}
POP D2
STORE D2 0
LOAD D2 0.0002; if() #496 Test
COMPAREV D2 0
GOTOCMP 29482 <
LOAD D2 0.0002
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0003
POP D0
READPODARRAYR D2 D2
POP D3
COMPARER D3 D2
GOTOCMP 29482 >=
SETV D2 0
GOTO 29483
SETV D2 1
COMPAREV D2 0
GOTOCMP 29489 ==; Test 'if'
SETV D2 -1; return Start AND if() #496 Body Start
LOAD D3 0
DEALLOCATEMEMR D3
GOTO 29505; return End AND if() #496 Body End
LOAD D2 0.0003; return Start
PUSHR D2
POP D0
SETR D2 SCREENFLAGSD
PUSHR D2
LOAD D2 0.0002
SETV D3 1
LSHIFTR D3 D2
SETR D2 D3
POP D3
ANDR D2 D3
LOAD D3 0
DEALLOCATEMEMR D3
GOTO 29505; return End
LOAD D3 0
DEALLOCATEMEMR D3
POPARGS D5 0.0004
RETURNFUNC; Func[int ScreenFlag(int, int)] Body End
SETR D4 SP2; Func[void SetEWeaponDeathEffect(eweapon, int, int)] Body Start
LOAD D2 0.0001; if() #507 Test
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 29526 ==; Test 'if'
LOAD D2 0; if() #508 Test AND if() #507 Body Start
COMPAREV D2 1
GOTOCMP 29521 <
LOAD D2 0
COMPAREV D2 511
GOTOCMP 29521 >
SETV D2 0
GOTO 29522
SETV D2 1
COMPAREV D2 0
GOTOCMP 29526 ==; Test 'if'
SETV D2 1; if() #508 Body Start
STORE D2 0.0001; if() #508 Body End
LOAD D2 0.0001; if() #507 Body End
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 13
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 14
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0002
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ORV D2 512
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
POPARGS D5 0.0003
RETURNFUNC; Func[void SetEWeaponDeathEffect(eweapon, int, int)] Body End
SETR D4 SP2; Func[void SetEWeaponLifespan(eweapon, int, int)] Body Start
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 11
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 12
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0002
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ORV D2 512
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
POPARGS D5 0.0003
RETURNFUNC; Func[void SetEWeaponLifespan(eweapon, int, int)] Body End
SETR D4 SP2; Func[void SetEWeaponMovement(eweapon, int, int, int)] Body Start
LOAD D2 0.0003; if() #512 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 256
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 29660 ==; Test 'if'
LOAD D2 0.0003; if() #512 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0003
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #512 Body End
SETV D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 8
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 10
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0003
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ORV D2 512
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0002; if() #213 Test
COMPAREV D2 4
GOTOCMP 29735 ==
LOAD D2 0.0002
COMPAREV D2 6
GOTOCMP 29735 ==
SETV D2 0
GOTO 29736
SETV D2 1
COMPAREV D2 0
GOTOCMP 29785 ==; Test 'if'
LOAD D2 0.0003; if() #214 Test AND if() #213 Body Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 256
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 29769 ==; Test 'if'
LOAD D2 0.0003; if() #214 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 29890; if() #214 Body End
LOAD D2 0.0003; if() #214 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #214 Else End
GOTO 29890; if() #213 Body End
LOAD D2 0.0002; if() #215 Test AND if() #213 Else Start
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 29852 ==; Test 'if'
LOAD D2 0.0003; if() #215 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001; if() #513 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 29890 ==; Test 'if'
LOAD D2 0.0003; if() #216 Test AND if() #513 Body Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 256
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 29835 ==; Test 'if'
SETV D2 -1; if() #216 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 29890; if() #216 Body End
PUSHR D4; if() #216 Else Start
LOAD D2 0.0003; UsrFunc[int __GetEWeaponThrowHeight(eweapon)] Params Start
PUSHR D2; UsrFunc[int __GetEWeaponThrowHeight(eweapon)] Params End
CALLFUNC 2.9892; UsrFunc[int __GetEWeaponThrowHeight(eweapon)] Call
POP D4
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #216 Else End
GOTO 29890; if() #513 Body End AND if() #215 Body End
LOAD D2 0.0002; if() #514 Test AND if() #215 Else Start
COMPAREV D2 19
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 29890 ==; Test 'if'
LOAD D2 0.0001; if() #514 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 0.1600
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #514 Body End
POPARGS D5 0.0004; if() #215 Else End AND if() #213 Else End
RETURNFUNC; Func[void SetEWeaponMovement(eweapon, int, int, int)] Body End
PUSHARGSV 0 0.0005; Func[int __GetEWeaponThrowHeight(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0005
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
STORE D2 0.0004
LOAD D2 0.0004; if() #593 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 29907 ==; Test 'if'
SETV D2 1; return Start AND if() #593 Body Start
GOTO 30008; return End AND if() #593 Body End
LOAD D2 0.0005; InlineFunc[int Distance(int, int, int, int)] Params Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_WIDTH
DIVV D2 2
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_HEIGHT
DIVV D2 2
POP D3
ADDR D2 D3
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0003
LOAD D2 0.0003; if() #594 Test
COMPAREV D2 1
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 29956 ==; Test 'if'
SETV D2 1; return Start AND if() #594 Body Start
GOTO 30008; return End AND if() #594 Body End
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0004
POP D3
DIVR D3 D2
SETR D2 D3
STORE D2 0.0002
STOREV 0 0.0001
LOAD D2 0.0001; while() #5 Test
COMPAREV D2 3.2000
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 29983 ==; Test 'while'
LOAD D2 0.0001; while() #5 Body Start
ADDV D2 0.1600
STORE D2 0.0001
LOAD D2 0.0002
SUBV D2 2
STORE D2 0.0002
LOAD D2 0.0002; if() #595 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 29964 ==; Test 'if'
LOAD D2 0.0001; return Start AND if() #595 Body Start
GOTO 30008; return End AND if() #595 Body End
GOTO 29964; while() #5 Body End AND while() #5 End
STOREV 0 0
LOAD D2 0.0002; while() #6 Test
PUSHR D2
LOAD D2 0
DIVV D2 3.2000
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 30007 ==; Test 'while'
LOAD D2 0.0001; while() #6 Body Start
ADDV D2 0.1600
STORE D2 0.0001
LOAD D2 0
PUSHR D2
LOAD D2 0.0001
SUBV D2 3.2000
POP D3
ADDR D2 D3
STORE D2 0
LOAD D2 0.0002
SUBV D2 2
STORE D2 0.0002; while() #6 Body End
GOTO 29984; while() #6 End
LOAD D2 0.0001; return Start
POPARGS D5 0.0006; return End
RETURNFUNC; Func[int __GetEWeaponThrowHeight(eweapon)] Body End
SETR D4 SP2; Func[int Sign(int)] Body Start
LOAD D2 0; if() #242 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 30018 ==; Test 'if'
SETV D2 1; return Start AND if() #242 Body Start
GOTO 30026; return End AND if() #242 Body End
LOAD D2 0; if() #243 Test AND if() #242 Else Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 30025 ==; Test 'if'
SETV D2 -1; return Start AND if() #243 Body Start
GOTO 30026; return End AND if() #243 Body End
SETV D2 0; return Start AND if() #243 Else Start
POP D5; return End AND if() #243 Else End AND if() #242 Else End
RETURNFUNC; Func[int Sign(int)] Body End
SETR D4 SP2; Func[void __DeathAnimEnd(ffc, npc)] Body Start
LOAD D2 0; InlineFunc[bool npc::isValid()] Params AND if() #582 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 30087 ==; Test 'if'
SETV D2 -1000; if() #582 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHP D2
SETV D2 1024
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
SETR D2 GD12
SUBV D2 1
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
SETR D2 GD13
SUBV D2 1
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2; if() #582 Body End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void __GhCleanUp(ffc)] Params Start
PUSHR D2; UsrFunc[void __GhCleanUp(ffc)] Params End
CALLFUNC 2.6456; UsrFunc[void __GhCleanUp(ffc)] Call
POP D4
SETV D2 0
SETR GD10 D2
PUSHR D4
CALLFUNC 2.4276; UsrFunc[void Ghost_ClearCombos()] Call
POP D4
POPARGS D5 0.0002
RETURNFUNC; Func[void __DeathAnimEnd(ffc, npc)] Body End
PUSHV 0; Func[void __DeathAnimSFX(int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0002; InlineFunc[npc screendata::CreateNPC(int)] Params
CREATENPCR D2; InlineFunc[npc screendata::CreateNPC(int)] Body Start
SETR D2 REFNPC; InlineFunc[npc screendata::CreateNPC(int)] Body End
STORE D2 0
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
SETV D2 176
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCITEMSET D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHP D2
SETV D2 65536
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
POPARGS D5 0.0003
RETURNFUNC; Func[void __DeathAnimSFX(int, int)] Body End
SETR D4 SP2; Func[void __DeathAnimStart(ffc, npc)] Body Start
SETR D2 GD11
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD2 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD2 D2
SETV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHP D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFNPC
SETR NPCCOLLDET D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCBGSFX D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DeathAnimStart(ffc, npc)] Body End
SETR D4 SP2; Func[bool __Ghost_IsFlickering(npc)] Body Start
LOAD D2 0; if() #627 Test
PUSHR D2
POP REFNPC
SETR D2 NPCMFLAGS
ANDV D2 128
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 30243 ==; Test 'if'
SETV D2 1; return Start AND if() #627 Body Start
GOTO 30244; return End AND if() #627 Body End
SETV D2 0; return Start
POP D5; return End
RETURNFUNC; Func[bool __Ghost_IsFlickering(npc)] Body End
SETR D4 SP2; Func[int __Ghost_LinedUp(int, bool)] Body Start
SETV D2 0.0001; InlineFunc[int Abs(int)] Params Start AND if() #326 Test
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
SETR D2 GD1
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 30281 ==; Test 'if'
SETV D2 0.0001; if() #327 Test AND if() #326 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
SETR D2 GD2
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 30278 ==; Test 'if'
SETV D2 0; return Start AND if() #327 Body Start
GOTO 30393; return End
GOTO 30314; if() #327 Body End
SETV D2 1; return Start AND if() #327 Else Start
GOTO 30393; return End AND if() #327 Else End
GOTO 30314; if() #326 Body End
SETV D2 0.0001; InlineFunc[int Abs(int)] Params Start AND if() #629 Test AND if() #326 Else Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
SETR D2 GD2
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 30314 ==; Test 'if'
SETV D2 0.0001; if() #328 Test AND if() #629 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
SETR D2 GD1
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 30312 ==; Test 'if'
SETV D2 2; return Start AND if() #328 Body Start
GOTO 30393; return End
GOTO 30314; if() #328 Body End
SETV D2 3; return Start AND if() #328 Else Start
GOTO 30393; return End AND if() #328 Else End
LOAD D2 0; if() #629 Body End AND if() #326 Else End AND if() #630 Test
COMPAREV D2 0
GOTOCMP 30392 ==; Test 'if'
SETV D2 0.0001; InlineFunc[int Abs(int)] Params Start AND if() #631 Test AND if() #630 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
SETR D2 GD1
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
SETV D2 0.0001; InlineFunc[int Abs(int)] Params Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
SETR D2 GD2
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 30392 ==; Test 'if'
SETV D2 0.0001; if() #329 Test AND if() #631 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
SETR D2 GD2
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 30376 ==; Test 'if'
SETV D2 0.0001; if() #330 Test AND if() #329 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
SETR D2 GD1
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 30373 ==; Test 'if'
SETV D2 4; return Start AND if() #330 Body Start
GOTO 30393; return End
GOTO 30392; if() #330 Body End
SETV D2 5; return Start AND if() #330 Else Start
GOTO 30393; return End AND if() #330 Else End
GOTO 30392; if() #329 Body End
SETV D2 0.0001; if() #331 Test AND if() #329 Else Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
SETR D2 GD1
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 30390 ==; Test 'if'
SETV D2 6; return Start AND if() #331 Body Start
GOTO 30393; return End
GOTO 30392; if() #331 Body End
SETV D2 7; return Start AND if() #331 Else Start
GOTO 30393; return End AND if() #331 Else End
SETV D2 -1; if() #329 Else End AND if() #631 Body End AND if() #630 Body End AND return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int __Ghost_LinedUp(int, bool)] Body End
SETR D4 SP2; Func[void EZB_AddAttack(ffc, npc, int, int, int)] Body Start
LOAD D2 0.0001; if() #831 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 30516 !=; Test 'if' AND return (Void) AND if() #831 Body
LOAD D2 0.0001; if() #832 Test
COMPAREV D2 91
GOTOCMP 30409 <
LOAD D2 0.0001
COMPAREV D2 93
GOTOCMP 30409 >
SETV D2 1
GOTO 30410
SETV D2 0
COMPAREV D2 0
GOTOCMP 30493 ==; Test 'if'
SETV D2 0; if() #832 Body Start
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 315 D2
LOAD D2 0.0003
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 317 D2
LOAD D2 0.0001; if() #445 Test
COMPAREV D2 91
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 30449 ==; Test 'if'
SETV D2 300; if() #445 Body Start
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 316 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 317
MULTV D2 2
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 318 D2
GOTO 30516; if() #445 Body End
LOAD D2 0.0001; if() #446 Test AND if() #445 Else Start
COMPAREV D2 92
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 30471 ==; Test 'if'
SETV D2 600; if() #446 Body Start
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 316 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 317
MULTV D2 3
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 318 D2
GOTO 30516; if() #446 Body End
LOAD D2 0.0001; if() #833 Test AND if() #446 Else Start
COMPAREV D2 93
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 30516 ==; Test 'if'
SETV D2 900; if() #833 Body Start
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 316 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 317
MULTV D2 4
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 318 D2; if() #833 Body End
GOTO 30516; if() #446 Else End AND if() #445 Else End AND return (Void) AND if() #832 Body End
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 0
ADDV D2 1
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 0
ADDV D2 1
PUSHR D2
LOAD D2 0
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
POPARGS D5 0.0005
RETURNFUNC; Func[void EZB_AddAttack(ffc, npc, int, int, int)] Body End
PUSHV 0; Func[void EZB_AddSummon(npc, npc)] Body Start
SETR D4 SP2
STOREV 0 0; for() #219 setup
LOAD D2 0; for() #219 LoopTest
COMPAREV D2 256
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 30548 ==; for() #219 TestFail?
LOAD D2 0.0001; InlineFunc[bool npc::isValid()] Params Start AND unless() #834 Test AND for() #219 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2; InlineFunc[bool npc::isValid()] Params End
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 30544 !=; Test 'unless'
LOAD D2 0.0002; unless() #834 Body Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
GOTO 30548; return (Void) AND unless() #834 Body End
LOAD D2 0; for() #219 Body End AND for() #219 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 30521; for() #219 End
POPARGS D5 0.0003
RETURNFUNC; Func[void EZB_AddSummon(npc, npc)] Body End
SETR D4 SP2; Func[void EZB_AddTransformation(ffc, npc, int, int, int)] Body Start
LOAD D2 0.0001; if() #835 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 30579 !=; Test 'if' AND return (Void) AND if() #835 Body
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 100
ADDV D2 101
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 100
ADDV D2 1
PUSHR D2
LOAD D2 0
SETR D0 D2
POP D2
WRITEPODARRAYVR 100 D2
POPARGS D5 0.0005
RETURNFUNC; Func[void EZB_AddTransformation(ffc, npc, int, int, int)] Body End
PUSHV 0; Func[int EZB_AngDiff(int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0
LOAD D2 0; if() #447 Test
COMPAREV D2 180
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 30599 ==; Test 'if'
LOAD D2 0; if() #447 Body Start
SUBV D2 360
STORE D2 0
GOTO 30607; if() #447 Body End
LOAD D2 0; if() #836 Test AND if() #447 Else Start
COMPAREV D2 -180
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 30607 ==; Test 'if'
LOAD D2 0; if() #836 Body Start
ADDV D2 360
STORE D2 0; if() #836 Body End
LOAD D2 0; if() #447 Else End AND return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[int EZB_AngDiff(int, int)] Body End
PUSHV 0; Func[int EZB_AngleDir(ffc, npc, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0
LOAD D2 0; if() #448 Test
ANDV D2 2
COMPAREV D2 0
GOTOCMP 30627 ==; Test 'if'
PUSHR D4; return Start AND if() #448 Body Start
LOAD D2 0.0001; UsrFunc[int AngleDir8(int)] Params Start
PUSHR D2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 2.0474; UsrFunc[int AngleDir8(int)] Call
POP D4
GOTO 30632; return End AND if() #448 Body End
PUSHR D4; return Start AND if() #448 Else Start
LOAD D2 0.0001; UsrFunc[int AngleDir4(int)] Params Start
PUSHR D2; UsrFunc[int AngleDir4(int)] Params End
CALLFUNC 2.0431; UsrFunc[int AngleDir4(int)] Call
POP D4
POPARGS D5 0.0005; return End AND if() #448 Else End
RETURNFUNC; Func[int EZB_AngleDir(ffc, npc, int, int)] Body End
PUSHARGSV 0 0.0005; Func[int EZB_BarrierShift_TransformAnimSize(npc, int)] Body Start
SETR D4 SP2
STOREV 0 0.0004
LOAD D2 0.0005; if() #837 Test
PUSHR D2
POP D0
READPODARRAYV D2 201
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 30647 ==; Test 'if'
SETV D2 100; if() #837 Body Start
STORE D2 0.0004; if() #837 Body End
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
ADDV D2 11
ADDV D2 6
POP D0
READPODARRAYR D2 D2
STORE D2 0.0003
LOAD D2 0.0003
ANDV D2 15
STORE D2 0.0002
LOAD D2 0.0003
RSHIFTV D2 4
ANDV D2 15
STORE D2 0.0001
LOAD D2 0.0001; if() #838 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 30669 ==; Test 'if'
LOAD D2 0.0002; if() #838 Body Start
STORE D2 0.0001; if() #838 Body End
PUSHR D4
LOAD D2 0.0002; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 4; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0687; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0002
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 4; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0687; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0001
LOAD D2 0.0002; InlineFunc[int Max(int, int)] Params Start AND return Start
PUSHVARGR D2
LOAD D2 0.0001
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POPARGS D5 0.0007; return End
RETURNFUNC; Func[int EZB_BarrierShift_TransformAnimSize(npc, int)] Body End
PUSHARGSV 0 0.0002; Func[void EZB_Barriershift_Load(npc, int, bool, bool)] Body Start
SETR D4 SP2
STOREV 0 0.0001
STOREV 0 0
LOAD D2 0.0004; if() #839 Test
PUSHR D2
POP D0
READPODARRAYV D2 201
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 30706 ==; Test 'if'
SETV D2 100; if() #839 Body Start
STORE D2 0; if() #839 Body End
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
SETR GD11 D2
LOAD D2 0.0003; unless() #840 Test
COMPAREV D2 0
GOTOCMP 30885 !=; Test 'unless'
LOAD D2 0.0004; unless() #840 Body Start
PUSHR D2
LOAD D2 0
ADDV D2 1
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCDP D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
ADDV D2 2
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCWDP D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
ADDV D2 3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHUNGER D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
ADDV D2 4
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCRATE D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
ADDV D2 5
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHALTRATE D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
ADDV D2 6
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHOMING D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
ADDV D2 7
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCSTEP D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
ADDV D2 8
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCWEAPON D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
ADDV D2 9
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCITEMSET D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
ADDV D2 10
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCBGSFX D2
SETV D2 0; for() #220 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #220 LoopTest
COMPAREV D2 11
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 30885 ==; for() #220 TestFail?
LOAD D2 0.0004; for() #220 Body Start
PUSHR D2
LOAD D2 0
ADDV D2 11
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0001
ADDV D2 300
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #220 Body End
LOAD D2 0.0001; for() #220 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 30857; for() #220 End
SETV D2 0; unless() #840 Body End AND for() #221 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #221 LoopTest
COMPAREV D2 18
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 30917 ==; for() #221 TestFail?
LOAD D2 0.0004; for() #221 Body Start
PUSHR D2
LOAD D2 0
ADDV D2 22
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
LOAD D2 0.0001
PUSHR D2
POP D0
POP D2
POP REFNPC
SETR NPCDEFENSED D2; for() #221 Body End
LOAD D2 0.0001; for() #221 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 30887; for() #221 End
LOAD D2 0.0002; if() #841 Test
COMPAREV D2 0
GOTOCMP 30939 ==; Test 'if'
LOAD D2 0.0004; if() #841 Body Start
PUSHR D2
LOAD D2 0
ADDV D2 40
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHP D2
LOAD D2 0.0005
PUSHR D2
POP REFNPC
SETR D2 NPCHP
SETR GD14 D2; if() #841 Body End
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
ADDV D2 41
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0004
SETR D0 D2
POP D2
WRITEPODARRAYVR 312 D2
LOAD D2 0.0004; if() #449 Test
PUSHR D2
POP D0
READPODARRAYV D2 201
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 30965 ==; Test 'if'
SETV D2 1; if() #449 Body Start
PUSHR D2
LOAD D2 0.0004
SETR D0 D2
POP D2
WRITEPODARRAYVR 201 D2
GOTO 30971; if() #449 Body End
SETV D2 0; if() #449 Else Start
PUSHR D2
LOAD D2 0.0004
SETR D0 D2
POP D2
WRITEPODARRAYVR 201 D2; if() #449 Else End
POPARGS D5 0.0006
RETURNFUNC; Func[void EZB_Barriershift_Load(npc, int, bool, bool)] Body End
PUSHARGSV 0 0.0002; Func[void EZB_Barriershift_Store(npc, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0001
PUSHR D4
LOAD D2 0.0003; UsrFunc[npc CreateNPCAt(int, int, int)] Params Start
PUSHR D2
PUSHV 128
PUSHV -1000; UsrFunc[npc CreateNPCAt(int, int, int)] Params End
CALLFUNC 2.0762; UsrFunc[npc CreateNPCAt(int, int, int)] Call
POP D4
STORE D2 0
SETR D2 GD11
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCDP
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCWDP
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCHUNGER
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 4 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 7 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCWEAPON
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 8 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCITEMSET
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 9 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCBGSFX
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 10 D2
SETV D2 0; for() #222 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #222 LoopTest
COMPAREV D2 11
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 31107 ==; for() #222 TestFail?
LOAD D2 0.0004; for() #222 Body Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
ADDV D2 11
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #222 Body End
LOAD D2 0.0001; for() #222 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 31082; for() #222 End
SETV D2 0; for() #223 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #223 LoopTest
COMPAREV D2 18
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 31134 ==; for() #223 TestFail?
LOAD D2 0.0004; for() #223 Body Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDEFENSED
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
ADDV D2 22
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #223 Body End
LOAD D2 0.0001; for() #223 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 31109; for() #223 End
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCHP
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 40 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 41 D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_CSET
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 100 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCDP
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 101 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCWDP
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 102 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCHUNGER
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 103 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 104 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 105 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 106 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 107 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCWEAPON
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 108 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCITEMSET
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 109 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCBGSFX
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 110 D2
SETV D2 0; for() #224 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #224 LoopTest
COMPAREV D2 11
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 31278 ==; for() #224 TestFail?
LOAD D2 0; for() #224 Body Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
ADDV D2 111
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #224 Body End
LOAD D2 0.0001; for() #224 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 31253; for() #224 End
SETV D2 0; for() #225 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #225 LoopTest
COMPAREV D2 18
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 31305 ==; for() #225 TestFail?
LOAD D2 0; for() #225 Body Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDEFENSED
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
ADDV D2 122
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #225 Body End
LOAD D2 0.0001; for() #225 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 31280; for() #225 End
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCHP
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 140 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 141 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 201 D2
SETV D2 -1000
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHP D2
SETV D2 -1000
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
SETV D2 -1000
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCITEMSET D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFNPC
SETR NPCCOLLDET D2
SETV D2 65536
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
POPARGS D5 0.0005
RETURNFUNC; Func[void EZB_Barriershift_Store(npc, int, int)] Body End
PUSHARGSV 0 0.0002; Func[bool EZB_CanMoveAngle(int)] Body Start
SETR D4 SP2
PUSHR D4
PUSHV 10; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0002
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7499; UsrFunc[int VectorX(int, int)] Call
POP D4
STORE D2 0.0001
PUSHR D4
PUSHV 10; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0002
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7509; UsrFunc[int VectorY(int, int)] Call
POP D4
STORE D2 0
LOAD D2 0.0001; if() #842 Test
COMPAREV D2 0
GOTOCMP 31416 >=
PUSHR D4
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1543; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 31429 ==
LOAD D2 0.0001
COMPAREV D2 0
GOTOCMP 31427 <=
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1543; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 31429 ==
SETV D2 0
GOTO 31430
SETV D2 1
COMPAREV D2 0
GOTOCMP 31434 ==; Test 'if'
SETV D2 0; return Start AND if() #842 Body Start
GOTO 31463; return End AND if() #842 Body End
LOAD D2 0; if() #843 Test
COMPAREV D2 0
GOTOCMP 31445 >=
PUSHR D4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1543; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 31457 ==
LOAD D2 0
COMPAREV D2 0
GOTOCMP 31455 <=
PUSHR D4
PUSHARGSV 1 0.0002; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1543; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 31457 ==
SETV D2 0
GOTO 31458
SETV D2 1
COMPAREV D2 0
GOTOCMP 31462 ==; Test 'if'
SETV D2 0; return Start AND if() #843 Body Start
GOTO 31463; return End AND if() #843 Body End
SETV D2 1; return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[bool EZB_CanMoveAngle(int)] Body End
PUSHV 0; Func[bool EZB_CanMoveAtPos(int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0
LOAD D2 0.0001; if() #450 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31519 ==; Test 'if'
SETV D2 0; for() #226 setup AND if() #450 Body Start
STORE D2 0
LOAD D2 0; for() #226 LoopTest
PUSHR D2
LOAD D2 0.0003
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 31677 ==; for() #226 TestFail?
PUSHR D4; unless() #844 Test AND for() #226 Body Start
LOAD D2 0.0005; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params Start
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
SUBV D2 1
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params End
CALLFUNC 2.2474; UsrFunc[bool Ghost_CanMovePixel(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 31500 !=; Test 'unless'
SETV D2 0; return Start AND unless() #844 Body Start
GOTO 31678; return End AND unless() #844 Body End
LOAD D2 0; if() #845 Test
PUSHR D2
LOAD D2 0.0003
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31677 !=; Test 'if' AND break 1; AND if() #845 Body
LOAD D2 0; for() #226 Body End AND for() #226 LoopIncrement AND InlineFunc[int Min(int, int)] Params Start
ADDV D2 8
PUSHVARGR D2
LOAD D2 0.0003
SUBV D2 1
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0
GOTO 31475; for() #226 End
GOTO 31677; if() #450 Body End
LOAD D2 0.0001; if() #451 Test AND if() #450 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31573 ==; Test 'if'
SETV D2 0; for() #227 setup AND if() #451 Body Start
STORE D2 0
LOAD D2 0; for() #227 LoopTest
PUSHR D2
LOAD D2 0.0003
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 31677 ==; for() #227 TestFail?
PUSHR D4; unless() #846 Test AND for() #227 Body Start
LOAD D2 0.0005; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params Start
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params End
CALLFUNC 2.2474; UsrFunc[bool Ghost_CanMovePixel(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 31554 !=; Test 'unless'
SETV D2 0; return Start AND unless() #846 Body Start
GOTO 31678; return End AND unless() #846 Body End
LOAD D2 0; if() #847 Test
PUSHR D2
LOAD D2 0.0003
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31677 !=; Test 'if' AND break 1; AND if() #847 Body
LOAD D2 0; for() #227 Body End AND for() #227 LoopIncrement AND InlineFunc[int Min(int, int)] Params Start
ADDV D2 8
PUSHVARGR D2
LOAD D2 0.0003
SUBV D2 1
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0
GOTO 31526; for() #227 End
GOTO 31677; if() #451 Body End
LOAD D2 0.0001; if() #452 Test AND if() #451 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31624 ==; Test 'if'
SETV D2 0; for() #228 setup AND if() #452 Body Start
STORE D2 0
LOAD D2 0; for() #228 LoopTest
PUSHR D2
LOAD D2 0.0002
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 31677 ==; for() #228 TestFail?
PUSHR D4; unless() #848 Test AND for() #228 Body Start
LOAD D2 0.0005; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params Start
SUBV D2 1
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params End
CALLFUNC 2.2474; UsrFunc[bool Ghost_CanMovePixel(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 31605 !=; Test 'unless'
SETV D2 0; return Start AND unless() #848 Body Start
GOTO 31678; return End AND unless() #848 Body End
LOAD D2 0; if() #849 Test
PUSHR D2
LOAD D2 0.0002
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31677 !=; Test 'if' AND break 1; AND if() #849 Body
LOAD D2 0; for() #228 Body End AND for() #228 LoopIncrement AND InlineFunc[int Min(int, int)] Params Start
ADDV D2 8
PUSHVARGR D2
LOAD D2 0.0002
SUBV D2 1
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0
GOTO 31580; for() #228 End
GOTO 31677; if() #452 Body End
LOAD D2 0.0001; if() #850 Test AND if() #452 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31677 ==; Test 'if'
SETV D2 0; for() #229 setup AND if() #850 Body Start
STORE D2 0
LOAD D2 0; for() #229 LoopTest
PUSHR D2
LOAD D2 0.0002
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 31677 ==; for() #229 TestFail?
PUSHR D4; unless() #851 Test AND for() #229 Body Start
LOAD D2 0.0005; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params End
CALLFUNC 2.2474; UsrFunc[bool Ghost_CanMovePixel(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 31659 !=; Test 'unless'
SETV D2 0; return Start AND unless() #851 Body Start
GOTO 31678; return End AND unless() #851 Body End
LOAD D2 0; if() #852 Test
PUSHR D2
LOAD D2 0.0002
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31677 !=; Test 'if' AND break 1; AND if() #852 Body
LOAD D2 0; for() #229 Body End AND for() #229 LoopIncrement AND InlineFunc[int Min(int, int)] Params Start
ADDV D2 8
PUSHVARGR D2
LOAD D2 0.0002
SUBV D2 1
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0
GOTO 31631; for() #229 End
SETV D2 1; if() #850 Body End AND if() #452 Else End AND if() #451 Else End AND if() #450 Else End AND return Start
POPARGS D5 0.0006; return End
RETURNFUNC; Func[bool EZB_CanMoveAtPos(int, int, int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[bool EZB_CanPlace(ffc, npc, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0004; for() #230 setup
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_OFFSET_X
STORE D2 0.0001
LOAD D2 0.0001; for() #230 LoopTest
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_OFFSET_X
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_WIDTH
POP D3
ADDR D2 D3
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 31825 ==; for() #230 TestFail?
LOAD D2 0.0004; for() #231 setup AND for() #230 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_OFFSET_Y
STORE D2 0
LOAD D2 0; for() #231 LoopTest
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_OFFSET_Y
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_HEIGHT
POP D3
ADDR D2 D3
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 31787 ==; for() #231 TestFail?
PUSHR D4; unless() #853 Test AND for() #231 Body Start
LOAD D2 0.0003; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params Start
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params End
CALLFUNC 2.2474; UsrFunc[bool Ghost_CanMovePixel(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 31749 !=; Test 'unless'
SETV D2 0; return Start AND unless() #853 Body Start
GOTO 31826; return End AND unless() #853 Body End
LOAD D2 0; if() #854 Test
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_OFFSET_Y
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_HEIGHT
POP D3
ADDR D2 D3
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31787 !=; Test 'if' AND break 1; AND if() #854 Body
LOAD D2 0; for() #231 Body End AND for() #231 LoopIncrement AND InlineFunc[int Min(int, int)] Params Start
ADDV D2 8
PUSHVARGR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_OFFSET_Y
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_HEIGHT
POP D3
ADDR D2 D3
SUBV D2 1
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0
GOTO 31711; for() #231 End
LOAD D2 0.0001; if() #855 Test
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_OFFSET_X
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_WIDTH
POP D3
ADDR D2 D3
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31825 !=; Test 'if' AND break 1; AND if() #855 Body
LOAD D2 0.0001; for() #230 Body End AND for() #230 LoopIncrement AND InlineFunc[int Min(int, int)] Params Start
ADDV D2 8
PUSHVARGR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_OFFSET_X
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_WIDTH
POP D3
ADDR D2 D3
SUBV D2 1
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0001
GOTO 31687; for() #230 End
SETV D2 1; return Start
POPARGS D5 0.0006; return End
RETURNFUNC; Func[bool EZB_CanPlace(ffc, npc, int, int)] Body End
PUSHARGSV 0 0.0002; Func[bool EZB_CanPlace(ffc, npc, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0001; for() #232 setup
LOAD D2 0.0001; for() #232 LoopTest
PUSHR D2
LOAD D2 0.0003
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 31905 ==; for() #232 TestFail?
STOREV 0 0; for() #233 setup AND for() #232 Body Start
LOAD D2 0; for() #233 LoopTest
PUSHR D2
LOAD D2 0.0002
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 31887 ==; for() #233 TestFail?
PUSHR D4; unless() #856 Test AND for() #233 Body Start
LOAD D2 0.0005; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params Start
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params End
CALLFUNC 2.2474; UsrFunc[bool Ghost_CanMovePixel(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 31869 !=; Test 'unless'
SETV D2 0; return Start AND unless() #856 Body Start
GOTO 31906; return End AND unless() #856 Body End
LOAD D2 0; if() #857 Test
PUSHR D2
LOAD D2 0.0002
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31887 !=; Test 'if' AND break 1; AND if() #857 Body
LOAD D2 0; for() #233 Body End AND for() #233 LoopIncrement AND InlineFunc[int Min(int, int)] Params Start
ADDV D2 8
PUSHVARGR D2
LOAD D2 0.0002
SUBV D2 1
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0
GOTO 31841; for() #233 End
LOAD D2 0.0001; if() #858 Test
PUSHR D2
LOAD D2 0.0003
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31905 !=; Test 'if' AND break 1; AND if() #858 Body
LOAD D2 0.0001; for() #232 Body End AND for() #232 LoopIncrement AND InlineFunc[int Min(int, int)] Params Start
ADDV D2 8
PUSHVARGR D2
LOAD D2 0.0003
SUBV D2 1
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0001
GOTO 31831; for() #232 End
SETV D2 1; return Start
POPARGS D5 0.0008; return End
RETURNFUNC; Func[bool EZB_CanPlace(ffc, npc, int, int, int, int)] Body End
PUSHV 0; Func[void EZB_DamageLink(int)] Body Start
SETR D4 SP2
PUSHR D4
PUSHV 40; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
PUSHR D4
SETV D2 0.0001; UsrFunc[int InFrontX(int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR
PUSHV 12; UsrFunc[int InFrontX(int, int)] Params End
CALLFUNC 2.9195; UsrFunc[int InFrontX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
PUSHR D4
SETV D2 0.0001; UsrFunc[int InFrontY(int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR
PUSHV 12; UsrFunc[int InFrontY(int, int)] Params End
CALLFUNC 2.9216; UsrFunc[int InFrontY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHARGSV 0 0.0002
LOAD D2 0.0001
PUSHR D2
PUSHARGSV -1 0.0002
PUSHV 1; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 2.0845; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
STORE D2 0
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_DIR
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_DIR D2
SETV D2 -1000
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Params Start
PUSHR D2
PUSHARGSV 1 0.0002; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Params End
CALLFUNC 2.9571; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Call
PEEK D4
LOAD D2 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 2.9507; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4
POPARGS D5 0.0002
RETURNFUNC; Func[void EZB_DamageLink(int)] Body End
SETR D4 SP2; Func[int EZB_DirAngle(int)] Body Start
LOAD D2 0; if() #453 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31995 ==; Test 'if'
SETV D2 -90; return Start AND if() #453 Body Start
GOTO 32038; return End AND if() #453 Body End
LOAD D2 0; if() #454 Test AND if() #453 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32002 ==; Test 'if'
SETV D2 90; return Start AND if() #454 Body Start
GOTO 32038; return End AND if() #454 Body End
LOAD D2 0; if() #455 Test AND if() #454 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32009 ==; Test 'if'
SETV D2 180; return Start AND if() #455 Body Start
GOTO 32038; return End AND if() #455 Body End
LOAD D2 0; if() #456 Test AND if() #455 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32016 ==; Test 'if'
SETV D2 -135; return Start AND if() #456 Body Start
GOTO 32038; return End AND if() #456 Body End
LOAD D2 0; if() #457 Test AND if() #456 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32023 ==; Test 'if'
SETV D2 -45; return Start AND if() #457 Body Start
GOTO 32038; return End AND if() #457 Body End
LOAD D2 0; if() #458 Test AND if() #457 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32030 ==; Test 'if'
SETV D2 135; return Start AND if() #458 Body Start
GOTO 32038; return End AND if() #458 Body End
LOAD D2 0; if() #459 Test AND if() #458 Else Start
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32037 ==; Test 'if'
SETV D2 45; return Start AND if() #459 Body Start
GOTO 32038; return End AND if() #459 Body End
SETV D2 0; return Start AND if() #459 Else Start
POP D5; return End AND if() #459 Else End AND if() #458 Else End AND if() #457 Else End AND if() #456 Else End AND if() #455 Else End AND if() #454 Else End AND if() #453 Else End
RETURNFUNC; Func[int EZB_DirAngle(int)] Body End
SETR D4 SP2; Func[int EZB_DirX(int, int)] Body Start
LOAD D2 0.0001; if() #859 Test
COMPAREV D2 2
GOTOCMP 32052 ==
LOAD D2 0.0001
COMPAREV D2 4
GOTOCMP 32052 ==
LOAD D2 0.0001
COMPAREV D2 6
GOTOCMP 32052 ==
SETV D2 0
GOTO 32053
SETV D2 1
COMPAREV D2 0
GOTOCMP 32058 ==; Test 'if'
LOAD D2 0; return Start AND if() #859 Body Start
SUBV2 0 D2
GOTO 32075; return End AND if() #859 Body End
LOAD D2 0.0001; if() #860 Test
COMPAREV D2 3
GOTOCMP 32069 ==
LOAD D2 0.0001
COMPAREV D2 5
GOTOCMP 32069 ==
LOAD D2 0.0001
COMPAREV D2 7
GOTOCMP 32069 ==
SETV D2 0
GOTO 32070
SETV D2 1
COMPAREV D2 0
GOTOCMP 32074 ==; Test 'if'
LOAD D2 0; return Start AND if() #860 Body Start
GOTO 32075; return End AND if() #860 Body End
SETV D2 0; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int EZB_DirX(int, int)] Body End
SETR D4 SP2; Func[int EZB_DirY(int, int)] Body Start
LOAD D2 0.0001; if() #861 Test
COMPAREV D2 0
GOTOCMP 32089 ==
LOAD D2 0.0001
COMPAREV D2 4
GOTOCMP 32089 ==
LOAD D2 0.0001
COMPAREV D2 5
GOTOCMP 32089 ==
SETV D2 0
GOTO 32090
SETV D2 1
COMPAREV D2 0
GOTOCMP 32095 ==; Test 'if'
LOAD D2 0; return Start AND if() #861 Body Start
SUBV2 0 D2
GOTO 32112; return End AND if() #861 Body End
LOAD D2 0.0001; if() #862 Test
COMPAREV D2 1
GOTOCMP 32106 ==
LOAD D2 0.0001
COMPAREV D2 6
GOTOCMP 32106 ==
LOAD D2 0.0001
COMPAREV D2 7
GOTOCMP 32106 ==
SETV D2 0
GOTO 32107
SETV D2 1
COMPAREV D2 0
GOTOCMP 32111 ==; Test 'if'
LOAD D2 0; return Start AND if() #862 Body Start
GOTO 32112; return End AND if() #862 Body End
SETV D2 0; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int EZB_DirY(int, int)] Body End
PUSHARGSV 0 0.0004; Func[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
PUSHR D4; if() #460 Test
PUSHV 1; UsrFunc[int ScreenFlag(int, int)] Params Start
PUSHV 4; UsrFunc[int ScreenFlag(int, int)] Params End
CALLFUNC 2.9460; UsrFunc[int ScreenFlag(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 32128 ==
LOAD D2 0.0014
COMPAREV D2 2
GOTOCMP 32128 !=
SETV D2 1
GOTO 32129
SETV D2 0
COMPAREV D2 0
GOTOCMP 32134 ==; Test 'if'
SETV D2 1; if() #460 Body Start
STORE D2 0.0014
GOTO 32151; if() #460 Body End
PUSHR D4; if() #863 Test AND if() #460 Else Start
PUSHV 1; UsrFunc[int ScreenFlag(int, int)] Params Start
PUSHV 5; UsrFunc[int ScreenFlag(int, int)] Params End
CALLFUNC 2.9460; UsrFunc[int ScreenFlag(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 32146 ==
LOAD D2 0.0014
COMPAREV D2 3
GOTOCMP 32146 !=
SETV D2 1
GOTO 32147
SETV D2 0
COMPAREV D2 0
GOTOCMP 32151 ==; Test 'if'
SETV D2 4; if() #863 Body Start
STORE D2 0.0014; if() #863 Body End
STOREV 0 0.0003; if() #460 Else End AND if(false) #461 [Opt:AlwaysOff]
STOREV 0 0.0002
STOREV 0 0.0001
LOAD D2 0.0006; if() #462 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32458 ==; Test 'if'
LOAD D2 0.0008; InlineFunc[int Choose(int)] Params Start AND if() #462 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0008
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0003
LOAD D2 0.0007; if() #864 Test
COMPAREV D2 -1
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 32178 ==; Test 'if'
LOAD D2 0.0007; if() #864 Body Start
STORE D2 0.0003; if() #864 Body End
LOAD D2 0.0005; if() #865 Test
MODV D2 4
COMPAREV D2 2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 32546 ==; Test 'if'
LOAD D2 0.0011; if() #865 Body Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
MULTV D2 0.8000
STORE D2 0.0002
LOAD D2 0.0013
PUSHR D2
PUSHR D4
LOAD D2 0.0002; UsrFunc[int VectorX(int, int)] Params Start
DIVV D2 2
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7499; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0013
LOAD D2 0.0012
PUSHR D2
PUSHR D4
LOAD D2 0.0002; UsrFunc[int VectorY(int, int)] Params Start
DIVV D2 2
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7509; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0012
PUSHVARGV 1; InlineFunc[int Max(int, int)] Params Start
PUSHR D4
LOAD D2 0.0002; UsrFunc[int Round(int)] Params Start
DIVV D2 4
PUSHR D2; UsrFunc[int Round(int)] Params End
CALLFUNC 2.7757; UsrFunc[int Round(int)] Call
POP D4
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0001
LOAD D2 0.0014; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params Start
PUSHR D2
LOAD D2 0.0013
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0012
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 1
PUSHV 128; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params End
CIRCLER; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body End
ALLOCATEMEMV D2 2 0
STORE D2 0
LOAD D2 0.0013
PUSHR D2
PUSHR D4
PUSHV 320; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0010
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7499; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0012
PUSHR D2
PUSHR D4
PUSHV 320; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0010
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7509; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0011; if() #463 Test
DIVV D2 16
COMPAREV D2 1
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 32388 ==; Test 'if'
PUSHVARGV 1; InlineFunc[int Max(int, int)] Params Start AND if() #463 Body Start
PUSHR D4
LOAD D2 0.0011; UsrFunc[int Round(int)] Params Start
DIVV D2 16
PUSHR D2; UsrFunc[int Round(int)] Params End
CALLFUNC 2.7757; UsrFunc[int Round(int)] Call
POP D4
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0002
PUSHR D4
LOAD D2 0.0014; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Params Start
PUSHR D2
LOAD D2 0.0013
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0012
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV 1
PUSHV 128; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Params End
CALLFUNC 3.2548; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Call
POP D4
GOTO 32455; if() #463 Body End
LOAD D2 0.0014; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Params Start AND if() #463 Else Start
PUSHR D2
LOAD D2 0.0013
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0012
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 128; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Params End
LINER; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Body End AND if() #463 Else End
LOAD D3 0
DEALLOCATEMEMR D3; if() #865 Body End
GOTO 32546; if() #462 Body End
LOAD D2 0.0008; InlineFunc[int Choose(int)] Params Start AND if() #462 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHVARGR D2
LOAD D2 0.0008
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0008
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0003
LOAD D2 0.0007; if() #866 Test
COMPAREV D2 -1
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 32482 ==; Test 'if'
LOAD D2 0.0007; if() #866 Body Start
STORE D2 0.0003; if() #866 Body End
PUSHVARGV 1; InlineFunc[int Max(int, int)] Params Start
PUSHR D4
LOAD D2 0.0011; UsrFunc[int Round(int)] Params Start
DIVV D2 8
PUSHR D2; UsrFunc[int Round(int)] Params End
CALLFUNC 2.7757; UsrFunc[int Round(int)] Call
POP D4
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0001
PUSHR D4
LOAD D2 0.0014; UsrFunc[void EZB_DrawLaser(int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0013
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0012
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[void EZB_DrawLaser(int, int, int, int, int, int)] Params End
CALLFUNC 3.2608; UsrFunc[void EZB_DrawLaser(int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0013; UsrFunc[bool EZB_LaserCollision(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[bool EZB_LaserCollision(int, int, int, int)] Params End
CALLFUNC 3.2711; UsrFunc[bool EZB_LaserCollision(int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 32546 ==; Test 'if'
PUSHR D4; if() #867 Body Start
LOAD D2 0.0009; UsrFunc[void EZB_DamageLink(int)] Params Start
PUSHR D2; UsrFunc[void EZB_DamageLink(int)] Params End
CALLFUNC 3.1908; UsrFunc[void EZB_DamageLink(int)] Call
POP D4; if() #867 Body End
POPARGS D5 0.0015; if() #462 Else End
RETURNFUNC; Func[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Body End
SETR D4 SP2; Func[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Body Start
LOAD D2 0.0008; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0003
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0007; InlineFunc[int Distance(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 1
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
PUSHR D4
LOAD D2 0.0007; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
RECTR; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0012; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS D5 0.0009
RETURNFUNC; Func[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Body End
SETR D4 SP2; Func[void EZB_DrawLaser(int, int, int, int, int, int)] Body Start
PUSHR D4; if() #464 Test
PUSHV 1; UsrFunc[int ScreenFlag(int, int)] Params Start
PUSHV 4; UsrFunc[int ScreenFlag(int, int)] Params End
CALLFUNC 2.9460; UsrFunc[int ScreenFlag(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 32621 ==
LOAD D2 0.0005
COMPAREV D2 2
GOTOCMP 32621 !=
SETV D2 1
GOTO 32622
SETV D2 0
COMPAREV D2 0
GOTOCMP 32627 ==; Test 'if'
SETV D2 1; if() #464 Body Start
STORE D2 0.0005
GOTO 32644; if() #464 Body End
PUSHR D4; if() #870 Test AND if() #464 Else Start
PUSHV 1; UsrFunc[int ScreenFlag(int, int)] Params Start
PUSHV 5; UsrFunc[int ScreenFlag(int, int)] Params End
CALLFUNC 2.9460; UsrFunc[int ScreenFlag(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 32639 ==
LOAD D2 0.0005
COMPAREV D2 3
GOTOCMP 32639 !=
SETV D2 1
GOTO 32640
SETV D2 0
COMPAREV D2 0
GOTOCMP 32644 ==; Test 'if'
SETV D2 4; if() #870 Body Start
STORE D2 0.0005; if() #870 Body End
LOAD D2 0.0005; if() #464 Else End AND InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 1
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
PUSHR D2
PUSHV 1
PUSHV 128; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params End
CIRCLER; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body End
LOAD D2 0.0005; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
ADDV D2 512
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 1
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
PUSHR D2
PUSHV 1
PUSHV 128; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
RECTR; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0012; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS D5 0.0006
RETURNFUNC; Func[void EZB_DrawLaser(int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0003; Func[bool EZB_LaserCollision(int, int, int, int)] Body Start
SETR D4 SP2
PUSHVARGV 1; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0.0004
SUBV D2 3
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0002
LOAD D2 0.0006
PUSHR D2
PUSHR D4
LOAD D2 0.0004; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7499; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0001
LOAD D2 0.0005
PUSHR D2
PUSHR D4
LOAD D2 0.0004; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7509; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #920 Test
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 32767 ==; Test 'if'
SETV D2 1; return Start AND if() #920 Body Start
GOTO 32811; return End AND if() #920 Body End
PUSHR D4; return Start
LOAD D2 0.0006; UsrFunc[bool EZB_RotRectCollision(int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHR D4
LOAD D2 0.0004; UsrFunc[int VectorX(int, int)] Params Start
ADDV D2 128
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7499; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
PUSHR D2
PUSHR D4
LOAD D2 0.0004; UsrFunc[int VectorY(int, int)] Params Start
ADDV D2 128
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7509; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 128
LOAD D2 0.0003
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHARGSV 4 0.0002
PUSHV 0; UsrFunc[bool EZB_RotRectCollision(int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.5423; UsrFunc[bool EZB_RotRectCollision(int, int, int, int, int, int, int, int, int, int)] Call
POP D4
POPARGS D5 0.0007; return End
RETURNFUNC; Func[bool EZB_LaserCollision(int, int, int, int)] Body End
SETR D4 SP2; Func[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Body Start
SETR D2 LINKHP; if() #868 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 32958 !=; Test 'if' AND return (Void) AND if() #868 Body
LOAD D2 0.0005
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7499; UsrFunc[int VectorX(int, int)] Call
POP D4
ADDV D2 -8
POP D3
ADDR D2 D3
STORE D2 0.0005
LOAD D2 0.0004
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7509; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0004
LOAD D2 0.0005
PUSHR D2
PUSHR D4
PUSHV 8; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0002
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7499; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0005
LOAD D2 0.0004
PUSHR D2
PUSHR D4
PUSHV 8; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0002
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7509; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0004
PUSHV 6; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
PUSHR D4
LOAD D2 0.0008; UsrFunc[int EZB_GetSpecialCombo(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
PUSHV 1; UsrFunc[int EZB_GetSpecialCombo(ffc, npc, int, int)] Params End
CALLFUNC 3.2960; UsrFunc[int EZB_GetSpecialCombo(ffc, npc, int, int)] Call
POP D4
PUSHR D2
PUSHV 2
PUSHV 1
PUSHR GD11
PUSHARGSV -1 0.0002
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
PUSHV 0
PUSHV 1
PUSHV 128; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWCOMBOR; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0016; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
LOAD D2 0; if() #869 Test
COMPAREV D2 0
GOTOCMP 32958 ==; Test 'if'
PUSHR D4; if() #869 Body Start
LOAD D2 0.0005; UsrFunc[void EZB_MakeHitbox(int, int, int, int, int)] Params Start
ADDV D2 8
PUSHR D2
PUSHR D4
PUSHV 8; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0002
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7499; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
PUSHR D4
PUSHV 8; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0002
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7509; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHARGSV 16 0.0002
LOAD D2 0
PUSHR D2; UsrFunc[void EZB_MakeHitbox(int, int, int, int, int)] Params End
CALLFUNC 3.3009; UsrFunc[void EZB_MakeHitbox(int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0005; UsrFunc[void EZB_MakeHitbox(int, int, int, int, int)] Params Start
ADDV D2 8
PUSHR D2
PUSHR D4
PUSHV -8; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0002
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7499; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
PUSHR D4
PUSHV -8; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0002
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7509; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHARGSV 16 0.0002
LOAD D2 0
PUSHR D2; UsrFunc[void EZB_MakeHitbox(int, int, int, int, int)] Params End
CALLFUNC 3.3009; UsrFunc[void EZB_MakeHitbox(int, int, int, int, int)] Call
POP D4; if() #869 Body End
POPARGS D5 0.0009
RETURNFUNC; Func[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0003; Func[int EZB_GetSpecialCombo(ffc, npc, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0004
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0.0002
LOAD D2 0.0004
PUSHR D2
POP D0
READPODARRAYV D2 310
STORE D2 0.0001
LOAD D2 0.0001
ADDV D2 2
STORE D2 0
LOAD D2 0.0002; if() #487 Test
ANDV D2 1
COMPAREV D2 0
GOTOCMP 32983 ==; Test 'if'
LOAD D2 0.0001; if() #487 Body Start
ADDV D2 8
STORE D2 0
GOTO 32990; if() #487 Body End
LOAD D2 0.0002; if() #917 Test AND if() #487 Else Start
ANDV D2 2
COMPAREV D2 0
GOTOCMP 32990 ==; Test 'if'
LOAD D2 0.0001; if() #917 Body Start
ADDV D2 16
STORE D2 0; if() #917 Body End
LOAD D2 0.0003; if() #487 Else End AND if() #488 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32998 ==; Test 'if'
LOAD D2 0; return Start AND if() #488 Body Start
GOTO 33007; return End
GOTO 33006; if() #488 Body End
LOAD D2 0.0003; if() #918 Test AND if() #488 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33006 ==; Test 'if'
LOAD D2 0; return Start AND if() #918 Body Start
ADDV D2 1
GOTO 33007; return End AND if() #918 Body End
SETV D2 0; if() #488 Else End AND return Start
POPARGS D5 0.0007; return End
RETURNFUNC; Func[int EZB_GetSpecialCombo(ffc, npc, int, int)] Body End
PUSHV 0; Func[void EZB_MakeHitbox(int, int, int, int, int)] Body Start
SETR D4 SP2
PUSHR D4
PUSHV 40; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHV 120
PUSHV 80
PUSHARGSV 0 0.0002
LOAD D2 0.0001
PUSHR D2
PUSHARGSV -1 0.0002
PUSHV 1; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 2.0845; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
STORE D2 0
LOAD D2 0.0005
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_OFFSET_X D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_OFFSET_Y D2
SETV D2 -1000
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_WIDTH D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_HEIGHT D2
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Params Start
PUSHR D2
PUSHARGSV 1 0.0002; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Params End
CALLFUNC 2.9571; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Call
PEEK D4
LOAD D2 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 2.9507; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4
POPARGS D5 0.0006
RETURNFUNC; Func[void EZB_MakeHitbox(int, int, int, int, int)] Body End
SETR D4 SP2; Func[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Body Start
SETR D2 LINKHP; if() #871 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 33172 !=; Test 'if' AND return (Void) AND if() #871 Body
LOAD D2 0.0005
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7499; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0005
LOAD D2 0.0004
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7509; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0004
PUSHV 6; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
PUSHR D4
LOAD D2 0.0008; UsrFunc[int EZB_GetSpecialCombo(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
PUSHV 0; UsrFunc[int EZB_GetSpecialCombo(ffc, npc, int, int)] Params End
CALLFUNC 3.2960; UsrFunc[int EZB_GetSpecialCombo(ffc, npc, int, int)] Call
POP D4
PUSHR D2
PUSHARGSV 1 0.0002
PUSHR GD11
PUSHARGSV -1 0.0002
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
PUSHV 0
PUSHV 1
PUSHV 128; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWCOMBOR; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0016; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
LOAD D2 0; if() #872 Test
COMPAREV D2 0
GOTOCMP 33172 ==; Test 'if'
PUSHR D4; if() #872 Body Start
LOAD D2 0.0005; UsrFunc[void EZB_MakeHitbox(int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
PUSHARGSV 16 0.0002
LOAD D2 0
PUSHR D2; UsrFunc[void EZB_MakeHitbox(int, int, int, int, int)] Params End
CALLFUNC 3.3009; UsrFunc[void EZB_MakeHitbox(int, int, int, int, int)] Call
POP D4; if() #872 Body End
POPARGS D5 0.0009
RETURNFUNC; Func[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0007; Func[void EZB_DrawTeleport(ffc, npc, int, int, int, int, int)] Body Start
SETR D4 SP2
SETR D2 GD12
STORE D2 0.0006
SETR D2 GD13
STORE D2 0.0005
LOAD D2 0.0011
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0.0004
SETR D2 GD10
STORE D2 0.0003
LOAD D2 0.0004; if() #873 Test
ANDV D2 1
COMPAREV D2 0
GOTOCMP 33197 !=
LOAD D2 0.0004
ANDV D2 2
COMPAREV D2 0
GOTOCMP 33197 !=
SETV D2 0
GOTO 33198
SETV D2 1
COMPAREV D2 0
GOTOCMP 33206 ==; Test 'if'
LOAD D2 0.0003; if() #873 Body Start
PUSHR D2
SETR D2 GD4
POP D3
ADDR D2 D3
STORE D2 0.0003; if() #873 Body End
STOREV 2 0.0002
PUSHR D4; if() #874 Test
PUSHV 1; UsrFunc[int ScreenFlag(int, int)] Params Start
PUSHV 4; UsrFunc[int ScreenFlag(int, int)] Params End
CALLFUNC 2.9460; UsrFunc[int ScreenFlag(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 33216 ==; Test 'if'
SETV D2 1; if() #874 Body Start
STORE D2 0.0002; if() #874 Body End
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
POP D3
DIVR D3 D2
SETR D2 D3
STORE D2 0.0001
STOREV 128 0
LOAD D2 0.0008; if() #875 Test
PUSHR D2
LOAD D2 0.0007
SUBV D2 8
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 33235 ==; Test 'if'
SETV D2 64; if() #875 Body Start
STORE D2 0; if() #875 Body End
LOAD D2 0.0002; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0006
MULTV D2 8
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0005
MULTV D2 24
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0013
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_CSET
LOAD D2 0.0006
MULTV D2 16
PUSHR D2
LOAD D2 0.0006
MULTV D2 16
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0005
MULTV D2 16
PUSHR D2
LOAD D2 0.0005
MULTV D2 24
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHARGSV 0 0.0003
PUSHV -1
PUSHV 0
PUSHV 1
LOAD D2 0
PUSHR D2; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWCOMBOR; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0016; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS D5 0.0014
RETURNFUNC; Func[void EZB_DrawTeleport(ffc, npc, int, int, int, int, int)] Body End
PUSHV 0; Func[void EZB_FaceAngle(ffc, npc, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0
LOAD D2 0; if() #466 Test
ANDV D2 2
COMPAREV D2 0
GOTOCMP 33321 ==; Test 'if'
PUSHR D4; if() #466 Body Start
LOAD D2 0.0001; UsrFunc[int AngleDir8(int)] Params Start
PUSHR D2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 2.0474; UsrFunc[int AngleDir8(int)] Call
POP D4
SETR GD4 D2
GOTO 33327; if() #466 Body End
PUSHR D4; if() #466 Else Start
LOAD D2 0.0001; UsrFunc[int AngleDir4(int)] Params Start
PUSHR D2; UsrFunc[int AngleDir4(int)] Params End
CALLFUNC 2.0431; UsrFunc[int AngleDir4(int)] Call
POP D4
SETR GD4 D2; if() #466 Else End
POPARGS D5 0.0005
RETURNFUNC; Func[void EZB_FaceAngle(ffc, npc, int, int)] Body End
PUSHV 0; Func[void EZB_FaceDir(ffc, npc, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0
LOAD D2 0; if() #467 Test
ANDV D2 2
COMPAREV D2 0
GOTOCMP 33343 ==; Test 'if'
LOAD D2 0.0001; if() #467 Body Start
SETR GD4 D2
GOTO 33367; if() #467 Body End
LOAD D2 0.0001; if() #468 Test AND if() #467 Else Start
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 33351 ==; Test 'if'
LOAD D2 0.0001; if() #468 Body Start
SETR GD4 D2
GOTO 33367; if() #468 Body End
LOAD D2 0.0001; if() #469 Test AND if() #468 Else Start
COMPAREV D2 4
GOTOCMP 33359 ==
LOAD D2 0.0001
COMPAREV D2 6
GOTOCMP 33359 ==
SETV D2 0
GOTO 33360
SETV D2 1
COMPAREV D2 0
GOTOCMP 33365 ==; Test 'if'
SETV D2 2; if() #469 Body Start
SETR GD4 D2
GOTO 33367; if() #469 Body End
SETV D2 3; if() #469 Else Start
SETR GD4 D2; if() #469 Else End
POPARGS D5 0.0005; if() #468 Else End AND if() #467 Else End
RETURNFUNC; Func[void EZB_FaceDir(ffc, npc, int, int)] Body End
SETR D4 SP2; Func[void EZB_FaceDir4(ffc, npc, int, int)] Body Start
LOAD D2 0; if() #470 Test
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 33378 ==; Test 'if'
LOAD D2 0; if() #470 Body Start
SETR GD4 D2
GOTO 33394; if() #470 Body End
LOAD D2 0; if() #471 Test AND if() #470 Else Start
COMPAREV D2 4
GOTOCMP 33386 ==
LOAD D2 0
COMPAREV D2 6
GOTOCMP 33386 ==
SETV D2 0
GOTO 33387
SETV D2 1
COMPAREV D2 0
GOTOCMP 33392 ==; Test 'if'
SETV D2 2; if() #471 Body Start
SETR GD4 D2
GOTO 33394; if() #471 Body End
SETV D2 3; if() #471 Else Start
SETR GD4 D2; if() #471 Else End
POPARGS D5 0.0004; if() #470 Else End
RETURNFUNC; Func[void EZB_FaceDir4(ffc, npc, int, int)] Body End
PUSHV 0; Func[void EZB_FaceLink(ffc, npc, int)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0
LOAD D2 0; if() #472 Test
ANDV D2 2
COMPAREV D2 0
GOTOCMP 33434 ==; Test 'if'
PUSHARGSR D4 0.0003; if() #472 Body Start AND UsrFunc[int AngleDir8(int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0002; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0002; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 2.0474; UsrFunc[int AngleDir8(int)] Call
POP D4
SETR GD4 D2
GOTO 33460; if() #472 Body End
PUSHARGSR D4 0.0003; if() #472 Else Start AND UsrFunc[int AngleDir4(int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0002; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0002; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2; UsrFunc[int AngleDir4(int)] Params End
CALLFUNC 2.0431; UsrFunc[int AngleDir4(int)] Call
POP D4
SETR GD4 D2; if() #472 Else End
POPARGS D5 0.0004
RETURNFUNC; Func[void EZB_FaceLink(ffc, npc, int)] Body End
PUSHV 0; Func[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Body Start
SETR D4 SP2
PUSHR D4
LOAD D2 0.0007; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
PUSHV 0; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params End
CALLFUNC 3.3486; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Call
POP D4
STORE D2 0
LOAD D2 0; return Start
POPARGS D5 0.0008; return End
RETURNFUNC; Func[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0007; Func[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0012
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0.0006
PUSHR D4
LOAD D2 0.0013; UsrFunc[int EZB_WeaponTypeToID(int)] Params Start
PUSHR D2
POP REFNPC
PUSHR NPCWEAPON; UsrFunc[int EZB_WeaponTypeToID(int)] Params End
CALLFUNC 3.3614; UsrFunc[int EZB_WeaponTypeToID(int)] Call
POP D4
STORE D2 0.0005
LOAD D2 0.0006; if() #877 Test
ANDV D2 128
COMPAREV D2 0
GOTOCMP 33508 ==; Test 'if'
LOAD D2 0.0007; if() #877 Body Start
ORV D2 1
STORE D2 0.0007; if() #877 Body End
LOAD D2 0.0012
PUSHR D2
POP D0
READPODARRAYV D2 307
STORE D2 0.0004
LOAD D2 0.0012
PUSHR D2
POP D0
READPODARRAYV D2 308
STORE D2 0.0003
LOAD D2 0.0003; if() #878 Test
COMPAREV D2 0
GOTOCMP 33538 !=
LOAD D2 0.0005
COMPAREV D2 132
GOTOCMP 33536 ==
LOAD D2 0.0005
COMPAREV D2 130
GOTOCMP 33536 ==
LOAD D2 0.0005
COMPAREV D2 134
GOTOCMP 33536 ==
LOAD D2 0.0005
COMPAREV D2 137
GOTOCMP 33536 ==
LOAD D2 0.0005
COMPAREV D2 138
GOTOCMP 33538 !=
SETV D2 1
GOTO 33539
SETV D2 0
COMPAREV D2 0
GOTOCMP 33544 ==; Test 'if'
LOAD D2 0.0007; if() #878 Body Start
ORV D2 2
STORE D2 0.0007; if() #878 Body End
LOAD D2 0.0003; if() #473 Test
COMPAREV D2 2000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 33556 ==; Test 'if'
LOAD D2 0.0007; if() #473 Body Start
ORV D2 4
STORE D2 0.0007
LOAD D2 0.0003
SUBV D2 2000
STORE D2 0.0003
GOTO 33567; if() #473 Body End
LOAD D2 0.0003; if() #879 Test AND if() #473 Else Start
COMPAREV D2 1000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 33567 ==; Test 'if'
LOAD D2 0.0007; if() #879 Body Start
ORV D2 2
STORE D2 0.0007
LOAD D2 0.0003
SUBV D2 1000
STORE D2 0.0003; if() #879 Body End
LOAD D2 0.0004; if() #473 Else End
STORE D2 0.0002
LOAD D2 0.0004; if() #880 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 33576 ==; Test 'if'
SETV D2 -1; if() #880 Body Start
STORE D2 0.0002; if() #880 Body End
LOAD D2 0.0003
STORE D2 0.0001
LOAD D2 0.0003; if() #881 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 33585 ==; Test 'if'
SETV D2 -1; if() #881 Body Start
STORE D2 0.0001; if() #881 Body End
PUSHR D4
LOAD D2 0.0005; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0009; InlineFunc[int DegtoRad(int)] Params Start
SETR D3 D2; InlineFunc[int DegtoRad(int)] Params End
DEGTORAD D2 D3; InlineFunc[int DegtoRad(int)] Body
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0013
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 2.0845; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
STORE D2 0
LOAD D2 0; return Start
POPARGS D5 0.0015; return End
RETURNFUNC; Func[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Body End
SETR D4 SP2; Func[int EZB_WeaponTypeToID(int)] Body Start
LOAD D2 0; if() #514 Test
COMPAREV D2 140
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33623 ==; Test 'if'
SETV D2 140; return Start AND if() #514 Body Start
GOTO 33735; return End
GOTO 33734; if() #514 Body End
LOAD D2 0; if() #515 Test AND if() #514 Else Start
COMPAREV D2 141
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33631 ==; Test 'if'
SETV D2 141; return Start AND if() #515 Body Start
GOTO 33735; return End
GOTO 33734; if() #515 Body End
LOAD D2 0; if() #516 Test AND if() #515 Else Start
COMPAREV D2 129
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33639 ==; Test 'if'
SETV D2 129; return Start AND if() #516 Body Start
GOTO 33735; return End
GOTO 33734; if() #516 Body End
LOAD D2 0; if() #517 Test AND if() #516 Else Start
COMPAREV D2 130
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33647 ==; Test 'if'
SETV D2 130; return Start AND if() #517 Body Start
GOTO 33735; return End
GOTO 33734; if() #517 Body End
LOAD D2 0; if() #518 Test AND if() #517 Else Start
COMPAREV D2 131
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33655 ==; Test 'if'
SETV D2 131; return Start AND if() #518 Body Start
GOTO 33735; return End
GOTO 33734; if() #518 Body End
LOAD D2 0; if() #519 Test AND if() #518 Else Start
COMPAREV D2 132
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33663 ==; Test 'if'
SETV D2 132; return Start AND if() #519 Body Start
GOTO 33735; return End
GOTO 33734; if() #519 Body End
LOAD D2 0; if() #520 Test AND if() #519 Else Start
COMPAREV D2 133
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33671 ==; Test 'if'
SETV D2 133; return Start AND if() #520 Body Start
GOTO 33735; return End
GOTO 33734; if() #520 Body End
LOAD D2 0; if() #521 Test AND if() #520 Else Start
COMPAREV D2 134
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33679 ==; Test 'if'
SETV D2 134; return Start AND if() #521 Body Start
GOTO 33735; return End
GOTO 33734; if() #521 Body End
LOAD D2 0; if() #522 Test AND if() #521 Else Start
COMPAREV D2 135
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33687 ==; Test 'if'
SETV D2 135; return Start AND if() #522 Body Start
GOTO 33735; return End
GOTO 33734; if() #522 Body End
LOAD D2 0; if() #523 Test AND if() #522 Else Start
COMPAREV D2 136
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33695 ==; Test 'if'
SETV D2 136; return Start AND if() #523 Body Start
GOTO 33735; return End
GOTO 33734; if() #523 Body End
LOAD D2 0; if() #524 Test AND if() #523 Else Start
COMPAREV D2 137
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33703 ==; Test 'if'
SETV D2 137; return Start AND if() #524 Body Start
GOTO 33735; return End
GOTO 33734; if() #524 Body End
LOAD D2 0; if() #525 Test AND if() #524 Else Start
COMPAREV D2 138
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33711 ==; Test 'if'
SETV D2 138; return Start AND if() #525 Body Start
GOTO 33735; return End
GOTO 33734; if() #525 Body End
LOAD D2 0; if() #526 Test AND if() #525 Else Start
COMPAREV D2 139
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33719 ==; Test 'if'
SETV D2 139; return Start AND if() #526 Body Start
GOTO 33735; return End
GOTO 33734; if() #526 Body End
LOAD D2 0; if() #527 Test AND if() #526 Else Start
COMPAREV D2 142
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33727 ==; Test 'if'
SETV D2 142; return Start AND if() #527 Body Start
GOTO 33735; return End
GOTO 33734; if() #527 Body End
LOAD D2 0; if() #947 Test AND if() #527 Else Start
COMPAREV D2 145
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33734 ==; Test 'if'
SETV D2 145; return Start AND if() #947 Body Start
GOTO 33735; return End AND if() #947 Body End
SETV D2 134; if() #527 Else End AND if() #526 Else End AND if() #525 Else End AND if() #524 Else End AND if() #523 Else End AND if() #522 Else End AND if() #521 Else End AND if() #520 Else End AND if() #519 Else End AND if() #518 Else End AND if() #517 Else End AND if() #516 Else End AND if() #515 Else End AND if() #514 Else End AND return Start
POP D5; return End
RETURNFUNC; Func[int EZB_WeaponTypeToID(int)] Body End
PUSHARGSV 0 0.0008; Func[void EZB_FiringAnim(ffc, npc, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0007
LOAD D2 0.0009
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0.0006
LOAD D2 0.0009
PUSHR D2
POP D0
READPODARRAYV D2 310
STORE D2 0.0005
LOAD D2 0.0006; if() #474 Test
ANDV D2 2
COMPAREV D2 0
GOTOCMP 33758 ==; Test 'if'
LOAD D2 0.0005; if() #474 Body Start
ADDV D2 8
SETR GD10 D2
GOTO 33769; if() #474 Body End
LOAD D2 0.0006; if() #475 Test AND if() #474 Else Start
ANDV D2 1
COMPAREV D2 0
GOTOCMP 33766 ==; Test 'if'
LOAD D2 0.0005; if() #475 Body Start
ADDV D2 4
SETR GD10 D2
GOTO 33769; if() #475 Body End
LOAD D2 0.0005; if() #475 Else Start
ADDV D2 1
SETR GD10 D2; if() #475 Else End
LOAD D2 0.0010; if() #474 Else End
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X_OFFSET
STORE D2 0.0004
LOAD D2 0.0010
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y_OFFSET
STORE D2 0.0003
LOAD D2 0.0008; if() #476 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33805 ==; Test 'if'
SETV D2 0; for() #236 setup AND if() #476 Body Start
STORE D2 0.0007
LOAD D2 0.0007; for() #236 LoopTest
COMPAREV D2 16
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 33972 ==; for() #236 TestFail?
PUSHR D4; for() #236 Body Start
LOAD D2 0.0011; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0009
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #236 Body End
LOAD D2 0.0007; for() #236 LoopIncrement
ADDV D2 1
STORE D2 0.0007
GOTO 33786; for() #236 End
GOTO 33972; if() #476 Body End
LOAD D2 0.0008; if() #477 Test AND if() #476 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33889 ==; Test 'if'
STOREV 0 0.0001; if() #477 Body Start
STOREV 0 0
SETV D2 0; for() #237 setup
STORE D2 0.0007
LOAD D2 0.0007; for() #237 LoopTest
COMPAREV D2 32
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 33870 ==; for() #237 TestFail?
PUSHR D4; if(true) #882 [Opt:AlwaysOn] AND for() #237 Body Start
PUSHV -1; UsrFunc[int Rand(int, int)] Params Start
PUSHV 1; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0.0001
PUSHR D4
PUSHV -1; UsrFunc[int Rand(int, int)] Params Start
PUSHV 1; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0010
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0010
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2
PUSHR D4
LOAD D2 0.0011; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0009
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #237 Body End
LOAD D2 0.0007; for() #237 LoopIncrement
ADDV D2 1
STORE D2 0.0007
GOTO 33814; for() #237 End
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0010
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0010
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2
GOTO 33972; if() #477 Body End
LOAD D2 0.0008; if() #883 Test AND if() #477 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33972 ==; Test 'if'
STOREV 0 0.0001; if() #883 Body Start
STOREV 0 0
SETV D2 0; for() #238 setup
STORE D2 0.0007
LOAD D2 0.0007; for() #238 LoopTest
COMPAREV D2 64
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 33954 ==; for() #238 TestFail?
PUSHR D4; if(true) #884 [Opt:AlwaysOn] AND for() #238 Body Start
PUSHV -2; UsrFunc[int Rand(int, int)] Params Start
PUSHV 2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0.0001
PUSHR D4
PUSHV -2; UsrFunc[int Rand(int, int)] Params Start
PUSHV 2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0010
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0010
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2
PUSHR D4
LOAD D2 0.0011; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0009
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #238 Body End
LOAD D2 0.0007; for() #238 LoopIncrement
ADDV D2 1
STORE D2 0.0007
GOTO 33898; for() #238 End
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0010
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0010
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2; if() #883 Body End
POPARGS D5 0.0012; if() #477 Else End AND if() #476 Else End
RETURNFUNC; Func[void EZB_FiringAnim(ffc, npc, int, int)] Body End
PUSHV 0; Func[void EZB_Waitframe(ffc, npc, int)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0
LOAD D2 0; if() #941 Test
ANDV D2 512
COMPAREV D2 0
GOTOCMP 33994 ==; Test 'if'
SETV D2 60; if() #941 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCSTUN D2; if() #941 Body End
LOAD D2 0; if() #942 Test
ANDV D2 1024
COMPAREV D2 0
GOTOCMP 34007 ==; Test 'if'
SETV D2 0; if() #942 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCSTUN D2; if() #942 Body End
LOAD D2 0.0001; unless() #943 Test
PUSHR D2
POP D0
READPODARRAYV D2 319
COMPAREV D2 0
GOTOCMP 34085 !=; Test 'unless'
LOAD D2 0.0001; if() #944 Test AND unless() #943 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 316
COMPAREV D2 0
GOTOCMP 34085 ==; Test 'if'
LOAD D2 0.0001; if() #945 Test AND if() #944 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 315
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP D0
READPODARRAYV D2 316
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 34085 ==; Test 'if'
LOAD D2 0.0001; if() #945 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 315
ADDV D2 1
PUSHR D2
LOAD D2 0.0001
SETR D0 D2
POP D2
WRITEPODARRAYVR 315 D2
LOAD D2 0.0001
PUSHR D2
POP D0
READPODARRAYV D2 317
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP D0
READPODARRAYV D2 318
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP D0
READPODARRAYV D2 317
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP D0
READPODARRAYV D2 315
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP D0
READPODARRAYV D2 316
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCSTEP D2; if() #945 Body End
LOAD D2 0.0001; if() #944 Body End AND unless() #943 Body End AND if() #511 Test
PUSHR D2
POP D0
READPODARRAYV D2 200
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34121 ==; Test 'if'
PUSHR D4; unless() #946 Test AND if() #511 Body Start
LOAD D2 0.0003; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHARGSV 0 0.0002; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Params End
CALLFUNC 2.7969; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 34141 !=; Test 'unless'
SETV D2 1; unless() #946 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHP D2
SETV D2 1
SETR GD14 D2
SETV D2 1
PUSHR D2
LOAD D2 0.0001
SETR D0 D2
POP D2
WRITEPODARRAYVR 202 D2; unless() #946 Body End
GOTO 34141; if() #511 Body End
LOAD D2 0; if() #512 Test AND if() #511 Else Start
ANDV D2 32
COMPAREV D2 0
GOTOCMP 34134 ==; Test 'if'
PUSHR D4; if(false) #513 [Opt:AlwaysOff] AND if() #512 Body Start
LOAD D2 0.0003; UsrFunc[bool Ghost_Waitframe(ffc, npc, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHARGSV 1 0.0002; UsrFunc[bool Ghost_Waitframe(ffc, npc, int, bool)] Params End
CALLFUNC 2.8206; UsrFunc[bool Ghost_Waitframe(ffc, npc, int, bool)] Call
POP D4
GOTO 34141; if() #512 Body End
PUSHR D4; if() #512 Else Start
LOAD D2 0.0003; UsrFunc[void Ghost_Waitframe(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[void Ghost_Waitframe(ffc, npc)] Params End
CALLFUNC 2.7958; UsrFunc[void Ghost_Waitframe(ffc, npc)] Call
POP D4; if() #512 Else End
POPARGS D5 0.0004; if() #511 Else End
RETURNFUNC; Func[void EZB_Waitframe(ffc, npc, int)] Body End
PUSHARGSV 0 0.0010; Func[void EZB_FishWizardUpdate(ffc, npc, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0009
LOAD D2 0.0011
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0.0008
SETV D2 0
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
LOAD D2 0.0010; if() #478 Test
PUSHR D2
POP D0
READPODARRAYV D2 7
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34539 ==; Test 'if'
LOAD D2 0.0010; if() #885 Test AND if() #478 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
COMPAREV D2 0
GOTOCMP 34187 ==; Test 'if'
LOAD D2 0.0010; if() #885 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
SUBV D2 1
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2; if() #885 Body End
LOAD D2 0.0010; if() #886 Test
PUSHR D2
POP D0
READPODARRAYV D2 11
COMPAREV D2 0
GOTOCMP 34203 ==; Test 'if'
LOAD D2 0.0010; if() #886 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 11
SUBV D2 1
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 11 D2; if() #886 Body End
PUSHR D4
LOAD D2 0.0010; UsrFunc[int Ghost_ConstantWalk4(int, int, int, int, int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0012
PUSHR D2
POP REFNPC
PUSHR NPCSTEP
LOAD D2 0.0012
PUSHR D2
POP REFNPC
PUSHR NPCRATE
LOAD D2 0.0012
PUSHR D2
POP REFNPC
PUSHR NPCHOMING
LOAD D2 0.0012
PUSHR D2
POP REFNPC
PUSHR NPCHUNGER; UsrFunc[int Ghost_ConstantWalk4(int, int, int, int, int)] Params End
CALLFUNC 2.4284; UsrFunc[int Ghost_ConstantWalk4(int, int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
PUSHR D4; if() #479 Test
LOAD D2 0.0012; UsrFunc[bool EZB_InSight(npc)] Params Start
PUSHR D2; UsrFunc[bool EZB_InSight(npc)] Params End
CALLFUNC 3.4697; UsrFunc[bool EZB_InSight(npc)] Call
POP D4
COMPAREV D2 0
GOTOCMP 34247 ==
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 1
COMPAREV D2 0
GOTOCMP 34247 !=
SETV D2 1
GOTO 34248
SETV D2 0
COMPAREV D2 0
GOTOCMP 34267 ==; Test 'if'
LOAD D2 0.0012; if() #479 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
MULTV D2 10
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
SETV D2 1
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
GOTO 34695; if() #479 Body End
PUSHR D4; if() #887 Test AND if() #479 Else Start
PUSHV 1; UsrFunc[int Rand(int, int)] Params Start
PUSHV 90; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
COMPAREV D2 1
GOTOCMP 34282 !=
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 1
COMPAREV D2 0
GOTOCMP 34282 !=
SETV D2 1
GOTO 34283
SETV D2 0
COMPAREV D2 0
GOTOCMP 34695 ==; Test 'if'
STOREV 0 0.0007; if() #887 Body Start
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHVARGR SPRITE_TILE_W
LOAD D2 0.0012
PUSHR D2
POP REFSPRITE
PUSHVARGR SPRITE_TILE_H; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SUBV D2 1
STORE D2 0.0002
STOREV 0 0.0001
SETV D2 0; for() #239 setup
STORE D2 0.0009
LOAD D2 0.0009; for() #239 LoopTest
COMPAREV D2 128
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 34378 ==; for() #239 TestFail?
PUSHVARGV -1; InlineFunc[int Choose(int)] Params Start AND for() #239 Body Start
PUSHVARGV 1; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0007
PUSHVARGV -1; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 1; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0006
LOAD D2 0.0002
MULTV D2 16
PUSHR D2
PUSHR D4
PUSHV 2; UsrFunc[int Rand(int, int)] Params Start
PUSHV 4; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
MULTV D2 16
SETV D2 16
PUSHR D2
PUSHR D4
PUSHV 2; UsrFunc[int Rand(int, int)] Params Start
PUSHV 4; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0675; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0005
SETR D2 GD1
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0005
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0004
SETR D2 GD2
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0003
PUSHR D4; if() #888 Test
LOAD D2 0.0013; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Params End
CALLFUNC 3.1680; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 34374 ==; Test 'if'
SETV D2 1; if() #888 Body Start
STORE D2 0.0001
GOTO 34378; break 1; AND if() #888 Body End
LOAD D2 0.0009; for() #239 Body End AND for() #239 LoopIncrement
ADDV D2 1
STORE D2 0.0009
GOTO 34304; for() #239 End
LOAD D2 0.0001; if() #889 Test
COMPAREV D2 0
GOTOCMP 34695 ==; Test 'if'
LOAD D2 0.0008; if() #480 Test AND if() #889 Body Start
ANDV D2 2
COMPAREV D2 0
GOTOCMP 34398 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #480 Body Start AND UsrFunc[int AngleDir8(int)] Params Start
PUSHARGSV 0 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0412; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 2.0474; UsrFunc[int AngleDir8(int)] Call
POP D4
SETR GD4 D2
GOTO 34412; if() #480 Body End
LOAD D2 0.0008; if() #890 Test AND if() #480 Else Start
ANDV D2 1
COMPAREV D2 0
GOTOCMP 34412 ==; Test 'if'
LOAD D2 0.0007; if() #481 Test AND if() #890 Body Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 34410 ==; Test 'if'
SETV D2 2; if() #481 Body Start
SETR GD4 D2
GOTO 34412; if() #481 Body End
SETV D2 3; if() #481 Else Start
SETR GD4 D2; if() #481 Else End
PUSHR D4; if() #890 Body End AND if() #480 Else End
PUSHV 0; UsrFunc[int Clamp(int, int, int)] Params Start
LOAD D2 0.0012; InlineFunc[int Floor(int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
PUSHR D2
PUSHV 4; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0687; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #891 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34432 ==; Test 'if'
SETV D2 0.5000; if() #891 Body Start
STORE D2 0; if() #891 Body End
SETV D2 1
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 4 D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0
POP D3
DIVR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2
SETV D2 1
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 7 D2
LOAD D2 0.0011
PUSHR D2
POP D0
READPODARRAYV D2 309
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 8 D2
PUSHR D4; unless() #892 Test
PUSHV 7168; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 34488 !=; Test 'unless'
SETV D2 7168; unless() #892 Body Start
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 8 D2; unless() #892 Body End
PUSHR D4; unless() #893 Test
PUSHV 65537; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 34500 !=; Test 'unless'
SETV D2 65536; unless() #893 Body Start
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 9 D2; unless() #893 Body End
PUSHR D4; if() #894 Test
PUSHV 1; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2707; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 34512 ==; Test 'if'
SETV D2 1; if() #894 Body Start
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 12 D2; if() #894 Body End
PUSHR D4
PUSHV 7168; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4635; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK D4
PUSHV 65537; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4635; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK D4
PUSHV 1; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.4996; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP D4
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 10 D2
LOAD D2 0.0012
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
MULTV D2 10
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 11 D2; if() #889 Body End
GOTO 34695; if() #887 Body End AND if() #479 Else End AND if() #478 Body End
LOAD D2 0.0010; if() #895 Test AND if() #478 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 7
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34695 ==; Test 'if'
PUSHR D4; if() #895 Body Start
LOAD D2 0.0010; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 4
PUSHR D2
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 10
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 5
PUSHR D2
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 10
POP D3
MULTR D2 D3
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5023; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0010; if() #482 Test
PUSHR D2
POP D0
READPODARRAYV D2 6
MODV D2 4
COMPAREV D2 2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 34594 ==; Test 'if'
SETV D2 -1000; if() #482 Body Start
PUSHR D2
LOAD D2 0.0012
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2
GOTO 34603; if() #482 Body End
SETV D2 -2; if() #482 Else Start
PUSHR D2
LOAD D2 0.0012
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2; if() #482 Else End
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 6
SUBV D2 1
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2
LOAD D2 0.0010; if() #896 Test
PUSHR D2
POP D0
READPODARRAYV D2 6
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 34695 ==; Test 'if'
SETV D2 -2; if() #896 Body Start
PUSHR D2
LOAD D2 0.0012
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2
LOAD D2 0.0010; if() #483 Test
PUSHR D2
POP D0
READPODARRAYV D2 4
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 34641 ==; Test 'if'
SETV D2 2; if() #483 Body Start
SETR GD4 D2
GOTO 34643; if() #483 Body End
SETV D2 3; if() #483 Else Start
SETR GD4 D2; if() #483 Else End
LOAD D2 0.0010; if() #897 Test
PUSHR D2
POP D0
READPODARRAYV D2 8
COMPAREV D2 0
GOTOCMP 34653 ==; Test 'if'
PUSHR D4; if() #897 Body Start
PUSHV 7168; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.4996; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP D4; if() #897 Body End
LOAD D2 0.0010; if() #898 Test
PUSHR D2
POP D0
READPODARRAYV D2 9
COMPAREV D2 0
GOTOCMP 34663 ==; Test 'if'
PUSHR D4; if() #898 Body Start
PUSHV 65537; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.4996; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP D4; if() #898 Body End
LOAD D2 0.0010; if() #899 Test
PUSHR D2
POP D0
READPODARRAYV D2 12
COMPAREV D2 0
GOTOCMP 34673 ==; Test 'if'
PUSHR D4; if() #899 Body Start
PUSHV 1; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4635; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #899 Body End
SETV D2 0
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 7 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
PUSHR D4
LOAD D2 0.0013; UsrFunc[void EZB_FaceDir4(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0011
PUSHR D2
PUSHR GD4; UsrFunc[void EZB_FaceDir4(ffc, npc, int, int)] Params End
CALLFUNC 3.3369; UsrFunc[void EZB_FaceDir4(ffc, npc, int, int)] Call
POP D4; if() #896 Body End
POPARGS D5 0.0014; if() #895 Body End AND if() #478 Else End
RETURNFUNC; Func[void EZB_FishWizardUpdate(ffc, npc, int, int)] Body End
PUSHARGSV 0 0.0006; Func[bool EZB_InSight(npc)] Body Start
SETR D4 SP2
PUSHR D4
LOAD D2 0.0006; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0606; UsrFunc[int CenterX(npc)] Call
POP D4
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0006; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0652; UsrFunc[int CenterY(npc)] Call
POP D4
STORE D2 0.0004
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
STORE D2 0.0003
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
STORE D2 0.0002
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
ADDV D2 8
STORE D2 0.0001
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
MULTV D2 8
ADDV D2 8
STORE D2 0
SETR D2 GD4; if() #489 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34761 ==; Test 'if'
LOAD D2 0.0005; InlineFunc[int Abs(int)] Params Start AND return Start AND if() #489 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
GOTOCMP 34758 >=
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
GOTOCMP 34758 >=
SETV D2 1
GOTO 34845
SETV D2 0
GOTO 34845; return End
GOTO 34844; if() #489 Body End
SETR D2 GD4; if() #490 Test AND if() #489 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34789 ==; Test 'if'
LOAD D2 0.0005; InlineFunc[int Abs(int)] Params Start AND return Start AND if() #490 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
GOTOCMP 34786 >=
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
GOTOCMP 34786 <=
SETV D2 1
GOTO 34845
SETV D2 0
GOTO 34845; return End
GOTO 34844; if() #490 Body End
SETR D2 GD4; if() #491 Test AND if() #490 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34817 ==; Test 'if'
LOAD D2 0.0004; InlineFunc[int Abs(int)] Params Start AND return Start AND if() #491 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
GOTOCMP 34814 >=
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
COMPARER D3 D2
GOTOCMP 34814 >=
SETV D2 1
GOTO 34845
SETV D2 0
GOTO 34845; return End
GOTO 34844; if() #491 Body End
SETR D2 GD4; if() #919 Test AND if() #491 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34844 ==; Test 'if'
LOAD D2 0.0004; InlineFunc[int Abs(int)] Params Start AND return Start AND if() #919 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
GOTOCMP 34842 >=
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
COMPARER D3 D2
GOTOCMP 34842 <=
SETV D2 1
GOTO 34845
SETV D2 0
GOTO 34845; return End AND if() #919 Body End
SETV D2 0; if() #491 Else End AND if() #490 Else End AND if() #489 Else End AND return Start
POPARGS D5 0.0007; return End
RETURNFUNC; Func[bool EZB_InSight(npc)] Body End
PUSHARGSV 0 0.0013; Func[void EZB_GetExtraProperties(ffc, npc, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0012
STOREV 0 0.0011
LOAD D2 0.0018
PUSHR D2
POP D0
READPODARRAYV D2 305
STORE D2 0.0010
SETV D2 0
PUSHR D2
LOAD D2 0.0014
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
ALLOCATEMEMV D2 20 0
WRITEPODSTRING D2 "EZBoss_ExtraAttacks"
STORE D2 0.0008
LOAD D2 0.0008; InlineFunc[int Game::GetFFCScript(char32[])] Params
GETFFCSCRIPT D2; InlineFunc[int Game::GetFFCScript(char32[])] Body
STORE D2 0.0007
ALLOCATEMEMV D2 24 0
WRITEPODSTRING D2 "EZBoss_ChangeLaserColor"
STORE D2 0.0005
LOAD D2 0.0005; InlineFunc[int Game::GetFFCScript(char32[])] Params
GETFFCSCRIPT D2; InlineFunc[int Game::GetFFCScript(char32[])] Body
STORE D2 0.0004
ALLOCATEMEMV D2 28 0
WRITEPODSTRING D2 "EZBoss_ExtraTransformations"
STORE D2 0.0002
LOAD D2 0.0002; InlineFunc[int Game::GetFFCScript(char32[])] Params
GETFFCSCRIPT D2; InlineFunc[int Game::GetFFCScript(char32[])] Body
STORE D2 0.0001
SETV D2 0
PUSHR D2
LOAD D2 0.0018
SETR D0 D2
POP D2
WRITEPODARRAYVR 200 D2
LOAD D2 0.0017; if() #900 Test
COMPAREV D2 50
GOTOCMP 34897 ==
LOAD D2 0.0017
COMPAREV D2 51
GOTOCMP 34897 ==
LOAD D2 0.0017
COMPAREV D2 71
GOTOCMP 34897 ==
SETV D2 0
GOTO 34898
SETV D2 1
COMPAREV D2 0
GOTOCMP 34948 ==; Test 'if'
PUSHR D4; if() #900 Body Start
LOAD D2 0.0021; UsrFunc[void EZB_AddTransformation(ffc, npc, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0020
PUSHR D2
LOAD D2 0.0018
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0014
PUSHR D2; UsrFunc[void EZB_AddTransformation(ffc, npc, int, int, int)] Params End
CALLFUNC 3.0550; UsrFunc[void EZB_AddTransformation(ffc, npc, int, int, int)] Call
POP D4
SETV D2 1
PUSHR D2
LOAD D2 0.0018
SETR D0 D2
POP D2
WRITEPODARRAYVR 200 D2
LOAD D2 0.0017; if() #484 Test
COMPAREV D2 51
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34931 ==; Test 'if'
SETV D2 2; if() #484 Body Start
PUSHR D2
LOAD D2 0.0018
SETR D0 D2
POP D2
WRITEPODARRAYVR 200 D2
GOTO 34942; if() #484 Body End
LOAD D2 0.0017; if() #901 Test AND if() #484 Else Start
COMPAREV D2 71
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34942 ==; Test 'if'
SETV D2 3; if() #901 Body Start
PUSHR D2
LOAD D2 0.0018
SETR D0 D2
POP D2
WRITEPODARRAYVR 200 D2; if() #901 Body End
LOAD D2 0.0016; if() #484 Else End
STORE D2 0.0017
LOAD D2 0.0015
STORE D2 0.0016
SETV D2 0
STORE D2 0.0015; if() #900 Body End
LOAD D2 0.0017; if() #902 Test
COMPAREV D2 0
GOTOCMP 34964 ==; Test 'if'
PUSHR D4; if() #902 Body Start
LOAD D2 0.0021; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0020
PUSHR D2
LOAD D2 0.0018
PUSHR D2
LOAD D2 0.0017
PUSHR D2
LOAD D2 0.0014
PUSHR D2; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Params End
CALLFUNC 3.0395; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Call
POP D4; if() #902 Body End
LOAD D2 0.0016; if() #903 Test
COMPAREV D2 0
GOTOCMP 34980 ==; Test 'if'
PUSHR D4; if() #903 Body Start
LOAD D2 0.0021; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0020
PUSHR D2
LOAD D2 0.0018
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0014
PUSHR D2; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Params End
CALLFUNC 3.0395; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Call
POP D4; if() #903 Body End
LOAD D2 0.0015; if() #904 Test
COMPAREV D2 0
GOTOCMP 34996 ==; Test 'if'
PUSHR D4; if() #904 Body Start
LOAD D2 0.0021; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0020
PUSHR D2
LOAD D2 0.0018
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0014
PUSHR D2; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Params End
CALLFUNC 3.0395; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Call
POP D4; if() #904 Body End
SETV D2 1; for() #240 setup
STORE D2 0.0012
LOAD D2 0.0012; for() #240 LoopTest
COMPAREV D2 32
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 35346 ==; for() #240 TestFail?
LOAD D2 0.0012; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #240 Body Start
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0
LOAD D2 0; if() #485 Test
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
PUSHR D2
LOAD D2 0.0007
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 35070 ==; Test 'if'
LOAD D2 0; if() #905 Test AND if() #485 Body Start
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
PUSHR D2
LOAD D2 0.0019
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 35342 ==; Test 'if'
SETV D2 1; for() #241 setup AND if() #905 Body Start
STORE D2 0.0011
LOAD D2 0.0011; for() #241 LoopTest
COMPAREV D2 7
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 35342 ==; for() #241 TestFail?
LOAD D2 0; if() #906 Test AND for() #241 Body Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
GOTOCMP 35065 ==; Test 'if'
PUSHR D4; if() #906 Body Start
LOAD D2 0.0021; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0020
PUSHR D2
LOAD D2 0.0018
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP D0
POP REFFFC
PUSHR FFINITDD
LOAD D2 0.0014
PUSHR D2; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Params End
CALLFUNC 3.0395; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Call
POP D4; if() #906 Body End
LOAD D2 0.0011; for() #241 Body End AND for() #241 LoopIncrement
ADDV D2 1
STORE D2 0.0011
GOTO 35033; for() #241 End
GOTO 35342; if() #905 Body End AND if() #485 Body End
LOAD D2 0; if() #486 Test AND if() #485 Else Start
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 35232 ==; Test 'if'
LOAD D2 0; if() #907 Test AND if() #486 Body Start
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
PUSHR D2
LOAD D2 0.0019
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 35342 ==; Test 'if'
LOAD D2 0; if() #908 Test AND if() #907 Body Start
PUSHR D2
SETV D2 1
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
GOTOCMP 35124 !=
LOAD D2 0
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
GOTOCMP 35124 !=
LOAD D2 0
PUSHR D2
SETV D2 3
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
GOTOCMP 35124 !=
SETV D2 0
GOTO 35125
SETV D2 1
COMPAREV D2 0
GOTOCMP 35163 ==; Test 'if'
LOAD D2 0; if() #908 Body Start
PUSHR D2
SETV D2 1
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
PUSHR D2
LOAD D2 0.0013
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
PUSHR D2
LOAD D2 0.0013
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0
PUSHR D2
SETV D2 3
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
PUSHR D2
LOAD D2 0.0013
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2; if() #908 Body End
LOAD D2 0; if() #909 Test
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
GOTOCMP 35192 !=
LOAD D2 0
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
GOTOCMP 35192 !=
LOAD D2 0
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
GOTOCMP 35192 !=
SETV D2 0
GOTO 35193
SETV D2 1
COMPAREV D2 0
GOTOCMP 35342 ==; Test 'if'
LOAD D2 0; if() #909 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
PUSHR D2
LOAD D2 0.0013
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
LOAD D2 0
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
PUSHR D2
LOAD D2 0.0013
SETR D0 D2
POP D2
WRITEPODARRAYVR 4 D2
LOAD D2 0
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
PUSHR D2
LOAD D2 0.0013
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2; if() #909 Body End
GOTO 35342; if() #907 Body End AND if() #486 Body End
LOAD D2 0; if() #910 Test AND if() #486 Else Start
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 35342 ==; Test 'if'
LOAD D2 0; if() #911 Test AND if() #910 Body Start
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
PUSHR D2
LOAD D2 0.0019
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 35342 ==; Test 'if'
LOAD D2 0; if() #912 Test AND if() #911 Body Start
PUSHR D2
SETV D2 1
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 35281 ==; Test 'if'
LOAD D2 0; if() #912 Body Start
PUSHR D2
SETV D2 1
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
SUBV D2 1
PUSHR D2
LOAD D2 0.0018
SETR D0 D2
POP D2
WRITEPODARRAYVR 313 D2; if() #912 Body End
LOAD D2 0; if() #913 Test
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 1
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 35304 ==; Test 'if'
LOAD D2 0; if() #913 Body Start
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
PUSHR D2
LOAD D2 0.0018
SETR D0 D2
POP D2
WRITEPODARRAYVR 314 D2; if() #913 Body End
SETV D2 3; for() #242 setup
STORE D2 0.0011
LOAD D2 0.0011; for() #242 LoopTest
COMPAREV D2 7
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 35342 ==; for() #242 TestFail?
LOAD D2 0; if() #914 Test AND for() #242 Body Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
GOTOCMP 35338 ==; Test 'if'
PUSHR D4; if() #914 Body Start
LOAD D2 0.0021; UsrFunc[void EZB_AddTransformation(ffc, npc, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0020
PUSHR D2
LOAD D2 0.0018
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP D0
POP REFFFC
PUSHR FFINITDD
LOAD D2 0.0014
PUSHR D2; UsrFunc[void EZB_AddTransformation(ffc, npc, int, int, int)] Params End
CALLFUNC 3.0550; UsrFunc[void EZB_AddTransformation(ffc, npc, int, int, int)] Call
POP D4; if() #914 Body End
LOAD D2 0.0011; for() #242 Body End AND for() #242 LoopIncrement
ADDV D2 1
STORE D2 0.0011
GOTO 35306; for() #242 End
LOAD D2 0.0012; if() #911 Body End AND if() #910 Body End AND if() #486 Else End AND if() #485 Else End AND for() #240 Body End AND for() #240 LoopIncrement
ADDV D2 1
STORE D2 0.0012
GOTO 34998; for() #240 End
LOAD D2 0.0014; if() #915 Test
PUSHR D2
POP D0
READPODARRAYV D2 100
COMPAREV D2 0
GOTOCMP 35360 ==
LOAD D2 0.0018
PUSHR D2
POP D0
READPODARRAYV D2 200
COMPAREV D2 0
GOTOCMP 35360 !=
SETV D2 1
GOTO 35361
SETV D2 0
COMPAREV D2 0
GOTOCMP 35369 ==; Test 'if'
SETV D2 2; if() #915 Body Start
PUSHR D2
LOAD D2 0.0018
SETR D0 D2
POP D2
WRITEPODARRAYVR 200 D2; if() #915 Body End
LOAD D2 0.0014; if() #916 Test
PUSHR D2
POP D0
READPODARRAYV D2 100
COMPAREV D2 0
GOTOCMP 35394 ==; Test 'if'
PUSHR D4; if() #916 Body Start
LOAD D2 0.0020; UsrFunc[void EZB_Barriershift_Store(npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0014
PUSHR D2
LOAD D2 0.0014; InlineFunc[int Rand(int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 100
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
ADDV D2 101
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0018
PUSHR D2; UsrFunc[void EZB_Barriershift_Store(npc, int, int)] Params End
CALLFUNC 3.0973; UsrFunc[void EZB_Barriershift_Store(npc, int, int)] Call
POP D4; if() #916 Body End
LOAD D3 0.0002
DEALLOCATEMEMR D3
LOAD D3 0.0005
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
POPARGS D5 0.0022
RETURNFUNC; Func[void EZB_GetExtraProperties(ffc, npc, int, int, int, int, int, int, int)] Body End
SETR D4 SP2; Func[void EZB_InitVars(int)] Body Start
SETV D2 0
PUSHR D2
LOAD D2 0
SETR D0 D2
POP D2
WRITEPODARRAYVR 313 D2
SETV D2 0
PUSHR D2
LOAD D2 0
SETR D0 D2
POP D2
WRITEPODARRAYVR 314 D2
SETV D2 0
PUSHR D2
LOAD D2 0
SETR D0 D2
POP D2
WRITEPODARRAYVR 316 D2
POP D5
RETURNFUNC; Func[void EZB_InitVars(int)] Body End
PUSHARGSV 0 0.0017; Func[bool EZB_RotRectCollision(int, int, int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0024; InlineFunc[int Sqrt(int)] Params Start
PUSHR D2
LOAD D2 0.0024
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0023
PUSHR D2
LOAD D2 0.0023
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3; InlineFunc[int Sqrt(int)] Params End
SQROOTR D2 D2; InlineFunc[int Sqrt(int)] Body
STORE D2 0.0016
LOAD D2 0.0019; InlineFunc[int Sqrt(int)] Params Start
PUSHR D2
LOAD D2 0.0019
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0018
PUSHR D2
LOAD D2 0.0018
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3; InlineFunc[int Sqrt(int)] Params End
SQROOTR D2 D2; InlineFunc[int Sqrt(int)] Body
STORE D2 0.0015
LOAD D2 0.0024; InlineFunc[int ArcSin(int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start
PUSHR D2
LOAD D2 0.0016
POP D3
DIVR D3 D2; InlineFunc[int ArcSin(int)] Params End
ARCSINR D2 D3; InlineFunc[int ArcSin(int)] Body
SETR D3 D2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
STORE D2 0.0014
LOAD D2 0.0019; InlineFunc[int ArcSin(int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start
PUSHR D2
LOAD D2 0.0015
POP D3
DIVR D3 D2; InlineFunc[int ArcSin(int)] Params End
ARCSINR D2 D3; InlineFunc[int ArcSin(int)] Body
SETR D3 D2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
STORE D2 0.0013
ALLOCATEMEMV D2 4 0
STORE D2 0.0012
ALLOCATEMEMV D2 4 0
STORE D2 0.0011
ALLOCATEMEMV D2 4 0
STORE D2 0.0010
ALLOCATEMEMV D2 4 0
STORE D2 0.0009
ALLOCATEMEMV D2 4 0
STORE D2 0.0008
ALLOCATEMEMV D2 4 0
STORE D2 0.0007
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
LOAD D2 0.0026
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0022; InlineFunc[int Cos(int)] Params Start
PUSHR D2
LOAD D2 0.0014
POP D3
SUBR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0012
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0025
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0022; InlineFunc[int Sin(int)] Params Start
PUSHR D2
LOAD D2 0.0014
POP D3
SUBR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0011
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0026
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0022; InlineFunc[int Cos(int)] Params Start
PUSHR D2
LOAD D2 0.0014
POP D3
ADDR D2 D3
SETR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0012
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0025
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0022; InlineFunc[int Sin(int)] Params Start
PUSHR D2
LOAD D2 0.0014
POP D3
ADDR D2 D3
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0011
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0026
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0022; InlineFunc[int Cos(int)] Params Start
ADDV D2 180
PUSHR D2
LOAD D2 0.0014
POP D3
SUBR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0012
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
LOAD D2 0.0025
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0022; InlineFunc[int Sin(int)] Params Start
ADDV D2 180
PUSHR D2
LOAD D2 0.0014
POP D3
SUBR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0011
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
LOAD D2 0.0026
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0022; InlineFunc[int Cos(int)] Params Start
ADDV D2 180
PUSHR D2
LOAD D2 0.0014
POP D3
ADDR D2 D3
SETR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0012
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
LOAD D2 0.0025
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0022; InlineFunc[int Sin(int)] Params Start
ADDV D2 180
PUSHR D2
LOAD D2 0.0014
POP D3
ADDR D2 D3
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0011
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
LOAD D2 0.0021
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0017; InlineFunc[int Cos(int)] Params Start
PUSHR D2
LOAD D2 0.0013
POP D3
SUBR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0020
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0017; InlineFunc[int Sin(int)] Params Start
PUSHR D2
LOAD D2 0.0013
POP D3
SUBR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0021
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0017; InlineFunc[int Cos(int)] Params Start
PUSHR D2
LOAD D2 0.0013
POP D3
ADDR D2 D3
SETR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0020
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0017; InlineFunc[int Sin(int)] Params Start
PUSHR D2
LOAD D2 0.0013
POP D3
ADDR D2 D3
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0021
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0017; InlineFunc[int Cos(int)] Params Start
ADDV D2 180
PUSHR D2
LOAD D2 0.0013
POP D3
SUBR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
LOAD D2 0.0020
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0017; InlineFunc[int Sin(int)] Params Start
ADDV D2 180
PUSHR D2
LOAD D2 0.0013
POP D3
SUBR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
LOAD D2 0.0021
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0017; InlineFunc[int Cos(int)] Params Start
ADDV D2 180
PUSHR D2
LOAD D2 0.0013
POP D3
ADDR D2 D3
SETR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
LOAD D2 0.0020
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0017; InlineFunc[int Sin(int)] Params Start
ADDV D2 180
PUSHR D2
LOAD D2 0.0013
POP D3
ADDR D2 D3
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
LOAD D2 0.0012
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0012
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0008
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0011
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0007
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0012
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0012
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0008
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0011
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0007
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0008
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
LOAD D2 0.0009
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0009
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0007
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0008
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
LOAD D2 0.0009
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0009
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0007
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
STOREV 0 0.0001; for() #244 setup
LOAD D2 0.0001; for() #244 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 36171 ==; for() #244 TestFail?
LOAD D2 0.0012; for() #244 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0006
LOAD D2 0.0006
STORE D2 0.0005
LOAD D2 0.0006
STORE D2 0.0004
STOREV 1 0; for() #245 setup
LOAD D2 0; for() #245 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 36044 ==; for() #245 TestFail?
LOAD D2 0.0012; for() #245 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0006
LOAD D2 0.0006; if() #922 Test
PUSHR D2
LOAD D2 0.0005
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 36030 ==; Test 'if'
LOAD D2 0.0006; if() #922 Body Start
STORE D2 0.0005; if() #922 Body End
LOAD D2 0.0006; if() #923 Test
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 36040 ==; Test 'if'
LOAD D2 0.0006; if() #923 Body Start
STORE D2 0.0004; if() #923 Body End
LOAD D2 0; for() #245 Body End AND for() #245 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 35985; for() #245 End
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0009
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0006
LOAD D2 0.0006
STORE D2 0.0003
LOAD D2 0.0006
STORE D2 0.0002
STOREV 1 0; for() #246 setup
LOAD D2 0; for() #246 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 36136 ==; for() #246 TestFail?
LOAD D2 0.0010; for() #246 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0006
LOAD D2 0.0006; if() #924 Test
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 36122 ==; Test 'if'
LOAD D2 0.0006; if() #924 Body Start
STORE D2 0.0003; if() #924 Body End
LOAD D2 0.0006; if() #925 Test
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 36132 ==; Test 'if'
LOAD D2 0.0006; if() #925 Body Start
STORE D2 0.0002; if() #925 Body End
LOAD D2 0; for() #246 Body End AND for() #246 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 36077; for() #246 End
LOAD D2 0.0002; if() #926 Test
PUSHR D2
LOAD D2 0.0005
POP D3
COMPARER D3 D2
GOTOCMP 36150 <
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
GOTOCMP 36150 <
SETV D2 0
GOTO 36151
SETV D2 1
COMPAREV D2 0
GOTOCMP 36167 ==; Test 'if'
SETV D2 0; return Start AND if() #926 Body Start
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
LOAD D3 0.0009
DEALLOCATEMEMR D3
LOAD D3 0.0010
DEALLOCATEMEMR D3
LOAD D3 0.0011
DEALLOCATEMEMR D3
LOAD D3 0.0012
DEALLOCATEMEMR D3
GOTO 36197; return End AND if() #926 Body End
LOAD D2 0.0001; for() #244 Body End AND for() #244 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 35947; for() #244 End
SETV D2 1; return Start
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
LOAD D3 0.0009
DEALLOCATEMEMR D3
LOAD D3 0.0010
DEALLOCATEMEMR D3
LOAD D3 0.0011
DEALLOCATEMEMR D3
LOAD D3 0.0012
DEALLOCATEMEMR D3
GOTO 36197; return End
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
LOAD D3 0.0009
DEALLOCATEMEMR D3
LOAD D3 0.0010
DEALLOCATEMEMR D3
LOAD D3 0.0011
DEALLOCATEMEMR D3
LOAD D3 0.0012
DEALLOCATEMEMR D3
POPARGS D5 0.0027
RETURNFUNC; Func[bool EZB_RotRectCollision(int, int, int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[int EZB_NumSummons(npc)] Body Start
SETR D4 SP2
STOREV 0 0.0001
STOREV 0 0; for() #243 setup
LOAD D2 0; for() #243 LoopTest
COMPAREV D2 256
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 36223 ==; for() #243 TestFail?
LOAD D2 0.0002; InlineFunc[bool npc::isValid()] Params Start AND if() #921 Test AND for() #243 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2; InlineFunc[bool npc::isValid()] Params End
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 36219 ==; Test 'if'
LOAD D2 0.0001; if() #921 Body Start
ADDV D2 1
STORE D2 0.0001; if() #921 Body End
LOAD D2 0; for() #243 Body End AND for() #243 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 36203; for() #243 End
LOAD D2 0.0001; return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[int EZB_NumSummons(npc)] Body End
PUSHARGSV 0 0.0005; Func[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 15 0
WRITEPODSTRING D2 "EZBoss_Effects"
STORE D2 0.0003
LOAD D2 0.0003; InlineFunc[int Game::GetFFCScript(char32[])] Params
GETFFCSCRIPT D2; InlineFunc[int Game::GetFFCScript(char32[])] Body
STORE D2 0.0002
LOAD D2 0.0002; if() #492 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 36286 ==; Test 'if'
ALLOCATEMEMV D2 8 0; if() #492 Body Start
PUSHR D2
SETR D0 D2
PUSHR D0
LOAD D2 0.0012
POP D0
WRITEPODARRAYVR 0 D2
PUSHR D0
LOAD D2 0.0011
POP D0
WRITEPODARRAYVR 1 D2
PUSHR D0
LOAD D2 0.0010
POP D0
WRITEPODARRAYVR 2 D2
PUSHR D0
LOAD D2 0.0009
POP D0
WRITEPODARRAYVR 3 D2
PUSHR D0
LOAD D2 0.0008
POP D0
WRITEPODARRAYVR 4 D2
PUSHR D0
LOAD D2 0.0007
POP D0
WRITEPODARRAYVR 5 D2
PUSHR D0
LOAD D2 0.0006
POP D0
WRITEPODARRAYVR 6 D2
PUSHR D0
LOAD D2 0.0005
POP D0
WRITEPODARRAYVR 7 D2
POP D2
STORE D2 0
PUSHR D4
LOAD D2 0.0002; UsrFunc[int RunFFCScript(int, untyped[])] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[int RunFFCScript(int, untyped[])] Params End
CALLFUNC 2.9339; UsrFunc[int RunFFCScript(int, untyped[])] Call
POP D4
LOAD D3 0
DEALLOCATEMEMR D3
GOTO 36295; if() #492 Body End
ALLOCATEMEMV D2 73 0; if() #492 Else Start
WRITEPODSTRING D2 "ERROR: EZBoss_Effects script wasn't found. Did you forget to assign it?\n"
STORE D2 0
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0
DEALLOCATEMEMR D3; if() #492 Else End
LOAD D3 0.0003
DEALLOCATEMEMR D3
POPARGS D5 0.0013
RETURNFUNC; Func[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Body End
SETR D4 SP2; Func[void EZB_SetEWeaponDeathEffect(eweapon)] Body Start
LOAD D2 0; if() #493 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNID
COMPAREV D2 140
GOTOCMP 36314 ==
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNID
COMPAREV D2 142
GOTOCMP 36314 ==
SETV D2 0
GOTO 36315
SETV D2 1
COMPAREV D2 0
GOTOCMP 36325 ==; Test 'if'
PUSHR D4; if() #493 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 12
PUSHV -1; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 2.9507; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4
GOTO 36418; if() #493 Body End
LOAD D2 0; if() #494 Test AND if() #493 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNID
COMPAREV D2 139
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 36341 ==; Test 'if'
PUSHR D4; if() #494 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 14
PUSHV -1; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 2.9507; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4
GOTO 36418; if() #494 Body End
LOAD D2 0; if() #495 Test AND if() #494 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNID
COMPAREV D2 137
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 36360 ==; Test 'if'
PUSHR D4; if() #495 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 3
LOAD D2 0
PUSHR D2
POP REFEWPN
PUSHR EWPNPOWER; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 2.9507; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4
GOTO 36418; if() #495 Body End
LOAD D2 0; if() #496 Test AND if() #495 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNID
COMPAREV D2 138
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 36379 ==; Test 'if'
PUSHR D4; if() #496 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 4
LOAD D2 0
PUSHR D2
POP REFEWPN
PUSHR EWPNPOWER; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 2.9507; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4
GOTO 36418; if() #496 Body End
LOAD D2 0; if() #497 Test AND if() #496 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNID
COMPAREV D2 130
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 36395 ==; Test 'if'
PUSHR D4; if() #497 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 5
PUSHV -1; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 2.9507; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4
GOTO 36418; if() #497 Body End
LOAD D2 0; if() #498 Test AND if() #497 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNID
COMPAREV D2 134
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 36411 ==; Test 'if'
PUSHR D4; if() #498 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 2
PUSHV 16; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 2.9507; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4
GOTO 36418; if() #498 Body End
PUSHR D4; if() #498 Else Start
LOAD D2 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV -1; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 2.9507; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4; if() #498 Else End
POP D5; if() #497 Else End AND if() #496 Else End AND if() #495 Else End AND if() #494 Else End AND if() #493 Else End
RETURNFUNC; Func[void EZB_SetEWeaponDeathEffect(eweapon)] Body End
SETR D4 SP2; Func[void EZB_SetLaserArray(int, int, int, int, int, int, int, int, int, int)] Body Start
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0007
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
MULTV D2 2
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
MULTV D2 3
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
MULTV D2 4
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
MULTV D2 5
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETV D2 1
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
MULTV D2 6
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
MULTV D2 7
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
MULTV D2 8
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
POPARGS D5 0.0010
RETURNFUNC; Func[void EZB_SetLaserArray(int, int, int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
PUSHR D4; if() #499 Test
PUSHV 1; UsrFunc[int ScreenFlag(int, int)] Params Start
PUSHV 4; UsrFunc[int ScreenFlag(int, int)] Params End
CALLFUNC 2.9460; UsrFunc[int ScreenFlag(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 36559 ==
LOAD D2 0.0011
COMPAREV D2 2
GOTOCMP 36559 !=
SETV D2 1
GOTO 36560
SETV D2 0
COMPAREV D2 0
GOTOCMP 36565 ==; Test 'if'
SETV D2 1; if() #499 Body Start
STORE D2 0.0011
GOTO 36582; if() #499 Body End
PUSHR D4; if() #927 Test AND if() #499 Else Start
PUSHV 1; UsrFunc[int ScreenFlag(int, int)] Params Start
PUSHV 5; UsrFunc[int ScreenFlag(int, int)] Params End
CALLFUNC 2.9460; UsrFunc[int ScreenFlag(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 36577 ==
LOAD D2 0.0011
COMPAREV D2 3
GOTOCMP 36577 !=
SETV D2 1
GOTO 36578
SETV D2 0
COMPAREV D2 0
GOTOCMP 36582 ==; Test 'if'
SETV D2 4; if() #927 Body Start
STORE D2 0.0011; if() #927 Body End
LOAD D2 0.0004; if() #499 Else End AND InlineFunc[int Choose(int)] Params Start
PUSHVARGR D2
LOAD D2 0.0003
PUSHVARGR D2
LOAD D2 0.0002
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0001
STOREV 0 0; for() #247 setup
LOAD D2 0; for() #247 LoopTest
PUSHR D2
LOAD D2 0.0006
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 36649 ==; for() #247 TestFail?
LOAD D2 0.0008; if() #928 Test AND for() #247 Body Start
PUSHR D2
LOAD D2 0
MULTV D2 2
POP D3
SUBR D3 D2
SETR D2 D3
COMPAREV D2 0
GOTOCMP 36622 <=
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
MULTV D2 2
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0007
POP D3
COMPARER D3 D2
GOTOCMP 36622 >=
SETV D2 1
GOTO 36623
SETV D2 0
COMPAREV D2 0
GOTOCMP 36645 ==; Test 'if'
LOAD D2 0.0011; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #928 Body Start
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
MULTV D2 2
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0001
PUSHR D2
PUSHV 1
PUSHARGSV 0 0.0004
PUSHV 128; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params End
CIRCLER; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body End AND if() #928 Body End
LOAD D2 0; for() #247 Body End AND for() #247 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 36591; for() #247 End
LOAD D2 0.0008; InlineFunc[int Min(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0007
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #929 Test
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0009; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 36682 ==; Test 'if'
PUSHR D4; if() #929 Body Start
LOAD D2 0.0005; UsrFunc[void EZB_DamageLink(int)] Params Start
PUSHR D2; UsrFunc[void EZB_DamageLink(int)] Params End
CALLFUNC 3.1908; UsrFunc[void EZB_DamageLink(int)] Call
POP D4; if() #929 Body End
POPARGS D5 0.0012
RETURNFUNC; Func[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Body End
SETR D4 SP2; Func[void EZB_Teleport(ffc, npc, int)] Body Start
PUSHR D4
LOAD D2 0.0002; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHARGSV -1000 0.0002
PUSHV 16; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Params End
CALLFUNC 3.6698; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Call
POP D4
POPARGS D5 0.0003
RETURNFUNC; Func[void EZB_Teleport(ffc, npc, int)] Body End
PUSHARGSV 0 0.0007; Func[void EZB_Teleport(ffc, npc, int, int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 306
STORE D2 0.0006
LOAD D2 0.0006
ANDV D2 15
STORE D2 0.0005
LOAD D2 0.0006
RSHIFTV D2 4
ANDV D2 15
STORE D2 0.0004
LOAD D2 0.0004; if() #930 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 36719 ==; Test 'if'
LOAD D2 0.0005; if() #930 Body Start
STORE D2 0.0004; if() #930 Body End
PUSHR D4
LOAD D2 0.0005; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 4; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0687; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0004; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 4; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0687; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0004
SETV D2 32; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
STOREV 0 0.0003
SETV D2 0
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFNPC
SETR NPCCOLLDET D2
SETV D2 -1000
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2
SETR D2 GD10
STORE D2 0.0002
STOREV 0 0.0001; for() #248 setup
LOAD D2 0.0001; for() #248 LoopTest
PUSHR D2
LOAD D2 0.0007
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 36797 ==; for() #248 TestFail?
PUSHR D4; if(true) #500 [Opt:AlwaysOn] AND for() #248 Body Start
LOAD D2 0.0012; UsrFunc[void EZB_DrawTeleport(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0010
PUSHR D2
PUSHR GD1
SETR D2 GD2
SUBV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[void EZB_DrawTeleport(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3174; UsrFunc[void EZB_DrawTeleport(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0012; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #248 Body End
LOAD D2 0.0001; for() #248 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 36760; for() #248 End
SETV D2 -1000
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2
SETV D3 176; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0003
STOREV 0 0.0001; for() #249 setup
LOAD D2 0.0001; for() #249 LoopTest
COMPAREV D2 352
GOTOCMP 36887 >=
PUSHR D4
LOAD D2 0.0012; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2
PUSHR D4
LOAD D2 0.0003; UsrFunc[int ComboX(int)] Params Start
PUSHR D2; UsrFunc[int ComboX(int)] Params End
CALLFUNC 2.0720; UsrFunc[int ComboX(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0003; UsrFunc[int ComboY(int)] Params Start
PUSHR D2; UsrFunc[int ComboY(int)] Params End
CALLFUNC 2.0726; UsrFunc[int ComboY(int)] Call
POP D4
PUSHR D2; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Params End
CALLFUNC 3.1680; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 36885 ==
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start
LOAD D2 0.0003; UsrFunc[int ComboX(int)] Params Start
PUSHR D2; UsrFunc[int ComboX(int)] Params End
CALLFUNC 2.0720; UsrFunc[int ComboX(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_WIDTH
DIVV D2 2
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
LOAD D2 0.0003; UsrFunc[int ComboY(int)] Params Start
PUSHR D2; UsrFunc[int ComboY(int)] Params End
CALLFUNC 2.0726; UsrFunc[int ComboY(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_HEIGHT
DIVV D2 2
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
CALLFUNC 2.0569; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0576; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
DIVV D2 2
MULTV D2 8
ADDV D2 32
POP D3
COMPARER D3 D2
GOTOCMP 36887 >=
SETV D2 1
GOTO 36888
SETV D2 0
COMPAREV D2 0
GOTOCMP 36906 ==; for() #249 TestFail?
LOAD D2 0.0001; if() #501 Test AND for() #249 Body Start
COMPAREV D2 176
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 36899 ==; Test 'if'
LOAD D2 0.0001; if() #501 Body Start
SUBV D2 176
STORE D2 0.0003
GOTO 36902; if() #501 Body End
SETV D3 176; InlineFunc[int Rand(int)] Params AND if() #501 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0003; if() #501 Else End
LOAD D2 0.0001; for() #249 Body End AND for() #249 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 36810; for() #249 End
PUSHR D4
LOAD D2 0.0003; UsrFunc[int ComboX(int)] Params Start
PUSHR D2; UsrFunc[int ComboX(int)] Params End
CALLFUNC 2.0720; UsrFunc[int ComboX(int)] Call
POP D4
SETR GD1 D2
PUSHR D4
LOAD D2 0.0003; UsrFunc[int ComboY(int)] Params Start
PUSHR D2; UsrFunc[int ComboY(int)] Params End
CALLFUNC 2.0726; UsrFunc[int ComboY(int)] Call
POP D4
SETR GD2 D2
LOAD D2 0.0009; if() #931 Test
COMPAREV D2 -1000
GOTOCMP 36926 <=
LOAD D2 0.0008
COMPAREV D2 -1000
GOTOCMP 36926 <=
SETV D2 1
GOTO 36927
SETV D2 0
COMPAREV D2 0
GOTOCMP 36933 ==; Test 'if'
LOAD D2 0.0009; if() #931 Body Start
SETR GD1 D2
LOAD D2 0.0008
SETR GD2 D2; if() #931 Body End
PUSHR D4
LOAD D2 0.0012; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0012; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3396; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4
STOREV 0 0.0001; for() #250 setup
LOAD D2 0.0001; for() #250 LoopTest
PUSHR D2
LOAD D2 0.0007
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 36992 ==; for() #250 TestFail?
PUSHR D4; if(true) #502 [Opt:AlwaysOn] AND for() #250 Body Start
LOAD D2 0.0012; UsrFunc[void EZB_DrawTeleport(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0010
PUSHR D2
PUSHR GD1
SETR D2 GD2
SUBV D2 2
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0001
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0007
PUSHR D2; UsrFunc[void EZB_DrawTeleport(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3174; UsrFunc[void EZB_DrawTeleport(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0012; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #250 Body End
LOAD D2 0.0001; for() #250 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 36951; for() #250 End
SETV D2 -2
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2
LOAD D2 0.0002
SETR GD10 D2
SETV D2 1
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFNPC
SETR NPCCOLLDET D2
POPARGS D5 0.0013
RETURNFUNC; Func[void EZB_Teleport(ffc, npc, int, int, int, int)] Body End
PUSHARGSV 0 0.0003; Func[void EZB_Trail(ffc, npc, int)] Body Start
SETR D4 SP2
LOAD D2 0.0003
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0.0002
SETR D3 GD10; InlineFunc[int Game::ComboTile(int)] Params
COMBOTILE D2 D3; InlineFunc[int Game::ComboTile(int)] Body
STORE D2 0.0001
LOAD D2 0.0002; if() #933 Test
ANDV D2 1
COMPAREV D2 0
GOTOCMP 37035 !=
LOAD D2 0.0002
ANDV D2 2
COMPAREV D2 0
GOTOCMP 37035 !=
SETV D2 0
GOTO 37036
SETV D2 1
COMPAREV D2 0
GOTOCMP 37046 ==; Test 'if'
SETR D2 GD10; InlineFunc[int Game::ComboTile(int)] Params Start AND if() #933 Body Start
PUSHR D2
SETR D2 GD4
POP D3
ADDR D2 D3
SETR D3 D2; InlineFunc[int Game::ComboTile(int)] Params End
COMBOTILE D2 D3; InlineFunc[int Game::ComboTile(int)] Body
STORE D2 0.0001; if() #933 Body End
PUSHR D4
PUSHV 40; UsrFunc[lweapon CreateLWeaponAt(int, int, int)] Params Start
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X_OFFSET
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y_OFFSET
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[lweapon CreateLWeaponAt(int, int, int)] Params End
CALLFUNC 2.0731; UsrFunc[lweapon CreateLWeaponAt(int, int, int)] Call
POP D4
STORE D2 0
SETV D2 3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_EXTEND D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2
LOAD D2 0.0005
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_CSET
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFLWPN
SETR LWPNOTILE D2
SETV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_DRAW_STYLE D2
SETV D2 8
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFLWPN
SETR LWPNDEAD D2
POPARGS D5 0.0006
RETURNFUNC; Func[void EZB_Trail(ffc, npc, int)] Body End
SETR D4 SP2; Func[int EZB_TurnDir4(int, bool)] Body Start
LOAD D2 0; if() #503 Test
COMPAREV D2 0
GOTOCMP 37204 ==; Test 'if'
LOAD D2 0.0001; if() #504 Test AND if() #503 Body Start
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 37179 ==; Test 'if'
SETV D2 2; return Start AND if() #504 Body Start
GOTO 37236; return End
GOTO 37202; if() #504 Body End
LOAD D2 0.0001; if() #505 Test AND if() #504 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 37187 ==; Test 'if'
SETV D2 3; return Start AND if() #505 Body Start
GOTO 37236; return End
GOTO 37202; if() #505 Body End
LOAD D2 0.0001; if() #506 Test AND if() #505 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 37195 ==; Test 'if'
SETV D2 1; return Start AND if() #506 Body Start
GOTO 37236; return End
GOTO 37202; if() #506 Body End
LOAD D2 0.0001; if() #934 Test AND if() #506 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 37202 ==; Test 'if'
SETV D2 0; return Start AND if() #934 Body Start
GOTO 37236; return End AND if() #934 Body End
SETV D2 0; if() #506 Else End AND if() #505 Else End AND if() #504 Else End AND return Start
GOTO 37236; return End AND if() #503 Body End
LOAD D2 0.0001; if() #507 Test AND if() #503 Else Start
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 37212 ==; Test 'if'
SETV D2 3; return Start AND if() #507 Body Start
GOTO 37236; return End
GOTO 37235; if() #507 Body End
LOAD D2 0.0001; if() #508 Test AND if() #507 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 37220 ==; Test 'if'
SETV D2 2; return Start AND if() #508 Body Start
GOTO 37236; return End
GOTO 37235; if() #508 Body End
LOAD D2 0.0001; if() #509 Test AND if() #508 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 37228 ==; Test 'if'
SETV D2 0; return Start AND if() #509 Body Start
GOTO 37236; return End
GOTO 37235; if() #509 Body End
LOAD D2 0.0001; if() #935 Test AND if() #509 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 37235 ==; Test 'if'
SETV D2 1; return Start AND if() #935 Body Start
GOTO 37236; return End AND if() #935 Body End
SETV D2 0; if() #509 Else End AND if() #508 Else End AND if() #507 Else End AND return Start
POPARGS D5 0.0002; return End AND if() #503 Else End
RETURNFUNC; Func[int EZB_TurnDir4(int, bool)] Body End
SETR D4 SP2; Func[int EZB_TurnToAngle(int, int, int)] Body Start
PUSHR D4; InlineFunc[int Abs(int)] Params Start AND if() #936 Test
LOAD D2 0.0002; UsrFunc[int EZB_AngDiff(int, int)] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int EZB_AngDiff(int, int)] Params End
CALLFUNC 3.0581; UsrFunc[int EZB_AngDiff(int, int)] Call
POP D4; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 37256 ==; Test 'if'
LOAD D2 0.0001; return Start AND if() #936 Body Start
GOTO 37275; return End AND if() #936 Body End
LOAD D2 0.0002; InlineFunc[int WrapDegrees(int)] Params Start AND return Start
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
LOAD D2 0.0002; UsrFunc[int EZB_AngDiff(int, int)] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int EZB_AngDiff(int, int)] Params End
CALLFUNC 3.0581; UsrFunc[int EZB_AngDiff(int, int)] Call
POP D4
PUSHR D2; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0010; UsrFunc[int Sign(int)] Call
POP D4
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3; InlineFunc[int WrapDegrees(int)] Params End
WRAPDEGREES D2; InlineFunc[int WrapDegrees(int)] Body
POPARGS D5 0.0003; return End
RETURNFUNC; Func[int EZB_TurnToAngle(int, int, int)] Body End
PUSHV 0; Func[void EZB_UpdateLaserArray(int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0; for() #251 setup
LOAD D2 0; for() #251 LoopTest
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 37639 ==; for() #251 TestFail?
LOAD D2 0.0003; if() #937 Test AND for() #251 Body Start
PUSHR D2
LOAD D2 0.0001
MULTV D2 6
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
COMPAREV D2 0
GOTOCMP 37635 ==; Test 'if'
LOAD D2 0.0003; if() #510 Test AND if() #937 Body Start
PUSHR D2
LOAD D2 0.0001
MULTV D2 6
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 37464 ==; Test 'if'
PUSHR D4; if() #510 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0003
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 2
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 3
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
PUSHV 0
LOAD D2 0.0002
PUSHR D2
PUSHV -1
PUSHV 0
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 7
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 4
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2114; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 7
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
ADDV D2 1
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 7
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0003; if() #938 Test
PUSHR D2
LOAD D2 0.0001
MULTV D2 7
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 4
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
POP D3
COMPARER D3 D2
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 37635 ==; Test 'if'
SETV D2 37; InlineFunc[void Game::PlaySound(int)] Params AND if() #938 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 7
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETV D2 2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 6
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; if() #938 Body End
GOTO 37635; if() #510 Body End
LOAD D2 0.0003; if() #939 Test AND if() #510 Else Start
PUSHR D2
LOAD D2 0.0001
MULTV D2 6
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 37635 ==; Test 'if'
PUSHR D4; if() #939 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0003
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 2
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 3
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 8
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
PUSHV 1
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 7
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 5
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2114; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 7
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
ADDV D2 1
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 7
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0003; if() #940 Test
PUSHR D2
LOAD D2 0.0001
MULTV D2 7
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 5
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
POP D3
COMPARER D3 D2
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 37635 ==; Test 'if'
SETV D2 0; if() #940 Body Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 7
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 6
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; if() #940 Body End
LOAD D2 0; if() #939 Body End AND if() #510 Else End AND if() #937 Body End AND for() #251 Body End AND for() #251 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 37280; for() #251 End
POPARGS D5 0.0004
RETURNFUNC; Func[void EZB_UpdateLaserArray(int, int, int)] Body End
PUSHV 0; Func[void EZB_Waitframes(ffc, npc, int, int)] Body Start
SETR D4 SP2
STOREV 0 0; for() #252 setup
LOAD D2 0; for() #252 LoopTest
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 37665 ==; for() #252 TestFail?
PUSHR D4; for() #252 Body Start
LOAD D2 0.0004; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3974; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #252 Body End
LOAD D2 0; for() #252 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 37644; for() #252 End
POPARGS D5 0.0005
RETURNFUNC; Func[void EZB_Waitframes(ffc, npc, int, int)] Body End


PUSHR D0; void run(int, int, int, int, int, int, int) Params
PUSHR D1
PUSHR D2
PUSHR D3
PUSHR D4
PUSHR D5
PUSHR D6
PUSHR REFFFC; void run(int, int, int, int, int, int, int) Body Start
SETR D4 SP2
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #31 Body [Opt:AlwaysOn]
GOTO 10; while() #31 End AND [Opt:NeverRet] AND void run(int, int, int, int, int, int, int) Body End


PUSHR D0; void run(int, int, int, int, int, int, int, int) Params
PUSHR D1
PUSHR D2
PUSHR D3
PUSHR D4
PUSHR D5
PUSHR D6
PUSHR D7
PUSHR REFFFC; void run(int, int, int, int, int, int, int, int) Body Start
SETR D4 SP2
LOAD D2 0.0008; if() #1241 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 27 ==; Test 'if'
PUSHR D4; if() #1241 Body Start
LOAD D2 0.0007; UsrFunc[void EZBE_ExpandingCircle(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[void EZBE_ExpandingCircle(int, int, int, int)] Params End
CALLFUNC 0.1633; UsrFunc[void EZBE_ExpandingCircle(int, int, int, int)] Call
POP D4; if() #1241 Body End
LOAD D2 0.0008; if() #1242 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 49 ==; Test 'if'
PUSHR D4; if() #1242 Body Start
LOAD D2 0.0007; UsrFunc[void EZBE_WallBounce(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[void EZBE_WallBounce(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.3702; UsrFunc[void EZBE_WallBounce(int, int, int, int, int, int, int)] Call
POP D4; if() #1242 Body End
LOAD D2 0.0008; if() #1243 Test
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 69 ==; Test 'if'
LOAD D2 0.0007; UsrFunc[void EZBE_HelmasaurShot(int, int, int, int, int, int, int)] Params Start AND if() #1243 Body Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[void EZBE_HelmasaurShot(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1763; UsrFunc[void EZBE_HelmasaurShot(int, int, int, int, int, int, int)] Call AND [Opt:NeverRet] AND if() #1243 Body End
LOAD D2 0.0008; if() #1244 Test
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 91 ==; Test 'if'
PUSHR D4; if() #1244 Body Start
LOAD D2 0.0007; UsrFunc[bool EZBE_Lightning(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[bool EZBE_Lightning(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2183; UsrFunc[bool EZBE_Lightning(int, int, int, int, int, int, int)] Call
POP D4; if() #1244 Body End
LOAD D2 0.0008; if() #1245 Test
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 113 ==; Test 'if'
PUSHR D4; if() #1245 Body Start
LOAD D2 0.0007; UsrFunc[bool EZBE_LightningSingle(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[bool EZBE_LightningSingle(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.3272; UsrFunc[bool EZBE_LightningSingle(int, int, int, int, int, int, int)] Call
POP D4; if() #1245 Body End
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
POPARGS D5 0.0009
QUIT; void run(int, int, int, int, int, int, int, int) Body End
SETR D4 SP2; Func[int DirNormal(int)] Body Start
LOAD D2 0; switch() #9 Key
SETR SWITCHKEY D2; Store key
COMPAREV SWITCHKEY 8
GOTOCMP 144 ==; case '80000'
COMPAREV SWITCHKEY 9
GOTOCMP 146 ==; case '90000'
COMPAREV SWITCHKEY 10
GOTOCMP 148 ==; case '100000'
COMPAREV SWITCHKEY 11
GOTOCMP 150 ==; case '110000'
COMPAREV SWITCHKEY 12
GOTOCMP 152 ==; case '120000'
COMPAREV SWITCHKEY 13
GOTOCMP 154 ==; case '130000'
COMPAREV SWITCHKEY 14
GOTOCMP 156 ==; case '140000'
COMPAREV SWITCHKEY 15
GOTOCMP 158 ==; case '150000'
GOTO 160; switch() #9 NoMatch
SETV D2 0; Case block AND return Start
GOTO 161; return End
SETV D2 5; Case block AND return Start
GOTO 161; return End
SETV D2 3; Case block AND return Start
GOTO 161; return End
SETV D2 7; Case block AND return Start
GOTO 161; return End
SETV D2 1; Case block AND return Start
GOTO 161; return End
SETV D2 6; Case block AND return Start
GOTO 161; return End
SETV D2 2; Case block AND return Start
GOTO 161; return End
SETV D2 4; Case block AND return Start
GOTO 161; return End
LOAD D2 0; Case block AND return Start
POP D5; return End
RETURNFUNC; Func[int DirNormal(int)] Body End
SETR D4 SP2; Func[int Angle(int, int, int, int)] Body Start
LOAD D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start AND return Start
PUSHR D2
LOAD D2 0.0003
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
SETR D3 D2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
POPARGS D5 0.0004; return End
RETURNFUNC; Func[int Angle(int, int, int, int)] Body End
SETR D4 SP2; Func[int Rand(int, int)] Body Start
SETV D2 0; InlineFunc[int randgen::Rand(int, int)] Params Start AND return Start
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0001
SETR D3 D2; InlineFunc[int randgen::Rand(int, int)] Params End
POP D2; InlineFunc[int randgen::Rand(int, int)] Body Start
POP REFRNG
RNGRAND3 D2 D3; InlineFunc[int randgen::Rand(int, int)] Body End
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int Rand(int, int)] Body End
PUSHV 0; Func[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0003; if() #172 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 207 ==; Test 'if'
PUSHR D4; if() #172 Body Start
LOAD D2 0.0009; UsrFunc[int GetDefaultEWeaponSprite(int)] Params Start
PUSHR D2; UsrFunc[int GetDefaultEWeaponSprite(int)] Params End
CALLFUNC 0.0344; UsrFunc[int GetDefaultEWeaponSprite(int)] Call
POP D4
STORE D2 0.0003; if() #172 Body End
LOAD D2 0.0002; if() #173 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 218 ==; Test 'if'
PUSHR D4; if() #173 Body Start
LOAD D2 0.0009; UsrFunc[int GetDefaultEWeaponSound(int)] Params Start
PUSHR D2; UsrFunc[int GetDefaultEWeaponSound(int)] Params End
CALLFUNC 0.0504; UsrFunc[int GetDefaultEWeaponSound(int)] Call
POP D4
STORE D2 0.0002; if() #173 Body End
LOAD D2 0.0009; InlineFunc[eweapon screendata::CreateEWeapon(int)] Params
CREATEEWEAPONR D2; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body Start
SETR D2 REFEWPN; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body End
STORE D2 0
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNPOWER D2
SETV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNANGULAR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
LOAD D2 0.0003; if() #174 Test
COMPAREV D2 0
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 288 ==; Test 'if'
LOAD D2 0; InlineFunc[void eweapon::UseSprite(int)] Params Start AND if() #174 Body Start
PUSHR D2
LOAD D2 0.0003; InlineFunc[void eweapon::UseSprite(int)] Params End
POP D3; InlineFunc[void eweapon::UseSprite(int)] Body Start
SETR REFEWPN D3
EWPNUSESPRITER D2; InlineFunc[void eweapon::UseSprite(int)] Body End AND if() #174 Body End
LOAD D2 0.0001
ORV D2 512
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.0557; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0.0001; if() #175 Test
ANDV D2 32
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 322 ==; Test 'if'
SETV D2 0; if() #175 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNCOLLDET D2; if() #175 Body End
LOAD D2 0; if() #176 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 339 ==; Test 'if'
PUSHR D4; if() #176 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.0667; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #176 Body End
LOAD D2 0.0002; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
LOAD D2 0; return Start
POPARGS D5 0.0010; return End
RETURNFUNC; Func[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0003; Func[int GetDefaultEWeaponSprite(int)] Body Start
SETR D4 SP2
LOAD D2 0.0003; if() #58 Test
COMPAREV D2 129
GOTOCMP 354 ==
LOAD D2 0.0003
COMPAREV D2 145
GOTOCMP 354 ==
SETV D2 0
GOTO 355
SETV D2 1
COMPAREV D2 0
GOTOCMP 359 ==; Test 'if'
SETV D2 17; return Start AND if() #58 Body Start
GOTO 502; return End AND if() #58 Body End
LOAD D2 0.0003; if() #59 Test AND if() #58 Else Start
COMPAREV D2 133
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 366 ==; Test 'if'
SETV D2 18; return Start AND if() #59 Body Start
GOTO 502; return End AND if() #59 Body End
LOAD D2 0.0003; if() #60 Test AND if() #59 Else Start
COMPAREV D2 130
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 373 ==; Test 'if'
SETV D2 19; return Start AND if() #60 Body Start
GOTO 502; return End AND if() #60 Body End
LOAD D2 0.0003; if() #61 Test AND if() #60 Else Start
COMPAREV D2 140
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 380 ==; Test 'if'
SETV D2 35; return Start AND if() #61 Body Start
GOTO 502; return End AND if() #61 Body End
LOAD D2 0.0003; if() #62 Test AND if() #61 Else Start
COMPAREV D2 142
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 387 ==; Test 'if'
SETV D2 81; return Start AND if() #62 Body Start
GOTO 502; return End AND if() #62 Body End
LOAD D2 0.0003; if() #63 Test AND if() #62 Else Start
COMPAREV D2 139
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 394 ==; Test 'if'
SETV D2 80; return Start AND if() #63 Body Start
GOTO 502; return End AND if() #63 Body End
LOAD D2 0.0003; if() #64 Test AND if() #63 Else Start
COMPAREV D2 134
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 401 ==; Test 'if'
SETV D2 21; return Start AND if() #64 Body Start
GOTO 502; return End AND if() #64 Body End
LOAD D2 0.0003; if() #65 Test AND if() #64 Else Start
COMPAREV D2 132
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 408 ==; Test 'if'
SETV D2 20; return Start AND if() #65 Body Start
GOTO 502; return End AND if() #65 Body End
LOAD D2 0.0003; if() #66 Test AND if() #65 Else Start
COMPAREV D2 141
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 415 ==; Test 'if'
SETV D2 36; return Start AND if() #66 Body Start
GOTO 502; return End AND if() #66 Body End
LOAD D2 0.0003; if() #67 Test AND if() #66 Else Start
COMPAREV D2 137
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 422 ==; Test 'if'
SETV D2 76; return Start AND if() #67 Body Start
GOTO 502; return End AND if() #67 Body End
LOAD D2 0.0003; if() #68 Test AND if() #67 Else Start
COMPAREV D2 138
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 429 ==; Test 'if'
SETV D2 77; return Start AND if() #68 Body Start
GOTO 502; return End AND if() #68 Body End
LOAD D2 0.0003; if() #69 Test AND if() #68 Else Start
COMPAREV D2 131
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 501 ==; Test 'if'
STOREV 0 0.0002; if() #69 Body Start
STOREV 0 0.0001
STOREV 0 0; for() #44 setup
LOAD D2 0; for() #44 LoopTest
COMPAREV D2 256
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 485 ==; for() #44 TestFail?
LOAD D2 0; unless() #205 Test AND for() #44 Body Start
PUSHR D2
POP D0
SETR D2 LINKITEMD
COMPAREV D2 0
GOTOCMP 481 ==; Test 'unless' AND continue 1; AND unless() #205 Body
LOAD D2 0; InlineFunc[itemdata Game::LoadItemData(int)] Params
LOADITEMDATAR D2; InlineFunc[itemdata Game::LoadItemData(int)] Body Start
SETR D2 REFITEMCLASS; InlineFunc[itemdata Game::LoadItemData(int)] Body End
STORE D2 0.0001
LOAD D2 0.0001; if() #206 Test
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATAFAMILY
COMPAREV D2 1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 481 !=; Test 'if' AND continue 1; AND if() #206 Body
LOAD D2 0.0001; if() #207 Test
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATALEVEL
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 481 ==; Test 'if'
LOAD D2 0.0001; if() #207 Body Start
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATALEVEL
STORE D2 0.0002
LOAD D2 0.0002; if() #208 Test
COMPAREV D2 3
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 485 !=; Test 'if' AND break 1; AND if() #208 Body
LOAD D2 0; if() #207 Body End AND for() #44 Body End AND for() #44 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 437; for() #44 End
LOAD D2 0.0002; if() #70 Test
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 492 ==; Test 'if'
SETV D2 4; return Start AND if() #70 Body Start
GOTO 502; return End AND if() #70 Body End
LOAD D2 0.0002; if() #71 Test AND if() #70 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 499 ==; Test 'if'
SETV D2 5; return Start AND if() #71 Body Start
GOTO 502; return End AND if() #71 Body End
SETV D2 6; return Start AND if() #71 Else Start
GOTO 502; return End AND if() #71 Else End AND if() #70 Else End AND if() #69 Body End
SETV D2 0; return Start AND if() #69 Else Start
POPARGS D5 0.0004; return End AND if() #69 Else End AND if() #68 Else End AND if() #67 Else End AND if() #66 Else End AND if() #65 Else End AND if() #64 Else End AND if() #63 Else End AND if() #62 Else End AND if() #61 Else End AND if() #60 Else End AND if() #59 Else End AND if() #58 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSprite(int)] Body End
SETR D4 SP2; Func[int GetDefaultEWeaponSound(int)] Body Start
LOAD D2 0; if() #54 Test
COMPAREV D2 129
GOTOCMP 513 ==
LOAD D2 0
COMPAREV D2 145
GOTOCMP 513 ==
SETV D2 0
GOTO 514
SETV D2 1
COMPAREV D2 0
GOTOCMP 518 ==; Test 'if'
SETV D2 40; return Start AND if() #54 Body Start
GOTO 555; return End AND if() #54 Body End
LOAD D2 0; if() #55 Test AND if() #54 Else Start
COMPAREV D2 134
GOTOCMP 526 ==
LOAD D2 0
COMPAREV D2 141
GOTOCMP 526 ==
SETV D2 0
GOTO 527
SETV D2 1
COMPAREV D2 0
GOTOCMP 531 ==; Test 'if'
SETV D2 32; return Start AND if() #55 Body Start
GOTO 555; return End AND if() #55 Body End
LOAD D2 0; if() #56 Test AND if() #55 Else Start
COMPAREV D2 140
GOTOCMP 542 ==
LOAD D2 0
COMPAREV D2 142
GOTOCMP 542 ==
LOAD D2 0
COMPAREV D2 139
GOTOCMP 542 ==
SETV D2 0
GOTO 543
SETV D2 1
COMPAREV D2 0
GOTOCMP 547 ==; Test 'if'
SETV D2 13; return Start AND if() #56 Body Start
GOTO 555; return End AND if() #56 Body End
LOAD D2 0; if() #57 Test AND if() #56 Else Start
COMPAREV D2 133
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 554 ==; Test 'if'
SETV D2 51; return Start AND if() #57 Body Start
GOTO 555; return End AND if() #57 Body End
SETV D2 0; return Start AND if() #57 Else Start
POP D5; return End AND if() #57 Else End AND if() #56 Else End AND if() #55 Else End AND if() #54 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSound(int)] Body End
PUSHARGSV 0 0.0002; Func[void SetEWeaponDir(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
MODV D2 6.2832
STORE D2 0.0001
STOREV 0 0
LOAD D2 0.0001; if() #509 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 574 ==; Test 'if'
LOAD D2 0.0001; if() #509 Body Start
ADDV D2 6.2832
STORE D2 0.0001; if() #509 Body End
LOAD D2 0.0001; if() #193 Test
COMPAREV D2 0.3927
GOTOCMP 582 <
LOAD D2 0.0001
COMPAREV D2 5.8905
GOTOCMP 582 >
SETV D2 0
GOTO 583
SETV D2 1
COMPAREV D2 0
GOTOCMP 588 ==; Test 'if'
SETV D2 3; if() #193 Body Start
STORE D2 0
GOTO 638; if() #193 Body End
LOAD D2 0.0001; if() #194 Test AND if() #193 Else Start
COMPAREV D2 1.1781
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 596 ==; Test 'if'
SETV D2 7; if() #194 Body Start
STORE D2 0
GOTO 638; if() #194 Body End
LOAD D2 0.0001; if() #195 Test AND if() #194 Else Start
COMPAREV D2 1.9635
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 604 ==; Test 'if'
SETV D2 1; if() #195 Body Start
STORE D2 0
GOTO 638; if() #195 Body End
LOAD D2 0.0001; if() #196 Test AND if() #195 Else Start
COMPAREV D2 2.7489
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 612 ==; Test 'if'
SETV D2 6; if() #196 Body Start
STORE D2 0
GOTO 638; if() #196 Body End
LOAD D2 0.0001; if() #197 Test AND if() #196 Else Start
COMPAREV D2 3.5343
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 620 ==; Test 'if'
SETV D2 2; if() #197 Body Start
STORE D2 0
GOTO 638; if() #197 Body End
LOAD D2 0.0001; if() #198 Test AND if() #197 Else Start
COMPAREV D2 4.3197
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 628 ==; Test 'if'
SETV D2 4; if() #198 Body Start
STORE D2 0
GOTO 638; if() #198 Body End
LOAD D2 0.0001; if() #199 Test AND if() #198 Else Start
COMPAREV D2 5.1051
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 636 ==; Test 'if'
SETV D2 0; if() #199 Body Start
STORE D2 0
GOTO 638; if() #199 Body End
SETV D2 5; if() #199 Else Start
STORE D2 0; if() #199 Else End
LOAD D2 0.0002; if() #198 Else End AND if() #197 Else End AND if() #196 Else End AND if() #195 Else End AND if() #194 Else End AND if() #193 Else End AND if() #510 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 656 ==; Test 'if'
PUSHR D4; if() #510 Body Start
LOAD D2 0; UsrFunc[int __UnblockableDir(int)] Params Start
PUSHR D2; UsrFunc[int __UnblockableDir(int)] Params End
CALLFUNC 0.0832; UsrFunc[int __UnblockableDir(int)] Call
POP D4
STORE D2 0; if() #510 Body End
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_DIR D2
POPARGS D5 0.0003
RETURNFUNC; Func[void SetEWeaponDir(eweapon)] Body End
PUSHV 0; Func[void SetEWeaponRotation(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #217 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 750 ==; Test 'if'
LOAD D2 0.0001; if() #217 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
MODV D2 6.2832
STORE D2 0
LOAD D2 0; if() #515 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 689 ==; Test 'if'
LOAD D2 0; if() #515 Body Start
ADDV D2 6.2832
STORE D2 0; if() #515 Body End
LOAD D2 0; if() #218 Test
COMPAREV D2 0.7854
GOTOCMP 697 <
LOAD D2 0
COMPAREV D2 5.4978
GOTOCMP 697 >
SETV D2 0
GOTO 698
SETV D2 1
COMPAREV D2 0
GOTOCMP 710 ==; Test 'if'
SETV D2 4; if() #218 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 830; if() #218 Body End
LOAD D2 0; if() #219 Test AND if() #218 Else Start
COMPAREV D2 2.3562
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 725 ==; Test 'if'
SETV D2 3; if() #219 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 830; if() #219 Body End
LOAD D2 0; if() #220 Test AND if() #219 Else Start
COMPAREV D2 3.9270
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 740 ==; Test 'if'
SETV D2 7; if() #220 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 830; if() #220 Body End
SETV D2 0; if() #220 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2; if() #220 Else End
GOTO 830; if() #219 Else End AND if() #218 Else End AND if() #217 Body End
PUSHR D4; if() #217 Else Start
LOAD D2 0.0001; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.0892; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #221 Test
COMPAREV D2 0
GOTOCMP 769 ==
LOAD D2 0
COMPAREV D2 5
GOTOCMP 769 ==
LOAD D2 0
COMPAREV D2 4
GOTOCMP 769 ==
SETV D2 0
GOTO 770
SETV D2 1
COMPAREV D2 0
GOTOCMP 782 ==; Test 'if'
SETV D2 0; if() #221 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 830; if() #221 Body End
LOAD D2 0; if() #222 Test AND if() #221 Else Start
COMPAREV D2 1
GOTOCMP 793 ==
LOAD D2 0
COMPAREV D2 7
GOTOCMP 793 ==
LOAD D2 0
COMPAREV D2 6
GOTOCMP 793 ==
SETV D2 0
GOTO 794
SETV D2 1
COMPAREV D2 0
GOTOCMP 806 ==; Test 'if'
SETV D2 3; if() #222 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 830; if() #222 Body End
LOAD D2 0; if() #223 Test AND if() #222 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 821 ==; Test 'if'
SETV D2 7; if() #223 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 830; if() #223 Body End
SETV D2 4; if() #223 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2; if() #223 Else End
POPARGS D5 0.0002; if() #222 Else End AND if() #221 Else End AND if() #217 Else End
RETURNFUNC; Func[void SetEWeaponRotation(eweapon)] Body End
SETR D4 SP2; Func[int __UnblockableDir(int)] Body Start
LOAD D2 0; if() #704 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 840 ==; Test 'if'
SETV D2 8; return Start AND if() #704 Body Start
GOTO 890; return End AND if() #704 Body End
LOAD D2 0; if() #705 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 847 ==; Test 'if'
SETV D2 12; return Start AND if() #705 Body Start
GOTO 890; return End AND if() #705 Body End
LOAD D2 0; if() #706 Test
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 854 ==; Test 'if'
SETV D2 14; return Start AND if() #706 Body Start
GOTO 890; return End AND if() #706 Body End
LOAD D2 0; if() #707 Test
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 861 ==; Test 'if'
SETV D2 10; return Start AND if() #707 Body Start
GOTO 890; return End AND if() #707 Body End
LOAD D2 0; if() #708 Test
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 868 ==; Test 'if'
SETV D2 15; return Start AND if() #708 Body Start
GOTO 890; return End AND if() #708 Body End
LOAD D2 0; if() #709 Test
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 875 ==; Test 'if'
SETV D2 9; return Start AND if() #709 Body Start
GOTO 890; return End AND if() #709 Body End
LOAD D2 0; if() #710 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 882 ==; Test 'if'
SETV D2 13; return Start AND if() #710 Body Start
GOTO 890; return End AND if() #710 Body End
LOAD D2 0; if() #711 Test
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 889 ==; Test 'if'
SETV D2 11; return Start AND if() #711 Body Start
GOTO 890; return End AND if() #711 Body End
LOAD D2 0; return Start
POP D5; return End
RETURNFUNC; Func[int __UnblockableDir(int)] Body End
SETR D4 SP2; Func[int __NormalizeDir(int)] Body Start
LOAD D2 0; if() #690 Test
COMPAREV D2 0
GOTOCMP 901 <
LOAD D2 0
COMPAREV D2 7
GOTOCMP 901 >
SETV D2 1
GOTO 902
SETV D2 0
COMPAREV D2 0
GOTOCMP 906 ==; Test 'if'
LOAD D2 0; return Start AND if() #690 Body Start
GOTO 963; return End AND if() #690 Body End
LOAD D2 0; if() #691 Test
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 913 ==; Test 'if'
SETV D2 0; return Start AND if() #691 Body Start
GOTO 963; return End AND if() #691 Body End
LOAD D2 0; if() #692 Test
COMPAREV D2 9
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 920 ==; Test 'if'
SETV D2 5; return Start AND if() #692 Body Start
GOTO 963; return End AND if() #692 Body End
LOAD D2 0; if() #693 Test
COMPAREV D2 10
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 927 ==; Test 'if'
SETV D2 3; return Start AND if() #693 Body Start
GOTO 963; return End AND if() #693 Body End
LOAD D2 0; if() #694 Test
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 934 ==; Test 'if'
SETV D2 7; return Start AND if() #694 Body Start
GOTO 963; return End AND if() #694 Body End
LOAD D2 0; if() #695 Test
COMPAREV D2 12
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 941 ==; Test 'if'
SETV D2 1; return Start AND if() #695 Body Start
GOTO 963; return End AND if() #695 Body End
LOAD D2 0; if() #696 Test
COMPAREV D2 13
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 948 ==; Test 'if'
SETV D2 6; return Start AND if() #696 Body Start
GOTO 963; return End AND if() #696 Body End
LOAD D2 0; if() #697 Test
COMPAREV D2 14
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 955 ==; Test 'if'
SETV D2 2; return Start AND if() #697 Body Start
GOTO 963; return End AND if() #697 Body End
LOAD D2 0; if() #698 Test
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 962 ==; Test 'if'
SETV D2 4; return Start AND if() #698 Body Start
GOTO 963; return End AND if() #698 Body End
SETV D2 0; return Start
POP D5; return End
RETURNFUNC; Func[int __NormalizeDir(int)] Body End
SETR D4 SP2; Func[int VectorX(int, int)] Body Start
LOAD D2 0; InlineFunc[int Cos(int)] Params Start AND return Start
SETR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int VectorX(int, int)] Body End
SETR D4 SP2; Func[int VectorY(int, int)] Body Start
LOAD D2 0; InlineFunc[int Sin(int)] Params Start AND return Start
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int VectorY(int, int)] Body End
SETR D4 SP2; Func[int InFrontX(int, int)] Body Start
PUSHR D4; switch() #21 Key
LOAD D2 0.0001; UsrFunc[int DirNormal(int)] Params Start
PUSHR D2; UsrFunc[int DirNormal(int)] Params End
CALLFUNC 0.0124; UsrFunc[int DirNormal(int)] Call
POP D4
SETR SWITCHKEY D2; Store key
COMPAREV SWITCHKEY 2
GOTOCMP 997 ==; case '20000'
COMPAREV SWITCHKEY 3
GOTOCMP 1000 ==; case '30000'
GOTO 1003; switch() #21 NoMatch
LOAD D2 0; Case block AND return Start
SUBV D2 16
GOTO 1004; return End
LOAD D2 0; Case block AND return Start
SUBV2 16 D2
GOTO 1004; return End
SETV D2 0; Case block AND return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int InFrontX(int, int)] Body End
SETR D4 SP2; Func[int InFrontY(int, int)] Body Start
PUSHR D4; switch() #22 Key
LOAD D2 0.0001; UsrFunc[int DirNormal(int)] Params Start
PUSHR D2; UsrFunc[int DirNormal(int)] Params End
CALLFUNC 0.0124; UsrFunc[int DirNormal(int)] Call
POP D4
SETR SWITCHKEY D2; Store key
COMPAREV SWITCHKEY 0
GOTOCMP 1018 ==; case '0'
COMPAREV SWITCHKEY 1
GOTOCMP 1021 ==; case '10000'
GOTO 1024; switch() #22 NoMatch
LOAD D2 0; Case block AND return Start
SUBV D2 16
GOTO 1025; return End
LOAD D2 0; Case block AND return Start
SUBV2 16 D2
GOTO 1025; return End
SETV D2 0; Case block AND return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int InFrontY(int, int)] Body End
SETR D4 SP2; Func[void SetEWeaponDeathEffect(eweapon, int, int)] Body Start
LOAD D2 0.0001; if() #507 Test
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1046 ==; Test 'if'
LOAD D2 0; if() #508 Test AND if() #507 Body Start
COMPAREV D2 1
GOTOCMP 1041 <
LOAD D2 0
COMPAREV D2 511
GOTOCMP 1041 >
SETV D2 0
GOTO 1042
SETV D2 1
COMPAREV D2 0
GOTOCMP 1046 ==; Test 'if'
SETV D2 1; if() #508 Body Start
STORE D2 0.0001; if() #508 Body End
LOAD D2 0.0001; if() #507 Body End
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 13
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 14
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0002
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ORV D2 512
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
POPARGS D5 0.0003
RETURNFUNC; Func[void SetEWeaponDeathEffect(eweapon, int, int)] Body End
SETR D4 SP2; Func[void SetEWeaponLifespan(eweapon, int, int)] Body Start
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 11
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 12
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0002
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ORV D2 512
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
POPARGS D5 0.0003
RETURNFUNC; Func[void SetEWeaponLifespan(eweapon, int, int)] Body End
SETR D4 SP2; Func[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Body Start
LOAD D2 0.0008; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0003
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0007; InlineFunc[int Distance(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 1
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
PUSHR D4
LOAD D2 0.0007; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 0.0163; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
RECTR; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0012; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS D5 0.0009
RETURNFUNC; Func[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Body End
PUSHARGSV 0 0.0003; Func[bool EZBE_CanWalk(int, int, int, int, bool)] Body Start
SETR D4 SP2
STOREV 8 0.0002
LOAD D2 0.0007
ADDV D2 15
STORE D2 0.0001
LOAD D2 0.0006
ADDV D2 15
STORE D2 0
LOAD D2 0.0003; if() #1205 Test
COMPAREV D2 0
GOTOCMP 1211 ==; Test 'if'
SETV D2 0; if() #1205 Body Start
STORE D2 0.0002; if() #1205 Body End
LOAD D2 0.0005; if() #622 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1283 ==; Test 'if'
LOAD D2 0.0006; return Start AND if() #622 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
SETR D2 D3
COMPAREV D2 0
GOTOCMP 1278 <
PUSHR D4
LOAD D2 0.0007; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 0.1479; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1278 !=
PUSHR D4
LOAD D2 0.0007; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
ADDV D2 8
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 0.1479; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1278 !=
PUSHR D4
LOAD D2 0.0001; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 0.1479; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1278 !=
SETV D2 0
GOTO 1279
SETV D2 1
COMPAREV D2 0
SETCMP D2 I==
GOTO 1477; return End
GOTO 1476; if() #622 Body End
LOAD D2 0.0005; if() #623 Test AND if() #622 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1342 ==; Test 'if'
LOAD D2 0; return Start AND if() #623 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
COMPAREV D2 176
GOTOCMP 1337 >=
PUSHR D4
LOAD D2 0.0007; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 0.1479; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1337 !=
PUSHR D4
LOAD D2 0.0007; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
ADDV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 0.1479; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1337 !=
PUSHR D4
LOAD D2 0.0001; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 0.1479; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1337 !=
SETV D2 0
GOTO 1338
SETV D2 1
COMPAREV D2 0
SETCMP D2 I==
GOTO 1477; return End
GOTO 1476; if() #623 Body End
LOAD D2 0.0005; if() #624 Test AND if() #623 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1410 ==; Test 'if'
LOAD D2 0.0007; return Start AND if() #624 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
SETR D2 D3
COMPAREV D2 0
GOTOCMP 1405 <
PUSHR D4
LOAD D2 0.0007; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 0.1479; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1405 !=
PUSHR D4
LOAD D2 0.0007; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
ADDV D2 7
PUSHR D2; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 0.1479; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1405 !=
PUSHR D4
LOAD D2 0.0007; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0
PUSHR D2; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 0.1479; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1405 !=
SETV D2 0
GOTO 1406
SETV D2 1
COMPAREV D2 0
SETCMP D2 I==
GOTO 1477; return End
GOTO 1476; if() #624 Body End
LOAD D2 0.0005; if() #1206 Test AND if() #624 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1476 ==; Test 'if'
LOAD D2 0.0001; return Start AND if() #1206 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
COMPAREV D2 256
GOTOCMP 1472 >=
PUSHR D4
LOAD D2 0.0001; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 0.1479; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1472 !=
PUSHR D4
LOAD D2 0.0001; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
ADDV D2 7
PUSHR D2; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 0.1479; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1472 !=
PUSHR D4
LOAD D2 0.0001; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 0.1479; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1472 !=
SETV D2 0
GOTO 1473
SETV D2 1
COMPAREV D2 0
SETCMP D2 I==
GOTO 1477; return End AND if() #1206 Body End
SETV D2 0; if() #624 Else End AND if() #623 Else End AND if() #622 Else End AND return Start
POPARGS D5 0.0008; return End
RETURNFUNC; Func[bool EZBE_CanWalk(int, int, int, int, bool)] Body End
PUSHV 0; Func[bool EZBE_isSolid(int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0002; InlineFunc[int ComboAt(int, int)] Params Start
PUSHR D2
LOAD D2 0.0001
SETR D3 D2; InlineFunc[int ComboAt(int, int)] Params End
POP D2; InlineFunc[int ComboAt(int, int)] Body Start
COMBO_AT D2 D3; InlineFunc[int ComboAt(int, int)] Body End
PUSHR D2
POP D0
SETR D2 COMBOTD
STORE D2 0
LOAD D2 0; if() #1231 Test
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1498 ==; Test 'if'
SETV D2 0; return Start AND if() #1231 Body Start
GOTO 1552; return End AND if() #1231 Body End
LOAD D2 0; if() #1232 Test
COMPAREV D2 63
GOTOCMP 1509 ==
LOAD D2 0
COMPAREV D2 42
GOTOCMP 1509 ==
LOAD D2 0
COMPAREV D2 20
GOTOCMP 1509 ==
SETV D2 0
GOTO 1510
SETV D2 1
COMPAREV D2 0
GOTOCMP 1514 ==; Test 'if'
SETV D2 0; return Start AND if() #1232 Body Start
GOTO 1552; return End AND if() #1232 Body End
LOAD D2 0; if() #1233 Test
COMPAREV D2 18
GOTOCMP 1525 ==
LOAD D2 0
COMPAREV D2 86
GOTOCMP 1523 <
LOAD D2 0
COMPAREV D2 88
GOTOCMP 1525 <=
SETV D2 0
GOTO 1526
SETV D2 1
COMPAREV D2 0
GOTOCMP 1530 ==; Test 'if'
SETV D2 0; return Start AND if() #1233 Body Start
GOTO 1552; return End AND if() #1233 Body End
LOAD D2 0; if() #1234 Test
COMPAREV D2 19
GOTOCMP 1541 ==
LOAD D2 0
COMPAREV D2 89
GOTOCMP 1539 <
LOAD D2 0
COMPAREV D2 91
GOTOCMP 1541 <=
SETV D2 0
GOTO 1542
SETV D2 1
COMPAREV D2 0
GOTOCMP 1546 ==; Test 'if'
SETV D2 0; return Start AND if() #1234 Body Start
GOTO 1552; return End AND if() #1234 Body End
LOAD D2 0.0002; InlineFunc[bool screendata::isSolid(int, int)] Params Start AND return Start
PUSHR D2
LOAD D2 0.0001
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
POPARGS D5 0.0003; return End
RETURNFUNC; Func[bool EZBE_isSolid(int, int)] Body End
PUSHV 0; Func[void EZBE_DamageLink(int)] Body Start
SETR D4 SP2
PUSHR D4
PUSHV 40; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
PUSHR D4
SETV D2 0.0001; UsrFunc[int InFrontX(int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR
PUSHV 12; UsrFunc[int InFrontX(int, int)] Params End
CALLFUNC 0.0985; UsrFunc[int InFrontX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
PUSHR D4
SETV D2 0.0001; UsrFunc[int InFrontY(int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR
PUSHV 12; UsrFunc[int InFrontY(int, int)] Params End
CALLFUNC 0.1006; UsrFunc[int InFrontY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHARGSV 0 0.0002
LOAD D2 0.0001
PUSHR D2
PUSHARGSV -1 0.0002
PUSHV 1; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0194; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
STORE D2 0
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_DIR
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_DIR D2
SETV D2 -1000
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Params Start
PUSHR D2
PUSHARGSV 1 0.0002; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Params End
CALLFUNC 0.1091; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Call
PEEK D4
LOAD D2 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 0.1027; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4
POPARGS D5 0.0002
RETURNFUNC; Func[void EZBE_DamageLink(int)] Body End
PUSHARGSV 0 0.0002; Func[void EZBE_ExpandingCircle(int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0001
STOREV 0 0
SETV D2 0; for() #401 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #401 LoopTest
COMPAREV D2 16
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1699 ==; for() #401 TestFail?
LOAD D2 0.0003; for() #401 Body Start
PUSHR D2
LOAD D2 0.0001
DIVV D2 16
POP D3
MULTR D2 D3
MULTV D2 0.2000
STORE D2 0
PUSHV 4; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0005
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 0.0182; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 0.0182; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
DIVV D2 16
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 1
PUSHV 128; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params End
CIRCLER; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body End
WAITFRAME; InlineFunc[void Waitframe()] Body AND for() #401 Body End
LOAD D2 0.0001; for() #401 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 1639; for() #401 End
SETV D2 16; for() #402 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #402 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1761 ==; for() #402 TestFail?
LOAD D2 0.0003; for() #402 Body Start
PUSHR D2
LOAD D2 0.0001
DIVV D2 16
POP D3
MULTR D2 D3
MULTV D2 0.2000
STORE D2 0
PUSHV 4; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0005
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 0.0182; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 0.0182; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
DIVV D2 16
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 1
PUSHV 128; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params End
CIRCLER; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body End
WAITFRAME; InlineFunc[void Waitframe()] Body AND for() #402 Body End
LOAD D2 0.0001; for() #402 LoopIncrement
SUBV D2 1
STORE D2 0.0001
GOTO 1701; for() #402 End
POPARGS D5 0.0006; return (Void)
RETURNFUNC; Func[void EZBE_ExpandingCircle(int, int, int, int)] Body End
PUSHARGSV 0 0.0008; Func[void EZBE_HelmasaurShot(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0007
STOREV 0 0.0006
STOREV 1 0.0005
LOAD D2 0.0010; if() #1207 Test
COMPAREV D2 0
GOTOCMP 1788 !=
LOAD D2 0.0014
COMPAREV D2 132
GOTOCMP 1786 ==
LOAD D2 0.0014
COMPAREV D2 130
GOTOCMP 1786 ==
LOAD D2 0.0014
COMPAREV D2 134
GOTOCMP 1786 ==
LOAD D2 0.0014
COMPAREV D2 137
GOTOCMP 1786 ==
LOAD D2 0.0014
COMPAREV D2 138
GOTOCMP 1788 !=
SETV D2 1
GOTO 1789
SETV D2 0
COMPAREV D2 0
GOTOCMP 1794 ==; Test 'if'
LOAD D2 0.0005; if() #1207 Body Start
ORV D2 2
STORE D2 0.0005; if() #1207 Body End
LOAD D2 0.0010; if() #625 Test
COMPAREV D2 2000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 1806 ==; Test 'if'
LOAD D2 0.0005; if() #625 Body Start
ORV D2 4
STORE D2 0.0005
LOAD D2 0.0010
SUBV D2 2000
STORE D2 0.0010
GOTO 1817; if() #625 Body End
LOAD D2 0.0010; if() #1208 Test AND if() #625 Else Start
COMPAREV D2 1000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 1817 ==; Test 'if'
LOAD D2 0.0005; if() #1208 Body Start
ORV D2 2
STORE D2 0.0005
LOAD D2 0.0010
SUBV D2 1000
STORE D2 0.0010; if() #1208 Body End
LOAD D2 0.0010; if() #625 Else End AND if() #1209 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1824 ==; Test 'if'
SETV D2 -1; if() #1209 Body Start
STORE D2 0.0010; if() #1209 Body End
ALLOCATEMEMV D2 16 0
STORE D2 0.0004
ALLOCATEMEMV D2 16 0
STORE D2 0.0003
ALLOCATEMEMV D2 16 0
STORE D2 0.0002
STOREV 0 0.0001
LOAD D2 0.0009; if() #1210 Test
COMPAREV D2 0
GOTOCMP 1836 ==; Test 'if'
LOAD D2 0.0009; InlineFunc[void Game::PlaySound(int)] Params AND if() #1210 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body AND if() #1210 Body End
PUSHR D4
LOAD D2 0.0014; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0011; InlineFunc[int DegtoRad(int)] Params Start
SETR D3 D2; InlineFunc[int DegtoRad(int)] Params End
DEGTORAD D2 D3; InlineFunc[int DegtoRad(int)] Body
PUSHR D2
PUSHV 200
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0010
PUSHR D2
PUSHV 0
LOAD D2 0.0005
PUSHR D2; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0194; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0001
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETV D2 64
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETV D2 1
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0001
ADDV D2 1
STORE D2 0.0001
SETV D2 0; for() #403 setup AND while(true) #32 Body [Opt:AlwaysOn] Start
STORE D2 0.0007
LOAD D2 0.0007; for() #403 LoopTest
COMPAREV D2 16
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2175 ==; for() #403 TestFail?
LOAD D2 0.0004; InlineFunc[bool eweapon::isValid()] Params Start AND if() #1211 Test AND for() #403 Body Start
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2; InlineFunc[bool eweapon::isValid()] Params End
ISVALIDEWPN D2; InlineFunc[bool eweapon::isValid()] Body
COMPAREV D2 0
GOTOCMP 2171 ==; Test 'if'
LOAD D2 0.0003; if() #1212 Test AND if() #1211 Body Start
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
COMPAREV D2 16
GOTOCMP 1917 >=
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
COMPAREV D2 3
GOTOCMP 1917 >=
SETV D2 1
GOTO 1918
SETV D2 0
COMPAREV D2 0
GOTOCMP 1933 ==; Test 'if'
SETV D2 0; if() #1212 Body Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2; if() #1212 Body End
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
SUBV D2 1
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0007
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0003; if() #1213 Test
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2171 ==; Test 'if'
LOAD D2 0.0002; if() #626 Test AND if() #1213 Body Start
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2064 ==; Test 'if'
SETV D2 0; for() #404 setup AND if() #626 Body Start
STORE D2 0.0006
LOAD D2 0.0006; for() #404 LoopTest
COMPAREV D2 3
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2171 ==; for() #404 TestFail?
LOAD D2 0.0009; if() #1214 Test AND for() #404 Body Start
COMPAREV D2 0
GOTOCMP 1977 ==; Test 'if'
LOAD D2 0.0009; InlineFunc[void Game::PlaySound(int)] Params AND if() #1214 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body AND if() #1214 Body End
PUSHR D4
LOAD D2 0.0014; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
LOAD D2 0.0006; InlineFunc[int DegtoRad(int)] Params Start
MULTV D2 120
SETV D2 120
PUSHR D2
LOAD D2 0.0006
POP D3
MULTR D2 D3
ADDV D2 -90
SETR D3 D2; InlineFunc[int DegtoRad(int)] Params End
DEGTORAD D2 D3; InlineFunc[int DegtoRad(int)] Body
PUSHR D2
PUSHV 200
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0010
PUSHR D2
PUSHV 0
LOAD D2 0.0005
PUSHR D2; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0194; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0001
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETV D2 56
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETV D2 2
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0001
ADDV D2 1
STORE D2 0.0001
SETV D2 0
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2; for() #404 Body End
LOAD D2 0.0006; for() #404 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 1967; for() #404 End
GOTO 2171; if() #626 Body End
LOAD D2 0.0002; if() #1215 Test AND if() #626 Else Start
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2171 ==; Test 'if'
SETV D2 0; for() #405 setup AND if() #1215 Body Start
STORE D2 0.0006
LOAD D2 0.0006; for() #405 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2171 ==; for() #405 TestFail?
LOAD D2 0.0009; if() #1216 Test AND for() #405 Body Start
COMPAREV D2 0
GOTOCMP 2085 ==; Test 'if'
LOAD D2 0.0009; InlineFunc[void Game::PlaySound(int)] Params AND if() #1216 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body AND if() #1216 Body End
PUSHR D4
LOAD D2 0.0014; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
LOAD D2 0.0006; InlineFunc[int DegtoRad(int)] Params Start
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0006
POP D3
MULTR D2 D3
ADDV D2 -45
SETR D3 D2; InlineFunc[int DegtoRad(int)] Params End
DEGTORAD D2 D3; InlineFunc[int DegtoRad(int)] Body
PUSHR D2
PUSHV 200
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0010
PUSHR D2
PUSHV 0
LOAD D2 0.0005
PUSHR D2; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0194; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0001
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETV D2 56
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETV D2 3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0001
ADDV D2 1
STORE D2 0.0001
SETV D2 0
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2; for() #405 Body End
LOAD D2 0.0006; for() #405 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 2075; for() #405 End
LOAD D2 0.0007; if() #1215 Body End AND if() #626 Else End AND if() #1213 Body End AND if() #1211 Body End AND for() #403 Body End AND for() #403 LoopIncrement
ADDV D2 1
STORE D2 0.0007
GOTO 1888; for() #403 End
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #32 Body [Opt:AlwaysOn] End
GOTO 1886; while() #32 End
LOAD D3 0.0002
DEALLOCATEMEMR D3
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D3 0.0004
DEALLOCATEMEMR D3; [Opt:NeverRet] AND Func[void EZBE_HelmasaurShot(int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0010; Func[bool EZBE_Lightning(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0009
ALLOCATEMEMV D2 64 0
STORE D2 0.0008
ALLOCATEMEMV D2 64 0
STORE D2 0.0007
ALLOCATEMEMV D2 64 0
STORE D2 0.0006
ALLOCATEMEMV D2 64 0
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0008; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 32
LOAD D2 0.0014
PUSHR D2
PUSHV -64
PUSHV 32; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2486; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0007; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 32
LOAD D2 0.0014
PUSHR D2
PUSHV -32
PUSHV 32; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2486; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0006; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 32
LOAD D2 0.0014
PUSHR D2
PUSHARGSV 32 0.0002; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2486; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0005; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 32
LOAD D2 0.0014
PUSHR D2
PUSHV 64
PUSHV 32; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2486; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Call
POP D4
ALLOCATEMEMV D2 3 0
PUSHR D2
SETR D0 D2
PUSHR D0
LOAD D2 0.0013
POP D0
WRITEPODARRAYVR 0 D2
PUSHR D0
LOAD D2 0.0012
POP D0
WRITEPODARRAYVR 1 D2
PUSHR D0
LOAD D2 0.0011
POP D0
WRITEPODARRAYVR 2 D2
POP D2
STORE D2 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
STOREV 0 0
SETV D2 0; for() #406 setup
STORE D2 0.0009
LOAD D2 0.0009; for() #406 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2366 ==; for() #406 TestFail?
LOAD D2 0.0003; for() #406 Body Start
PUSHR D2
LOAD D2 0.0002
MODV D2 3
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
ADDV D2 1
MODV D2 3
POP D0
READPODARRAYR D2 D2
STORE D2 0
LOAD D2 0.0009; if() #1217 Test
MODV D2 3
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2300 ==; Test 'if'
LOAD D2 0.0002; if() #1217 Body Start
ADDV D2 1
STORE D2 0.0002
LOAD D2 0.0002
MODV D2 3
STORE D2 0.0002; if() #1217 Body End
PUSHR D4
LOAD D2 0.0008; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 32
PUSHV 0
LOAD D2 0.0009
PUSHR D2
PUSHV 20
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2686; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0007; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 32
PUSHV 0
LOAD D2 0.0009
PUSHR D2
PUSHV 20
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2686; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0006; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 32
PUSHV 0
LOAD D2 0.0009
PUSHR D2
PUSHV 20
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2686; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0005; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 32
PUSHV 0
LOAD D2 0.0009
PUSHR D2
PUSHV 20
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2686; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND for() #406 Body End
LOAD D2 0.0009; for() #406 LoopIncrement
ADDV D2 1
STORE D2 0.0009
GOTO 2268; for() #406 End
SETV D2 0; for() #407 setup
STORE D2 0.0009
LOAD D2 0.0009; for() #407 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2462 ==; for() #407 TestFail?
LOAD D2 0.0003; for() #407 Body Start
PUSHR D2
LOAD D2 0.0002
MODV D2 3
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
ADDV D2 1
MODV D2 3
POP D0
READPODARRAYR D2 D2
STORE D2 0
LOAD D2 0.0009; if() #1218 Test
MODV D2 3
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2400 ==; Test 'if'
LOAD D2 0.0002; if() #1218 Body Start
ADDV D2 1
STORE D2 0.0002
LOAD D2 0.0002
MODV D2 3
STORE D2 0.0002; if() #1218 Body End
PUSHR D4
LOAD D2 0.0008; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 32
LOAD D2 0.0009
PUSHR D2
PUSHARGSV 20 0.0002
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2686; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0007; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 32
LOAD D2 0.0009
PUSHR D2
PUSHARGSV 20 0.0002
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2686; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0006; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 32
LOAD D2 0.0009
PUSHR D2
PUSHARGSV 20 0.0002
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2686; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0005; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 32
LOAD D2 0.0009
PUSHR D2
PUSHARGSV 20 0.0002
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2686; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND for() #407 Body End
LOAD D2 0.0009; for() #407 LoopIncrement
ADDV D2 1
STORE D2 0.0009
GOTO 2368; for() #407 End
SETV D2 0; return Start
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D3 0.0005
DEALLOCATEMEMR D3
LOAD D3 0.0006
DEALLOCATEMEMR D3
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
GOTO 2484; return End
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D3 0.0005
DEALLOCATEMEMR D3
LOAD D3 0.0006
DEALLOCATEMEMR D3
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
POPARGS D5 0.0017
RETURNFUNC; Func[bool EZBE_Lightning(int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0007; Func[void EZBF_LightningInit(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
PUSHR D4
PUSHV -40; UsrFunc[int Rand(int, int)] Params Start
PUSHV 40; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 0.0182; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0.0001
STOREV 0 0; for() #411 setup
LOAD D2 0; for() #411 LoopTest
PUSHR D2
LOAD D2 0.0010
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2684 ==; for() #411 TestFail?
LOAD D2 0; for() #411 Body Start
PUSHR D2
LOAD D2 0.0010
SUBV D2 1
POP D3
DIVR D3 D2
SETR D2 D3
MULTV D2 320
SETV D2 320
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
SUBV D2 1
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
STORE D2 0.0004
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
SUBV D2 1
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
STORE D2 0.0003
PUSHR D4
LOAD D2 0.0007; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 0.0182; UsrFunc[int Rand(int, int)] Call
POP D4
MULTV D2 0.5000
STORE D2 0.0002
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
SUBV D2 1
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0002
LOAD D2 0; if() #1235 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2573 ==; Test 'if'
SETV D2 0; if() #1235 Body Start
STORE D2 0.0002; if() #1235 Body End
LOAD D2 0.0012
PUSHR D2
PUSHR D4
LOAD D2 0.0004; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0009
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 0.0965; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
LOAD D2 0.0003; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0009
ADDV D2 90
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 0.0965; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
LOAD D2 0.0002; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0009
ADDV D2 90
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 0.0965; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0006
LOAD D2 0.0011
PUSHR D2
PUSHR D4
LOAD D2 0.0004; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0009
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 0.0975; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
LOAD D2 0.0003; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0009
ADDV D2 90
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 0.0975; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
LOAD D2 0.0002; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0009
ADDV D2 90
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 0.0975; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0005
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0
MULTV D2 2
SETV D2 2
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0
MULTV D2 2
SETV D2 2
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
ADDV D2 1
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #411 Body End
LOAD D2 0; for() #411 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 2500; for() #411 End
POPARGS D5 0.0014
RETURNFUNC; Func[void EZBF_LightningInit(int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0009; Func[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
SETR D2 LINKHP; if() #1236 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 3270 !=; Test 'if' AND return (Void) AND if() #1236 Body
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0015
SUBV D2 1
POP D3
DIVR D3 D2
SETR D2 D3
STORE D2 0.0008
STOREV 0 0.0007
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
STOREV 0 0; for() #412 setup
LOAD D2 0; for() #412 LoopTest
PUSHR D2
LOAD D2 0.0015
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3270 ==; for() #412 TestFail?
LOAD D2 0.0013; if() #631 Test AND for() #412 Body Start
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
POP D3
COMPARER D3 D2
GOTOCMP 2741 <=
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
ADDV D2 1
POP D3
MULTR D2 D3
POP D3
COMPARER D3 D2
GOTOCMP 2741 >=
SETV D2 1
GOTO 2742
SETV D2 0
COMPAREV D2 0
GOTOCMP 2925 ==; Test 'if'
LOAD D2 0.0016; if() #631 Body Start
PUSHR D2
LOAD D2 0
MULTV D2 2
POP D0
READPODARRAYR D2 D2
STORE D2 0.0004
LOAD D2 0.0016
PUSHR D2
LOAD D2 0
MULTV D2 2
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0003
LOAD D2 0.0016
PUSHR D2
LOAD D2 0
ADDV D2 1
MULTV D2 2
POP D0
READPODARRAYR D2 D2
STORE D2 0.0002
LOAD D2 0.0016
PUSHR D2
LOAD D2 0
ADDV D2 1
MULTV D2 2
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001
PUSHR D4
LOAD D2 0.0004; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 0.0163; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0007
LOAD D2 0.0004; InlineFunc[int Distance(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0006
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0008
POP D3
DIVR D3 D2
SETR D2 D3
STORE D2 0.0005
LOAD D2 0.0004
PUSHR D2
PUSHR D4
LOAD D2 0.0006; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0005
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 0.0965; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0002
LOAD D2 0.0003
PUSHR D2
PUSHR D4
LOAD D2 0.0006; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0005
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 0.0975; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0001
PUSHR D4
PUSHV 4; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
PUSHV 1
LOAD D2 0.0011
PUSHR D2
PUSHV 1
PUSHV 128; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Params End
CALLFUNC 0.1137; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Call
POP D4
PUSHV 4; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0010
PUSHR D2
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 128; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Params End
LINER; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Body End
PUSHR D4; if() #1237 Test
LOAD D2 0.0004; UsrFunc[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 11
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 11
PUSHR D2
PUSHV 0; UsrFunc[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.3432; UsrFunc[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3266 ==; Test 'if'
PUSHR D4; if() #1237 Body Start
LOAD D2 0.0009; UsrFunc[void EZBE_DamageLink(int)] Params Start
PUSHR D2; UsrFunc[void EZBE_DamageLink(int)] Params End
CALLFUNC 0.1554; UsrFunc[void EZBE_DamageLink(int)] Call
POP D4; if() #1237 Body End
GOTO 3266; if() #631 Body End
LOAD D2 0.0014; if() #632 Test AND if() #631 Else Start
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
POP D3
COMPARER D3 D2
GOTOCMP 2948 <=
LOAD D2 0.0014
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
ADDV D2 1
POP D3
MULTR D2 D3
POP D3
COMPARER D3 D2
GOTOCMP 2948 >=
SETV D2 1
GOTO 2949
SETV D2 0
COMPAREV D2 0
GOTOCMP 3132 ==; Test 'if'
LOAD D2 0.0016; if() #632 Body Start
PUSHR D2
LOAD D2 0
MULTV D2 2
POP D0
READPODARRAYR D2 D2
STORE D2 0.0004
LOAD D2 0.0016
PUSHR D2
LOAD D2 0
MULTV D2 2
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0003
LOAD D2 0.0016
PUSHR D2
LOAD D2 0
ADDV D2 1
MULTV D2 2
POP D0
READPODARRAYR D2 D2
STORE D2 0.0002
LOAD D2 0.0016
PUSHR D2
LOAD D2 0
ADDV D2 1
MULTV D2 2
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001
PUSHR D4
LOAD D2 0.0004; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 0.0163; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0007
LOAD D2 0.0004; InlineFunc[int Distance(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0006
LOAD D2 0.0014
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0008
POP D3
DIVR D3 D2
SETR D2 D3
STORE D2 0.0005
LOAD D2 0.0004
PUSHR D2
PUSHR D4
LOAD D2 0.0006; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0005
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 0.0965; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0004
LOAD D2 0.0003
PUSHR D2
PUSHR D4
LOAD D2 0.0006; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0005
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 0.0975; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0003
PUSHR D4
PUSHV 4; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
PUSHV 1
LOAD D2 0.0011
PUSHR D2
PUSHV 1
PUSHV 128; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Params End
CALLFUNC 0.1137; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Call
POP D4
PUSHV 4; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0010
PUSHR D2
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 128; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Params End
LINER; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Body End
PUSHR D4; if() #1238 Test
LOAD D2 0.0004; UsrFunc[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 11
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 11
PUSHR D2
PUSHV 0; UsrFunc[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.3432; UsrFunc[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3266 ==; Test 'if'
PUSHR D4; if() #1238 Body Start
LOAD D2 0.0009; UsrFunc[void EZBE_DamageLink(int)] Params Start
PUSHR D2; UsrFunc[void EZBE_DamageLink(int)] Params End
CALLFUNC 0.1554; UsrFunc[void EZBE_DamageLink(int)] Call
POP D4; if() #1238 Body End
GOTO 3266; if() #632 Body End
LOAD D2 0.0014; if() #1239 Test AND if() #632 Else Start
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
POP D3
COMPARER D3 D2
GOTOCMP 3155 >
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
ADDV D2 1
POP D3
MULTR D2 D3
POP D3
COMPARER D3 D2
GOTOCMP 3155 <
SETV D2 1
GOTO 3156
SETV D2 0
COMPAREV D2 0
GOTOCMP 3266 ==; Test 'if'
LOAD D2 0.0016; if() #1239 Body Start
PUSHR D2
LOAD D2 0
MULTV D2 2
POP D0
READPODARRAYR D2 D2
STORE D2 0.0004
LOAD D2 0.0016
PUSHR D2
LOAD D2 0
MULTV D2 2
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0003
LOAD D2 0.0016
PUSHR D2
LOAD D2 0
ADDV D2 1
MULTV D2 2
POP D0
READPODARRAYR D2 D2
STORE D2 0.0002
LOAD D2 0.0016
PUSHR D2
LOAD D2 0
ADDV D2 1
MULTV D2 2
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001
PUSHR D4
PUSHV 4; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
PUSHV 1
LOAD D2 0.0011
PUSHR D2
PUSHV 1
PUSHV 128; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Params End
CALLFUNC 0.1137; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Call
POP D4
PUSHV 4; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0010
PUSHR D2
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 128; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Params End
LINER; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Body End
PUSHR D4; if() #1240 Test
LOAD D2 0.0004; UsrFunc[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 11
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 11
PUSHR D2
PUSHV 0; UsrFunc[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.3432; UsrFunc[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3266 ==; Test 'if'
PUSHR D4; if() #1240 Body Start
LOAD D2 0.0009; UsrFunc[void EZBE_DamageLink(int)] Params Start
PUSHR D2; UsrFunc[void EZBE_DamageLink(int)] Params End
CALLFUNC 0.1554; UsrFunc[void EZBE_DamageLink(int)] Call
POP D4; if() #1240 Body End
LOAD D2 0; if() #1239 Body End AND if() #632 Else End AND if() #631 Else End AND for() #412 Body End AND for() #412 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 2709; for() #412 End
POPARGS D5 0.0017
RETURNFUNC; Func[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0007; Func[bool EZBE_LightningSingle(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0006
ALLOCATEMEMV D2 64 0
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0005; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0012
PUSHR D2
PUSHV 32
LOAD D2 0.0011
PUSHR D2
PUSHV 0
PUSHV 32; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2486; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Call
POP D4
ALLOCATEMEMV D2 3 0
PUSHR D2
SETR D0 D2
PUSHR D0
LOAD D2 0.0010
POP D0
WRITEPODARRAYVR 0 D2
PUSHR D0
LOAD D2 0.0009
POP D0
WRITEPODARRAYVR 1 D2
PUSHR D0
LOAD D2 0.0008
POP D0
WRITEPODARRAYVR 2 D2
POP D2
STORE D2 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
STOREV 0 0
SETV D2 0; for() #408 setup
STORE D2 0.0006
LOAD D2 0.0006; for() #408 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3366 ==; for() #408 TestFail?
LOAD D2 0.0003; for() #408 Body Start
PUSHR D2
LOAD D2 0.0002
MODV D2 3
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
ADDV D2 1
MODV D2 3
POP D0
READPODARRAYR D2 D2
STORE D2 0
LOAD D2 0.0006; if() #1219 Test
MODV D2 3
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3345 ==; Test 'if'
LOAD D2 0.0002; if() #1219 Body Start
ADDV D2 1
STORE D2 0.0002
LOAD D2 0.0002
MODV D2 3
STORE D2 0.0002; if() #1219 Body End
PUSHR D4
LOAD D2 0.0005; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 32
PUSHV 0
LOAD D2 0.0006
PUSHR D2
PUSHV 20
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2686; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND for() #408 Body End
LOAD D2 0.0006; for() #408 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 3313; for() #408 End
SETV D2 0; for() #409 setup
STORE D2 0.0006
LOAD D2 0.0006; for() #409 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3420 ==; for() #409 TestFail?
LOAD D2 0.0003; for() #409 Body Start
PUSHR D2
LOAD D2 0.0002
MODV D2 3
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
ADDV D2 1
MODV D2 3
POP D0
READPODARRAYR D2 D2
STORE D2 0
LOAD D2 0.0006; if() #1220 Test
MODV D2 3
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3400 ==; Test 'if'
LOAD D2 0.0002; if() #1220 Body Start
ADDV D2 1
STORE D2 0.0002
LOAD D2 0.0002
MODV D2 3
STORE D2 0.0002; if() #1220 Body End
PUSHR D4
LOAD D2 0.0005; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 32
LOAD D2 0.0006
PUSHR D2
PUSHARGSV 20 0.0002
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2686; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND for() #409 Body End
LOAD D2 0.0006; for() #409 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 3368; for() #409 End
SETV D2 0; return Start
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D3 0.0005
DEALLOCATEMEMR D3
GOTO 3430; return End
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D3 0.0005
DEALLOCATEMEMR D3
POPARGS D5 0.0014
RETURNFUNC; Func[bool EZBE_LightningSingle(int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0004; Func[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
STORE D2 0.0008
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
STORE D2 0.0007
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0006
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0005
LOAD D2 0.0010; if() #627 Test
PUSHR D2
LOAD D2 0.0012
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3635 ==; Test 'if'
LOAD D2 0.0008; if() #627 Body Start
PUSHR D2
LOAD D2 0.0012
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0012
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
DIVR D3 D2
SETR D2 D3
STORE D2 0.0003
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0012
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0012
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
DIVR D3 D2
SETR D2 D3
STORE D2 0.0002
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0011
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0001
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0011
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0
LOAD D2 0.0008; InlineFunc[int Max(int, int)] Params Start AND if() #628 Test
PUSHVARGR D2
LOAD D2 0.0006
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHR D2
LOAD D2 0.0012; InlineFunc[int Min(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0010
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
POP D3
COMPARER D3 D2
GOTOCMP 3590 <
LOAD D2 0.0008; InlineFunc[int Min(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0006
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
PUSHR D2
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0010
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
COMPARER D3 D2
GOTOCMP 3590 >
LOAD D2 0.0007; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0005
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHR D2
LOAD D2 0.0011; InlineFunc[int Min(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0009
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
POP D3
COMPARER D3 D2
GOTOCMP 3590 <
LOAD D2 0.0007; InlineFunc[int Min(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0005
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
PUSHR D2
LOAD D2 0.0011; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0009
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
COMPARER D3 D2
GOTOCMP 3590 >
SETV D2 1
GOTO 3591
SETV D2 0
COMPAREV D2 0
GOTOCMP 3632 ==; Test 'if'
LOAD D2 0.0007; InlineFunc[int Min(int, int)] Params Start AND if() #629 Test AND if() #628 Body Start
PUSHVARGR D2
LOAD D2 0.0005
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
COMPARER D3 D2
GOTOCMP 3623 >
LOAD D2 0.0007; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0005
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Min(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
POP D3
COMPARER D3 D2
GOTOCMP 3623 <
SETV D2 0
GOTO 3624
SETV D2 1
COMPAREV D2 0
GOTOCMP 3629 ==; Test 'if'
SETV D2 0; return Start AND if() #629 Body Start
GOTO 3700; return End
GOTO 3699; if() #629 Body End
SETV D2 1; return Start AND if() #629 Else Start
GOTO 3700; return End AND if() #629 Else End
GOTO 3699; if() #628 Body End
SETV D2 0; return Start AND if() #628 Else Start
GOTO 3700; return End AND if() #628 Else End
GOTO 3699; if() #627 Body End
LOAD D2 0.0012; if() #1221 Test AND if() #627 Else Start
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
GOTOCMP 3649 <
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0006
POP D3
COMPARER D3 D2
GOTOCMP 3649 >
SETV D2 1
GOTO 3650
SETV D2 0
COMPAREV D2 0
GOTOCMP 3699 ==; Test 'if'
LOAD D2 0.0011; if() #1221 Body Start
STORE D2 0.0003
LOAD D2 0.0009
STORE D2 0.0002
LOAD D2 0.0003; if() #1222 Test
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 3668 ==; Test 'if'
LOAD D2 0.0009; if() #1222 Body Start
STORE D2 0.0003
LOAD D2 0.0011
STORE D2 0.0002; if() #1222 Body End
LOAD D2 0.0007; if() #1223 Test
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
GOTOCMP 3680 <
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
GOTOCMP 3694 <=
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
GOTOCMP 3692 <
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
GOTOCMP 3694 <=
SETV D2 0
GOTO 3695
SETV D2 1
COMPAREV D2 0
GOTOCMP 3699 ==; Test 'if'
SETV D2 1; return Start AND if() #1223 Body Start
GOTO 3700; return End AND if() #1223 Body End
SETV D2 0; if() #1221 Body End AND if() #627 Else End AND return Start
POPARGS D5 0.0013; return End
RETURNFUNC; Func[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0007; Func[void EZBE_WallBounce(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0006
STOREV 1 0.0005
LOAD D2 0.0008; if() #1224 Test
COMPAREV D2 0
GOTOCMP 3726 !=
LOAD D2 0.0013
COMPAREV D2 132
GOTOCMP 3724 ==
LOAD D2 0.0013
COMPAREV D2 130
GOTOCMP 3724 ==
LOAD D2 0.0013
COMPAREV D2 134
GOTOCMP 3724 ==
LOAD D2 0.0013
COMPAREV D2 137
GOTOCMP 3724 ==
LOAD D2 0.0013
COMPAREV D2 138
GOTOCMP 3726 !=
SETV D2 1
GOTO 3727
SETV D2 0
COMPAREV D2 0
GOTOCMP 3732 ==; Test 'if'
LOAD D2 0.0005; if() #1224 Body Start
ORV D2 2
STORE D2 0.0005; if() #1224 Body End
LOAD D2 0.0008; if() #630 Test
COMPAREV D2 2000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 3744 ==; Test 'if'
LOAD D2 0.0005; if() #630 Body Start
ORV D2 4
STORE D2 0.0005
LOAD D2 0.0008
SUBV D2 2000
STORE D2 0.0008
GOTO 3755; if() #630 Body End
LOAD D2 0.0008; if() #1225 Test AND if() #630 Else Start
COMPAREV D2 1000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 3755 ==; Test 'if'
LOAD D2 0.0005; if() #1225 Body Start
ORV D2 2
STORE D2 0.0005
LOAD D2 0.0008
SUBV D2 1000
STORE D2 0.0008; if() #1225 Body End
LOAD D2 0.0008; if() #630 Else End AND if() #1226 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3762 ==; Test 'if'
SETV D2 -1; if() #1226 Body Start
STORE D2 0.0008; if() #1226 Body End
PUSHR D4
LOAD D2 0.0013; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0010; InlineFunc[int DegtoRad(int)] Params Start
SETR D3 D2; InlineFunc[int DegtoRad(int)] Params End
DEGTORAD D2 D3; InlineFunc[int DegtoRad(int)] Body
PUSHR D2
PUSHV 0
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0008
PUSHR D2
PUSHV 0
LOAD D2 0.0005
PUSHR D2; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0194; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0004
STOREV 10 0.0003
LOAD D2 0.0009
DIVV D2 100
STORE D2 0.0009
LOAD D2 0.0004; while() #33 Test AND InlineFunc[bool eweapon::isValid()] Params
ISVALIDEWPN D2; InlineFunc[bool eweapon::isValid()] Body
COMPAREV D2 0
GOTOCMP 4004 ==; Test 'while'
PUSHR D4; while() #33 Body Start
LOAD D2 0.0009; UsrFunc[int VectorX(int, int)] Params Start
DIVV D2 100
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 0.0965; UsrFunc[int VectorX(int, int)] Call
POP D4
STORE D2 0.0002
PUSHR D4
LOAD D2 0.0009; UsrFunc[int VectorY(int, int)] Params Start
DIVV D2 100
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 0.0975; UsrFunc[int VectorY(int, int)] Call
POP D4
STORE D2 0.0001
STOREV 0 0
LOAD D2 0.0006; for() #410 LoopTest
PUSHR D2
LOAD D2 0.0009
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3994 ==; for() #410 TestFail?
LOAD D2 0.0012; for() #410 Body Start
PUSHR D2
PUSHR D4
PUSHV 1; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0010
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 0.0965; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0012
LOAD D2 0.0011
PUSHR D2
PUSHR D4
PUSHV 1; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0010
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 0.0975; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0011
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
LOAD D2 0.0002; if() #1227 Test
COMPAREV D2 0
GOTOCMP 3877 >=
PUSHR D4
LOAD D2 0.0004; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
PUSHV 2
PUSHARGSV 1 0.0002; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Params End
CALLFUNC 0.1197; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3897 ==
LOAD D2 0.0002
COMPAREV D2 0
GOTOCMP 3895 <=
PUSHR D4
LOAD D2 0.0004; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
PUSHV 3
PUSHARGSV 1 0.0002; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Params End
CALLFUNC 0.1197; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3897 ==
SETV D2 0
GOTO 3898
SETV D2 1
COMPAREV D2 0
GOTOCMP 3905 ==; Test 'if'
LOAD D2 0.0002; if() #1227 Body Start
SUBV2 0 D2
STORE D2 0.0002
SETV D2 1
STORE D2 0; if() #1227 Body End
LOAD D2 0.0001; if() #1228 Test
COMPAREV D2 0
GOTOCMP 3923 >=
PUSHR D4
LOAD D2 0.0004; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
PUSHV 0
PUSHARGSV 1 0.0002; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Params End
CALLFUNC 0.1197; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3942 ==
LOAD D2 0.0001
COMPAREV D2 0
GOTOCMP 3940 <=
PUSHR D4
LOAD D2 0.0004; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
PUSHARGSV 1 0.0003; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Params End
CALLFUNC 0.1197; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3942 ==
SETV D2 0
GOTO 3943
SETV D2 1
COMPAREV D2 0
GOTOCMP 3950 ==; Test 'if'
LOAD D2 0.0001; if() #1228 Body Start
SUBV2 0 D2
STORE D2 0.0001
SETV D2 1
STORE D2 0; if() #1228 Body End
LOAD D2 0; if() #1229 Test
COMPAREV D2 0
GOTOCMP 3990 ==; Test 'if'
PUSHR D4; if() #1229 Body Start
PUSHARGSV 0 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 0.0163; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0010
LOAD D2 0.0010; InlineFunc[int DegtoRad(int)] Params Start
SETR D3 D2; InlineFunc[int DegtoRad(int)] Params End
DEGTORAD D2 D3; InlineFunc[int DegtoRad(int)] Body
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
LOAD D2 0.0003
SUBV D2 1
STORE D2 0.0003
LOAD D2 0.0003; if() #1230 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3990 ==; Test 'if'
SETV D2 0; if() #1230 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2; if() #1230 Body End
LOAD D2 0.0006; if() #1229 Body End AND for() #410 Body End AND for() #410 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 3811; for() #410 End
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0009; InlineFunc[int Floor(int)] Params
FLOOR D2; InlineFunc[int Floor(int)] Body
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0006
WAITFRAME; InlineFunc[void Waitframe()] Body AND while() #33 Body End
GOTO 3788; while() #33 End
POPARGS D5 0.0014
RETURNFUNC; Func[void EZBE_WallBounce(int, int, int, int, int, int, int)] Body End


PUSHR D0; void run(int, int, int, int, int, int, int, int) Params
PUSHR D1
PUSHR D2
PUSHR D3
PUSHR D4
PUSHR D5
PUSHR D6
PUSHR D7
PUSHR REFFFC; void run(int, int, int, int, int, int, int, int) Body Start
SETR D4 SP2
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #34 Body [Opt:AlwaysOn]
GOTO 11; while() #34 End AND [Opt:NeverRet] AND void run(int, int, int, int, int, int, int, int) Body End


PUSHR D0; void run(int, int, int, int, int, int, int, int) Params
PUSHR D1
PUSHR D2
PUSHR D3
PUSHR D4
PUSHR D5
PUSHR D6
PUSHR D7
PUSHR REFFFC; void run(int, int, int, int, int, int, int, int) Body Start
SETR D4 SP2
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #35 Body [Opt:AlwaysOn]
GOTO 11; while() #35 End AND [Opt:NeverRet] AND void run(int, int, int, int, int, int, int, int) Body End


PUSHV 0; void run() Body Start
SETR D4 SP2
PUSHR D4
CALLFUNC 0.2410; UsrFunc[void StartGhostZH()] Call
POP D4
PUSHR D4; while(true) #8 Body [Opt:AlwaysOn] Start
CALLFUNC 0.8821; UsrFunc[void UpdateGhostZH1()] Call
POP D4
WAITDRAW; InlineFunc[void Waitdraw()] Body
PUSHR D4
CALLFUNC 0.8883; UsrFunc[void UpdateGhostZH2()] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #8 Body [Opt:AlwaysOn] End
GOTO 6; while() #8 End AND [Opt:NeverRet] AND void run() Body End
SETR D4 SP2; Func[int RadianAngle(int, int, int, int)] Body Start
LOAD D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND return Start
PUSHR D2
LOAD D2 0.0003
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
POPARGS D5 0.0004; return End
RETURNFUNC; Func[int RadianAngle(int, int, int, int)] Body End
SETR D4 SP2; Func[int Randf(int)] Body Start
SETV D2 0; InlineFunc[long randgen::LRand(long)] Params Start AND return Start
PUSHR D2
LOAD D2 0; InlineFunc[long randgen::LRand(long)] Params End
POP REFRNG; InlineFunc[long randgen::LRand(long)] Body Start
RNGLRAND2 D2; InlineFunc[long randgen::LRand(long)] Body End
POP D5; return End
RETURNFUNC; Func[int Randf(int)] Body End
SETR D4 SP2; Func[int Angle(int, int, int, int)] Body Start
LOAD D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start AND return Start
PUSHR D2
LOAD D2 0.0003
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
SETR D3 D2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
POPARGS D5 0.0004; return End
RETURNFUNC; Func[int Angle(int, int, int, int)] Body End
PUSHARGSV 0 0.0007; Func[void AutoGhost()] Body Start
SETR D4 SP2
SETR D2 GD26; if() #29 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 2
COMPAREV D2 0
GOTOCMP 435 !=; Test 'if' AND return (Void) AND if() #29 Body
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
SETR D2 NPCCOUNT; for() #2 setup
STORE D2 0.0003
LOAD D2 0.0003; for() #2 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 435 ==; for() #2 TestFail?
LOAD D2 0.0003; InlineFunc[npc screendata::LoadNPC(int)] Params AND for() #2 Body Start
SUBV D2 1; InlineFunc[npc screendata::LoadNPC(int)] Body Start
LOADNPCR D2
SETR D2 REFNPC; InlineFunc[npc screendata::LoadNPC(int)] Body End
STORE D2 0.0006
LOAD D2 0.0006; if() #30 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 431 !=; Test 'if' AND continue 1; AND if() #30 Body
LOAD D2 0.0006; if() #31 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
COMPAREV D2 511
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 431 !=; Test 'if' AND continue 1; AND if() #31 Body
LOAD D2 0.0006; if() #32 Test AND if(false) #16 [Opt:AlwaysOff]
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 65536
COMPAREV D2 0
GOTOCMP 431 !=; Test 'if' AND continue 1; AND if() #32 Body
LOAD D2 0.0006; unless() #33 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
COMPAREV D2 0
GOTOCMP 431 ==; Test 'unless' AND continue 1; AND unless() #33 Body
LOAD D2 0.0006; unless() #34 Test
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
COMPAREV D2 0
GOTOCMP 431 ==; Test 'unless' AND continue 1; AND unless() #34 Body
STOREV 0 0.0002
STOREV 0 0.0001
LOAD D2 0.0006; if(false) #17 [Opt:AlwaysOff]
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
STORE D2 0.0001
LOAD D2 0.0006
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
STORE D2 0.0002
LOAD D2 0.0002; if() #35 Test
COMPAREV D2 -1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 166 ==; Test 'if'
ALLOCATEMEMV D2 2 0; if() #35 Body Start
STORE D2 0
PUSHR D4
LOAD D2 0.0006; UsrFunc[int __AutoGhostParseName(npc, int[])] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[int __AutoGhostParseName(npc, int[])] Params End
CALLFUNC 0.0437; UsrFunc[int __AutoGhostParseName(npc, int[])] Call
POP D4
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 0
STORE D2 0.0002
LOAD D3 0
DEALLOCATEMEMR D3; if() #35 Body End
LOAD D2 0.0002; if() #36 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 185 ==; Test 'if'
ALLOCATEMEMV D2 47 0; if() #36 Body Start
STORE D2 0
WRITEPODSTRING D2 "ghost.zh: failed to create enemy, script <= 0\n"
LOAD D2 0; InlineFunc[void TraceS(char32[])] Params Start
SETR D3 D2; InlineFunc[void TraceS(char32[])] Params End
TRACE6 D3; InlineFunc[void TraceS(char32[])] Body
LOAD D3 0
DEALLOCATEMEMR D3
PUSHR D4
LOAD D2 0.0006; UsrFunc[void __AutoGhostKill(npc)] Params Start
PUSHR D2; UsrFunc[void __AutoGhostKill(npc)] Params End
CALLFUNC 0.0737; UsrFunc[void __AutoGhostKill(npc)] Call
POP D4
GOTO 431; continue 1; AND if() #36 Body End
LOAD D2 0.0002; if() #37 Test
COMPAREV D2 511
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 204 ==; Test 'if'
ALLOCATEMEMV D2 48 0; if() #37 Body Start
STORE D2 0
WRITEPODSTRING D2 "ghost.zh: failed to create enemy, script > 511\n"
LOAD D2 0; InlineFunc[void TraceS(char32[])] Params Start
SETR D3 D2; InlineFunc[void TraceS(char32[])] Params End
TRACE6 D3; InlineFunc[void TraceS(char32[])] Body
LOAD D3 0
DEALLOCATEMEMR D3
PUSHR D4
LOAD D2 0.0006; UsrFunc[void __AutoGhostKill(npc)] Params Start
PUSHR D2; UsrFunc[void __AutoGhostKill(npc)] Params End
CALLFUNC 0.0737; UsrFunc[void __AutoGhostKill(npc)] Call
POP D4
GOTO 431; continue 1; AND if() #37 Body End
PUSHR D4
LOAD D2 0.0005; UsrFunc[int FindUnusedFFC(int)] Params Start
PUSHR D2; UsrFunc[int FindUnusedFFC(int)] Params End
CALLFUNC 0.0788; UsrFunc[int FindUnusedFFC(int)] Call
POP D4
STORE D2 0.0005
LOAD D2 0.0005; unless() #38 Test
COMPAREV D2 0
GOTOCMP 227 !=; Test 'unless'
ALLOCATEMEMV D2 52 0; unless() #38 Body Start
STORE D2 0
WRITEPODSTRING D2 "ghost.zh: failed to create enemy, no ffc available\n"
LOAD D2 0; InlineFunc[void TraceS(char32[])] Params Start
SETR D3 D2; InlineFunc[void TraceS(char32[])] Params End
TRACE6 D3; InlineFunc[void TraceS(char32[])] Body
LOAD D3 0
DEALLOCATEMEMR D3
PUSHR D4
LOAD D2 0.0006; UsrFunc[void __AutoGhostKill(npc)] Params Start
PUSHR D2; UsrFunc[void __AutoGhostKill(npc)] Params End
CALLFUNC 0.0737; UsrFunc[void __AutoGhostKill(npc)] Call
POP D4
GOTO 431; continue 1; AND unless() #38 Body End
LOAD D2 0.0005; InlineFunc[ffc screendata::LoadFFC(int)] Params
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0004
SETV D2 1
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_CSET
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2
SETV D2 1
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
SETV D2 1
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD2 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD2 D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFSCRIPT D2
LOAD D2 0.0006
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFINITDD D2
SETV D2 1; if(true) #39 [Opt:AlwaysOn]
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2
LOAD D2 0.0001; if() #40 Test
COMPAREV D2 1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 401 ==; Test 'if'
LOAD D2 0.0001; if() #41 Test AND if() #40 Body Start
COMPAREV D2 -1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 401 ==; Test 'if'
SETV D2 3; if() #41 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_EXTEND D2
SETV D2 1024
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2; if() #41 Body End
LOAD D2 0.0001; if() #40 Body End AND if() #18 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 419 ==; Test 'if'
SETV D2 1; if() #18 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 431; if() #18 Body End
LOAD D2 0.0001; if() #18 Else Start
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #18 Else End
LOAD D2 0.0003; for() #2 Body End AND for() #2 LoopIncrement
SUBV D2 1
STORE D2 0.0003
GOTO 73; for() #2 End
POPARGS D5 0.0007
RETURNFUNC; Func[void AutoGhost()] Body End
PUSHARGSV 0 0.0009; Func[int __AutoGhostParseName(npc, int[])] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 64 0
STORE D2 0.0008
ALLOCATEMEMV D2 64 0
STORE D2 0.0007
SETV D2 1
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0010; InlineFunc[void npc::GetName(char32[])] Params Start
PUSHR D2
LOAD D2 0.0008; InlineFunc[void npc::GetName(char32[])] Params End
POP REFNPC; InlineFunc[void npc::GetName(char32[])] Body Start
NPCNAME D2; InlineFunc[void npc::GetName(char32[])] Body End
STOREV 0 0.0006; for() #144 setup
LOAD D2 0.0006; for() #144 LoopTest
COMPAREV D2 63
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 675 ==; for() #144 TestFail?
LOAD D2 0.0008; if() #573 Test AND for() #144 Body Start
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
COMPAREV D2 64
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 671 ==; Test 'if'
LOAD D2 0.0008; if() #573 Body Start
PUSHR D2
LOAD D2 0.0006
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0005
PUSHR D4; if() #295 Test
LOAD D2 0.0005; UsrFunc[bool __IsScriptNameChar(int, bool)] Params Start
PUSHR D2
PUSHV 1; UsrFunc[bool __IsScriptNameChar(int, bool)] Params End
CALLFUNC 0.9005; UsrFunc[bool __IsScriptNameChar(int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 578 ==; Test 'if'
STOREV 0 0.0004; if() #295 Body Start
LOAD D2 0.0006; for() #145 setup
ADDV D2 1
STORE D2 0.0006
PUSHR D4; for() #145 LoopTest
LOAD D2 0.0008; UsrFunc[bool __IsScriptNameChar(int, bool)] Params Start
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
PUSHR D2
PUSHV 0; UsrFunc[bool __IsScriptNameChar(int, bool)] Params End
CALLFUNC 0.9005; UsrFunc[bool __IsScriptNameChar(int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 520 ==; for() #145 TestFail?
LOAD D2 0.0008; for() #145 Body Start
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0004
ADDV D2 1
STORE D2 0.0004; for() #145 Body End
LOAD D2 0.0006; for() #145 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 488; for() #145 End
SETV D2 0
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0007; InlineFunc[int Game::GetFFCScript(char32[])] Params
GETFFCSCRIPT D2; InlineFunc[int Game::GetFFCScript(char32[])] Body
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0006
SUBV D2 1
STORE D2 0.0006
LOAD D2 0.0009; if() #574 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 671 ==; Test 'if'
ALLOCATEMEMV D2 59 0; if() #574 Body Start
WRITEPODSTRING D2 "ghost.zh: AutoGhost setup failed - script does not exist.\n"
STORE D2 0.0002
ALLOCATEMEMV D2 80 0
WRITEPODSTRING D2 "  Script name: %s\n"
STORE D2 0
LOAD D2 0.0002; InlineFunc[void printf(char32[])] Params Start
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
SETV D2 0; return Start
LOAD D3 0
DEALLOCATEMEMR D3
LOAD D3 0.0002
DEALLOCATEMEMR D3
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
GOTO 735; return End
LOAD D3 0
DEALLOCATEMEMR D3
LOAD D3 0.0002
DEALLOCATEMEMR D3; if() #574 Body End
GOTO 671; if() #295 Body End
LOAD D2 0.0005; if() #575 Test AND if() #295 Else Start
COMPAREV D2 48
GOTOCMP 584 <
LOAD D2 0.0005
COMPAREV D2 57
GOTOCMP 589 <=
LOAD D2 0.0005
COMPAREV D2 45
GOTOCMP 589 ==
SETV D2 0
GOTO 590
SETV D2 1
COMPAREV D2 0
GOTOCMP 671 ==; Test 'if'
STOREV 0 0.0004; if() #575 Body Start
LOAD D2 0.0005; if() #576 Test
COMPAREV D2 45
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 609 ==; Test 'if'
SETV D2 45; if() #576 Body Start
PUSHR D2
LOAD D2 0.0007
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
SETV D2 1
STORE D2 0.0004
LOAD D2 0.0006
ADDV D2 1
STORE D2 0.0006; if() #576 Body End
LOAD D2 0.0006; for() #146 setup
ADDV D2 1
STORE D2 0.0006
LOAD D2 0.0008; for() #146 LoopTest
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
COMPAREV D2 48
GOTOCMP 628 <
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
COMPAREV D2 57
GOTOCMP 628 >
SETV D2 1
GOTO 629
SETV D2 0
COMPAREV D2 0
GOTOCMP 651 ==; for() #146 TestFail?
LOAD D2 0.0008; for() #146 Body Start
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0004
ADDV D2 1
STORE D2 0.0004; for() #146 Body End
LOAD D2 0.0006; for() #146 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 612; for() #146 End
SETV D2 0
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0007; InlineFunc[int atoi(char32[])] Params Start
SETR D3 D2; InlineFunc[int atoi(char32[])] Params End
ATOI D2 D3; InlineFunc[int atoi(char32[])] Body
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0006
SUBV D2 1
STORE D2 0.0006; if() #575 Body End
LOAD D2 0.0006; if() #295 Else End AND if() #573 Body End AND for() #144 Body End AND for() #144 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 455; for() #144 End
LOAD D2 0.0009; if() #578 Test AND unless(false) #577 [Opt:AlwaysOn]
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 725 ==; Test 'if'
ALLOCATEMEMV D2 54 0; if() #578 Body Start
WRITEPODSTRING D2 "ghost.zh: AutoGhost setup failed - script not found.\n"
STORE D2 0.0005
ALLOCATEMEMV D2 80 0
WRITEPODSTRING D2 "  Enemy name: %s\n"
STORE D2 0.0003
ALLOCATEMEMV D2 55 0
WRITEPODSTRING D2 "  Script name should start after this character: %c\n"
STORE D2 0.0001
LOAD D2 0.0005; InlineFunc[void printf(char32[])] Params Start
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0.0003; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
LOAD D2 0.0008
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0.0001; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
PUSHVARGV 64; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
SETV D2 0; return Start
LOAD D3 0.0001
DEALLOCATEMEMR D3
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D3 0.0005
DEALLOCATEMEMR D3
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
GOTO 735; return End
LOAD D3 0.0001
DEALLOCATEMEMR D3
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D3 0.0005
DEALLOCATEMEMR D3; if() #578 Body End
SETV D2 1; return Start
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
GOTO 735; return End
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
POPARGS D5 0.0011
RETURNFUNC; Func[int __AutoGhostParseName(npc, int[])] Body End
SETR D4 SP2; Func[void __AutoGhostKill(npc)] Body Start
SETV D2 65536
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 1024
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
SETV D2 1024
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETV D2 -1000
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHP D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCITEMSET D2
POP D5
RETURNFUNC; Func[void __AutoGhostKill(npc)] Body End
PUSHARGSV 0 0.0002; Func[int FindUnusedFFC(int)] Body Start
SETR D4 SP2
STOREV 0 0.0001
LOAD D2 0.0002; InlineFunc[int Max(int, int)] Params Start AND for() #39 setup
ADDV D2 1
PUSHVARGR D2
PUSHVARGV 1; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0
LOAD D2 0; for() #39 LoopTest
COMPAREV D2 32
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 843 ==; for() #39 TestFail?
LOAD D2 0; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #39 Body Start
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0001
LOAD D2 0.0001; if() #169 Test
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 0
GOTOCMP 819 ==
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 1
GOTOCMP 819 ==
SETV D2 0
GOTO 820
SETV D2 1
COMPAREV D2 0
GOTOCMP 839 ==; Test 'if'
LOAD D2 0.0001; unless() #170 Test AND if() #169 Body Start
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
COMPAREV D2 0
GOTOCMP 839 !=; Test 'unless'
LOAD D2 0.0001; unless() #171 Test AND unless() #170 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 839 !=; Test 'unless'
LOAD D2 0; return Start AND unless() #171 Body Start
GOTO 844; return End AND unless() #171 Body End
LOAD D2 0; unless() #170 Body End AND if() #169 Body End AND for() #39 Body End AND for() #39 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 797; for() #39 End
SETV D2 0; return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[int FindUnusedFFC(int)] Body End
SETR D4 SP2; Func[int CenterX(eweapon)] Body Start
LOAD D2 0; return Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
POP D5; return End
RETURNFUNC; Func[int CenterX(eweapon)] Body End
SETR D4 SP2; Func[int CenterY(eweapon)] Body Start
LOAD D2 0; return Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
POP D5; return End
RETURNFUNC; Func[int CenterY(eweapon)] Body End
PUSHARGSV 0 0.0002; Func[void CleanUpGhostFFCs()] Body Start
SETR D4 SP2
SETR D2 LINKHP; if() #84 Test
COMPAREV D2 0
GOTOCMP 900 >
GOTO 900
SETV D2 1
GOTO 901
SETV D2 0
COMPAREV D2 0
GOTOCMP 950 ==; Test 'if'
STOREV 0 0.0001; if() #84 Body Start
STOREV 1 0; for() #3 setup
LOAD D2 0; for() #3 LoopTest
COMPAREV D2 32
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 950 ==; for() #3 TestFail?
LOAD D2 0; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #3 Body Start
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0001
SETR D2 GD24; if() #85 Test
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
RSHIFTV D2 4
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
ANDV D2 15
SETV D3 1
LSHIFTR D3 D2
SETR D2 D3
POP D3
ANDR D2 D3
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 946 ==; Test 'if'
SETV D2 0; if() #85 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #85 Body End
LOAD D2 0; for() #3 Body End AND for() #3 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 905; for() #3 End
POPARGS D5 0.0002; if() #84 Body End
RETURNFUNC; Func[void CleanUpGhostFFCs()] Body End
PUSHARGSV 0 0.0002; Func[void DrawEWeaponShadow(eweapon)] Body Start
SETR D4 SP2
PUSHR D4
LOAD D2 0.0002; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0846; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X_OFFSET
POP D3
ADDR D2 D3
STORE D2 0.0001
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
SUBV D2 1
MULTV D2 16
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y_OFFSET
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z_OFFSET
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0
PUSHV 1; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if(true) #35 [Opt:AlwaysOn]
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 2
ADDV D2 27400
PUSHR D2
PUSHARGSV 1 0.0002
PUSHV 7
PUSHARGSV -1 0.0002
PUSHARGSV 0 0.0004
PUSHV 1
PUSHV 64; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILER; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0015; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS D5 0.0003
RETURNFUNC; Func[void DrawEWeaponShadow(eweapon)] Body End
PUSHARGSV 0 0.0009; Func[void DrawGhostFFCs()] Body Start
SETR D4 SP2
SETV D2 1; if() #119 Test
PUSHR D2
POP D0
SETR D2 SCREENEFLAGSD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1034 ==; Test 'if'
PUSHR D4; unless() #120 Test AND if() #119 Body Start
CALLFUNC 0.1220; UsrFunc[bool __HaveAmulet()] Call
POP D4
COMPAREV D2 0
GOTOCMP 1218 ==; Test 'unless' AND return (Void) AND unless() #120 Body
STOREV 0 0.0008; if() #119 Body End
STOREV 0 0.0007
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
SETV D2 1; if() #37 Test AND if(true) #36 [Opt:AlwaysOn]
PUSHR D2
POP D0
SETR D2 SCREENFLAGSD
ANDV D2 16
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1053 ==; Test 'if'
SETV D2 1; if() #37 Body Start
STORE D2 0.0003
GOTO 1055; if() #37 Body End
SETV D2 2; if() #37 Else Start
STORE D2 0.0003; if() #37 Else End
SETV D2 4
STORE D2 0.0002
STOREV 1 0.0001; for() #16 setup
LOAD D2 0.0001; for() #16 LoopTest
PUSHR D2
SETR D2 NPCCOUNT
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 1218 ==; for() #16 TestFail?
LOAD D2 0.0001; InlineFunc[npc screendata::LoadNPC(int)] Params AND for() #16 Body Start
SUBV D2 1; InlineFunc[npc screendata::LoadNPC(int)] Body Start
LOADNPCR D2
SETR D2 REFNPC; InlineFunc[npc screendata::LoadNPC(int)] Body End
STORE D2 0.0006
PUSHR D4
LOAD D2 0.0006; UsrFunc[int[] __GetDrawingArray(npc)] Params Start
PUSHR D2; UsrFunc[int[] __GetDrawingArray(npc)] Params End
CALLFUNC 0.1239; UsrFunc[int[] __GetDrawingArray(npc)] Call
POP D4
STORE D2 0.0008
LOAD D2 0.0008; unless() #121 Test
COMPAREV D2 0
GOTOCMP 1214 ==; Test 'unless' AND continue 1; AND unless() #121 Body
SETR D2 GD26; if() #122 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1098 ==; Test 'if'
LOAD D2 0.0008; if() #123 Test AND if() #122 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 2
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1214 !=; Test 'if' AND continue 1; AND if() #123 Body
LOAD D2 0.0008; if() #122 Body End AND if() #38 Test
PUSHR D2
POP D0
READPODARRAYV D2 2
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1110 ==; Test 'if'
SETV D2 64; if() #38 Body Start
STORE D2 0.0005
GOTO 1112; if() #38 Body End
SETV D2 128; if() #38 Else Start
STORE D2 0.0005; if() #38 Else End
LOAD D2 0.0008; if() #39 Test
PUSHR D2
POP D0
READPODARRAYV D2 2
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1124 ==; Test 'if'
LOAD D2 0.0002; if() #39 Body Start
STORE D2 0.0004
GOTO 1126; if() #39 Body End
LOAD D2 0.0003; if() #39 Else Start
STORE D2 0.0004; if() #39 Else End
SETV D2 3
STORE D2 0.0007
STOREV 0 0; for() #17 setup
LOAD D2 0; for() #17 LoopTest
PUSHR D2
LOAD D2 0.0008
PUSHR D2
POP D0
READPODARRAYV D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1214 ==; for() #17 TestFail?
LOAD D2 0.0008; if() #124 Test AND for() #17 Body Start
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
COMPAREV D2 1
GOTOCMP 1156 ==
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
COMPAREV D2 0
GOTOCMP 1156 ==
SETV D2 1
GOTO 1157
SETV D2 0
COMPAREV D2 0
GOTOCMP 1207 ==; Test 'if'
LOAD D2 0.0004; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #124 Body Start
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
ADDV D2 1
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
ADDV D2 2
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
ADDV D2 3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
ADDV D2 4
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
PUSHARGSV -1 0.0002
PUSHARGSV 0 0.0005
PUSHV 1
LOAD D2 0.0005
PUSHR D2; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWCOMBOR; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0016; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End AND if() #124 Body End
LOAD D2 0.0007
ADDV D2 6
STORE D2 0.0007; for() #17 Body End
LOAD D2 0; for() #17 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 1129; for() #17 End
LOAD D2 0.0001; for() #16 Body End AND for() #16 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 1058; for() #16 End
POPARGS D5 0.0009
RETURNFUNC; Func[void DrawGhostFFCs()] Body End
SETR D4 SP2; Func[bool __HaveAmulet()] Body Start
SETV D2 50; if() #680 Test
PUSHR D2
POP D0
SETR D2 LINKITEMD
COMPAREV D2 0
GOTOCMP 1229 ==; Test 'if'
SETV D2 1; return Start AND if() #680 Body Start
GOTO 1238; return End AND if() #680 Body End
SETV D2 63; if() #681 Test
PUSHR D2
POP D0
SETR D2 LINKITEMD
COMPAREV D2 0
GOTOCMP 1237 ==; Test 'if'
SETV D2 1; return Start AND if() #681 Body Start
GOTO 1238; return End AND if() #681 Body End
SETV D2 0; return Start
RETURNFUNC; return End AND Func[bool __HaveAmulet()] Body End
PUSHV 0; Func[int[] __GetDrawingArray(npc)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #591 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 65536
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1255 ==; Test 'if'
SETV D2 0; return Start AND if() #591 Body Start
GOTO 1275; return End AND if() #591 Body End
LOAD D2 0.0001
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 65535
STORE D2 0
LOAD D2 0; unless() #592 Test
COMPAREV D2 0
GOTOCMP 1269 !=; Test 'unless'
SETV D2 0; return Start AND unless() #592 Body Start
GOTO 1275; return End AND unless() #592 Body End
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 23
STORE D2 0
LOAD D2 0; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int[] __GetDrawingArray(npc)] Body End
PUSHARGSV 0 0.0002; Func[int FindUnusedFFC()] Body Start
SETR D4 SP2
STOREV 0 0.0001
STOREV 1 0; for() #38 setup
LOAD D2 0; for() #38 LoopTest
COMPAREV D2 33
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1327 ==; for() #38 TestFail?
LOAD D2 0; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #38 Body Start
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0001
LOAD D2 0.0001; if() #166 Test
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 0
GOTOCMP 1303 ==
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 1
GOTOCMP 1303 ==
SETV D2 0
GOTO 1304
SETV D2 1
COMPAREV D2 0
GOTOCMP 1323 ==; Test 'if'
LOAD D2 0.0001; unless() #167 Test AND if() #166 Body Start
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
COMPAREV D2 0
GOTOCMP 1323 !=; Test 'unless'
LOAD D2 0.0001; unless() #168 Test AND unless() #167 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 1323 !=; Test 'unless'
LOAD D2 0; return Start AND unless() #168 Body Start
GOTO 1328; return End AND unless() #168 Body End
LOAD D2 0; unless() #167 Body End AND if() #166 Body End AND for() #38 Body End AND for() #38 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 1281; for() #38 End
SETV D2 0; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int FindUnusedFFC()] Body End
PUSHV 0; Func[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0003; if() #192 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1343 ==; Test 'if'
PUSHR D4; if() #192 Body Start
LOAD D2 0.0009; UsrFunc[int GetDefaultEWeaponSprite(int)] Params Start
PUSHR D2; UsrFunc[int GetDefaultEWeaponSprite(int)] Params End
CALLFUNC 0.1489; UsrFunc[int GetDefaultEWeaponSprite(int)] Call
POP D4
STORE D2 0.0003; if() #192 Body End
LOAD D2 0.0002; if() #193 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1354 ==; Test 'if'
PUSHR D4; if() #193 Body Start
LOAD D2 0.0009; UsrFunc[int GetDefaultEWeaponSound(int)] Params Start
PUSHR D2; UsrFunc[int GetDefaultEWeaponSound(int)] Params End
CALLFUNC 0.1649; UsrFunc[int GetDefaultEWeaponSound(int)] Call
POP D4
STORE D2 0.0002; if() #193 Body End
LOAD D2 0.0009; InlineFunc[eweapon screendata::CreateEWeapon(int)] Params
CREATEEWEAPONR D2; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body Start
SETR D2 REFEWPN; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body End
STORE D2 0
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNPOWER D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNANGULAR D2
LOAD D2 0.0001; if() #51 Test
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1424 ==; Test 'if'
PUSHR D4; if() #51 Body Start
LOAD D2 0.0006; UsrFunc[int __UnblockableDir(int)] Params Start
PUSHR D2; UsrFunc[int __UnblockableDir(int)] Params End
CALLFUNC 0.1977; UsrFunc[int __UnblockableDir(int)] Call
POP D4
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_DIR D2
GOTO 1433; if() #51 Body End
LOAD D2 0.0006; if() #51 Else Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_DIR D2; if() #51 Else End
LOAD D2 0.0003; if() #194 Test
COMPAREV D2 0
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 1444 ==; Test 'if'
LOAD D2 0; InlineFunc[void eweapon::UseSprite(int)] Params Start AND if() #194 Body Start
PUSHR D2
LOAD D2 0.0003; InlineFunc[void eweapon::UseSprite(int)] Params End
POP D3; InlineFunc[void eweapon::UseSprite(int)] Body Start
SETR REFEWPN D3
EWPNUSESPRITER D2; InlineFunc[void eweapon::UseSprite(int)] Body End AND if() #194 Body End
LOAD D2 0.0001; if() #195 Test
ANDV D2 32
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1460 ==; Test 'if'
SETV D2 0; if() #195 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNCOLLDET D2; if() #195 Body End
LOAD D2 0.0001; if() #196 Test
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1471 ==; Test 'if'
PUSHR D4; if() #196 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1812; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #196 Body End
LOAD D2 0.0001
ORV D2 512
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0002; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
LOAD D2 0; return Start
POPARGS D5 0.0010; return End
RETURNFUNC; Func[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0003; Func[int GetDefaultEWeaponSprite(int)] Body Start
SETR D4 SP2
LOAD D2 0.0003; if() #58 Test
COMPAREV D2 129
GOTOCMP 1499 ==
LOAD D2 0.0003
COMPAREV D2 145
GOTOCMP 1499 ==
SETV D2 0
GOTO 1500
SETV D2 1
COMPAREV D2 0
GOTOCMP 1504 ==; Test 'if'
SETV D2 17; return Start AND if() #58 Body Start
GOTO 1647; return End AND if() #58 Body End
LOAD D2 0.0003; if() #59 Test AND if() #58 Else Start
COMPAREV D2 133
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1511 ==; Test 'if'
SETV D2 18; return Start AND if() #59 Body Start
GOTO 1647; return End AND if() #59 Body End
LOAD D2 0.0003; if() #60 Test AND if() #59 Else Start
COMPAREV D2 130
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1518 ==; Test 'if'
SETV D2 19; return Start AND if() #60 Body Start
GOTO 1647; return End AND if() #60 Body End
LOAD D2 0.0003; if() #61 Test AND if() #60 Else Start
COMPAREV D2 140
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1525 ==; Test 'if'
SETV D2 35; return Start AND if() #61 Body Start
GOTO 1647; return End AND if() #61 Body End
LOAD D2 0.0003; if() #62 Test AND if() #61 Else Start
COMPAREV D2 142
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1532 ==; Test 'if'
SETV D2 81; return Start AND if() #62 Body Start
GOTO 1647; return End AND if() #62 Body End
LOAD D2 0.0003; if() #63 Test AND if() #62 Else Start
COMPAREV D2 139
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1539 ==; Test 'if'
SETV D2 80; return Start AND if() #63 Body Start
GOTO 1647; return End AND if() #63 Body End
LOAD D2 0.0003; if() #64 Test AND if() #63 Else Start
COMPAREV D2 134
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1546 ==; Test 'if'
SETV D2 21; return Start AND if() #64 Body Start
GOTO 1647; return End AND if() #64 Body End
LOAD D2 0.0003; if() #65 Test AND if() #64 Else Start
COMPAREV D2 132
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1553 ==; Test 'if'
SETV D2 20; return Start AND if() #65 Body Start
GOTO 1647; return End AND if() #65 Body End
LOAD D2 0.0003; if() #66 Test AND if() #65 Else Start
COMPAREV D2 141
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1560 ==; Test 'if'
SETV D2 36; return Start AND if() #66 Body Start
GOTO 1647; return End AND if() #66 Body End
LOAD D2 0.0003; if() #67 Test AND if() #66 Else Start
COMPAREV D2 137
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1567 ==; Test 'if'
SETV D2 76; return Start AND if() #67 Body Start
GOTO 1647; return End AND if() #67 Body End
LOAD D2 0.0003; if() #68 Test AND if() #67 Else Start
COMPAREV D2 138
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1574 ==; Test 'if'
SETV D2 77; return Start AND if() #68 Body Start
GOTO 1647; return End AND if() #68 Body End
LOAD D2 0.0003; if() #69 Test AND if() #68 Else Start
COMPAREV D2 131
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1646 ==; Test 'if'
STOREV 0 0.0002; if() #69 Body Start
STOREV 0 0.0001
STOREV 0 0; for() #44 setup
LOAD D2 0; for() #44 LoopTest
COMPAREV D2 256
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1630 ==; for() #44 TestFail?
LOAD D2 0; unless() #205 Test AND for() #44 Body Start
PUSHR D2
POP D0
SETR D2 LINKITEMD
COMPAREV D2 0
GOTOCMP 1626 ==; Test 'unless' AND continue 1; AND unless() #205 Body
LOAD D2 0; InlineFunc[itemdata Game::LoadItemData(int)] Params
LOADITEMDATAR D2; InlineFunc[itemdata Game::LoadItemData(int)] Body Start
SETR D2 REFITEMCLASS; InlineFunc[itemdata Game::LoadItemData(int)] Body End
STORE D2 0.0001
LOAD D2 0.0001; if() #206 Test
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATAFAMILY
COMPAREV D2 1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1626 !=; Test 'if' AND continue 1; AND if() #206 Body
LOAD D2 0.0001; if() #207 Test
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATALEVEL
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1626 ==; Test 'if'
LOAD D2 0.0001; if() #207 Body Start
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATALEVEL
STORE D2 0.0002
LOAD D2 0.0002; if() #208 Test
COMPAREV D2 3
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 1630 !=; Test 'if' AND break 1; AND if() #208 Body
LOAD D2 0; if() #207 Body End AND for() #44 Body End AND for() #44 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 1582; for() #44 End
LOAD D2 0.0002; if() #70 Test
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 1637 ==; Test 'if'
SETV D2 4; return Start AND if() #70 Body Start
GOTO 1647; return End AND if() #70 Body End
LOAD D2 0.0002; if() #71 Test AND if() #70 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1644 ==; Test 'if'
SETV D2 5; return Start AND if() #71 Body Start
GOTO 1647; return End AND if() #71 Body End
SETV D2 6; return Start AND if() #71 Else Start
GOTO 1647; return End AND if() #71 Else End AND if() #70 Else End AND if() #69 Body End
SETV D2 0; return Start AND if() #69 Else Start
POPARGS D5 0.0004; return End AND if() #69 Else End AND if() #68 Else End AND if() #67 Else End AND if() #66 Else End AND if() #65 Else End AND if() #64 Else End AND if() #63 Else End AND if() #62 Else End AND if() #61 Else End AND if() #60 Else End AND if() #59 Else End AND if() #58 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSprite(int)] Body End
SETR D4 SP2; Func[int GetDefaultEWeaponSound(int)] Body Start
LOAD D2 0; if() #54 Test
COMPAREV D2 129
GOTOCMP 1658 ==
LOAD D2 0
COMPAREV D2 145
GOTOCMP 1658 ==
SETV D2 0
GOTO 1659
SETV D2 1
COMPAREV D2 0
GOTOCMP 1663 ==; Test 'if'
SETV D2 40; return Start AND if() #54 Body Start
GOTO 1700; return End AND if() #54 Body End
LOAD D2 0; if() #55 Test AND if() #54 Else Start
COMPAREV D2 134
GOTOCMP 1671 ==
LOAD D2 0
COMPAREV D2 141
GOTOCMP 1671 ==
SETV D2 0
GOTO 1672
SETV D2 1
COMPAREV D2 0
GOTOCMP 1676 ==; Test 'if'
SETV D2 32; return Start AND if() #55 Body Start
GOTO 1700; return End AND if() #55 Body End
LOAD D2 0; if() #56 Test AND if() #55 Else Start
COMPAREV D2 140
GOTOCMP 1687 ==
LOAD D2 0
COMPAREV D2 142
GOTOCMP 1687 ==
LOAD D2 0
COMPAREV D2 139
GOTOCMP 1687 ==
SETV D2 0
GOTO 1688
SETV D2 1
COMPAREV D2 0
GOTOCMP 1692 ==; Test 'if'
SETV D2 13; return Start AND if() #56 Body Start
GOTO 1700; return End AND if() #56 Body End
LOAD D2 0; if() #57 Test AND if() #56 Else Start
COMPAREV D2 133
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1699 ==; Test 'if'
SETV D2 51; return Start AND if() #57 Body Start
GOTO 1700; return End AND if() #57 Body End
SETV D2 0; return Start AND if() #57 Else Start
POP D5; return End AND if() #57 Else End AND if() #56 Else End AND if() #55 Else End AND if() #54 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSound(int)] Body End
PUSHARGSV 0 0.0002; Func[void SetEWeaponDir(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
MODV D2 6.2832
STORE D2 0.0001
STOREV 0 0
LOAD D2 0.0001; if() #509 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1719 ==; Test 'if'
LOAD D2 0.0001; if() #509 Body Start
ADDV D2 6.2832
STORE D2 0.0001; if() #509 Body End
LOAD D2 0.0001; if() #193 Test
COMPAREV D2 0.3927
GOTOCMP 1727 <
LOAD D2 0.0001
COMPAREV D2 5.8905
GOTOCMP 1727 >
SETV D2 0
GOTO 1728
SETV D2 1
COMPAREV D2 0
GOTOCMP 1733 ==; Test 'if'
SETV D2 3; if() #193 Body Start
STORE D2 0
GOTO 1783; if() #193 Body End
LOAD D2 0.0001; if() #194 Test AND if() #193 Else Start
COMPAREV D2 1.1781
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1741 ==; Test 'if'
SETV D2 7; if() #194 Body Start
STORE D2 0
GOTO 1783; if() #194 Body End
LOAD D2 0.0001; if() #195 Test AND if() #194 Else Start
COMPAREV D2 1.9635
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1749 ==; Test 'if'
SETV D2 1; if() #195 Body Start
STORE D2 0
GOTO 1783; if() #195 Body End
LOAD D2 0.0001; if() #196 Test AND if() #195 Else Start
COMPAREV D2 2.7489
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1757 ==; Test 'if'
SETV D2 6; if() #196 Body Start
STORE D2 0
GOTO 1783; if() #196 Body End
LOAD D2 0.0001; if() #197 Test AND if() #196 Else Start
COMPAREV D2 3.5343
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1765 ==; Test 'if'
SETV D2 2; if() #197 Body Start
STORE D2 0
GOTO 1783; if() #197 Body End
LOAD D2 0.0001; if() #198 Test AND if() #197 Else Start
COMPAREV D2 4.3197
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1773 ==; Test 'if'
SETV D2 4; if() #198 Body Start
STORE D2 0
GOTO 1783; if() #198 Body End
LOAD D2 0.0001; if() #199 Test AND if() #198 Else Start
COMPAREV D2 5.1051
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1781 ==; Test 'if'
SETV D2 0; if() #199 Body Start
STORE D2 0
GOTO 1783; if() #199 Body End
SETV D2 5; if() #199 Else Start
STORE D2 0; if() #199 Else End
LOAD D2 0.0002; if() #198 Else End AND if() #197 Else End AND if() #196 Else End AND if() #195 Else End AND if() #194 Else End AND if() #193 Else End AND if() #510 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1801 ==; Test 'if'
PUSHR D4; if() #510 Body Start
LOAD D2 0; UsrFunc[int __UnblockableDir(int)] Params Start
PUSHR D2; UsrFunc[int __UnblockableDir(int)] Params End
CALLFUNC 0.1977; UsrFunc[int __UnblockableDir(int)] Call
POP D4
STORE D2 0; if() #510 Body End
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_DIR D2
POPARGS D5 0.0003
RETURNFUNC; Func[void SetEWeaponDir(eweapon)] Body End
PUSHV 0; Func[void SetEWeaponRotation(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #217 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 1895 ==; Test 'if'
LOAD D2 0.0001; if() #217 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
MODV D2 6.2832
STORE D2 0
LOAD D2 0; if() #515 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1834 ==; Test 'if'
LOAD D2 0; if() #515 Body Start
ADDV D2 6.2832
STORE D2 0; if() #515 Body End
LOAD D2 0; if() #218 Test
COMPAREV D2 0.7854
GOTOCMP 1842 <
LOAD D2 0
COMPAREV D2 5.4978
GOTOCMP 1842 >
SETV D2 0
GOTO 1843
SETV D2 1
COMPAREV D2 0
GOTOCMP 1855 ==; Test 'if'
SETV D2 4; if() #218 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 1975; if() #218 Body End
LOAD D2 0; if() #219 Test AND if() #218 Else Start
COMPAREV D2 2.3562
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 1870 ==; Test 'if'
SETV D2 3; if() #219 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 1975; if() #219 Body End
LOAD D2 0; if() #220 Test AND if() #219 Else Start
COMPAREV D2 3.9270
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1885 ==; Test 'if'
SETV D2 7; if() #220 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 1975; if() #220 Body End
SETV D2 0; if() #220 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2; if() #220 Else End
GOTO 1975; if() #219 Else End AND if() #218 Else End AND if() #217 Body End
PUSHR D4; if() #217 Else Start
LOAD D2 0.0001; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2037; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #221 Test
COMPAREV D2 0
GOTOCMP 1914 ==
LOAD D2 0
COMPAREV D2 5
GOTOCMP 1914 ==
LOAD D2 0
COMPAREV D2 4
GOTOCMP 1914 ==
SETV D2 0
GOTO 1915
SETV D2 1
COMPAREV D2 0
GOTOCMP 1927 ==; Test 'if'
SETV D2 0; if() #221 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 1975; if() #221 Body End
LOAD D2 0; if() #222 Test AND if() #221 Else Start
COMPAREV D2 1
GOTOCMP 1938 ==
LOAD D2 0
COMPAREV D2 7
GOTOCMP 1938 ==
LOAD D2 0
COMPAREV D2 6
GOTOCMP 1938 ==
SETV D2 0
GOTO 1939
SETV D2 1
COMPAREV D2 0
GOTOCMP 1951 ==; Test 'if'
SETV D2 3; if() #222 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 1975; if() #222 Body End
LOAD D2 0; if() #223 Test AND if() #222 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1966 ==; Test 'if'
SETV D2 7; if() #223 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 1975; if() #223 Body End
SETV D2 4; if() #223 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2; if() #223 Else End
POPARGS D5 0.0002; if() #222 Else End AND if() #221 Else End AND if() #217 Else End
RETURNFUNC; Func[void SetEWeaponRotation(eweapon)] Body End
SETR D4 SP2; Func[int __UnblockableDir(int)] Body Start
LOAD D2 0; if() #704 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1985 ==; Test 'if'
SETV D2 8; return Start AND if() #704 Body Start
GOTO 2035; return End AND if() #704 Body End
LOAD D2 0; if() #705 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1992 ==; Test 'if'
SETV D2 12; return Start AND if() #705 Body Start
GOTO 2035; return End AND if() #705 Body End
LOAD D2 0; if() #706 Test
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1999 ==; Test 'if'
SETV D2 14; return Start AND if() #706 Body Start
GOTO 2035; return End AND if() #706 Body End
LOAD D2 0; if() #707 Test
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2006 ==; Test 'if'
SETV D2 10; return Start AND if() #707 Body Start
GOTO 2035; return End AND if() #707 Body End
LOAD D2 0; if() #708 Test
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2013 ==; Test 'if'
SETV D2 15; return Start AND if() #708 Body Start
GOTO 2035; return End AND if() #708 Body End
LOAD D2 0; if() #709 Test
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2020 ==; Test 'if'
SETV D2 9; return Start AND if() #709 Body Start
GOTO 2035; return End AND if() #709 Body End
LOAD D2 0; if() #710 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2027 ==; Test 'if'
SETV D2 13; return Start AND if() #710 Body Start
GOTO 2035; return End AND if() #710 Body End
LOAD D2 0; if() #711 Test
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2034 ==; Test 'if'
SETV D2 11; return Start AND if() #711 Body Start
GOTO 2035; return End AND if() #711 Body End
LOAD D2 0; return Start
POP D5; return End
RETURNFUNC; Func[int __UnblockableDir(int)] Body End
SETR D4 SP2; Func[int __NormalizeDir(int)] Body Start
LOAD D2 0; if() #690 Test
COMPAREV D2 0
GOTOCMP 2046 <
LOAD D2 0
COMPAREV D2 7
GOTOCMP 2046 >
SETV D2 1
GOTO 2047
SETV D2 0
COMPAREV D2 0
GOTOCMP 2051 ==; Test 'if'
LOAD D2 0; return Start AND if() #690 Body Start
GOTO 2108; return End AND if() #690 Body End
LOAD D2 0; if() #691 Test
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2058 ==; Test 'if'
SETV D2 0; return Start AND if() #691 Body Start
GOTO 2108; return End AND if() #691 Body End
LOAD D2 0; if() #692 Test
COMPAREV D2 9
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2065 ==; Test 'if'
SETV D2 5; return Start AND if() #692 Body Start
GOTO 2108; return End AND if() #692 Body End
LOAD D2 0; if() #693 Test
COMPAREV D2 10
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2072 ==; Test 'if'
SETV D2 3; return Start AND if() #693 Body Start
GOTO 2108; return End AND if() #693 Body End
LOAD D2 0; if() #694 Test
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2079 ==; Test 'if'
SETV D2 7; return Start AND if() #694 Body Start
GOTO 2108; return End AND if() #694 Body End
LOAD D2 0; if() #695 Test
COMPAREV D2 12
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2086 ==; Test 'if'
SETV D2 1; return Start AND if() #695 Body Start
GOTO 2108; return End AND if() #695 Body End
LOAD D2 0; if() #696 Test
COMPAREV D2 13
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2093 ==; Test 'if'
SETV D2 6; return Start AND if() #696 Body Start
GOTO 2108; return End AND if() #696 Body End
LOAD D2 0; if() #697 Test
COMPAREV D2 14
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2100 ==; Test 'if'
SETV D2 2; return Start AND if() #697 Body Start
GOTO 2108; return End AND if() #697 Body End
LOAD D2 0; if() #698 Test
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2107 ==; Test 'if'
SETV D2 4; return Start AND if() #698 Body Start
GOTO 2108; return End AND if() #698 Body End
SETV D2 0; return Start
POP D5; return End
RETURNFUNC; Func[int __NormalizeDir(int)] Body End
SETR D4 SP2; Func[bool IsSideview()] Body Start
SETV D2 0; return Start
PUSHR D2
POP D0
SETR D2 SCREENFLAGSD
ANDV D2 4
PUSHR D2
SETR D2 CURDMAP; InlineFunc[dmapdata Game::LoadDMapData(int)] Params
LOADDMAPDATAR D2; InlineFunc[dmapdata Game::LoadDMapData(int)] Body Start
SETR D2 REFDMAPDATA; InlineFunc[dmapdata Game::LoadDMapData(int)] Body End
PUSHR D2
POP REFDMAPDATA
SETR D2 DMAPDATASIDEVIEW
POP D3
COMPARER D3 D2
SETCMP D2 BI!=
RETURNFUNC; return End AND Func[bool IsSideview()] Body End
SETR D4 SP2; Func[void InitializeGhostZHData()] Body Start
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 4 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2
RETURNFUNC; Func[void InitializeGhostZHData()] Body End
SETR D4 SP2; Func[void KillEWeapon(eweapon)] Body Start
LOAD D2 0
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ORV D2 128
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
POP D5
RETURNFUNC; Func[void KillEWeapon(eweapon)] Body End
PUSHARGSV 0 0.0005; Func[int __GetEWeaponThrowHeight(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0005
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
STORE D2 0.0004
LOAD D2 0.0004; if() #593 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 2208 ==; Test 'if'
SETV D2 1; return Start AND if() #593 Body Start
GOTO 2309; return End AND if() #593 Body End
LOAD D2 0.0005; InlineFunc[int Distance(int, int, int, int)] Params Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_WIDTH
DIVV D2 2
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_HEIGHT
DIVV D2 2
POP D3
ADDR D2 D3
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0003
LOAD D2 0.0003; if() #594 Test
COMPAREV D2 1
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2257 ==; Test 'if'
SETV D2 1; return Start AND if() #594 Body Start
GOTO 2309; return End AND if() #594 Body End
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0004
POP D3
DIVR D3 D2
SETR D2 D3
STORE D2 0.0002
STOREV 0 0.0001
LOAD D2 0.0001; while() #5 Test
COMPAREV D2 3.2000
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 2284 ==; Test 'while'
LOAD D2 0.0001; while() #5 Body Start
ADDV D2 0.1600
STORE D2 0.0001
LOAD D2 0.0002
SUBV D2 2
STORE D2 0.0002
LOAD D2 0.0002; if() #595 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 2265 ==; Test 'if'
LOAD D2 0.0001; return Start AND if() #595 Body Start
GOTO 2309; return End AND if() #595 Body End
GOTO 2265; while() #5 Body End AND while() #5 End
STOREV 0 0
LOAD D2 0.0002; while() #6 Test
PUSHR D2
LOAD D2 0
DIVV D2 3.2000
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2308 ==; Test 'while'
LOAD D2 0.0001; while() #6 Body Start
ADDV D2 0.1600
STORE D2 0.0001
LOAD D2 0
PUSHR D2
LOAD D2 0.0001
SUBV D2 3.2000
POP D3
ADDR D2 D3
STORE D2 0
LOAD D2 0.0002
SUBV D2 2
STORE D2 0.0002; while() #6 Body End
GOTO 2285; while() #6 End
LOAD D2 0.0001; return Start
POPARGS D5 0.0006; return End
RETURNFUNC; Func[int __GetEWeaponThrowHeight(eweapon)] Body End
SETR D4 SP2; Func[void SetEWeaponRotation(eweapon, int)] Body Start
PUSHR D4
LOAD D2 0; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2037; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #224 Test
COMPAREV D2 0
GOTOCMP 2329 ==
LOAD D2 0
COMPAREV D2 5
GOTOCMP 2329 ==
LOAD D2 0
COMPAREV D2 4
GOTOCMP 2329 ==
SETV D2 0
GOTO 2330
SETV D2 1
COMPAREV D2 0
GOTOCMP 2342 ==; Test 'if'
SETV D2 0; if() #224 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 2390; if() #224 Body End
LOAD D2 0; if() #225 Test AND if() #224 Else Start
COMPAREV D2 1
GOTOCMP 2353 ==
LOAD D2 0
COMPAREV D2 7
GOTOCMP 2353 ==
LOAD D2 0
COMPAREV D2 6
GOTOCMP 2353 ==
SETV D2 0
GOTO 2354
SETV D2 1
COMPAREV D2 0
GOTOCMP 2366 ==; Test 'if'
SETV D2 3; if() #225 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 2390; if() #225 Body End
LOAD D2 0; if() #226 Test AND if() #225 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2381 ==; Test 'if'
SETV D2 7; if() #226 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 2390; if() #226 Body End
SETV D2 4; if() #226 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2; if() #226 Else End
POPARGS D5 0.0002; if() #225 Else End AND if() #224 Else End
RETURNFUNC; Func[void SetEWeaponRotation(eweapon, int)] Body End
SETR D4 SP2; Func[int Sign(int)] Body Start
LOAD D2 0; if() #242 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2400 ==; Test 'if'
SETV D2 1; return Start AND if() #242 Body Start
GOTO 2408; return End AND if() #242 Body End
LOAD D2 0; if() #243 Test AND if() #242 Else Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2407 ==; Test 'if'
SETV D2 -1; return Start AND if() #243 Body Start
GOTO 2408; return End AND if() #243 Body End
SETV D2 0; return Start AND if() #243 Else Start
POP D5; return End AND if() #243 Else End AND if() #242 Else End
RETURNFUNC; Func[int Sign(int)] Body End
SETR D4 SP2; Func[void StartGhostZH()] Body Start
PUSHR D4
CALLFUNC 0.2127; UsrFunc[void InitializeGhostZHData()] Call
POP D4
RETURNFUNC; Func[void StartGhostZH()] Body End
PUSHARGSV 0 0.0007; Func[void UpdateEWeapon(eweapon)] Body Start
SETR D4 SP2
SETR D2 GD26; if() #546 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3559 !=; Test 'if' AND return (Void) AND if() #546 Body
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
STORE D2 0.0006
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
STORE D2 0.0005
STOREV 1 0.0004
LOAD D2 0.0007; if() #252 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 128
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2830 ==; Test 'if'
LOAD D2 0.0007; if() #547 Test AND if() #252 Body Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 2672 ==; Test 'if'
LOAD D2 0.0007; if() #253 Test AND if() #547 Body Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 6
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 2545 ==; Test 'if'
LOAD D2 0.0007; if() #254 Test AND if() #253 Body Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2488 ==; Test 'if'
PUSHR D4; if() #254 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMSineWave(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMSineWave(eweapon)] Params End
CALLFUNC 0.3561; UsrFunc[void __UpdateEWMSineWave(eweapon)] Call
POP D4
GOTO 2672; if() #254 Body End
LOAD D2 0.0007; if() #255 Test AND if() #254 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2505 ==; Test 'if'
PUSHR D4; if() #255 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMHoming(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMHoming(eweapon)] Params End
CALLFUNC 0.3743; UsrFunc[void __UpdateEWMHoming(eweapon)] Call
POP D4
GOTO 2672; if() #255 Body End
LOAD D2 0.0007; if() #256 Test AND if() #255 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2522 ==; Test 'if'
PUSHR D4; if() #256 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMHomingReaim(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMHomingReaim(eweapon)] Params End
CALLFUNC 0.3955; UsrFunc[void __UpdateEWMHomingReaim(eweapon)] Call
POP D4
GOTO 2672; if() #256 Body End
LOAD D2 0.0007; if() #257 Test AND if() #256 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2539 ==; Test 'if'
PUSHR D4; if() #257 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMRandom(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMRandom(eweapon)] Params End
CALLFUNC 0.4296; UsrFunc[void __UpdateEWMRandom(eweapon)] Call
POP D4
GOTO 2672; if() #257 Body End
PUSHR D4; if() #257 Else Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMRandomReaim(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMRandomReaim(eweapon)] Params End
CALLFUNC 0.4416; UsrFunc[void __UpdateEWMRandomReaim(eweapon)] Call
POP D4; if() #257 Else End
GOTO 2672; if() #256 Else End AND if() #255 Else End AND if() #254 Else End AND if() #253 Body End
LOAD D2 0.0007; if() #258 Test AND if() #253 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2580 ==; Test 'if'
LOAD D2 0.0007; if() #258 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0006
LOAD D2 0.0007
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0007; UsrFunc[void __UpdateEWMVeer(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMVeer(eweapon)] Params End
CALLFUNC 0.4728; UsrFunc[void __UpdateEWMVeer(eweapon)] Call
POP D4
SETV D2 0
STORE D2 0.0004
GOTO 2672; if() #258 Body End
LOAD D2 0.0007; if() #259 Test AND if() #258 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2597 ==; Test 'if'
PUSHR D4; if() #259 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMThrow(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMThrow(eweapon)] Params End
CALLFUNC 0.5260; UsrFunc[void __UpdateEWMThrow(eweapon)] Call
POP D4
GOTO 2672; if() #259 Body End
LOAD D2 0.0007; if() #260 Test AND if() #259 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 19
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2614 ==; Test 'if'
PUSHR D4; if() #260 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMFall(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMFall(eweapon)] Params End
CALLFUNC 0.5566; UsrFunc[void __UpdateEWMFall(eweapon)] Call
POP D4
GOTO 2672; if() #260 Body End
LOAD D2 0.0007; if() #261 Test AND if() #260 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 20
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2649 ==; Test 'if'
LOAD D2 0.0007; if() #261 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0006
LOAD D2 0.0007
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0007; UsrFunc[void __UpdateEWMDrift(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMDrift(eweapon)] Params End
CALLFUNC 0.5832; UsrFunc[void __UpdateEWMDrift(eweapon)] Call
POP D4
SETV D2 0
STORE D2 0.0004
GOTO 2672; if() #261 Body End
LOAD D2 0.0007; if() #261 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0006
LOAD D2 0.0007
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0007; UsrFunc[void __UpdateEWMDriftWait(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMDriftWait(eweapon)] Params End
CALLFUNC 0.6336; UsrFunc[void __UpdateEWMDriftWait(eweapon)] Call
POP D4
SETV D2 0
STORE D2 0.0004; if() #261 Else End
LOAD D2 0.0007; if() #260 Else End AND if() #259 Else End AND if() #258 Else End AND if() #253 Else End AND if() #547 Body End AND if() #548 Test
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3140 ==; Test 'if'
LOAD D2 0.0007; if() #262 Test AND if() #548 Body Start
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2730 ==; Test 'if'
LOAD D2 0.0007; if() #262 Body Start
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
SETV D2 12
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0007; if() #549 Test
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 3140 ==; Test 'if'
PUSHR D4; if() #549 Body Start
LOAD D2 0.0007; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2171; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #549 Body End
GOTO 3140; if() #262 Body End
LOAD D2 0.0007; if() #263 Test AND if() #262 Else Start
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2780 ==; Test 'if'
LOAD D2 0.0007; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #550 Test AND if() #263 Body Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
PUSHR D2
LOAD D2 0.0007
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3140 ==; Test 'if'
PUSHR D4; if() #550 Body Start
LOAD D2 0.0007; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2171; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #550 Body End
GOTO 3140; if() #263 Body End
LOAD D2 0.0007; if() #551 Test AND if() #263 Else Start
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3140 ==; Test 'if'
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params Start AND if() #551 Body Start
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
PUSHR D2
LOAD D2 0.0007
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
PUSHVARGR D3; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0007; if() #552 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 3140 ==; Test 'if'
PUSHR D4; if() #552 Body Start
LOAD D2 0.0007; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2171; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #552 Body End
GOTO 3140; if() #551 Body End AND if() #263 Else End AND if() #262 Else End AND if() #548 Body End AND if() #252 Body End
LOAD D2 0.0007; if() #553 Test AND if() #252 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
GOTOCMP 2851 ==
LOAD D2 0.0007
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 1024
COMPAREV D2 0
GOTOCMP 2851 !=
SETV D2 1
GOTO 2852
SETV D2 0
COMPAREV D2 0
GOTOCMP 3140 ==; Test 'if'
LOAD D2 0.0007; if() #264 Test AND if() #553 Body Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2871 ==; Test 'if'
PUSHR D4; if() #264 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathPrototype(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathPrototype(eweapon)] Params End
CALLFUNC 0.6871; UsrFunc[void __DoEWeaponDeathPrototype(eweapon)] Call
POP D4
GOTO 3140; if() #264 Body End
LOAD D2 0.0007; if() #265 Test AND if() #264 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3005 ==; Test 'if'
LOAD D2 0.0007; if() #266 Test AND if() #265 Body Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2903 ==; Test 'if'
SETV D2 0; if() #266 Body Start
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
GOTO 3140; if() #266 Body End
LOAD D2 0.0007; if() #267 Test AND if() #266 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2920 ==; Test 'if'
PUSHR D4; if() #267 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathAimAtLink(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathAimAtLink(eweapon)] Params End
CALLFUNC 0.7282; UsrFunc[void __DoEWeaponDeathAimAtLink(eweapon)] Call
POP D4
GOTO 3140; if() #267 Body End
LOAD D2 0.0007; if() #268 Test AND if() #267 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2937 ==; Test 'if'
PUSHR D4; if() #268 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathExplode(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathExplode(eweapon)] Params End
CALLFUNC 0.7455; UsrFunc[void __DoEWeaponDeathExplode(eweapon)] Call
POP D4
GOTO 3140; if() #268 Body End
LOAD D2 0.0007; if() #269 Test AND if() #268 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2954 ==; Test 'if'
PUSHR D4; if() #269 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathSBombExplode(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathSBombExplode(eweapon)] Params End
CALLFUNC 0.7499; UsrFunc[void __DoEWeaponDeathSBombExplode(eweapon)] Call
POP D4
GOTO 3140; if() #269 Body End
LOAD D2 0.0007; if() #270 Test AND if() #269 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2971 ==; Test 'if'
PUSHR D4; if() #270 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FireballsHV(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FireballsHV(eweapon)] Params End
CALLFUNC 0.7543; UsrFunc[void __DoEWeaponDeath4FireballsHV(eweapon)] Call
POP D4
GOTO 3140; if() #270 Body End
LOAD D2 0.0007; if() #271 Test AND if() #270 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2988 ==; Test 'if'
PUSHR D4; if() #271 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FireballsDiag(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FireballsDiag(eweapon)] Params End
CALLFUNC 0.7601; UsrFunc[void __DoEWeaponDeath4FireballsDiag(eweapon)] Call
POP D4
GOTO 3140; if() #271 Body End
LOAD D2 0.0007; if() #554 Test AND if() #271 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3140 ==; Test 'if'
PUSHR D4; if() #554 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FireballsRand(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FireballsRand(eweapon)] Params End
CALLFUNC 0.7659; UsrFunc[void __DoEWeaponDeath4FireballsRand(eweapon)] Call
POP D4; if() #554 Body End
GOTO 3140; if() #271 Else End AND if() #270 Else End AND if() #269 Else End AND if() #268 Else End AND if() #267 Else End AND if() #266 Else End AND if() #265 Body End
LOAD D2 0.0007; if() #272 Test AND if() #265 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3022 ==; Test 'if'
PUSHR D4; if() #272 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath8Fireballs(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath8Fireballs(eweapon)] Params End
CALLFUNC 0.7769; UsrFunc[void __DoEWeaponDeath8Fireballs(eweapon)] Call
POP D4
GOTO 3140; if() #272 Body End
LOAD D2 0.0007; if() #273 Test AND if() #272 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 9
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3039 ==; Test 'if'
PUSHR D4; if() #273 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FiresHV(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FiresHV(eweapon)] Params End
CALLFUNC 0.7827; UsrFunc[void __DoEWeaponDeath4FiresHV(eweapon)] Call
POP D4
GOTO 3140; if() #273 Body End
LOAD D2 0.0007; if() #274 Test AND if() #273 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 10
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3056 ==; Test 'if'
PUSHR D4; if() #274 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FiresDiag(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FiresDiag(eweapon)] Params End
CALLFUNC 0.7887; UsrFunc[void __DoEWeaponDeath4FiresDiag(eweapon)] Call
POP D4
GOTO 3140; if() #274 Body End
LOAD D2 0.0007; if() #275 Test AND if() #274 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3073 ==; Test 'if'
PUSHR D4; if() #275 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FiresRand(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FiresRand(eweapon)] Params End
CALLFUNC 0.7947; UsrFunc[void __DoEWeaponDeath4FiresRand(eweapon)] Call
POP D4
GOTO 3140; if() #275 Body End
LOAD D2 0.0007; if() #276 Test AND if() #275 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 12
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3090 ==; Test 'if'
PUSHR D4; if() #276 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath8Fires(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath8Fires(eweapon)] Params End
CALLFUNC 0.8059; UsrFunc[void __DoEWeaponDeath8Fires(eweapon)] Call
POP D4
GOTO 3140; if() #276 Body End
LOAD D2 0.0007; if() #277 Test AND if() #276 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 13
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3107 ==; Test 'if'
PUSHR D4; if() #277 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathSpawnNPC(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathSpawnNPC(eweapon)] Params End
CALLFUNC 0.8164; UsrFunc[void __DoEWeaponDeathSpawnNPC(eweapon)] Call
POP D4
GOTO 3140; if() #277 Body End
LOAD D2 0.0007; if() #278 Test AND if() #277 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 14
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3124 ==; Test 'if'
PUSHR D4; if() #278 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathSingleFire(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathSingleFire(eweapon)] Params End
CALLFUNC 0.8211; UsrFunc[void __DoEWeaponDeathSingleFire(eweapon)] Call
POP D4
GOTO 3140; if() #278 Body End
LOAD D2 0.0007; if() #555 Test AND if() #278 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3140 ==; Test 'if'
PUSHR D4; if() #555 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathRunScript(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathRunScript(eweapon)] Params End
CALLFUNC 0.8262; UsrFunc[void __DoEWeaponDeathRunScript(eweapon)] Call
POP D4; if() #555 Body End
LOAD D2 0.0007; if() #278 Else End AND if() #277 Else End AND if() #276 Else End AND if() #275 Else End AND if() #274 Else End AND if() #273 Else End AND if() #272 Else End AND if() #265 Else End AND if() #264 Else End AND if() #553 Body End AND if() #252 Else End AND if() #556 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 8
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3165 ==; Test 'if'
LOAD D2 0.0007; if() #557 Test AND if() #556 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 3165 ==; Test 'if'
PUSHR D4; if() #557 Body Start
LOAD D2 0.0007; UsrFunc[void DrawEWeaponShadow(eweapon)] Params Start
PUSHR D2; UsrFunc[void DrawEWeaponShadow(eweapon)] Params End
CALLFUNC 0.0952; UsrFunc[void DrawEWeaponShadow(eweapon)] Call
POP D4; if() #557 Body End
LOAD D2 0.0007; if() #556 Body End AND if() #279 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3448 ==; Test 'if'
SETV D2 1000; if() #279 Body Start
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
SETR D2 LINKHP; if() #558 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 3559 !=; Test 'if' AND return (Void) AND if() #558 Body
LOAD D2 0.0007; if() #559 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 16
COMPAREV D2 0
GOTOCMP 3210 ==
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
GOTOCMP 3210 ==
SETV D2 1
GOTO 3211
SETV D2 0
COMPAREV D2 0
GOTOCMP 3559 !=; Test 'if' AND return (Void) AND if() #559 Body
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
LOAD D2 0.0007; if() #280 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 3229 ==; Test 'if'
LOAD D2 0.0007; InlineFunc[int RadtoDeg(int)] Params Start AND if() #280 Body Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
STORE D2 0.0001
GOTO 3295; if() #280 Body End
PUSHR D4; if() #280 Else Start
LOAD D2 0.0007; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2037; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #281 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3245 ==; Test 'if'
SETV D2 -90; if() #281 Body Start
STORE D2 0.0001
GOTO 3295; if() #281 Body End
LOAD D2 0; if() #282 Test AND if() #281 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3253 ==; Test 'if'
SETV D2 -45; if() #282 Body Start
STORE D2 0.0001
GOTO 3295; if() #282 Body End
LOAD D2 0; if() #283 Test AND if() #282 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3261 ==; Test 'if'
SETV D2 0; if() #283 Body Start
STORE D2 0.0001
GOTO 3295; if() #283 Body End
LOAD D2 0; if() #284 Test AND if() #283 Else Start
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3269 ==; Test 'if'
SETV D2 45; if() #284 Body Start
STORE D2 0.0001
GOTO 3295; if() #284 Body End
LOAD D2 0; if() #285 Test AND if() #284 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3277 ==; Test 'if'
SETV D2 90; if() #285 Body Start
STORE D2 0.0001
GOTO 3295; if() #285 Body End
LOAD D2 0; if() #286 Test AND if() #285 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3285 ==; Test 'if'
SETV D2 135; if() #286 Body Start
STORE D2 0.0001
GOTO 3295; if() #286 Body End
LOAD D2 0; if() #287 Test AND if() #286 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3293 ==; Test 'if'
SETV D2 180; if() #287 Body Start
STORE D2 0.0001
GOTO 3295; if() #287 Body End
SETV D2 -135; if() #287 Else Start
STORE D2 0.0001; if() #287 Else End
LOAD D2 0.0004; if() #286 Else End AND if() #285 Else End AND if() #284 Else End AND if() #283 Else End AND if() #282 Else End AND if() #281 Else End AND if() #280 Else End AND if() #288 Test
COMPAREV D2 0
GOTOCMP 3337 ==; Test 'if'
LOAD D2 0.0007; if() #288 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Cos(int)] Params Start
SETR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0003
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Sin(int)] Params Start
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0002
GOTO 3353; if() #288 Body End
LOAD D2 0.0007; if() #288 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0003
LOAD D2 0.0007
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0002; if() #288 Else End
LOAD D2 0.0006; unless() #560 Test
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
GOTOCMP 3367 !=
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
GOTOCMP 3367 !=
SETV D2 1
GOTO 3368
SETV D2 0
COMPAREV D2 0
GOTOCMP 3382 !=; Test 'unless'
PUSHR D4; unless() #560 Body Start
LOAD D2 0.0006; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 0.0040; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0001; unless() #560 Body End
STOREV 0 0
LOAD D2 0.0001; if() #289 Test
COMPAREV D2 0
GOTOCMP 3391 <
LOAD D2 0.0001
COMPAREV D2 180
GOTOCMP 3391 >=
SETV D2 1
GOTO 3392
SETV D2 0
COMPAREV D2 0
GOTOCMP 3397 ==; Test 'if'
SETV D2 0; if() #289 Body Start
STORE D2 0
GOTO 3399; if() #289 Body End
SETV D2 2; if() #289 Else Start
STORE D2 0; if() #289 Else End
PUSHV 4; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_TILE
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_TILE_W
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_TILE_H
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_CSET
PUSHARGSV -1 0.0002
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 1
PUSHV 128; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILER; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0015; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
GOTO 3505; if() #279 Body End
LOAD D2 0.0007; if() #561 Test AND if() #279 Else Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 16
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3488 ==; Test 'if'
SETR D2 GD26; if() #290 Test AND if() #561 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3479 ==; Test 'if'
SETV D2 1000; if() #290 Body Start
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
GOTO 3488; if() #290 Body End
SETV D2 0; if() #290 Else Start
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2; if() #290 Else End
LOAD D2 0.0007; if() #561 Body End AND if() #562 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3505 ==; Test 'if'
PUSHR D4; if() #562 Body Start
LOAD D2 0.0007; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1812; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #562 Body End
LOAD D2 0.0007; if() #279 Else End AND if() #563 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 64
COMPAREV D2 0
GOTOCMP 3517 !=
SETV D2 0
GOTO 3518
SETV D2 1
COMPAREV D2 0
GOTOCMP 3559 ==; Test 'if'
LOAD D2 0.0007; if() #563 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z_OFFSET D2
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_OFFSET_Y D2
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2; if() #563 Body End
POPARGS D5 0.0008
RETURNFUNC; Func[void UpdateEWeapon(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMSineWave(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Sin(int)] Params Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D3 SPRITE_MISCD; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
STORE D2 0
LOAD D2 0.0001
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 1.5708
SETR D3 D2; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 1.5708
SETR D3 D2; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __UpdateEWMSineWave(eweapon)] Body End
PUSHARGSV 0 0.0003; Func[void __UpdateEWMHoming(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0003
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
MODV D2 6.2832
STORE D2 0.0002
LOAD D2 0.0002; if() #715 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3759 ==; Test 'if'
LOAD D2 0.0002; if() #715 Body Start
ADDV D2 6.2832
STORE D2 0.0002; if() #715 Body End
PUSHR D4
LOAD D2 0.0003; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0003
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.0015; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP D4
STORE D2 0.0001
LOAD D2 0.0001; if() #716 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3787 ==; Test 'if'
LOAD D2 0.0001; if() #716 Body Start
ADDV D2 6.2832
STORE D2 0.0001; if() #716 Body End
LOAD D2 0.0002; InlineFunc[int Abs(int)] Params Start
PUSHR D2
LOAD D2 0.0001
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
STORE D2 0
LOAD D2 0; if() #379 Test
PUSHR D2
LOAD D2 0.0003
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
COMPARER D3 D2
GOTOCMP 3822 <
LOAD D2 0
PUSHR D2
LOAD D2 0.0003
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV2 6.2832 D2
POP D3
COMPARER D3 D2
GOTOCMP 3822 >
SETV D2 0
GOTO 3823
SETV D2 1
COMPAREV D2 0
GOTOCMP 3835 ==; Test 'if'
LOAD D2 0.0001; if() #379 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
GOTO 3902; if() #379 Body End
PUSHR D4; if() #380 Test AND if() #379 Else Start
LOAD D2 0.0002; UsrFunc[int Sign(int)] Params Start
PUSHR D2
LOAD D2 0.0001
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.2392; UsrFunc[int Sign(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int Sign(int)] Params Start
SUBV D2 3.1416
PUSHR D2; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.2392; UsrFunc[int Sign(int)] Call
POP D4
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3879 ==; Test 'if'
LOAD D2 0.0003; if() #380 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
PUSHR D2
LOAD D2 0.0003
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
GOTO 3902; if() #380 Body End
LOAD D2 0.0003; if() #380 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
PUSHR D2
LOAD D2 0.0003
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2; if() #380 Else End
PUSHR D4; if() #379 Else End
LOAD D2 0.0003; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1702; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0.0003; if() #717 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 3953 ==; Test 'if'
LOAD D2 0.0003; if() #717 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 10
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0003; if() #718 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 3953 ==; Test 'if'
PUSHR D4; if() #718 Body Start
LOAD D2 0.0003; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2171; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #718 Body End
POPARGS D5 0.0004; if() #717 Body End
RETURNFUNC; Func[void __UpdateEWMHoming(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMHomingReaim(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #719 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3986 ==; Test 'if'
LOAD D2 0.0001; if() #719 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #719 Body End
LOAD D2 0.0001; if() #381 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 4085 ==; Test 'if'
LOAD D2 0.0001; if() #381 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001; if() #720 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4294 ==; Test 'if'
LOAD D2 0.0001; if() #382 Test AND if() #720 Body Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 4044 ==; Test 'if'
PUSHR D4; if() #382 Body Start
LOAD D2 0.0001; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2171; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4
GOTO 4294; if() #382 Body End
LOAD D2 0.0001; if() #382 Else Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
SETV D2 -20
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #382 Else End
GOTO 4294; if() #720 Body End AND if() #381 Body End
LOAD D2 0.0001; if() #381 Else Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ADDV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001; if() #721 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4191 ==; Test 'if'
SETV D2 45; if() #721 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.0015; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
LOAD D2 0.0001
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1702; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0.0001; if() #722 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4191 ==; Test 'if'
PUSHR D4; if() #722 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1812; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #722 Body End
LOAD D2 0.0001; if() #721 Body End AND if() #383 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4217 ==; Test 'if'
LOAD D2 0.0001; if() #383 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 0.3000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
GOTO 4294; if() #383 Body End
LOAD D2 0.0001; if() #723 Test AND if() #383 Else Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4294 ==; Test 'if'
LOAD D2 0.0001; if() #723 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 0.2000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV2 0 D2
ANDV D2 6
STORE D2 0
LOAD D2 0; if() #384 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4264 ==; Test 'if'
PUSHR D4; if() #384 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 0; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2311; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 4294; if() #384 Body End
LOAD D2 0; if() #385 Test AND if() #384 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4276 ==; Test 'if'
PUSHR D4; if() #385 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 3; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2311; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 4294; if() #385 Body End
LOAD D2 0; if() #386 Test AND if() #385 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4288 ==; Test 'if'
PUSHR D4; if() #386 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 1; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2311; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 4294; if() #386 Body End
PUSHR D4; if() #386 Else Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 2; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2311; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4; if() #386 Else End
POPARGS D5 0.0002; if() #385 Else End AND if() #384 Else End AND if() #723 Body End AND if() #383 Else End AND if() #381 Else End
RETURNFUNC; Func[void __UpdateEWMHomingReaim(eweapon)] Body End
SETR D4 SP2; Func[void __UpdateEWMRandom(eweapon)] Body Start
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int Randf(int)] Params Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 2
SETV D2 2
PUSHR D2
LOAD D2 0
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
MULTR D2 D3
PUSHR D2; UsrFunc[int Randf(int)] Params End
CALLFUNC 0.0032; UsrFunc[int Randf(int)] Call
POP D4
PUSHR D2
LOAD D2 0
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1702; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0; if() #724 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4368 ==; Test 'if'
PUSHR D4; if() #724 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1812; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #724 Body End
LOAD D2 0; if() #725 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 4414 ==; Test 'if'
LOAD D2 0; if() #725 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 10
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0; if() #726 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 4414 ==; Test 'if'
PUSHR D4; if() #726 Body Start
LOAD D2 0; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2171; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #726 Body End
POP D5; if() #725 Body End
RETURNFUNC; Func[void __UpdateEWMRandom(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMRandomReaim(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #727 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4447 ==; Test 'if'
LOAD D2 0.0001; if() #727 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #727 Body End
LOAD D2 0.0001; if() #387 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 4546 ==; Test 'if'
LOAD D2 0.0001; if() #387 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001; if() #728 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4726 ==; Test 'if'
LOAD D2 0.0001; if() #388 Test AND if() #728 Body Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 4505 ==; Test 'if'
PUSHR D4; if() #388 Body Start
LOAD D2 0.0001; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2171; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4
GOTO 4726; if() #388 Body End
LOAD D2 0.0001; if() #388 Else Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
SETV D2 -20
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #388 Else End
GOTO 4726; if() #728 Body End AND if() #387 Body End
LOAD D2 0.0001; if() #387 Else Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ADDV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001; if() #729 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4636 ==; Test 'if'
SETV D2 45; if() #729 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D3 62832; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
MULTV D2 0.0001
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
LOAD D2 0.0001
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1702; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0.0001; if() #730 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4636 ==; Test 'if'
PUSHR D4; if() #730 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1812; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #730 Body End
LOAD D2 0.0001; if() #729 Body End AND if() #389 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4662 ==; Test 'if'
LOAD D2 0.0001; if() #389 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 0.3000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
GOTO 4726; if() #389 Body End
LOAD D2 0.0001; if() #731 Test AND if() #389 Else Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4726 ==; Test 'if'
LOAD D2 0.0001; if() #731 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV2 0 D2
ANDV D2 6
STORE D2 0
LOAD D2 0; if() #390 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4696 ==; Test 'if'
PUSHR D4; if() #390 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 0; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2311; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 4726; if() #390 Body End
LOAD D2 0; if() #391 Test AND if() #390 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4708 ==; Test 'if'
PUSHR D4; if() #391 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 3; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2311; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 4726; if() #391 Body End
LOAD D2 0; if() #392 Test AND if() #391 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4720 ==; Test 'if'
PUSHR D4; if() #392 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 1; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2311; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 4726; if() #392 Body End
PUSHR D4; if() #392 Else Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 2; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2311; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4; if() #392 Else End
POPARGS D5 0.0002; if() #391 Else End AND if() #390 Else End AND if() #731 Body End AND if() #389 Else End AND if() #387 Else End
RETURNFUNC; Func[void __UpdateEWMRandomReaim(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMVeer(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0
LOAD D2 0.0001
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0; if() #400 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4843 ==; Test 'if'
LOAD D2 0.0001; if() #400 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 5200; if() #400 Body End
LOAD D2 0; if() #401 Test AND if() #400 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4877 ==; Test 'if'
LOAD D2 0.0001; if() #401 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 5200; if() #401 Body End
LOAD D2 0; if() #402 Test AND if() #401 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4912 ==; Test 'if'
LOAD D2 0.0001; if() #402 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 5200; if() #402 Body End
LOAD D2 0; if() #403 Test AND if() #402 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4946 ==; Test 'if'
LOAD D2 0.0001; if() #403 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 5200; if() #403 Body End
LOAD D2 0; if() #404 Test AND if() #403 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5012 ==; Test 'if'
LOAD D2 0.0001; if() #404 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 5200; if() #404 Body End
LOAD D2 0; if() #405 Test AND if() #404 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5077 ==; Test 'if'
LOAD D2 0.0001; if() #405 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 5200; if() #405 Body End
LOAD D2 0; if() #406 Test AND if() #405 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5142 ==; Test 'if'
LOAD D2 0.0001; if() #406 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 5200; if() #406 Body End
LOAD D2 0.0001; if() #406 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #406 Else End
LOAD D2 0.0001; if() #405 Else End AND if() #404 Else End AND if() #403 Else End AND if() #402 Else End AND if() #401 Else End AND if() #400 Else End
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __UpdateEWMVeer(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMThrow(eweapon)] Body Start
SETR D4 SP2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_JUMP D2
LOAD D2 0.0001; if() #732 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
GOTOCMP 5291 !=
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
GOTOCMP 5291 ==
SETV D2 1
GOTO 5292
SETV D2 0
COMPAREV D2 0
GOTOCMP 5324 ==; Test 'if'
LOAD D2 0.0001; if() #732 Body Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #732 Body End
LOAD D2 0.0001; InlineFunc[int Max(int, int)] Params Start
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
PUSHR D4; unless() #394 Test AND if(true) #393 [Opt:AlwaysOn]
CALLFUNC 0.2110; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 5376 !=; Test 'unless'
LOAD D2 0.0001; unless() #394 Body Start
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
GOTO 5392; unless() #394 Body End
LOAD D2 0.0001; unless() #394 Else Start
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV2 176 D2
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2; unless() #394 Else End
LOAD D2 0.0001; if() #395 Test
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 5455 ==; Test 'if'
PUSHR D4; unless() #733 Test AND if(true) #396 [Opt:AlwaysOn] AND if() #395 Body Start
LOAD D2 0.0001; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_OFFSET_X
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_OFFSET_Y
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_HEIGHT
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_WIDTH; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params End
CALLFUNC 0.9550; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 5564 !=; Test 'unless'
LOAD D2 0.0001; InlineFunc[int Max(int, int)] Params Start AND unless() #733 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 0.1600
PUSHVARGR D2
PUSHVARGV -3.2000; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; unless() #733 Body End
GOTO 5564; if() #395 Body End
STOREV 0 0; if() #395 Else Start
LOAD D2 0.0001; if() #397 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
GOTOCMP 5513 ==; Test 'if'
LOAD D2 0.0001; if() #398 Test AND if() #397 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 -0.5000
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5510 ==; Test 'if'
LOAD D2 0.0001; if() #398 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 -0.5000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
MULTV D2 0.7500
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
GOTO 5515; if() #398 Body End
SETV D2 1; if() #398 Else Start
STORE D2 0; if() #398 Else End
GOTO 5515; if() #397 Body End
SETV D2 1; if() #397 Else Start
STORE D2 0; if() #397 Else End
LOAD D2 0; if() #734 Test
COMPAREV D2 0
GOTOCMP 5564 ==; Test 'if'
LOAD D2 0.0001; if() #399 Test AND if() #734 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 1
COMPAREV D2 0
GOTOCMP 5543 ==; Test 'if'
SETV D2 0; if() #399 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2171; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4
GOTO 5564; if() #399 Body End
SETV D2 0; if() #399 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 8
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2; if() #399 Else End
POPARGS D5 0.0002; if() #734 Body End AND if() #395 Else End
RETURNFUNC; Func[void __UpdateEWMThrow(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMFall(eweapon)] Body Start
SETR D4 SP2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_JUMP D2
LOAD D2 0.0001
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
PUSHR D4; unless() #374 Test AND if(true) #373 [Opt:AlwaysOn]
CALLFUNC 0.2110; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 5627 !=; Test 'unless'
LOAD D2 0.0001; unless() #374 Body Start
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
GOTO 5657; unless() #374 Body End
LOAD D2 0.0001; unless() #374 Else Start
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_OFFSET_Y D2
LOAD D2 0.0001
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2; unless() #374 Else End
LOAD D2 0.0001; InlineFunc[int Min(int, int)] Params Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ADDV D2 0.1600
PUSHVARGR D2
PUSHVARGV 3.2000; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001; if() #712 Test AND if(true) #375 [Opt:AlwaysOn]
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 5830 ==; Test 'if'
PUSHR D4; unless() #713 Test AND if() #712 Body Start
LOAD D2 0.0001; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_OFFSET_X
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_OFFSET_Y
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_HEIGHT
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_WIDTH; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params End
CALLFUNC 0.9550; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 5830 !=; Test 'unless'
STOREV 0 0; unless() #713 Body Start
LOAD D2 0.0001; if() #376 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 5779 ==; Test 'if'
LOAD D2 0.0001; if() #377 Test AND if() #376 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 -0.5000
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5776 ==; Test 'if'
LOAD D2 0.0001; if() #377 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 -0.5000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
MULTV D2 0.7500
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
GOTO 5781; if() #377 Body End
SETV D2 1; if() #377 Else Start
STORE D2 0; if() #377 Else End
GOTO 5781; if() #376 Body End
SETV D2 1; if() #376 Else Start
STORE D2 0; if() #376 Else End
LOAD D2 0; if() #714 Test
COMPAREV D2 0
GOTOCMP 5830 ==; Test 'if'
LOAD D2 0.0001; if() #378 Test AND if() #714 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 1
COMPAREV D2 0
GOTOCMP 5809 ==; Test 'if'
SETV D2 0; if() #378 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2171; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4
GOTO 5830; if() #378 Body End
SETV D2 0; if() #378 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 8
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2; if() #378 Else End
POPARGS D5 0.0002; if() #714 Body End AND unless() #713 Body End AND if() #712 Body End
RETURNFUNC; Func[void __UpdateEWMFall(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMDrift(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0
LOAD D2 0.0001
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0; if() #358 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5947 ==; Test 'if'
LOAD D2 0.0001; if() #358 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6304; if() #358 Body End
LOAD D2 0; if() #359 Test AND if() #358 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5981 ==; Test 'if'
LOAD D2 0.0001; if() #359 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6304; if() #359 Body End
LOAD D2 0; if() #360 Test AND if() #359 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6016 ==; Test 'if'
LOAD D2 0.0001; if() #360 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6304; if() #360 Body End
LOAD D2 0; if() #361 Test AND if() #360 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6050 ==; Test 'if'
LOAD D2 0.0001; if() #361 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6304; if() #361 Body End
LOAD D2 0; if() #362 Test AND if() #361 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6116 ==; Test 'if'
LOAD D2 0.0001; if() #362 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6304; if() #362 Body End
LOAD D2 0; if() #363 Test AND if() #362 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6181 ==; Test 'if'
LOAD D2 0.0001; if() #363 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6304; if() #363 Body End
LOAD D2 0; if() #364 Test AND if() #363 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6246 ==; Test 'if'
LOAD D2 0.0001; if() #364 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6304; if() #364 Body End
LOAD D2 0.0001; if() #364 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #364 Else End
LOAD D2 0.0001; if() #363 Else End AND if() #362 Else End AND if() #361 Else End AND if() #360 Else End AND if() #359 Else End AND if() #358 Else End
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __UpdateEWMDrift(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMDriftWait(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0
LOAD D2 0.0001; if() #365 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 16
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 6428 ==; Test 'if'
LOAD D2 0.0001; if() #365 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6447; if() #365 Body End
LOAD D2 0.0001; if() #365 Else Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ADDV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #365 Else End
LOAD D2 0; if() #366 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6482 ==; Test 'if'
LOAD D2 0.0001; if() #366 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6839; if() #366 Body End
LOAD D2 0; if() #367 Test AND if() #366 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6516 ==; Test 'if'
LOAD D2 0.0001; if() #367 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6839; if() #367 Body End
LOAD D2 0; if() #368 Test AND if() #367 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6551 ==; Test 'if'
LOAD D2 0.0001; if() #368 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6839; if() #368 Body End
LOAD D2 0; if() #369 Test AND if() #368 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6585 ==; Test 'if'
LOAD D2 0.0001; if() #369 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6839; if() #369 Body End
LOAD D2 0; if() #370 Test AND if() #369 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6651 ==; Test 'if'
LOAD D2 0.0001; if() #370 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6839; if() #370 Body End
LOAD D2 0; if() #371 Test AND if() #370 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6716 ==; Test 'if'
LOAD D2 0.0001; if() #371 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6839; if() #371 Body End
LOAD D2 0; if() #372 Test AND if() #371 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6781 ==; Test 'if'
LOAD D2 0.0001; if() #372 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6839; if() #372 Body End
LOAD D2 0.0001; if() #372 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #372 Else End
LOAD D2 0.0001; if() #371 Else End AND if() #370 Else End AND if() #369 Else End AND if() #368 Else End AND if() #367 Else End AND if() #366 Else End
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __UpdateEWMDriftWait(eweapon)] Body End
PUSHARGSV 0 0.0011; Func[void __DoEWeaponDeathPrototype(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0.0010
STOREV 0 0.0009
STOREV 0 0.0008
STOREV 0 0.0007
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
LOAD D2 0.0011; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD; InlineFunc[untyped Floor(untyped)] Params End
FLOOR D2; InlineFunc[untyped Floor(untyped)] Body
STORE D2 0.0010
SETR D2 EWPNCOUNT; for() #158 setup
STORE D2 0.0003
LOAD D2 0.0003; for() #158 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 6932 ==; for() #158 TestFail?
LOAD D2 0.0003; InlineFunc[eweapon screendata::LoadEWeapon(int)] Params AND for() #158 Body Start
SUBV D2 1; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body Start
LOADEWEAPONR D2
SETR D2 REFEWPN; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body End
STORE D2 0.0009
LOAD D2 0.0009; if() #583 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 768
COMPAREV D2 768
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 6928 !=; Test 'if' AND continue 1; AND if() #583 Body
LOAD D2 0.0009; if() #584 Test
PUSHR D2
SETV D2 3
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0010
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6932 !=; Test 'if' AND break 1; AND if() #584 Body
LOAD D2 0.0003; for() #158 Body End AND for() #158 LoopIncrement
SUBV D2 1
STORE D2 0.0003
GOTO 6892; for() #158 End
LOAD D2 0.0003; if() #585 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6958 ==; Test 'if'
ALLOCATEMEMV D2 43 0; if() #585 Body Start
WRITEPODSTRING D2 "ghost.zh: Failed to find prototype eweapon"
STORE D2 0
LOAD D2 0; InlineFunc[void TraceS(char32[])] Params Start
SETR D3 D2; InlineFunc[void TraceS(char32[])] Params End
TRACE6 D3; InlineFunc[void TraceS(char32[])] Body
TRACE3; InlineFunc[void TraceNL()] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
LOAD D3 0
DEALLOCATEMEMR D3
GOTO 7280; return (Void)
LOAD D3 0
DEALLOCATEMEMR D3; if() #585 Body End
LOAD D2 0.0011
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MODV D2 10
SUBV D2 6.2832
STORE D2 0.0005
LOAD D2 0.0011
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0010
POP D3
SUBR D3 D2
SETR D2 D3
MULTV D2 10000
STORE D2 0.0004
LOAD D2 0.0011
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0005
POP D3
SUBR D3 D2
SETR D2 D3
DIVV D2 100
RSHIFTV D2 0
STORE D2 0.0008
LOAD D2 0.0011; if() #305 Test
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_EXTEND
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7048 ==; Test 'if'
LOAD D2 0.0011; if() #305 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0007
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0006
GOTO 7060; if() #305 Body End
LOAD D2 0.0011; if() #305 Else Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
STORE D2 0.0007
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
STORE D2 0.0006; if() #305 Else End
LOAD D2 0.0008; if() #306 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7113 ==; Test 'if'
STOREV 0 0.0001; for() #159 setup AND if() #306 Body Start
LOAD D2 0.0001; for() #159 LoopTest
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7104 ==; for() #159 TestFail?
PUSHR D4; for() #159 Body Start
LOAD D2 0.0009; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0001
MULTV D2 6.2832
SETV D2 6.2832
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params End
CALLFUNC 0.9055; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Call
POP D4; for() #159 Body End
LOAD D2 0.0001; for() #159 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 7066; for() #159 End
LOAD D2 0.0009; InlineFunc[void Audio::PlaySound(int)] Params Start
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD; InlineFunc[void Audio::PlaySound(int)] Params End
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
GOTO 7271; if() #306 Body End
LOAD D2 0.0008; if() #307 Test AND if() #306 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7153 ==; Test 'if'
STOREV 0 0.0001; for() #160 setup AND if() #307 Body Start
LOAD D2 0.0001; for() #160 LoopTest
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7144 ==; for() #160 TestFail?
PUSHR D4; for() #160 Body Start
LOAD D2 0.0009; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
SETV D3 31416; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
DIVV D2 5000
PUSHR D2; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params End
CALLFUNC 0.9055; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Call
POP D4; for() #160 Body End
LOAD D2 0.0001; for() #160 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 7119; for() #160 End
LOAD D2 0.0009; InlineFunc[void Audio::PlaySound(int)] Params Start
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD; InlineFunc[void Audio::PlaySound(int)] Params End
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
GOTO 7271; if() #307 Body End
LOAD D2 0.0004; if() #308 Test AND if() #307 Else Start
COMPAREV D2 1
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 7226 ==; Test 'if'
SETV D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND if() #308 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
PUSHR D3
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
PUSHR D2
LOAD D2 0.0006
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
PUSHR D2
LOAD D2 0.0005
DIVV D2 2
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0001
STOREV 0 0; for() #161 setup
LOAD D2 0; for() #161 LoopTest
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7263 ==; for() #161 TestFail?
PUSHR D4; for() #161 Body Start
LOAD D2 0.0009; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0004
SUBV D2 1
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params End
CALLFUNC 0.9055; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Call
POP D4; for() #161 Body End
LOAD D2 0; for() #161 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7188; for() #161 End
GOTO 7263; if() #308 Body End
LOAD D2 0.0004; if() #586 Test AND if() #308 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7263 ==; Test 'if'
PUSHR D4; if() #586 Body Start
LOAD D2 0.0009; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
SETV D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
PUSHR D3
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
PUSHR D2
LOAD D2 0.0006
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
PUSHR D2; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params End
CALLFUNC 0.9055; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Call
POP D4; if() #586 Body End
LOAD D2 0.0009; if() #308 Else End AND InlineFunc[void Audio::PlaySound(int)] Params Start
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD; InlineFunc[void Audio::PlaySound(int)] Params End
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body AND if() #307 Else End
SETV D2 0; if() #306 Else End
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0012
RETURNFUNC; Func[void __DoEWeaponDeathPrototype(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeathAimAtLink(eweapon)] Body Start
SETR D4 SP2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 14
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001; if() #300 Test
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 7377 ==; Test 'if'
PUSHR D4; if() #300 Body Start
LOAD D2 0.0001; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.0015; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1702; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
SETV D2 300
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 13
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 7453; if() #300 Body End
LOAD D2 0.0001; if() #301 Test AND if() #300 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 7402 ==; Test 'if'
LOAD D2 0.0001; if() #301 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 0.3000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1702; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
GOTO 7453; if() #301 Body End
LOAD D2 0.0001; if() #301 Else Start
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 6
STORE D2 0
LOAD D2 0; if() #302 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7423 ==; Test 'if'
PUSHR D4; if() #302 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 0; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2311; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 7453; if() #302 Body End
LOAD D2 0; if() #303 Test AND if() #302 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7435 ==; Test 'if'
PUSHR D4; if() #303 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 3; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2311; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 7453; if() #303 Body End
LOAD D2 0; if() #304 Test AND if() #303 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7447 ==; Test 'if'
PUSHR D4; if() #304 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 1; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2311; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 7453; if() #304 Body End
PUSHR D4; if() #304 Else Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 2; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2311; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4; if() #304 Else End
POPARGS D5 0.0002; if() #303 Else End AND if() #302 Else End AND if() #301 Else End AND if() #300 Else End
RETURNFUNC; Func[void __DoEWeaponDeathAimAtLink(eweapon)] Body End
SETR D4 SP2; Func[void __DoEWeaponDeathExplode(eweapon)] Body Start
PUSHR D4
PUSHV 135; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0846; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0869; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR
PUSHV 0
LOAD D2 0
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHV -1
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1330; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POP D5
RETURNFUNC; Func[void __DoEWeaponDeathExplode(eweapon)] Body End
SETR D4 SP2; Func[void __DoEWeaponDeathSBombExplode(eweapon)] Body Start
PUSHR D4
PUSHV 136; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0846; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0869; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR
PUSHV 0
LOAD D2 0
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHV -1
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1330; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POP D5
RETURNFUNC; Func[void __DoEWeaponDeathSBombExplode(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsHV(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0; for() #148 setup
LOAD D2 0; for() #148 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7590 ==; for() #148 TestFail?
PUSHR D4; for() #148 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0846; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0869; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1330; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #148 Body End
LOAD D2 0; for() #148 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7546; for() #148 End
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsHV(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsDiag(eweapon)] Body Start
SETR D4 SP2
STOREV 4 0; for() #147 setup
LOAD D2 0; for() #147 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7648 ==; for() #147 TestFail?
PUSHR D4; for() #147 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0846; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0869; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1330; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #147 Body End
LOAD D2 0; for() #147 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7604; for() #147 End
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsDiag(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsRand(eweapon)] Body Start
SETR D4 SP2
SETV D3 2; InlineFunc[int Rand(int)] Params AND if() #298 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7713 ==; Test 'if'
STOREV 0 0; for() #149 setup AND if() #298 Body Start
LOAD D2 0; for() #149 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7758 ==; for() #149 TestFail?
PUSHR D4; for() #149 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0846; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0869; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1330; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #149 Body End
LOAD D2 0; for() #149 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7668; for() #149 End
GOTO 7758; if() #298 Body End
STOREV 4 0; for() #150 setup AND if() #298 Else Start
LOAD D2 0; for() #150 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7758 ==; for() #150 TestFail?
PUSHR D4; for() #150 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0846; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0869; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1330; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #150 Body End
LOAD D2 0; for() #150 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7714; for() #150 End
SETV D2 0; if() #298 Else End
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsRand(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath8Fireballs(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0; for() #155 setup
LOAD D2 0; for() #155 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7816 ==; for() #155 TestFail?
PUSHR D4; for() #155 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0846; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0869; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1330; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #155 Body End
LOAD D2 0; for() #155 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7772; for() #155 End
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath8Fireballs(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresHV(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0; for() #152 setup
LOAD D2 0; for() #152 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7874 ==; for() #152 TestFail?
PUSHR D4; for() #152 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0846; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0869; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 100
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1330; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #152 Body End
LOAD D2 0; for() #152 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7830; for() #152 End
SETV D2 13; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresHV(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresDiag(eweapon)] Body Start
SETR D4 SP2
STOREV 4 0; for() #151 setup
LOAD D2 0; for() #151 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7934 ==; for() #151 TestFail?
PUSHR D4; for() #151 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0846; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0869; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 71
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1330; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #151 Body End
LOAD D2 0; for() #151 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7890; for() #151 End
SETV D2 13; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresDiag(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresRand(eweapon)] Body Start
SETR D4 SP2
SETV D3 2; InlineFunc[int Rand(int)] Params AND if() #299 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8001 ==; Test 'if'
STOREV 0 0; for() #153 setup AND if() #299 Body Start
LOAD D2 0; for() #153 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8046 ==; for() #153 TestFail?
PUSHR D4; for() #153 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0846; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0869; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 100
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1330; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #153 Body End
LOAD D2 0; for() #153 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7956; for() #153 End
GOTO 8046; if() #299 Body End
STOREV 4 0; for() #154 setup AND if() #299 Else Start
LOAD D2 0; for() #154 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8046 ==; for() #154 TestFail?
PUSHR D4; for() #154 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0846; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0869; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 71
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1330; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #154 Body End
LOAD D2 0; for() #154 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 8002; for() #154 End
SETV D2 13; if() #299 Else End AND InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresRand(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath8Fires(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0; for() #156 setup
LOAD D2 0; for() #156 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8106 ==; for() #156 TestFail?
PUSHR D4; for() #156 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0846; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0869; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 100
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1330; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #156 Body End
LOAD D2 0; for() #156 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 8062; for() #156 End
STOREV 4 0; for() #157 setup
LOAD D2 0; for() #157 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8151 ==; for() #157 TestFail?
PUSHR D4; for() #157 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0846; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0869; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 71
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1330; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #157 Body End
LOAD D2 0; for() #157 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 8107; for() #157 End
SETV D2 13; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath8Fires(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeathSpawnNPC(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; InlineFunc[npc screendata::CreateNPC(int)] Params Start
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD; InlineFunc[npc screendata::CreateNPC(int)] Params End
CREATENPCR D2; InlineFunc[npc screendata::CreateNPC(int)] Body Start
SETR D2 REFNPC; InlineFunc[npc screendata::CreateNPC(int)] Body End
STORE D2 0
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeathSpawnNPC(eweapon)] Body End
SETR D4 SP2; Func[void __DoEWeaponDeathSingleFire(eweapon)] Body Start
PUSHR D4
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0846; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0869; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR
PUSHV 0
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1330; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
SETV D2 13; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POP D5
RETURNFUNC; Func[void __DoEWeaponDeathSingleFire(eweapon)] Body End
PUSHARGSV 0 0.0005; Func[void __DoEWeaponDeathRunScript(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
PUSHR D4
CALLFUNC 0.1277; UsrFunc[int FindUnusedFFC()] Call
POP D4
STORE D2 0.0004
LOAD D2 0.0004; if() #587 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8287 ==; Test 'if'
SETV D2 0; if() #587 Body Start
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
GOTO 8426; return (Void) AND if() #587 Body End
LOAD D2 0.0004; InlineFunc[ffc screendata::LoadFFC(int)] Params
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0003
SETR D2 EWPNCOUNT; for() #162 setup
STORE D2 0
LOAD D2 0; for() #162 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 8329 ==; for() #162 TestFail?
LOAD D2 0; InlineFunc[eweapon screendata::LoadEWeapon(int)] Params AND for() #162 Body Start
SUBV D2 1; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body Start
LOADEWEAPONR D2
SETR D2 REFEWPN; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body End
STORE D2 0.0002
LOAD D2 0.0002; if() #588 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 768
COMPAREV D2 512
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8325 !=; Test 'if' AND continue 1; AND if() #588 Body
LOAD D2 0.0001; InlineFunc[int Min(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0002
PUSHR D2
SETV D2 3
PUSHR D2
POP D0
POP REFSPRITE
PUSHVARGR SPRITE_MISCD; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0001; for() #162 Body End
LOAD D2 0; for() #162 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 8292; for() #162 End
LOAD D2 0.0001
SUBV D2 1
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
SETV D2 3
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0005
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ORV D2 1024
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 1
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
PUSHR D4
LOAD D2 0.0005; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0846; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
PUSHR D4
LOAD D2 0.0005; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0869; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
LOAD D2 0.0005
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFSCRIPT D2
LOAD D2 0.0001
SUBV D2 1
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFINITDD D2
POPARGS D5 0.0006
RETURNFUNC; Func[void __DoEWeaponDeathRunScript(eweapon)] Body End
PUSHARGSV 0 0.0002; Func[void UpdateEWeapons()] Body Start
SETR D4 SP2
STOREV 0 0.0001
SETR D2 LINKACTION; unless() #291 Test
COMPAREV D2 4
GOTOCMP 8445 ==
SETR D2 LINKACTION
COMPAREV D2 5
GOTOCMP 8445 ==
SETR D2 LINKACTION
COMPAREV D2 14
GOTOCMP 8445 ==
SETR D2 LINKACTION
COMPAREV D2 15
GOTOCMP 8445 ==
SETV D2 0
GOTO 8446
SETV D2 1
COMPAREV D2 0
GOTOCMP 8495 !=; Test 'unless'
SETR D2 EWPNCOUNT; for() #142 setup AND unless() #291 Body Start
STORE D2 0
LOAD D2 0; for() #142 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 8541 ==; for() #142 TestFail?
LOAD D2 0; InlineFunc[eweapon screendata::LoadEWeapon(int)] Params AND for() #142 Body Start
SUBV D2 1; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body Start
LOADEWEAPONR D2
SETR D2 REFEWPN; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body End
STORE D2 0.0001
LOAD D2 0.0001; if() #564 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 512
COMPAREV D2 0
GOTOCMP 8482 ==
LOAD D2 0.0001
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 256
COMPAREV D2 0
GOTOCMP 8482 !=
SETV D2 0
GOTO 8483
SETV D2 1
COMPAREV D2 0
GOTOCMP 8490 !=; Test 'if' AND continue 1; AND if() #564 Body
PUSHR D4
LOAD D2 0.0001; UsrFunc[void UpdateEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void UpdateEWeapon(eweapon)] Params End
CALLFUNC 0.2415; UsrFunc[void UpdateEWeapon(eweapon)] Call
POP D4; for() #142 Body End
LOAD D2 0; for() #142 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 8450; for() #142 End
GOTO 8541; unless() #291 Body End
SETR D2 EWPNCOUNT; for() #143 setup AND unless() #291 Else Start
STORE D2 0
LOAD D2 0; for() #143 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 8541 ==; for() #143 TestFail?
LOAD D2 0; InlineFunc[eweapon screendata::LoadEWeapon(int)] Params AND for() #143 Body Start
SUBV D2 1; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body Start
LOADEWEAPONR D2
SETR D2 REFEWPN; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body End
STORE D2 0.0001
LOAD D2 0.0001; if() #565 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 512
COMPAREV D2 0
GOTOCMP 8529 ==
LOAD D2 0.0001
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 256
COMPAREV D2 0
GOTOCMP 8529 !=
SETV D2 0
GOTO 8530
SETV D2 1
COMPAREV D2 0
GOTOCMP 8537 !=; Test 'if' AND continue 1; AND if() #565 Body
PUSHR D4
LOAD D2 0.0001; UsrFunc[void __UpdateEWeaponVisualFlags(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWeaponVisualFlags(eweapon)] Params End
CALLFUNC 0.8543; UsrFunc[void __UpdateEWeaponVisualFlags(eweapon)] Call
POP D4; for() #143 Body End
LOAD D2 0; for() #143 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 8497; for() #143 End
POPARGS D5 0.0002; unless() #291 Else End
RETURNFUNC; Func[void UpdateEWeapons()] Body End
PUSHARGSV 0 0.0002; Func[void __UpdateEWeaponVisualFlags(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0002; if() #735 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 8
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8570 ==; Test 'if'
LOAD D2 0.0002; if() #736 Test AND if() #735 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 8570 ==; Test 'if'
PUSHR D4; if() #736 Body Start
LOAD D2 0.0002; UsrFunc[void DrawEWeaponShadow(eweapon)] Params Start
PUSHR D2; UsrFunc[void DrawEWeaponShadow(eweapon)] Params End
CALLFUNC 0.0952; UsrFunc[void DrawEWeaponShadow(eweapon)] Call
POP D4; if() #736 Body End
LOAD D2 0.0002; if() #735 Body End AND if() #407 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8762 ==; Test 'if'
SETV D2 1000; if() #407 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
LOAD D2 0.0002; if() #737 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 16
COMPAREV D2 0
GOTOCMP 8610 ==
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
GOTOCMP 8610 ==
SETV D2 1
GOTO 8611
SETV D2 0
COMPAREV D2 0
GOTOCMP 8819 !=; Test 'if' AND return (Void) AND if() #737 Body
STOREV 0 0.0001
LOAD D2 0.0002; if() #408 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 8627 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int RadtoDeg(int)] Params Start AND if() #408 Body Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
STORE D2 0.0001
GOTO 8693; if() #408 Body End
PUSHR D4; if() #408 Else Start
LOAD D2 0.0002; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2037; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #409 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8643 ==; Test 'if'
SETV D2 -90; if() #409 Body Start
STORE D2 0.0001
GOTO 8693; if() #409 Body End
LOAD D2 0; if() #410 Test AND if() #409 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8651 ==; Test 'if'
SETV D2 -45; if() #410 Body Start
STORE D2 0.0001
GOTO 8693; if() #410 Body End
LOAD D2 0; if() #411 Test AND if() #410 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8659 ==; Test 'if'
SETV D2 0; if() #411 Body Start
STORE D2 0.0001
GOTO 8693; if() #411 Body End
LOAD D2 0; if() #412 Test AND if() #411 Else Start
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8667 ==; Test 'if'
SETV D2 45; if() #412 Body Start
STORE D2 0.0001
GOTO 8693; if() #412 Body End
LOAD D2 0; if() #413 Test AND if() #412 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8675 ==; Test 'if'
SETV D2 90; if() #413 Body Start
STORE D2 0.0001
GOTO 8693; if() #413 Body End
LOAD D2 0; if() #414 Test AND if() #413 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8683 ==; Test 'if'
SETV D2 135; if() #414 Body Start
STORE D2 0.0001
GOTO 8693; if() #414 Body End
LOAD D2 0; if() #415 Test AND if() #414 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8691 ==; Test 'if'
SETV D2 180; if() #415 Body Start
STORE D2 0.0001
GOTO 8693; if() #415 Body End
SETV D2 -135; if() #415 Else Start
STORE D2 0.0001; if() #415 Else End
STOREV 0 0; if() #414 Else End AND if() #413 Else End AND if() #412 Else End AND if() #411 Else End AND if() #410 Else End AND if() #409 Else End AND if() #408 Else End
LOAD D2 0.0001; if() #416 Test
COMPAREV D2 0
GOTOCMP 8702 <
LOAD D2 0.0001
COMPAREV D2 180
GOTOCMP 8702 >=
SETV D2 1
GOTO 8703
SETV D2 0
COMPAREV D2 0
GOTOCMP 8708 ==; Test 'if'
SETV D2 0; if() #416 Body Start
STORE D2 0
GOTO 8710; if() #416 Body End
SETV D2 2; if() #416 Else Start
STORE D2 0; if() #416 Else End
PUSHV 4; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_TILE
PUSHARGSV 1 0.0002
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_CSET
PUSHARGSV -1 0.0002
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 1
PUSHV 128; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILER; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0015; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
GOTO 8819; if() #407 Body End
LOAD D2 0.0002; if() #738 Test AND if() #407 Else Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 16
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8802 ==; Test 'if'
SETR D2 GD26; if() #417 Test AND if() #738 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8793 ==; Test 'if'
SETV D2 1000; if() #417 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
GOTO 8802; if() #417 Body End
SETV D2 0; if() #417 Else Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2; if() #417 Else End
LOAD D2 0.0002; if() #738 Body End AND if() #739 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8819 ==; Test 'if'
PUSHR D4; if() #739 Body Start
LOAD D2 0.0002; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1812; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #739 Body End
POPARGS D5 0.0003; if() #407 Else End
RETURNFUNC; Func[void __UpdateEWeaponVisualFlags(eweapon)] Body End
SETR D4 SP2; Func[void UpdateGhostZH1()] Body Start
PUSHR D4
CALLFUNC 0.8428; UsrFunc[void UpdateEWeapons()] Call
PEEK D4
CALLFUNC 0.0892; UsrFunc[void CleanUpGhostFFCs()] Call
PEEK D4
CALLFUNC 0.8830; UsrFunc[void UpdateGhostZHData1()] Call
POP D4
RETURNFUNC; Func[void UpdateGhostZH1()] Body End
PUSHV 0; Func[void UpdateGhostZHData1()] Body Start
SETR D4 SP2
SETR D2 CURDMAP
LSHIFTV D2 8
PUSHR D2
SETR D2 CURDSCR
POP D3
ADDR D2 D3
STORE D2 0
SETR D2 GD26; if() #292 Test
PUSHR D2
POP D0
READPODARRAYV D2 7
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8863 ==; Test 'if'
SETV D2 0; if() #292 Body Start
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2
LOAD D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 7 D2
GOTO 8881; if() #292 Body End
SETR D2 GD26; if() #566 Test AND if() #292 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 6
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 8881 ==; Test 'if'
SETR D2 GD26; if() #566 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 6
SUBV D2 1
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2; if() #566 Body End
POP D5; if() #292 Else End
RETURNFUNC; Func[void UpdateGhostZHData1()] Body End
SETR D4 SP2; Func[void UpdateGhostZH2()] Body Start
PUSHR D4
CALLFUNC 0.1018; UsrFunc[void DrawGhostFFCs()] Call
PEEK D4
CALLFUNC 0.0059; UsrFunc[void AutoGhost()] Call
PEEK D4
CALLFUNC 0.8892; UsrFunc[void UpdateGhostZHData2()] Call
POP D4
RETURNFUNC; Func[void UpdateGhostZH2()] Body End
SETR D4 SP2; Func[void UpdateGhostZHData2()] Body Start
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 1
ADDV D2 1
MODV D2 8
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
SETR D2 GD26; if() #293 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8924 ==; Test 'if'
SETR D2 GD26; if() #293 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ORV D2 1
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 8934; if() #293 Body End
SETR D2 GD26; if() #293 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 -2
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; if() #293 Else End
SETR D2 GD26; if(true) #567 [Opt:AlwaysOn]
PUSHR D2
POP D0
READPODARRAYV D2 3
ADDV D2 1
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
SETR D2 GD26; if() #568 Test
PUSHR D2
POP D0
READPODARRAYV D2 3
COMPAREV D2 8
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 8969 ==; Test 'if'
SETV D2 0; if() #568 Body Start
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 2
ADDV D2 1
MODV D2 4
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2; if() #568 Body End
SETR D2 GD26; if(true) #569 [Opt:AlwaysOn]
PUSHR D2
POP D0
READPODARRAYV D2 5
ADDV D2 1
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2
SETR D2 GD26; if() #570 Test
PUSHR D2
POP D0
READPODARRAYV D2 5
COMPAREV D2 8
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 9004 ==; Test 'if'
SETV D2 0; if() #570 Body Start
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 4
ADDV D2 1
MODV D2 4
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 4 D2; if() #570 Body End
RETURNFUNC; Func[void UpdateGhostZHData2()] Body End
SETR D4 SP2; Func[bool __IsScriptNameChar(int, bool)] Body Start
LOAD D2 0.0001; if() #682 Test
COMPAREV D2 97
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 9018 ==; Test 'if'
LOAD D2 0.0001; if() #683 Test AND if() #682 Body Start
COMPAREV D2 122
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 9018 ==; Test 'if'
SETV D2 1; return Start AND if() #683 Body Start
GOTO 9053; return End AND if() #683 Body End
LOAD D2 0.0001; if() #682 Body End AND if() #684 Test
COMPAREV D2 65
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 9030 ==; Test 'if'
LOAD D2 0.0001; if() #685 Test AND if() #684 Body Start
COMPAREV D2 90
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 9030 ==; Test 'if'
SETV D2 1; return Start AND if() #685 Body Start
GOTO 9053; return End AND if() #685 Body End
LOAD D2 0.0001; if() #684 Body End AND if() #686 Test
COMPAREV D2 95
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 9037 ==; Test 'if'
SETV D2 1; return Start AND if() #686 Body Start
GOTO 9053; return End AND if() #686 Body End
LOAD D2 0; unless() #687 Test
COMPAREV D2 0
GOTOCMP 9052 !=; Test 'unless'
LOAD D2 0.0001; if() #688 Test AND unless() #687 Body Start
COMPAREV D2 48
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 9052 ==; Test 'if'
LOAD D2 0.0001; if() #689 Test AND if() #688 Body Start
COMPAREV D2 57
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 9052 ==; Test 'if'
SETV D2 1; return Start AND if() #689 Body Start
GOTO 9053; return End AND if() #689 Body End
SETV D2 0; if() #688 Body End AND unless() #687 Body End AND return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[bool __IsScriptNameChar(int, bool)] Body End
PUSHV 0; Func[void __CopyEWeapon(eweapon, int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0004; InlineFunc[eweapon screendata::CreateEWeapon(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNID; InlineFunc[eweapon screendata::CreateEWeapon(int)] Params End
CREATEEWEAPONR D2; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body Start
SETR D2 REFEWPN; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body End
STORE D2 0
LOAD D2 0.0004; if() #579 Test
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9087 ==; Test 'if'
LOAD D2 0; InlineFunc[void eweapon::UseSprite(int)] Params Start AND if() #579 Body Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD; InlineFunc[void eweapon::UseSprite(int)] Params End
POP D3; InlineFunc[void eweapon::UseSprite(int)] Body Start
SETR REFEWPN D3
EWPNUSESPRITER D2; InlineFunc[void eweapon::UseSprite(int)] Body End AND if() #579 Body End
LOAD D2 0.0004; if() #296 Test
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_EXTEND
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 9223 ==; Test 'if'
SETV D2 3; if() #296 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_EXTEND D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_WIDTH D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_HEIGHT D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
GOTO 9243; if() #296 Body End
LOAD D2 0.0003; if() #296 Else Start
SUBV D2 8
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0002
SUBV D2 8
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2; if() #296 Else End
LOAD D2 0.0004
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0004
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNPOWER D2
SETV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNANGULAR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1702; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 8
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 10
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004; if() #297 Test
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 15
GOTOCMP 9380 !=
LOAD D2 0.0004
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 -1
GOTOCMP 9380 !=
SETV D2 1
GOTO 9381
SETV D2 0
COMPAREV D2 0
GOTOCMP 9400 ==; Test 'if'
PUSHR D4; if() #297 Body Start
LOAD D2 0; UsrFunc[int __GetEWeaponThrowHeight(eweapon)] Params Start
PUSHR D2; UsrFunc[int __GetEWeaponThrowHeight(eweapon)] Params End
CALLFUNC 0.2193; UsrFunc[int __GetEWeaponThrowHeight(eweapon)] Call
POP D4
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 9418; if() #297 Body End
LOAD D2 0.0004; if() #297 Else Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #297 Else End
LOAD D2 0.0004
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 11
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 12
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 13
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 14
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 -257
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0; if() #580 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 32
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 9531 ==; Test 'if'
SETV D2 0; if() #580 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNCOLLDET D2; if() #580 Body End
LOAD D2 0; if() #581 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 9548 ==; Test 'if'
PUSHR D4; if() #581 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1812; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #581 Body End
POPARGS D5 0.0005
RETURNFUNC; Func[void __CopyEWeapon(eweapon, int, int, int)] Body End
PUSHV 0; Func[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0; for() #182 setup
LOAD D2 0; for() #182 LoopTest
PUSHR D2
LOAD D2 0.0001
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 9599 ==; for() #182 TestFail?
LOAD D2 0.0006; InlineFunc[bool screendata::isSolid(int, int)] Params Start AND if() #750 Test AND for() #182 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 9595 ==; Test 'if'
SETV D2 0; if() #751 Test AND if() #750 Body Start
PUSHR D2
POP D0
SETR D2 SCREENFLAGSD
ANDV D2 4
COMPAREV D2 0
GOTOCMP 9595 ==; Test 'if'
SETV D2 1; return Start AND if() #751 Body Start
GOTO 9600; return End AND if() #751 Body End
LOAD D2 0; if() #750 Body End AND for() #182 Body End AND for() #182 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 9553; for() #182 End
SETV D2 0; return Start
POPARGS D5 0.0007; return End
RETURNFUNC; Func[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Body End


PUSHR D0; void run(int) Params
PUSHR REFITEMCLASS; void run(int) Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #444 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 16 ==; Test 'if'
SETV D2 -1; if() #444 Body Start
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2
GOTO 22; if() #444 Body End
LOAD D2 0.0001; if() #444 Else Start
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2; if() #444 Else End
POPARGS D5 0.0002
QUIT; void run(int) Body End


SETV GD8 0; void run() Body Start
SETV GD9 0
SETV GD11 0
SETV GD10 0
SETV GD4 0
SETV GD14 0
SETV GD5 0
SETV GD13 0
SETV GD12 0
SETV GD6 0
SETV GD7 0
SETV GD1 0
SETV GD2 0
SETV GD3 0
ALLOCATEGMEMV D2 25 0
SETR GD25 D2
SETV GD15 0
SETV GD16 0
SETV GD20 0
SETV GD17 0
SETV GD21 0
SETV GD18 0
SETV GD19 0
ALLOCATEGMEMV D2 32 0
SETR GD24 D2
SETV GD22 0
SETV GD23 0
ALLOCATEGMEMV D2 8 0
SETR GD26 D2
ALLOCATEGMEMV D2 1000 0
SETR GD27 D2
QUIT; void run() Body End
