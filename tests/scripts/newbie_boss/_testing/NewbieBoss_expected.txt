stderr:

Compiling 'NewbieBoss.z'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
NewbieBoss.z Line 3463 @ Columns 4-29 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3464 @ Columns 4-24 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3466 @ Columns 5-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3467 @ Columns 5-24 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3467 @ Columns 27-47 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3470 @ Columns 5-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3471 @ Columns 5-24 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3471 @ Columns 27-47 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3474 @ Columns 5-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3475 @ Columns 5-24 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3475 @ Columns 27-47 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3480 @ Columns 3-30 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3480 @ Columns 16-29 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3481 @ Columns 5-18 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3500 @ Columns 8-18 - Warning S108: Arrays should be explicitly typed - change `npc` to `npc[]`
NewbieBoss.z Line 3501 @ Columns 5-15 - Warning S108: Arrays should be explicitly typed - change `npc` to `npc[]`
NewbieBoss.z Line 3486 @ Columns 3-34 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3486 @ Columns 18-33 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3487 @ Columns 5-20 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 2855 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3348 @ Columns 6-25 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3351 @ Columns 14-36 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3310 @ Columns 6-25 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3313 @ Columns 16-36 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3315 @ Columns 20-40 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3316 @ Columns 26-46 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3317 @ Columns 20-40 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3318 @ Columns 18-38 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3319 @ Columns 22-42 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3320 @ Columns 20-40 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3321 @ Columns 18-38 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3322 @ Columns 20-40 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3323 @ Columns 21-41 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3324 @ Columns 17-37 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3327 @ Columns 5-16 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3327 @ Columns 19-41 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3332 @ Columns 24-46 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3335 @ Columns 16-36 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3338 @ Columns 3-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3338 @ Columns 26-46 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3340 @ Columns 6-25 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3341 @ Columns 4-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3343 @ Columns 4-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3256 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3257 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3258 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3259 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3260 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3261 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3262 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3263 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3264 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3265 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3266 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3268 @ Columns 4-15 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3271 @ Columns 4-15 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3273 @ Columns 3-11 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3274 @ Columns 3-11 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3276 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3277 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3278 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3279 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3280 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3281 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3282 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3283 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3284 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3285 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3286 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3288 @ Columns 4-15 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3291 @ Columns 4-15 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3293 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3294 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3296 @ Columns 3-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3080 @ Columns 47-61 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3083 @ Columns 52-66 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3083 @ Columns 68-82 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3083 @ Columns 84-98 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3093 @ Columns 18-32 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3093 @ Columns 34-48 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3116 @ Columns 18-32 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3116 @ Columns 34-48 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3116 @ Columns 50-64 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 2758 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 2924 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 2931 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 2917 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 2686 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 2690 @ Columns 17-34 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 2691 @ Columns 17-34 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 2596 @ Columns 23-42 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 2597 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 2598 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3613 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3627 @ Columns 3-18 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3628 @ Columns 3-18 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3629 @ Columns 6-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3630 @ Columns 7-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3631 @ Columns 7-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3632 @ Columns 7-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3633 @ Columns 7-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3634 @ Columns 4-19 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3634 @ Columns 42-57 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3636 @ Columns 27-42 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3637 @ Columns 5-20 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3638 @ Columns 5-20 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3641 @ Columns 28-43 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3670 @ Columns 6-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3671 @ Columns 6-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3672 @ Columns 6-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3673 @ Columns 6-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3674 @ Columns 6-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3675 @ Columns 6-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3675 @ Columns 24-40 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3677 @ Columns 7-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3679 @ Columns 7-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3681 @ Columns 7-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3685 @ Columns 6-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3686 @ Columns 6-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3690 @ Columns 11-26 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3691 @ Columns 17-32 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3691 @ Columns 33-49 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3691 @ Columns 51-66 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3691 @ Columns 67-83 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3692 @ Columns 7-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3696 @ Columns 6-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3697 @ Columns 7-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3699 @ Columns 8-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3703 @ Columns 8-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3705 @ Columns 8-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3707 @ Columns 8-24 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3709 @ Columns 5-20 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3710 @ Columns 5-20 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3369 @ Columns 17-35 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3370 @ Columns 3-16 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3380 @ Columns 3-20 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3383 @ Columns 4-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3385 @ Columns 5-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3387 @ Columns 5-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3421 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3422 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3423 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3426 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3427 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3428 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3436 @ Columns 7-35 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3438 @ Columns 7-35 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3449 @ Columns 6-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3449 @ Columns 23-40 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3450 @ Columns 4-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3454 @ Columns 6-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3455 @ Columns 34-71 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3455 @ Columns 54-69 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3128 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3129 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3362 @ Columns 3-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3363 @ Columns 3-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3365 @ Columns 3-29 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3492 @ Columns 7-17 - Warning S108: Arrays should be explicitly typed - change `npc` to `npc[]`
NewbieBoss.z Line 3531 @ Columns 3-13 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3532 @ Columns 3-19 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3533 @ Columns 3-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3534 @ Columns 3-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3535 @ Columns 3-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3536 @ Columns 3-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3537 @ Columns 3-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3538 @ Columns 3-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3539 @ Columns 3-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 2774 @ Columns 14-29 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 2775 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 2776 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 2648 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3508 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3509 @ Columns 8-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3510 @ Columns 35-41 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3510 @ Columns 43-55 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3510 @ Columns 57-71 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3510 @ Columns 73-87 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3510 @ Columns 112-126 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3510 @ Columns 128-142 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3511 @ Columns 8-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3512 @ Columns 9-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3512 @ Columns 25-39 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3514 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3515 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3518 @ Columns 13-27 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3519 @ Columns 35-41 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3519 @ Columns 43-55 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3519 @ Columns 57-71 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3519 @ Columns 73-87 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3519 @ Columns 89-103 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3519 @ Columns 125-139 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3519 @ Columns 141-155 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3520 @ Columns 8-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3521 @ Columns 9-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3521 @ Columns 25-39 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3522 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3523 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3721 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3729 @ Columns 7-28 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3730 @ Columns 7-33 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3731 @ Columns 8-33 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3731 @ Columns 34-60 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3732 @ Columns 8-33 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3733 @ Columns 20-40 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3733 @ Columns 42-61 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3733 @ Columns 62-82 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3733 @ Columns 85-110 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3733 @ Columns 111-137 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3738 @ Columns 6-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3742 @ Columns 5-24 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 3999 @ Columns 4-20 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 4000 @ Columns 4-20 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 4013 @ Columns 10-26 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 4014 @ Columns 10-26 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 4015 @ Columns 10-30 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 4016 @ Columns 10-30 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 4029 @ Columns 10-26 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 4030 @ Columns 10-26 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 4031 @ Columns 10-30 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 4032 @ Columns 10-30 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 4045 @ Columns 10-26 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 4046 @ Columns 10-26 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 4047 @ Columns 10-30 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
NewbieBoss.z Line 4048 @ Columns 10-30 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
Pass 5: Checking code paths
Pass 6: Generating object code
Pass 7: Assembling
Debug: could not resolve symbol "lweapon::Animation"
Success!
Compile finished with exit code '0' (success)

stdout:

{
  "success": true,
  "diagnostics": [
    {
      "range": {
        "start": {
          "line": 3462,
          "character": 3
        },
        "end": {
          "line": 3462,
          "character": 28
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3463,
          "character": 3
        },
        "end": {
          "line": 3463,
          "character": 23
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3465,
          "character": 4
        },
        "end": {
          "line": 3465,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3466,
          "character": 4
        },
        "end": {
          "line": 3466,
          "character": 23
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3466,
          "character": 26
        },
        "end": {
          "line": 3466,
          "character": 46
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3469,
          "character": 4
        },
        "end": {
          "line": 3469,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3470,
          "character": 4
        },
        "end": {
          "line": 3470,
          "character": 23
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3470,
          "character": 26
        },
        "end": {
          "line": 3470,
          "character": 46
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3473,
          "character": 4
        },
        "end": {
          "line": 3473,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3474,
          "character": 4
        },
        "end": {
          "line": 3474,
          "character": 23
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3474,
          "character": 26
        },
        "end": {
          "line": 3474,
          "character": 46
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3479,
          "character": 2
        },
        "end": {
          "line": 3479,
          "character": 29
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3479,
          "character": 15
        },
        "end": {
          "line": 3479,
          "character": 28
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3480,
          "character": 4
        },
        "end": {
          "line": 3480,
          "character": 17
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3499,
          "character": 7
        },
        "end": {
          "line": 3499,
          "character": 17
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `npc` to `npc[]`"
    },
    {
      "range": {
        "start": {
          "line": 3500,
          "character": 4
        },
        "end": {
          "line": 3500,
          "character": 14
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `npc` to `npc[]`"
    },
    {
      "range": {
        "start": {
          "line": 3485,
          "character": 2
        },
        "end": {
          "line": 3485,
          "character": 33
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3485,
          "character": 17
        },
        "end": {
          "line": 3485,
          "character": 32
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3486,
          "character": 4
        },
        "end": {
          "line": 3486,
          "character": 19
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2854,
          "character": 14
        },
        "end": {
          "line": 2854,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3347,
          "character": 5
        },
        "end": {
          "line": 3347,
          "character": 24
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3350,
          "character": 13
        },
        "end": {
          "line": 3350,
          "character": 35
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3309,
          "character": 5
        },
        "end": {
          "line": 3309,
          "character": 24
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3312,
          "character": 15
        },
        "end": {
          "line": 3312,
          "character": 35
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3314,
          "character": 19
        },
        "end": {
          "line": 3314,
          "character": 39
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3315,
          "character": 25
        },
        "end": {
          "line": 3315,
          "character": 45
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3316,
          "character": 19
        },
        "end": {
          "line": 3316,
          "character": 39
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3317,
          "character": 17
        },
        "end": {
          "line": 3317,
          "character": 37
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3318,
          "character": 21
        },
        "end": {
          "line": 3318,
          "character": 41
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3319,
          "character": 19
        },
        "end": {
          "line": 3319,
          "character": 39
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3320,
          "character": 17
        },
        "end": {
          "line": 3320,
          "character": 37
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3321,
          "character": 19
        },
        "end": {
          "line": 3321,
          "character": 39
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3322,
          "character": 20
        },
        "end": {
          "line": 3322,
          "character": 40
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3323,
          "character": 16
        },
        "end": {
          "line": 3323,
          "character": 36
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3326,
          "character": 4
        },
        "end": {
          "line": 3326,
          "character": 15
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3326,
          "character": 18
        },
        "end": {
          "line": 3326,
          "character": 40
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3331,
          "character": 23
        },
        "end": {
          "line": 3331,
          "character": 45
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3334,
          "character": 15
        },
        "end": {
          "line": 3334,
          "character": 35
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3337,
          "character": 2
        },
        "end": {
          "line": 3337,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3337,
          "character": 25
        },
        "end": {
          "line": 3337,
          "character": 45
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3339,
          "character": 5
        },
        "end": {
          "line": 3339,
          "character": 24
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3340,
          "character": 3
        },
        "end": {
          "line": 3340,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3342,
          "character": 3
        },
        "end": {
          "line": 3342,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3255,
          "character": 2
        },
        "end": {
          "line": 3255,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3256,
          "character": 2
        },
        "end": {
          "line": 3256,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3257,
          "character": 2
        },
        "end": {
          "line": 3257,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3258,
          "character": 2
        },
        "end": {
          "line": 3258,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3259,
          "character": 2
        },
        "end": {
          "line": 3259,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3260,
          "character": 2
        },
        "end": {
          "line": 3260,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3261,
          "character": 2
        },
        "end": {
          "line": 3261,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3262,
          "character": 2
        },
        "end": {
          "line": 3262,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3263,
          "character": 2
        },
        "end": {
          "line": 3263,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3264,
          "character": 2
        },
        "end": {
          "line": 3264,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3265,
          "character": 2
        },
        "end": {
          "line": 3265,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3267,
          "character": 3
        },
        "end": {
          "line": 3267,
          "character": 14
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3270,
          "character": 3
        },
        "end": {
          "line": 3270,
          "character": 14
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3272,
          "character": 2
        },
        "end": {
          "line": 3272,
          "character": 10
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3273,
          "character": 2
        },
        "end": {
          "line": 3273,
          "character": 10
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3275,
          "character": 2
        },
        "end": {
          "line": 3275,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3276,
          "character": 2
        },
        "end": {
          "line": 3276,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3277,
          "character": 2
        },
        "end": {
          "line": 3277,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3278,
          "character": 2
        },
        "end": {
          "line": 3278,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3279,
          "character": 2
        },
        "end": {
          "line": 3279,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3280,
          "character": 2
        },
        "end": {
          "line": 3280,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3281,
          "character": 2
        },
        "end": {
          "line": 3281,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3282,
          "character": 2
        },
        "end": {
          "line": 3282,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3283,
          "character": 2
        },
        "end": {
          "line": 3283,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3284,
          "character": 2
        },
        "end": {
          "line": 3284,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3285,
          "character": 2
        },
        "end": {
          "line": 3285,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3287,
          "character": 3
        },
        "end": {
          "line": 3287,
          "character": 14
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3290,
          "character": 3
        },
        "end": {
          "line": 3290,
          "character": 14
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3292,
          "character": 2
        },
        "end": {
          "line": 3292,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3293,
          "character": 2
        },
        "end": {
          "line": 3293,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3295,
          "character": 2
        },
        "end": {
          "line": 3295,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3079,
          "character": 46
        },
        "end": {
          "line": 3079,
          "character": 60
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3082,
          "character": 51
        },
        "end": {
          "line": 3082,
          "character": 65
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3082,
          "character": 67
        },
        "end": {
          "line": 3082,
          "character": 81
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3082,
          "character": 83
        },
        "end": {
          "line": 3082,
          "character": 97
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3092,
          "character": 17
        },
        "end": {
          "line": 3092,
          "character": 31
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3092,
          "character": 33
        },
        "end": {
          "line": 3092,
          "character": 47
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3115,
          "character": 17
        },
        "end": {
          "line": 3115,
          "character": 31
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3115,
          "character": 33
        },
        "end": {
          "line": 3115,
          "character": 47
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3115,
          "character": 49
        },
        "end": {
          "line": 3115,
          "character": 63
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2757,
          "character": 14
        },
        "end": {
          "line": 2757,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2923,
          "character": 14
        },
        "end": {
          "line": 2923,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2930,
          "character": 14
        },
        "end": {
          "line": 2930,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2916,
          "character": 14
        },
        "end": {
          "line": 2916,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2685,
          "character": 14
        },
        "end": {
          "line": 2685,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2689,
          "character": 16
        },
        "end": {
          "line": 2689,
          "character": 33
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2690,
          "character": 16
        },
        "end": {
          "line": 2690,
          "character": 33
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2595,
          "character": 22
        },
        "end": {
          "line": 2595,
          "character": 41
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2596,
          "character": 14
        },
        "end": {
          "line": 2596,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2597,
          "character": 14
        },
        "end": {
          "line": 2597,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3612,
          "character": 14
        },
        "end": {
          "line": 3612,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3626,
          "character": 2
        },
        "end": {
          "line": 3626,
          "character": 17
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3627,
          "character": 2
        },
        "end": {
          "line": 3627,
          "character": 17
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3628,
          "character": 5
        },
        "end": {
          "line": 3628,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3629,
          "character": 6
        },
        "end": {
          "line": 3629,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3630,
          "character": 6
        },
        "end": {
          "line": 3630,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3631,
          "character": 6
        },
        "end": {
          "line": 3631,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3632,
          "character": 6
        },
        "end": {
          "line": 3632,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3633,
          "character": 3
        },
        "end": {
          "line": 3633,
          "character": 18
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3633,
          "character": 41
        },
        "end": {
          "line": 3633,
          "character": 56
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3635,
          "character": 26
        },
        "end": {
          "line": 3635,
          "character": 41
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3636,
          "character": 4
        },
        "end": {
          "line": 3636,
          "character": 19
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3637,
          "character": 4
        },
        "end": {
          "line": 3637,
          "character": 19
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3640,
          "character": 27
        },
        "end": {
          "line": 3640,
          "character": 42
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3669,
          "character": 5
        },
        "end": {
          "line": 3669,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3670,
          "character": 5
        },
        "end": {
          "line": 3670,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3671,
          "character": 5
        },
        "end": {
          "line": 3671,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3672,
          "character": 5
        },
        "end": {
          "line": 3672,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3673,
          "character": 5
        },
        "end": {
          "line": 3673,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3674,
          "character": 5
        },
        "end": {
          "line": 3674,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3674,
          "character": 23
        },
        "end": {
          "line": 3674,
          "character": 39
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3676,
          "character": 6
        },
        "end": {
          "line": 3676,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3678,
          "character": 6
        },
        "end": {
          "line": 3678,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3680,
          "character": 6
        },
        "end": {
          "line": 3680,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3684,
          "character": 5
        },
        "end": {
          "line": 3684,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3685,
          "character": 5
        },
        "end": {
          "line": 3685,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3689,
          "character": 10
        },
        "end": {
          "line": 3689,
          "character": 25
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3690,
          "character": 16
        },
        "end": {
          "line": 3690,
          "character": 31
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3690,
          "character": 32
        },
        "end": {
          "line": 3690,
          "character": 48
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3690,
          "character": 50
        },
        "end": {
          "line": 3690,
          "character": 65
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3690,
          "character": 66
        },
        "end": {
          "line": 3690,
          "character": 82
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3691,
          "character": 6
        },
        "end": {
          "line": 3691,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3695,
          "character": 5
        },
        "end": {
          "line": 3695,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3696,
          "character": 6
        },
        "end": {
          "line": 3696,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3698,
          "character": 7
        },
        "end": {
          "line": 3698,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3702,
          "character": 7
        },
        "end": {
          "line": 3702,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3704,
          "character": 7
        },
        "end": {
          "line": 3704,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3706,
          "character": 7
        },
        "end": {
          "line": 3706,
          "character": 23
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3708,
          "character": 4
        },
        "end": {
          "line": 3708,
          "character": 19
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3709,
          "character": 4
        },
        "end": {
          "line": 3709,
          "character": 19
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3368,
          "character": 16
        },
        "end": {
          "line": 3368,
          "character": 34
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3369,
          "character": 2
        },
        "end": {
          "line": 3369,
          "character": 15
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3379,
          "character": 2
        },
        "end": {
          "line": 3379,
          "character": 19
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3382,
          "character": 3
        },
        "end": {
          "line": 3382,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3384,
          "character": 4
        },
        "end": {
          "line": 3384,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3386,
          "character": 4
        },
        "end": {
          "line": 3386,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3420,
          "character": 6
        },
        "end": {
          "line": 3420,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3421,
          "character": 6
        },
        "end": {
          "line": 3421,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3422,
          "character": 6
        },
        "end": {
          "line": 3422,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3425,
          "character": 6
        },
        "end": {
          "line": 3425,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3426,
          "character": 6
        },
        "end": {
          "line": 3426,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3427,
          "character": 6
        },
        "end": {
          "line": 3427,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3435,
          "character": 6
        },
        "end": {
          "line": 3435,
          "character": 34
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3437,
          "character": 6
        },
        "end": {
          "line": 3437,
          "character": 34
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3448,
          "character": 5
        },
        "end": {
          "line": 3448,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3448,
          "character": 22
        },
        "end": {
          "line": 3448,
          "character": 39
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3449,
          "character": 3
        },
        "end": {
          "line": 3449,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3453,
          "character": 5
        },
        "end": {
          "line": 3453,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3454,
          "character": 33
        },
        "end": {
          "line": 3454,
          "character": 70
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3454,
          "character": 53
        },
        "end": {
          "line": 3454,
          "character": 68
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3127,
          "character": 14
        },
        "end": {
          "line": 3127,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3128,
          "character": 14
        },
        "end": {
          "line": 3128,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3361,
          "character": 2
        },
        "end": {
          "line": 3361,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3362,
          "character": 2
        },
        "end": {
          "line": 3362,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3364,
          "character": 2
        },
        "end": {
          "line": 3364,
          "character": 28
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3491,
          "character": 6
        },
        "end": {
          "line": 3491,
          "character": 16
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `npc` to `npc[]`"
    },
    {
      "range": {
        "start": {
          "line": 3530,
          "character": 2
        },
        "end": {
          "line": 3530,
          "character": 12
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3531,
          "character": 2
        },
        "end": {
          "line": 3531,
          "character": 18
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3532,
          "character": 2
        },
        "end": {
          "line": 3532,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3533,
          "character": 2
        },
        "end": {
          "line": 3533,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3534,
          "character": 2
        },
        "end": {
          "line": 3534,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3535,
          "character": 2
        },
        "end": {
          "line": 3535,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3536,
          "character": 2
        },
        "end": {
          "line": 3536,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3537,
          "character": 2
        },
        "end": {
          "line": 3537,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3538,
          "character": 2
        },
        "end": {
          "line": 3538,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2773,
          "character": 13
        },
        "end": {
          "line": 2773,
          "character": 28
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2774,
          "character": 14
        },
        "end": {
          "line": 2774,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2775,
          "character": 14
        },
        "end": {
          "line": 2775,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2647,
          "character": 14
        },
        "end": {
          "line": 2647,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3507,
          "character": 6
        },
        "end": {
          "line": 3507,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3508,
          "character": 7
        },
        "end": {
          "line": 3508,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3509,
          "character": 34
        },
        "end": {
          "line": 3509,
          "character": 40
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3509,
          "character": 42
        },
        "end": {
          "line": 3509,
          "character": 54
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3509,
          "character": 56
        },
        "end": {
          "line": 3509,
          "character": 70
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3509,
          "character": 72
        },
        "end": {
          "line": 3509,
          "character": 86
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3509,
          "character": 111
        },
        "end": {
          "line": 3509,
          "character": 125
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3509,
          "character": 127
        },
        "end": {
          "line": 3509,
          "character": 141
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3510,
          "character": 7
        },
        "end": {
          "line": 3510,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3511,
          "character": 8
        },
        "end": {
          "line": 3511,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3511,
          "character": 24
        },
        "end": {
          "line": 3511,
          "character": 38
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3513,
          "character": 6
        },
        "end": {
          "line": 3513,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3514,
          "character": 6
        },
        "end": {
          "line": 3514,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3517,
          "character": 12
        },
        "end": {
          "line": 3517,
          "character": 26
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3518,
          "character": 34
        },
        "end": {
          "line": 3518,
          "character": 40
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3518,
          "character": 42
        },
        "end": {
          "line": 3518,
          "character": 54
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3518,
          "character": 56
        },
        "end": {
          "line": 3518,
          "character": 70
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3518,
          "character": 72
        },
        "end": {
          "line": 3518,
          "character": 86
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3518,
          "character": 88
        },
        "end": {
          "line": 3518,
          "character": 102
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3518,
          "character": 124
        },
        "end": {
          "line": 3518,
          "character": 138
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3518,
          "character": 140
        },
        "end": {
          "line": 3518,
          "character": 154
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3519,
          "character": 7
        },
        "end": {
          "line": 3519,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3520,
          "character": 8
        },
        "end": {
          "line": 3520,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3520,
          "character": 24
        },
        "end": {
          "line": 3520,
          "character": 38
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3521,
          "character": 6
        },
        "end": {
          "line": 3521,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3522,
          "character": 6
        },
        "end": {
          "line": 3522,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3720,
          "character": 14
        },
        "end": {
          "line": 3720,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3728,
          "character": 6
        },
        "end": {
          "line": 3728,
          "character": 27
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3729,
          "character": 6
        },
        "end": {
          "line": 3729,
          "character": 32
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3730,
          "character": 7
        },
        "end": {
          "line": 3730,
          "character": 32
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3730,
          "character": 33
        },
        "end": {
          "line": 3730,
          "character": 59
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3731,
          "character": 7
        },
        "end": {
          "line": 3731,
          "character": 32
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3732,
          "character": 19
        },
        "end": {
          "line": 3732,
          "character": 39
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3732,
          "character": 41
        },
        "end": {
          "line": 3732,
          "character": 60
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3732,
          "character": 61
        },
        "end": {
          "line": 3732,
          "character": 81
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3732,
          "character": 84
        },
        "end": {
          "line": 3732,
          "character": 109
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3732,
          "character": 110
        },
        "end": {
          "line": 3732,
          "character": 136
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3737,
          "character": 5
        },
        "end": {
          "line": 3737,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3741,
          "character": 4
        },
        "end": {
          "line": 3741,
          "character": 23
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3998,
          "character": 3
        },
        "end": {
          "line": 3998,
          "character": 19
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3999,
          "character": 3
        },
        "end": {
          "line": 3999,
          "character": 19
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4012,
          "character": 9
        },
        "end": {
          "line": 4012,
          "character": 25
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4013,
          "character": 9
        },
        "end": {
          "line": 4013,
          "character": 25
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4014,
          "character": 9
        },
        "end": {
          "line": 4014,
          "character": 29
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4015,
          "character": 9
        },
        "end": {
          "line": 4015,
          "character": 29
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4028,
          "character": 9
        },
        "end": {
          "line": 4028,
          "character": 25
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4029,
          "character": 9
        },
        "end": {
          "line": 4029,
          "character": 25
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4030,
          "character": 9
        },
        "end": {
          "line": 4030,
          "character": 29
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4031,
          "character": 9
        },
        "end": {
          "line": 4031,
          "character": 29
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4044,
          "character": 9
        },
        "end": {
          "line": 4044,
          "character": 25
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4045,
          "character": 9
        },
        "end": {
          "line": 4045,
          "character": 25
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4046,
          "character": 9
        },
        "end": {
          "line": 4046,
          "character": 29
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4047,
          "character": 9
        },
        "end": {
          "line": 4047,
          "character": 29
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    }
  ],
  "metadata": {
    "currentFileSymbols": 392,
    "symbols": 946,
    "identifiers": 9969,
    "elided": true
  }
}

zasm:

PUSHR D0; void run(int) Params
PUSHR REFFFC; void run(int) Body Start
PUSHARGSV 0 0.0047
SETR D4 SP2
STOREV 0 0.0046
STOREV 0 0.0045
STOREV 0 0.0044
STOREV 0 0.0043
STOREV 0 0.0042
STOREV 0 0.0041
STOREV 0 0.0040
STOREV 0 0.0039
STOREV 0 0.0038
STOREV 0 0.0037
ALLOCATEMEMV D2 2 0
STORE D2 0.0036
ALLOCATEMEMV D2 256 0
STORE D2 0.0035
PUSHR D4
LOAD D2 0.0047; UsrFunc[npc Ghost_InitAutoGhost(ffc, int)] Params Start
PUSHR D2
LOAD D2 0.0048
PUSHR D2; UsrFunc[npc Ghost_InitAutoGhost(ffc, int)] Params End
CALLFUNC 2.7278; UsrFunc[npc Ghost_InitAutoGhost(ffc, int)] Call
POP D4
STORE D2 0.0034
ALLOCATEMEMV D2 256 0
STORE D2 0.0033
STOREV 0 0.0032
STOREV 0 0.0031
ALLOCATEMEMV D2 200 0
STORE D2 0.0030
ALLOCATEMEMV D2 6 0
PUSHR D2
WRITEPODARRAY D2 {119,118,124,119,118,124}
POP D2
STORE D2 0.0028
ALLOCATEMEMV D2 400 0
STORE D2 0.0027
SETV D2 0; for() #260 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #260 LoopTest
COMPAREV D2 12
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 67 ==; for() #260 TestFail?
LOAD D2 0.0034; for() #260 Body Start
PUSHR D2
LOAD D2 0.0046
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0046
ADDV D2 300
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #260 Body End
LOAD D2 0.0046; for() #260 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 42; for() #260 End
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0027
SETR D0 D2
POP D2
WRITEPODARRAYVR 312 D2
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 300
STORE D2 0.0026
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 301
STORE D2 0.0025
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 302
STORE D2 0.0024
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 303
STORE D2 0.0023
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 304
STORE D2 0.0022
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 305
STORE D2 0.0021
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 306
STORE D2 0.0020
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 307
STORE D2 0.0019
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 308
STORE D2 0.0018
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0.0017
STOREV 0 0.0016
STOREV 0 0.0015
LOAD D2 0.0025; if() #582 Test
COMPAREV D2 44
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 136 ==; Test 'if'
SETV D2 44; if() #582 Body Start
STORE D2 0.0016
GOTO 167; if() #582 Body End
LOAD D2 0.0025; if() #583 Test AND if() #582 Else Start
COMPAREV D2 45
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 144 ==; Test 'if'
SETV D2 45; if() #583 Body Start
STORE D2 0.0016
GOTO 167; if() #583 Body End
LOAD D2 0.0025; if() #584 Test AND if() #583 Else Start
COMPAREV D2 46
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 152 ==; Test 'if'
SETV D2 46; if() #584 Body Start
STORE D2 0.0016
GOTO 167; if() #584 Body End
LOAD D2 0.0025; if() #585 Test AND if() #584 Else Start
COMPAREV D2 47
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 160 ==; Test 'if'
SETV D2 47; if() #585 Body Start
STORE D2 0.0016
GOTO 167; if() #585 Body End
LOAD D2 0.0025; if() #959 Test AND if() #585 Else Start
COMPAREV D2 48
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 167 ==; Test 'if'
SETV D2 48; if() #959 Body Start
STORE D2 0.0016; if() #959 Body End
LOAD D2 0.0016; if() #585 Else End AND if() #584 Else End AND if() #583 Else End AND if() #582 Else End AND if() #960 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 178 ==; Test 'if'
LOAD D2 0.0024; if() #960 Body Start
STORE D2 0.0025
LOAD D2 0.0023
STORE D2 0.0024
SETV D2 0
STORE D2 0.0023; if() #960 Body End
LOAD D2 0.0022
ANDV D2 15
STORE D2 0.0014
LOAD D2 0.0022; InlineFunc[int Floor(int)] Params Start
RSHIFTV D2 4; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
ANDV D2 15
STORE D2 0.0013
LOAD D2 0.0017; if() #961 Test
ANDV D2 512
COMPAREV D2 0
GOTOCMP 196 !=
LOAD D2 0.0017
ANDV D2 1024
COMPAREV D2 0
GOTOCMP 196 !=
SETV D2 1
GOTO 197
SETV D2 0
COMPAREV D2 0
GOTOCMP 206 ==; Test 'if'
PUSHR D4; if() #961 Body Start
PUSHV 8; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4591; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK D4
PUSHV 16; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4591; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #961 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_GetExtraProperties(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCID
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0025
PUSHR D2
LOAD D2 0.0024
PUSHR D2
LOAD D2 0.0023
PUSHR D2
LOAD D2 0.0030
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_GetExtraProperties(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.4749; UsrFunc[void EZB_GetExtraProperties(ffc, npc, int, int, int, int, int, int, int)] Call
POP D4
LOAD D2 0.0020
ANDV D2 15
STORE D2 0.0012
LOAD D2 0.0020
RSHIFTV D2 4
ANDV D2 15
STORE D2 0.0011
LOAD D2 0.0011; if() #962 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 243 ==; Test 'if'
LOAD D2 0.0012; if() #962 Body Start
STORE D2 0.0011; if() #962 Body End
PUSHR D4
LOAD D2 0.0012; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 4; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0609; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0012
PUSHR D4
LOAD D2 0.0011; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 4; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0609; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0011
LOAD D2 0.0034
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
PUSHR D2
LOAD D2 0.0027
SETR D0 D2
POP D2
WRITEPODARRAYVR 310 D2
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 310
STORE D2 0.0010
PUSHR D4
LOAD D2 0.0047; UsrFunc[void Ghost_Transform(ffc, npc, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
PUSHARGSV -1 0.0002
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0011
PUSHR D2; UsrFunc[void Ghost_Transform(ffc, npc, int, int, int, int)] Params End
CALLFUNC 2.7722; UsrFunc[void Ghost_Transform(ffc, npc, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0034; UsrFunc[void Ghost_SetHitOffsets(npc, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0014
PUSHR D2
LOAD D2 0.0014
PUSHR D2; UsrFunc[void Ghost_SetHitOffsets(npc, int, int, int, int)] Params End
CALLFUNC 2.7486; UsrFunc[void Ghost_SetHitOffsets(npc, int, int, int, int)] Call
POP D4
LOAD D2 0.0017; if() #586 Test
ANDV D2 2
COMPAREV D2 0
GOTOCMP 309 ==; Test 'if'
PUSHR D4; if() #586 Body Start
PUSHV 512; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4591; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4
GOTO 317; if() #586 Body End
LOAD D2 0.0017; if() #963 Test AND if() #586 Else Start
ANDV D2 1
COMPAREV D2 0
GOTOCMP 317 ==; Test 'if'
PUSHR D4; if() #963 Body Start
PUSHV 256; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4591; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #963 Body End
LOAD D2 0.0017; if() #586 Else End AND if() #964 Test
ANDV D2 16
COMPAREV D2 0
GOTOCMP 325 ==; Test 'if'
PUSHR D4; if() #964 Body Start
PUSHV 32; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4591; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #964 Body End
LOAD D2 0.0017; if() #587 Test
ANDV D2 4
COMPAREV D2 0
GOTOCMP 369 ==; Test 'if'
PUSHR D4; if() #587 Body Start
PUSHV 7168; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4591; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK D4
PUSHV 65536; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4591; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4
SETV D2 1
PUSHR D2
LOAD D2 0.0047
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2
LOAD D2 0.0017; if() #965 Test
ANDV D2 16
COMPAREV D2 0
GOTOCMP 359 ==
PUSHR D4
CALLFUNC 2.7469; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 359 !=
SETV D2 1
GOTO 360
SETV D2 0
COMPAREV D2 0
GOTOCMP 377 ==; Test 'if'
PUSHR D4; if() #965 Body Start
PUSHV 16384; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4591; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4
SETV D2 8
SETR GD3 D2; if() #965 Body End
GOTO 377; if() #587 Body End
LOAD D2 0.0017; if() #966 Test AND if() #587 Else Start
ANDV D2 8
COMPAREV D2 0
GOTOCMP 377 ==; Test 'if'
PUSHR D4; if() #966 Body Start
PUSHV 65538; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4591; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #966 Body End
LOAD D2 0.0017; if() #587 Else End AND if() #967 Test
ANDV D2 256
COMPAREV D2 0
GOTOCMP 385 ==; Test 'if'
PUSHR D4; if() #967 Body Start
PUSHV 1; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4591; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #967 Body End
STOREV -1 0.0009
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
MULTV D2 10
STORE D2 0.0008
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0007
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
STORE D2 0.0006
ALLOCATEMEMV D2 16 0
STORE D2 0.0005
STOREV -1 0.0004
STOREV 0 0.0003
LOAD D2 0.0026; if() #969 Test
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 456 ==; Test 'if'
SETV D3 360; InlineFunc[int Rand(int)] Params AND if() #969 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0034; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7449; UsrFunc[int VectorX(int, int)] Call
POP D4
STORE D2 0.0038
PUSHR D4
LOAD D2 0.0034; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7459; UsrFunc[int VectorY(int, int)] Call
POP D4
STORE D2 0.0037; if() #969 Body End
LOAD D2 0.0026; if() #970 Test
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 464 ==; Test 'if'
SETV D3 4; InlineFunc[int Rand(int)] Params AND if() #970 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0007; if() #970 Body End
LOAD D2 0.0026; if() #971 Test
COMPAREV D2 12
GOTOCMP 472 ==
LOAD D2 0.0026
COMPAREV D2 13
GOTOCMP 472 ==
SETV D2 0
GOTO 473
SETV D2 1
COMPAREV D2 0
GOTOCMP 480 ==; Test 'if'
LOAD D2 0.0034; if() #971 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
STORE D2 0.0006; if() #971 Body End
STOREV 0 0.0002; while(true) #9 Body [Opt:AlwaysOn] Start
LOAD D2 0.0026; if() #588 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 521 ==; Test 'if'
PUSHR D4; if() #588 Body Start
LOAD D2 0.0009; UsrFunc[int Ghost_HaltingWalk4(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCSTEP
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCRATE
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCHOMING
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCHUNGER
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCHALTRATE
PUSHV 48; UsrFunc[int Ghost_HaltingWalk4(int, int, int, int, int, int, int)] Params End
CALLFUNC 2.6554; UsrFunc[int Ghost_HaltingWalk4(int, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0009
LOAD D2 0.0009; if() #972 Test
COMPAREV D2 16
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
SETV D2 1; if() #972 Body Start
STORE D2 0.0002; if() #972 Body End
GOTO 3499; if() #588 Body End
LOAD D2 0.0026; if() #589 Test AND if() #588 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 566 ==; Test 'if'
PUSHR D4; if() #589 Body Start
LOAD D2 0.0009; UsrFunc[int Ghost_ConstantWalk4(int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCSTEP
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCRATE
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCHOMING
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCHUNGER; UsrFunc[int Ghost_ConstantWalk4(int, int, int, int, int)] Params End
CALLFUNC 2.4246; UsrFunc[int Ghost_ConstantWalk4(int, int, int, int, int)] Call
POP D4
STORE D2 0.0009
LOAD D2 0.0008; if() #590 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 557 ==; Test 'if'
LOAD D2 0.0008; if() #590 Body Start
SUBV D2 1
STORE D2 0.0008
GOTO 3499; if() #590 Body End
SETV D3 24; InlineFunc[int Rand(int)] Params AND if() #973 Test AND if() #590 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
SETV D2 1; if() #973 Body Start
STORE D2 0.0002; if() #973 Body End
GOTO 3499; if() #590 Else End AND if() #589 Body End
LOAD D2 0.0026; if() #591 Test AND if() #589 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 611 ==; Test 'if'
PUSHR D4; if() #591 Body Start
LOAD D2 0.0009; UsrFunc[int Ghost_ConstantWalk8(int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCSTEP
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCRATE
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCHOMING
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCHUNGER; UsrFunc[int Ghost_ConstantWalk8(int, int, int, int, int)] Params End
CALLFUNC 2.5463; UsrFunc[int Ghost_ConstantWalk8(int, int, int, int, int)] Call
POP D4
STORE D2 0.0009
LOAD D2 0.0008; if() #592 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 602 ==; Test 'if'
LOAD D2 0.0008; if() #592 Body Start
SUBV D2 1
STORE D2 0.0008
GOTO 3499; if() #592 Body End
SETV D3 24; InlineFunc[int Rand(int)] Params AND if() #974 Test AND if() #592 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
SETV D2 1; if() #974 Body Start
STORE D2 0.0002; if() #974 Body End
GOTO 3499; if() #592 Else End AND if() #591 Body End
LOAD D2 0.0026; if() #593 Test AND if() #591 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 761 ==; Test 'if'
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #975 Test AND if() #593 Body Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 8
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 684 ==; Test 'if'
PUSHR D4; if() #975 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHARGSR D4 0.0002; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7426; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4; if() #975 Body End
LOAD D2 0.0034; if() #976 Test
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
COMPAREV D2 0
GOTOCMP 726 <=
SETR D2 LINKACTION
COMPAREV D2 2
GOTOCMP 726 !=
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
POP D3
COMPARER D3 D2
GOTOCMP 726 >=
SETV D2 1
GOTO 727
SETV D2 0
COMPAREV D2 0
GOTOCMP 743 ==; Test 'if'
LOAD D2 0.0008; if() #977 Test AND if() #976 Body Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
MULTV D2 5
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 743 ==; Test 'if'
SETV D2 1; if() #977 Body Start
STORE D2 0.0002; if() #977 Body End
LOAD D2 0.0008; if() #976 Body End AND if() #594 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 752 ==; Test 'if'
LOAD D2 0.0008; if() #594 Body Start
SUBV D2 1
STORE D2 0.0008
GOTO 3499; if() #594 Body End
SETV D3 24; InlineFunc[int Rand(int)] Params AND if() #978 Test AND if() #594 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
SETV D2 1; if() #978 Body Start
STORE D2 0.0002; if() #978 Body End
GOTO 3499; if() #594 Else End AND if() #593 Body End
LOAD D2 0.0026; if() #595 Test AND if() #593 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 894 ==; Test 'if'
PUSHR D4; if() #595 Body Start
LOAD D2 0.0038; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0037
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.4979; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0038; if() #979 Test
COMPAREV D2 0
GOTOCMP 785 >=
PUSHR D4
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1516; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 798 ==
LOAD D2 0.0038
COMPAREV D2 0
GOTOCMP 796 <=
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1516; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 798 ==
SETV D2 0
GOTO 799
SETV D2 1
COMPAREV D2 0
GOTOCMP 806 ==; Test 'if'
LOAD D2 0.0038; if() #979 Body Start
SUBV2 0 D2
STORE D2 0.0038
SETV D2 1
STORE D2 0.0015; if() #979 Body End
LOAD D2 0.0037; if() #980 Test
COMPAREV D2 0
GOTOCMP 817 >=
PUSHR D4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1516; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 829 ==
LOAD D2 0.0037
COMPAREV D2 0
GOTOCMP 827 <=
PUSHR D4
PUSHARGSV 1 0.0002; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1516; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 829 ==
SETV D2 0
GOTO 830
SETV D2 1
COMPAREV D2 0
GOTOCMP 842 ==; Test 'if'
LOAD D2 0.0037; if() #980 Body Start
SUBV2 0 D2
STORE D2 0.0037
LOAD D2 0.0015; if() #981 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 842 ==; Test 'if'
SETV D2 1; if() #981 Body Start
STORE D2 0.0015; if() #981 Body End
PUSHR D4; if() #980 Body End
LOAD D2 0.0047; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
PUSHARGSV 0 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0038
MULTV D2 10
PUSHR D2
LOAD D2 0.0037
MULTV D2 10
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params End
CALLFUNC 3.0527; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Call
POP D4
SETR GD4 D2
LOAD D2 0.0017; if() #982 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 876 ==; Test 'if'
PUSHR D4; if() #982 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #982 Body End
LOAD D2 0.0008; if() #596 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 885 ==; Test 'if'
LOAD D2 0.0008; if() #596 Body Start
SUBV D2 1
STORE D2 0.0008
GOTO 3499; if() #596 Body End
SETV D3 24; InlineFunc[int Rand(int)] Params AND if() #983 Test AND if() #596 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
SETV D2 1; if() #983 Body Start
STORE D2 0.0002; if() #983 Body End
GOTO 3499; if() #596 Else End AND if() #595 Body End
LOAD D2 0.0026; if() #597 Test AND if() #595 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1000 ==; Test 'if'
PUSHR D4; if() #597 Body Start
LOAD D2 0.0007; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7426; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params End
CALLFUNC 3.0527; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Call
POP D4
SETR GD4 D2
LOAD D2 0.0017; if() #984 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 935 ==; Test 'if'
PUSHR D4; if() #984 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #984 Body End
LOAD D2 0.0008; if() #598 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 944 ==; Test 'if'
LOAD D2 0.0008; if() #598 Body Start
SUBV D2 1
STORE D2 0.0008
GOTO 952; if() #598 Body End
SETV D3 24; InlineFunc[int Rand(int)] Params AND if() #985 Test AND if() #598 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 952 ==; Test 'if'
SETV D2 1; if() #985 Body Start
STORE D2 0.0002; if() #985 Body End
LOAD D2 0.0009; if() #598 Else End
ADDV D2 1
STORE D2 0.0009
LOAD D2 0.0009; if() #986 Test
COMPAREV D2 80
GOTOCMP 964 <=
SETV D3 10; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
GOTOCMP 964 !=
SETV D2 1
GOTO 965
SETV D2 0
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #986 Body Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0007
SETV D2 0
STORE D2 0.0009
LOAD D2 0.0015; if() #987 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
SETV D2 1; if() #987 Body Start
STORE D2 0.0015; if() #987 Body End
GOTO 3499; if() #986 Body End AND if() #597 Body End
LOAD D2 0.0026; if() #599 Test AND if() #597 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1214 ==; Test 'if'
LOAD D2 0.0034; if() #599 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
MULTV D2 0.0010
STORE D2 0.0001
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
MULTV D2 0.0100
STORE D2 0
PUSHR D4
LOAD D2 0.0038; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
SUBV2 0 D2
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0609; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0038
PUSHR D4
LOAD D2 0.0037; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
SUBV2 0 D2
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0609; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0037
PUSHR D4
LOAD D2 0.0038; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0037
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.4979; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0038; if() #988 Test
COMPAREV D2 0
GOTOCMP 1100 >=
PUSHR D4
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1516; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1113 ==
LOAD D2 0.0038
COMPAREV D2 0
GOTOCMP 1111 <=
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1516; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1113 ==
SETV D2 0
GOTO 1114
SETV D2 1
COMPAREV D2 0
GOTOCMP 1126 ==; Test 'if'
LOAD D2 0.0038; if() #988 Body Start
SUBV2 0 D2
STORE D2 0.0038
LOAD D2 0.0015; if() #989 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1126 ==; Test 'if'
SETV D2 1; if() #989 Body Start
STORE D2 0.0015; if() #989 Body End
LOAD D2 0.0037; if() #988 Body End AND if() #990 Test
COMPAREV D2 0
GOTOCMP 1137 >=
PUSHR D4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1516; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1149 ==
LOAD D2 0.0037
COMPAREV D2 0
GOTOCMP 1147 <=
PUSHR D4
PUSHARGSV 1 0.0002; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1516; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1149 ==
SETV D2 0
GOTO 1150
SETV D2 1
COMPAREV D2 0
GOTOCMP 1162 ==; Test 'if'
LOAD D2 0.0037; if() #990 Body Start
SUBV2 0 D2
STORE D2 0.0037
LOAD D2 0.0015; if() #991 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1162 ==; Test 'if'
SETV D2 1; if() #991 Body Start
STORE D2 0.0015; if() #991 Body End
PUSHR D4; if() #990 Body End
LOAD D2 0.0047; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
PUSHARGSV 0 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0038
MULTV D2 10
PUSHR D2
LOAD D2 0.0037
MULTV D2 10
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params End
CALLFUNC 3.0527; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Call
POP D4
SETR GD4 D2
LOAD D2 0.0017; if() #992 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 1196 ==; Test 'if'
PUSHR D4; if() #992 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #992 Body End
LOAD D2 0.0008; if() #600 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1205 ==; Test 'if'
LOAD D2 0.0008; if() #600 Body Start
SUBV D2 1
STORE D2 0.0008
GOTO 3499; if() #600 Body End
SETV D3 24; InlineFunc[int Rand(int)] Params AND if() #993 Test AND if() #600 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
SETV D2 1; if() #993 Body Start
STORE D2 0.0002; if() #993 Body End
GOTO 3499; if() #600 Else End AND if() #599 Body End
LOAD D2 0.0026; if() #601 Test AND if() #599 Else Start
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1426 ==; Test 'if'
PUSHR D4; if() #601 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
MULTV D2 8
PUSHR D2
PUSHVARGV 0; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 8
PUSHVARGV 16; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
LOAD D2 0.0034; if() #602 Test
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1282 ==; Test 'if'
PUSHARGSR D4 0.0002; InlineFunc[int WrapDegrees(int)] Params Start AND if() #602 Body Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHR D4
PUSHV -30; UsrFunc[int Rand(int, int)] Params Start
PUSHV 30; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3; InlineFunc[int WrapDegrees(int)] Params End
WRAPDEGREES D2; InlineFunc[int WrapDegrees(int)] Body
STORE D2 0.0007
GOTO 1322; if() #602 Body End
PUSHARGSR D4 0.0002; InlineFunc[int WrapDegrees(int)] Params Start AND if() #602 Else Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int Rand(int, int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCHOMING; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3; InlineFunc[int WrapDegrees(int)] Params End
WRAPDEGREES D2; InlineFunc[int WrapDegrees(int)] Body
STORE D2 0.0007; if() #602 Else End
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 2.6000
SETR GD5 D2
SETR D2 GD5; while() #10 Test
COMPAREV D2 0
GOTOCMP 1334 >
SETR D2 GD3
COMPAREV D2 0
GOTOCMP 1334 >
SETV D2 0
GOTO 1335
SETV D2 1
COMPAREV D2 0
GOTOCMP 1384 ==; Test 'while'
PUSHR D4; while() #10 Body Start
LOAD D2 0.0047; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params End
CALLFUNC 3.0527; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Call
POP D4
SETR GD4 D2
PUSHR D4
LOAD D2 0.0007; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7426; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4
LOAD D2 0.0017; if() #994 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 1374 ==; Test 'if'
PUSHR D4; if() #994 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #994 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #10 Body End
GOTO 1326; while() #10 End
LOAD D2 0.0006; if() #995 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1392 ==; Test 'if'
LOAD D2 0.0006; if() #995 Body Start
SUBV D2 1
STORE D2 0.0006; if() #995 Body End
LOAD D2 0.0006; if() #996 Test
COMPAREV D2 0
GOTOCMP 1410 <=
LOAD D2 0.0034; InlineFunc[int Ceiling(int)] Params Start AND InlineFunc[int Max(int, int)] Params Start AND InlineFunc[int Rand(int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
MULTV D2 0.5000; InlineFunc[int Ceiling(int)] Params End
CEILING D2; InlineFunc[int Ceiling(int)] Body
PUSHVARGR D2
PUSHVARGV 2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
GOTOCMP 1410 ==
SETV D2 0
GOTO 1411
SETV D2 1
COMPAREV D2 0
GOTOCMP 1420 ==; Test 'if'
SETV D2 1; if() #996 Body Start
STORE D2 0.0002
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
STORE D2 0.0006; if() #996 Body End
LOAD D2 0.0002; unless() #997 Test
COMPAREV D2 0
GOTOCMP 3499 !=; Test 'unless'
SETV D2 1; unless() #997 Body Start
STORE D2 0.0015; unless() #997 Body End
GOTO 3499; if() #601 Body End
LOAD D2 0.0026; if() #603 Test AND if() #601 Else Start
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1503 ==; Test 'if'
PUSHR D4; if() #603 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
MULTV D2 8
PUSHR D2
PUSHVARGV 0; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 8
PUSHVARGV 16; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Teleport(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Teleport(ffc, npc, int)] Params End
CALLFUNC 3.6586; UsrFunc[void EZB_Teleport(ffc, npc, int)] Call
POP D4
LOAD D2 0.0006; if() #998 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1469 ==; Test 'if'
LOAD D2 0.0006; if() #998 Body Start
SUBV D2 1
STORE D2 0.0006; if() #998 Body End
LOAD D2 0.0006; if() #999 Test
COMPAREV D2 0
GOTOCMP 1487 <=
LOAD D2 0.0034; InlineFunc[int Ceiling(int)] Params Start AND InlineFunc[int Max(int, int)] Params Start AND InlineFunc[int Rand(int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
MULTV D2 0.5000; InlineFunc[int Ceiling(int)] Params End
CEILING D2; InlineFunc[int Ceiling(int)] Body
PUSHVARGR D2
PUSHVARGV 2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
GOTOCMP 1487 ==
SETV D2 0
GOTO 1488
SETV D2 1
COMPAREV D2 0
GOTOCMP 1497 ==; Test 'if'
SETV D2 1; if() #999 Body Start
STORE D2 0.0002
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
STORE D2 0.0006; if() #999 Body End
LOAD D2 0.0002; unless() #1000 Test
COMPAREV D2 0
GOTOCMP 3499 !=; Test 'unless'
SETV D2 1; unless() #1000 Body Start
STORE D2 0.0015; unless() #1000 Body End
GOTO 3499; if() #603 Body End
LOAD D2 0.0026; if() #604 Test AND if() #603 Else Start
COMPAREV D2 9
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1758 ==; Test 'if'
PUSHARGSR D4 0.0002; InlineFunc[int WrapDegrees(int)] Params Start AND if() #604 Body Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int Rand(int, int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCHALTRATE; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3; InlineFunc[int WrapDegrees(int)] Params End
WRAPDEGREES D2; InlineFunc[int WrapDegrees(int)] Body
STORE D2 0.0007
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
LOAD D2 0.0034; if() #605 Test
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1561 ==; Test 'if'
SETV D2 2.6000; if() #605 Body Start
SETR GD5 D2
GOTO 1575; if() #605 Body End
LOAD D2 0.0034; if() #605 Else Start
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
MULTV D2 0.0100
SETV D2 0.0100
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
POP D3
MULTR D2 D3
SETR GD5 D2; if() #605 Else End
LOAD D2 0.0034; if() #1001 Test
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1622 ==; Test 'if'
SETR D2 GD5; if() #1001 Body Start
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
MULTV D2 0.0100
SETV D2 0.0100
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
POP D3
MULTR D2 D3
PUSHR D2
PUSHV 0
PUSHV 80; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0609; UsrFunc[int Clamp(int, int, int)] Call
POP D4
POP D3
MULTR D2 D3
STORE D2 0.0044
SETR D2 GD5
PUSHR D2
PUSHR D4
PUSHV -100; UsrFunc[int Rand(int, int)] Params Start
PUSHV 100; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
MULTV D2 0.0100
PUSHR D2
LOAD D2 0.0044
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
SETR GD5 D2; if() #1001 Body End
SETR D2 GD5; while() #11 Test
COMPAREV D2 0
GOTOCMP 1630 >
SETR D2 GD3
COMPAREV D2 0
GOTOCMP 1630 >
SETV D2 0
GOTO 1631
SETV D2 1
COMPAREV D2 0
GOTOCMP 1752 ==; Test 'while'
PUSHR D4; while() #11 Body Start
LOAD D2 0.0047; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params End
CALLFUNC 3.0527; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Call
POP D4
SETR GD4 D2
PUSHR D4
LOAD D2 0.0007; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7426; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4
LOAD D2 0.0017; if() #1002 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 1670 ==; Test 'if'
PUSHR D4; if() #1002 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #1002 Body End
LOAD D2 0.0008; if() #606 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1679 ==; Test 'if'
LOAD D2 0.0008; if() #606 Body Start
SUBV D2 1
STORE D2 0.0008
GOTO 1687; if() #606 Body End
SETV D3 24; InlineFunc[int Rand(int)] Params AND if() #1003 Test AND if() #606 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1687 ==; Test 'if'
SETV D2 1; if() #1003 Body Start
STORE D2 0.0002; if() #1003 Body End
PUSHR D4; if() #606 Else End
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4
LOAD D2 0.0002; if() #1004 Test
COMPAREV D2 0
GOTOCMP 1622 ==; Test 'if'
SETR D2 GD3; while() #12 Test AND if() #1004 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1622 ==; Test 'while'
PUSHR D4; while() #12 Body Start
LOAD D2 0.0047; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params End
CALLFUNC 3.0527; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Call
POP D4
SETR GD4 D2
PUSHR D4
LOAD D2 0.0007; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7426; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4
LOAD D2 0.0017; if() #1005 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 1741 ==; Test 'if'
PUSHR D4; if() #1005 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #1005 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #12 Body End
GOTO 1699; while() #12 End
GOTO 1622; if() #1004 Body End AND while() #11 Body End AND while() #11 End
LOAD D2 0.0002; unless() #1006 Test
COMPAREV D2 0
GOTOCMP 3499 !=; Test 'unless'
SETV D2 1; unless() #1006 Body Start
STORE D2 0.0015; unless() #1006 Body End
GOTO 3499; if() #604 Body End
LOAD D2 0.0026; if() #607 Test AND if() #604 Else Start
COMPAREV D2 10
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2074 ==; Test 'if'
LOAD D2 0.0034; if() #608 Test AND if() #607 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
COMPAREV D2 0
GOTOCMP 1802 ==
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
POP D3
COMPARER D3 D2
GOTOCMP 1802 <
SETV D2 0
GOTO 1803
SETV D2 1
COMPAREV D2 0
GOTOCMP 1968 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #608 Body Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETR D2 GD1
PUSHR D2
PUSHR D4
PUSHV 6; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7449; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0040
SETR D2 GD2
PUSHR D2
PUSHR D4
PUSHV 6; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7459; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0039
LOAD D2 0.0009; if() #609 Test
COMPAREV D2 0
GOTOCMP 1858 <=
LOAD D2 0.0007
COMPAREV D2 -1000
GOTOCMP 1858 ==
SETV D2 1
GOTO 1859
SETV D2 0
COMPAREV D2 0
GOTOCMP 1887 ==; Test 'if'
LOAD D2 0.0009; if() #609 Body Start
SUBV D2 1
STORE D2 0.0009
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 3.3205; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0007; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7426; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4
GOTO 2043; if() #609 Body End
PUSHR D4; if() #610 Test AND if() #609 Else Start
LOAD D2 0.0047; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0039
PUSHR D2; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Params End
CALLFUNC 3.1597; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1933 ==; Test 'if'
LOAD D2 0.0009; if() #1007 Test AND if() #610 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1908 ==; Test 'if'
LOAD D2 0.0009; if() #1007 Body Start
SUBV D2 1
STORE D2 0.0009; if() #1007 Body End
SETV D2 -1000
STORE D2 0.0007
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 3.3205; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7426; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4
GOTO 2043; if() #610 Body End
LOAD D2 0.0042; InlineFunc[int WrapDegrees(int)] Params Start AND if() #610 Else Start
PUSHR D2
PUSHVARGV -140; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 140; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
POP D3
ADDR D2 D3; InlineFunc[int WrapDegrees(int)] Params End
WRAPDEGREES D2; InlineFunc[int WrapDegrees(int)] Body
STORE D2 0.0007
LOAD D2 0.0034; InlineFunc[int Floor(int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
MULTV D2 0.0100
DIVV2 32 D2
SETV D2 32
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
MULTV D2 0.0100
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0009
LOAD D2 0.0015; if() #1008 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2043 ==; Test 'if'
SETV D2 1; if() #1008 Body Start
STORE D2 0.0015; if() #1008 Body End
GOTO 2043; if() #610 Else End AND if() #609 Else End AND if() #608 Body End
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1009 Test AND if() #608 Else Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
ADDV D2 32
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2043 ==; Test 'if'
PUSHR D4; if() #1009 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHARGSR D4 0.0002; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7426; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4; if() #1009 Body End
LOAD D2 0.0017; if() #608 Else End AND if() #1010 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 2056 ==; Test 'if'
PUSHR D4; if() #1010 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #1010 Body End
LOAD D2 0.0008; if() #611 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2065 ==; Test 'if'
LOAD D2 0.0008; if() #611 Body Start
SUBV D2 1
STORE D2 0.0008
GOTO 3499; if() #611 Body End
SETV D3 24; InlineFunc[int Rand(int)] Params AND if() #1011 Test AND if() #611 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
SETV D2 1; if() #1011 Body Start
STORE D2 0.0002; if() #1011 Body End
GOTO 3499; if() #611 Else End AND if() #607 Body End
LOAD D2 0.0026; if() #612 Test AND if() #607 Else Start
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2450 ==; Test 'if'
LOAD D2 0.0005; if() #1012 Test AND if() #612 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 15
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2109 ==; Test 'if'
PUSHR D4; if() #1012 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR GD4; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params End
CALLFUNC 3.3231; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Call
POP D4
SETR D2 GD4
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
SETV D2 1
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 15 D2; if() #1012 Body End
PUSHR D4; unless() #1013 Test
LOAD D2 0.0005; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1516; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 2399 !=; Test 'unless'
LOAD D2 0.0034; if() #613 Test AND unless() #1013 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2189 ==; Test 'if'
LOAD D2 0.0005; if() #614 Test AND if() #613 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2144 ==; Test 'if'
SETV D2 3; if() #614 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2392; if() #614 Body End
LOAD D2 0.0005; if() #615 Test AND if() #614 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2159 ==; Test 'if'
SETV D2 2; if() #615 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2392; if() #615 Body End
LOAD D2 0.0005; if() #616 Test AND if() #615 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2174 ==; Test 'if'
SETV D2 0; if() #616 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2392; if() #616 Body End
LOAD D2 0.0005; if() #1014 Test AND if() #616 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2392 ==; Test 'if'
SETV D2 1; if() #1014 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; if() #1014 Body End
GOTO 2392; if() #616 Else End AND if() #615 Else End AND if() #614 Else End AND if() #613 Body End
LOAD D2 0.0034; if() #617 Test AND if() #613 Else Start
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2257 ==; Test 'if'
LOAD D2 0.0005; if() #618 Test AND if() #617 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2212 ==; Test 'if'
SETV D2 2; if() #618 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2392; if() #618 Body End
LOAD D2 0.0005; if() #619 Test AND if() #618 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2227 ==; Test 'if'
SETV D2 3; if() #619 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2392; if() #619 Body End
LOAD D2 0.0005; if() #620 Test AND if() #619 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2242 ==; Test 'if'
SETV D2 1; if() #620 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2392; if() #620 Body End
LOAD D2 0.0005; if() #1015 Test AND if() #620 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2392 ==; Test 'if'
SETV D2 0; if() #1015 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; if() #1015 Body End
GOTO 2392; if() #620 Else End AND if() #619 Else End AND if() #618 Else End AND if() #617 Body End
LOAD D2 0.0034; if() #621 Test AND if() #617 Else Start
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2325 ==; Test 'if'
LOAD D2 0.0005; if() #622 Test AND if() #621 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2280 ==; Test 'if'
SETV D2 1; if() #622 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2392; if() #622 Body End
LOAD D2 0.0005; if() #623 Test AND if() #622 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2295 ==; Test 'if'
SETV D2 0; if() #623 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2392; if() #623 Body End
LOAD D2 0.0005; if() #624 Test AND if() #623 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2310 ==; Test 'if'
SETV D2 3; if() #624 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2392; if() #624 Body End
LOAD D2 0.0005; if() #1016 Test AND if() #624 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2392 ==; Test 'if'
SETV D2 2; if() #1016 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; if() #1016 Body End
GOTO 2392; if() #624 Else End AND if() #623 Else End AND if() #622 Else End AND if() #621 Body End
LOAD D2 0.0005; if() #625 Test AND if() #621 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2342 ==; Test 'if'
PUSHVARGV 2; InlineFunc[Direction Choose(Direction)] Params Start AND if() #625 Body Start
PUSHVARGV 3; InlineFunc[Direction Choose(Direction)] Params End
CHOOSEVARG; InlineFunc[Direction Choose(Direction)] Body
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2392; if() #625 Body End
LOAD D2 0.0005; if() #626 Test AND if() #625 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2359 ==; Test 'if'
PUSHVARGV 2; InlineFunc[Direction Choose(Direction)] Params Start AND if() #626 Body Start
PUSHVARGV 3; InlineFunc[Direction Choose(Direction)] Params End
CHOOSEVARG; InlineFunc[Direction Choose(Direction)] Body
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2392; if() #626 Body End
LOAD D2 0.0005; if() #627 Test AND if() #626 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2376 ==; Test 'if'
PUSHVARGV 0; InlineFunc[Direction Choose(Direction)] Params Start AND if() #627 Body Start
PUSHVARGV 1; InlineFunc[Direction Choose(Direction)] Params End
CHOOSEVARG; InlineFunc[Direction Choose(Direction)] Body
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2392; if() #627 Body End
LOAD D2 0.0005; if() #1017 Test AND if() #627 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2392 ==; Test 'if'
PUSHVARGV 0; InlineFunc[Direction Choose(Direction)] Params Start AND if() #1017 Body Start
PUSHVARGV 1; InlineFunc[Direction Choose(Direction)] Params End
CHOOSEVARG; InlineFunc[Direction Choose(Direction)] Body
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; if() #1017 Body End
LOAD D2 0.0015; if() #627 Else End AND if() #626 Else End AND if() #625 Else End AND if() #621 Else End AND if() #617 Else End AND if() #613 Else End AND if() #1018 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2399 ==; Test 'if'
SETV D2 1; if() #1018 Body Start
STORE D2 0.0015; if() #1018 Body End
LOAD D2 0.0005; unless() #1013 Body End
PUSHR D2
POP D0
READPODARRAYV D2 0
SETR GD4 D2
LOAD D2 0.0017; if() #1019 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 2417 ==; Test 'if'
PUSHR D4; if() #1019 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #1019 Body End
PUSHR D4
LOAD D2 0.0005; UsrFunc[void Ghost_Move(int, int, int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 2.6888; UsrFunc[void Ghost_Move(int, int, int)] Call
POP D4
LOAD D2 0.0008; if() #628 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2441 ==; Test 'if'
LOAD D2 0.0008; if() #628 Body Start
SUBV D2 1
STORE D2 0.0008
GOTO 3499; if() #628 Body End
SETV D3 24; InlineFunc[int Rand(int)] Params AND if() #1020 Test AND if() #628 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
SETV D2 1; if() #1020 Body Start
STORE D2 0.0002; if() #1020 Body End
GOTO 3499; if() #628 Else End AND if() #612 Body End
LOAD D2 0.0026; if() #629 Test AND if() #612 Else Start
COMPAREV D2 12
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2712 ==; Test 'if'
LOAD D2 0.0005; if() #1021 Test AND if() #629 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 15
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2490 ==; Test 'if'
SETV D3 4; InlineFunc[int Rand(int)] Params AND if() #1021 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params End
CALLFUNC 3.3231; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Call
POP D4
SETV D2 1
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 15 D2; if() #1021 Body End
LOAD D2 0.0009; if() #630 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2499 ==; Test 'if'
LOAD D2 0.0009; if() #630 Body Start
SUBV D2 1
STORE D2 0.0009
GOTO 2684; if() #630 Body End
SETV D3 4; InlineFunc[int Rand(int)] Params AND if() #630 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
PUSHVARGV 1; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHVARGR NPCRATE; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0046
LOAD D2 0.0046; InlineFunc[int Rand(int)] Params Start AND if() #1022 Test
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2550 ==; Test 'if'
PUSHARGSR D4 0.0003; if() #1022 Body Start AND UsrFunc[int AngleDir4(int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2; UsrFunc[int AngleDir4(int)] Params End
CALLFUNC 2.0359; UsrFunc[int AngleDir4(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; if() #1022 Body End
PUSHARGSR D4 0.0002; unless() #1023 Test AND UsrFunc[bool EZB_CanMoveAngle(int)] Params Start
LOAD D2 0.0005; UsrFunc[int EZB_DirAngle(int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2; UsrFunc[int EZB_DirAngle(int)] Params End
CALLFUNC 3.1889; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
PUSHR D2; UsrFunc[bool EZB_CanMoveAngle(int)] Params End
CALLFUNC 3.1306; UsrFunc[bool EZB_CanMoveAngle(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 2576 !=; Test 'unless'
PUSHR D4; unless() #1023 Body Start
LOAD D2 0.0005; UsrFunc[int OppositeDir(int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2; UsrFunc[int OppositeDir(int)] Params End
CALLFUNC 2.9260; UsrFunc[int OppositeDir(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; unless() #1023 Body End
LOAD D2 0.0005
PUSHR D2
POP D0
READPODARRAYV D2 0
STORE D2 0.0045
SETV D2 0; for() #261 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #261 LoopTest
COMPAREV D2 16
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2639 ==; for() #261 TestFail?
PUSHR D4; for() #261 Body Start
LOAD D2 0.0045; UsrFunc[void Ghost_Move(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 2.6888; UsrFunc[void Ghost_Move(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params End
CALLFUNC 3.3231; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Call
POP D4
LOAD D2 0.0017; if() #1024 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 2626 ==; Test 'if'
PUSHR D4; if() #1024 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #1024 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #261 Body End
LOAD D2 0.0046; for() #261 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 2583; for() #261 End
LOAD D2 0.0006; if() #1025 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2647 ==; Test 'if'
LOAD D2 0.0006; if() #1025 Body Start
SUBV D2 1
STORE D2 0.0006; if() #1025 Body End
LOAD D2 0.0006; if() #1026 Test
COMPAREV D2 0
GOTOCMP 2656 >
SETV D3 2; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
GOTOCMP 2656 !=
SETV D2 1
GOTO 2657
SETV D2 0
COMPAREV D2 0
GOTOCMP 2666 ==; Test 'if'
SETV D2 1; if() #1026 Body Start
STORE D2 0.0002
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
STORE D2 0.0006; if() #1026 Body End
LOAD D2 0.0002; unless() #1027 Test
COMPAREV D2 0
GOTOCMP 2671 !=; Test 'unless'
SETV D2 1; unless() #1027 Body Start
STORE D2 0.0015; unless() #1027 Body End
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
PUSHR D2
LOAD D2 0.0034; InlineFunc[int Rand(int)] Params Start
PUSHR D2
POP REFNPC
SETR D3 NPCHOMING; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0009; if() #630 Else End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params End
CALLFUNC 3.3231; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Call
POP D4
LOAD D2 0.0017; if() #1028 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
PUSHR D4; if() #1028 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #1028 Body End
GOTO 3499; if() #629 Body End
LOAD D2 0.0026; if() #631 Test AND if() #629 Else Start
COMPAREV D2 13
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2974 ==; Test 'if'
LOAD D2 0.0005; if() #1029 Test AND if() #631 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 15
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2752 ==; Test 'if'
SETV D3 8; InlineFunc[int Rand(int)] Params AND if() #1029 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params End
CALLFUNC 3.3231; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Call
POP D4
SETV D2 1
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 15 D2; if() #1029 Body End
LOAD D2 0.0009; if() #632 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2761 ==; Test 'if'
LOAD D2 0.0009; if() #632 Body Start
SUBV D2 1
STORE D2 0.0009
GOTO 2946; if() #632 Body End
SETV D3 8; InlineFunc[int Rand(int)] Params AND if() #632 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
PUSHVARGV 1; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHVARGR NPCRATE; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0046
LOAD D2 0.0046; InlineFunc[int Rand(int)] Params Start AND if() #1030 Test
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2812 ==; Test 'if'
PUSHARGSR D4 0.0003; if() #1030 Body Start AND UsrFunc[int AngleDir8(int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 2.0402; UsrFunc[int AngleDir8(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; if() #1030 Body End
PUSHARGSR D4 0.0002; unless() #1031 Test AND UsrFunc[bool EZB_CanMoveAngle(int)] Params Start
LOAD D2 0.0005; UsrFunc[int EZB_DirAngle(int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2; UsrFunc[int EZB_DirAngle(int)] Params End
CALLFUNC 3.1889; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
PUSHR D2; UsrFunc[bool EZB_CanMoveAngle(int)] Params End
CALLFUNC 3.1306; UsrFunc[bool EZB_CanMoveAngle(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 2838 !=; Test 'unless'
PUSHR D4; unless() #1031 Body Start
LOAD D2 0.0005; UsrFunc[int OppositeDir(int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2; UsrFunc[int OppositeDir(int)] Params End
CALLFUNC 2.9260; UsrFunc[int OppositeDir(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; unless() #1031 Body End
LOAD D2 0.0005
PUSHR D2
POP D0
READPODARRAYV D2 0
STORE D2 0.0045
SETV D2 0; for() #262 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #262 LoopTest
COMPAREV D2 16
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2901 ==; for() #262 TestFail?
PUSHR D4; for() #262 Body Start
LOAD D2 0.0045; UsrFunc[void Ghost_Move(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 2.6888; UsrFunc[void Ghost_Move(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params End
CALLFUNC 3.3231; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Call
POP D4
LOAD D2 0.0017; if() #1032 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 2888 ==; Test 'if'
PUSHR D4; if() #1032 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #1032 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #262 Body End
LOAD D2 0.0046; for() #262 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 2845; for() #262 End
LOAD D2 0.0006; if() #1033 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2909 ==; Test 'if'
LOAD D2 0.0006; if() #1033 Body Start
SUBV D2 1
STORE D2 0.0006; if() #1033 Body End
LOAD D2 0.0006; if() #1034 Test
COMPAREV D2 0
GOTOCMP 2918 >
SETV D3 2; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
GOTOCMP 2918 !=
SETV D2 1
GOTO 2919
SETV D2 0
COMPAREV D2 0
GOTOCMP 2928 ==; Test 'if'
SETV D2 1; if() #1034 Body Start
STORE D2 0.0002
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
STORE D2 0.0006; if() #1034 Body End
LOAD D2 0.0002; unless() #1035 Test
COMPAREV D2 0
GOTOCMP 2933 !=; Test 'unless'
SETV D2 1; unless() #1035 Body Start
STORE D2 0.0015; unless() #1035 Body End
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
PUSHR D2
LOAD D2 0.0034; InlineFunc[int Rand(int)] Params Start
PUSHR D2
POP REFNPC
SETR D3 NPCHOMING; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0009; if() #632 Else End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params End
CALLFUNC 3.3231; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Call
POP D4
LOAD D2 0.0017; if() #1036 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
PUSHR D4; if() #1036 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #1036 Body End
GOTO 3499; if() #631 Body End
LOAD D2 0.0026; if() #633 Test AND if() #631 Else Start
COMPAREV D2 14
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3053 ==; Test 'if'
PUSHR D4; if() #633 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
MULTV D2 8
PUSHR D2
PUSHVARGV 0; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 4
PUSHVARGV 8; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHARGSV -1000 0.0002
PUSHV 4; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Params End
CALLFUNC 3.6600; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Call
POP D4
LOAD D2 0.0006; if() #1037 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 3019 ==; Test 'if'
LOAD D2 0.0006; if() #1037 Body Start
SUBV D2 1
STORE D2 0.0006; if() #1037 Body End
LOAD D2 0.0006; if() #1038 Test
COMPAREV D2 0
GOTOCMP 3037 <=
LOAD D2 0.0034; InlineFunc[int Ceiling(int)] Params Start AND InlineFunc[int Max(int, int)] Params Start AND InlineFunc[int Rand(int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
MULTV D2 0.5000; InlineFunc[int Ceiling(int)] Params End
CEILING D2; InlineFunc[int Ceiling(int)] Body
PUSHVARGR D2
PUSHVARGV 2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
GOTOCMP 3037 ==
SETV D2 0
GOTO 3038
SETV D2 1
COMPAREV D2 0
GOTOCMP 3047 ==; Test 'if'
SETV D2 1; if() #1038 Body Start
STORE D2 0.0002
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
STORE D2 0.0006; if() #1038 Body End
LOAD D2 0.0002; unless() #1039 Test
COMPAREV D2 0
GOTOCMP 3499 !=; Test 'unless'
SETV D2 1; unless() #1039 Body Start
STORE D2 0.0015; unless() #1039 Body End
GOTO 3499; if() #633 Body End
LOAD D2 0.0026; if() #634 Test AND if() #633 Else Start
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3466 ==; Test 'if'
LOAD D2 0.0005; if() #1040 Test AND if() #634 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 15
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3128 ==; Test 'if'
SETV D2 1; if() #1040 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 15 D2
LOAD D2 0.0034; if() #635 Test
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3087 ==; Test 'if'
SETV D2 1; if() #635 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
GOTO 3112; if() #635 Body End
LOAD D2 0.0034; if() #636 Test AND if() #635 Else Start
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3102 ==; Test 'if'
SETV D2 2; if() #636 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
GOTO 3112; if() #636 Body End
PUSHR D4; if() #636 Else Start
PUSHV 1; UsrFunc[int Rand(int, int)] Params Start
PUSHV 2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2; if() #636 Else End
PUSHR D4; if() #635 Else End
LOAD D2 0.0047; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR GD4; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params End
CALLFUNC 3.3231; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Call
POP D4
SETR D2 GD4
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2; if() #1040 Body End
LOAD D2 0.0005
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0005; if() #1041 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 1
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 3412 ==; Test 'if'
SETV D2 0; for() #263 setup AND if() #1041 Body Start
STORE D2 0.0046
LOAD D2 0.0046; for() #263 LoopTest
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP D0
READPODARRAYV D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3412 ==; for() #263 TestFail?
LOAD D2 0.0005; if() #637 Test AND for() #263 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3262 ==; Test 'if'
PUSHR D4; if() #637 Body Start
LOAD D2 0.0005; UsrFunc[int EZB_TurnDir4(int, bool)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
PUSHV 1; UsrFunc[int EZB_TurnDir4(int, bool)] Params End
CALLFUNC 3.7069; UsrFunc[int EZB_TurnDir4(int, bool)] Call
POP D4
STORE D2 0.0045
PUSHR D4; if() #1042 Test
LOAD D2 0.0045; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1516; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3349 ==; Test 'if'
SETR D2 GD1; if() #1042 Body Start
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int EZB_DirX(int, int)] Params Start
PUSHR D2
PUSHV 8; UsrFunc[int EZB_DirX(int, int)] Params End
CALLFUNC 3.1942; UsrFunc[int EZB_DirX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0040
SETR D2 GD2
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int EZB_DirY(int, int)] Params Start
PUSHR D2
PUSHV 8; UsrFunc[int EZB_DirY(int, int)] Params End
CALLFUNC 3.1979; UsrFunc[int EZB_DirY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0039
PUSHR D4; unless() #1043 Test
LOAD D2 0.0040; UsrFunc[bool EZB_CanMoveAtPos(int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHXOFS
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHYOFS
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCHXSZ
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCHYSZ
PUSHR D4
LOAD D2 0.0005; UsrFunc[int OppositeDir(int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2; UsrFunc[int OppositeDir(int)] Params End
CALLFUNC 2.9260; UsrFunc[int OppositeDir(int)] Call
POP D4
PUSHR D2; UsrFunc[bool EZB_CanMoveAtPos(int, int, int, int, int)] Params End
CALLFUNC 3.1382; UsrFunc[bool EZB_CanMoveAtPos(int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3349 !=; Test 'unless'
LOAD D2 0.0045; unless() #1043 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2; unless() #1043 Body End
GOTO 3349; if() #1042 Body End AND if() #637 Body End
PUSHR D4; if() #637 Else Start
LOAD D2 0.0005; UsrFunc[int EZB_TurnDir4(int, bool)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
PUSHV 0; UsrFunc[int EZB_TurnDir4(int, bool)] Params End
CALLFUNC 3.7069; UsrFunc[int EZB_TurnDir4(int, bool)] Call
POP D4
STORE D2 0.0045
PUSHR D4; if() #1044 Test
LOAD D2 0.0045; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1516; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3349 ==; Test 'if'
SETR D2 GD1; if() #1044 Body Start
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int EZB_DirX(int, int)] Params Start
PUSHR D2
PUSHV 8; UsrFunc[int EZB_DirX(int, int)] Params End
CALLFUNC 3.1942; UsrFunc[int EZB_DirX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0040
SETR D2 GD2
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int EZB_DirY(int, int)] Params Start
PUSHR D2
PUSHV 8; UsrFunc[int EZB_DirY(int, int)] Params End
CALLFUNC 3.1979; UsrFunc[int EZB_DirY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0039
PUSHR D4; unless() #1045 Test
LOAD D2 0.0040; UsrFunc[bool EZB_CanMoveAtPos(int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHXOFS
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHYOFS
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCHXSZ
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCHYSZ
PUSHR D4
LOAD D2 0.0005; UsrFunc[int OppositeDir(int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2; UsrFunc[int OppositeDir(int)] Params End
CALLFUNC 2.9260; UsrFunc[int OppositeDir(int)] Call
POP D4
PUSHR D2; UsrFunc[bool EZB_CanMoveAtPos(int, int, int, int, int)] Params End
CALLFUNC 3.1382; UsrFunc[bool EZB_CanMoveAtPos(int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3349 !=; Test 'unless'
LOAD D2 0.0045; unless() #1045 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2; unless() #1045 Body End
PUSHR D4; if() #1044 Body End AND if() #637 Else End AND unless() #1046 Test
LOAD D2 0.0005; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1516; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3398 !=; Test 'unless'
LOAD D2 0.0005; if() #638 Test AND unless() #1046 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3384 ==; Test 'if'
PUSHR D4; if() #638 Body Start
LOAD D2 0.0005; UsrFunc[int EZB_TurnDir4(int, bool)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
PUSHV 0; UsrFunc[int EZB_TurnDir4(int, bool)] Params End
CALLFUNC 3.7069; UsrFunc[int EZB_TurnDir4(int, bool)] Call
POP D4
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
GOTO 3398; if() #638 Body End
PUSHR D4; if() #638 Else Start
LOAD D2 0.0005; UsrFunc[int EZB_TurnDir4(int, bool)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
PUSHV 1; UsrFunc[int EZB_TurnDir4(int, bool)] Params End
CALLFUNC 3.7069; UsrFunc[int EZB_TurnDir4(int, bool)] Call
POP D4
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2; if() #638 Else End
PUSHR D4; unless() #1046 Body End
LOAD D2 0.0005; UsrFunc[void Ghost_Move(int, int, int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 2.6888; UsrFunc[void Ghost_Move(int, int, int)] Call
POP D4; for() #263 Body End
LOAD D2 0.0046; for() #263 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 3155; for() #263 End
LOAD D2 0.0005; if() #1041 Body End
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0005; InlineFunc[int Floor(int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0005
PUSHR D2
POP D0
READPODARRAYV D2 2
SETR GD4 D2
LOAD D2 0.0017; if() #1047 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 3448 ==; Test 'if'
PUSHR D4; if() #1047 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #1047 Body End
LOAD D2 0.0008; if() #639 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 3457 ==; Test 'if'
LOAD D2 0.0008; if() #639 Body Start
SUBV D2 1
STORE D2 0.0008
GOTO 3499; if() #639 Body End
SETV D3 24; InlineFunc[int Rand(int)] Params AND if() #1048 Test AND if() #639 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
SETV D2 1; if() #1048 Body Start
STORE D2 0.0002; if() #1048 Body End
GOTO 3499; if() #639 Else End AND if() #634 Body End
LOAD D2 0.0026; if() #1049 Test AND if() #634 Else Start
COMPAREV D2 16
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
PUSHR D4; if() #1049 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FishWizardUpdate(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0005
PUSHR D2; UsrFunc[void EZB_FishWizardUpdate(ffc, npc, int, int)] Params End
CALLFUNC 3.4045; UsrFunc[void EZB_FishWizardUpdate(ffc, npc, int, int)] Call
POP D4
LOAD D2 0.0005; if() #640 Test
PUSHR D2
POP D0
READPODARRAYV D2 2
COMPAREV D2 0
GOTOCMP 3491 ==; Test 'if'
SETV D2 1; if() #640 Body Start
STORE D2 0.0002
GOTO 3499; if() #640 Body End
LOAD D2 0.0005; if() #1050 Test AND if() #640 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 3
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
SETV D2 1; if() #1050 Body Start
STORE D2 0.0015; if() #1050 Body End
LOAD D2 0.0015; if() #640 Else End AND if() #1049 Body End AND if() #634 Else End AND if() #633 Else End AND if() #631 Else End AND if() #629 Else End AND if() #612 Else End AND if() #607 Else End AND if() #604 Else End AND if() #603 Else End AND if() #601 Else End AND if() #599 Else End AND if() #597 Else End AND if() #595 Else End AND if() #593 Else End AND if() #591 Else End AND if() #589 Else End AND if() #588 Else End AND if() #1051 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3742 ==; Test 'if'
LOAD D2 0.0016; if() #641 Test AND if() #1051 Body Start
COMPAREV D2 44
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3539 ==; Test 'if'
PUSHR D4; if() #641 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 3.1889; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3364; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
GOTO 3740; if() #641 Body End
LOAD D2 0.0016; if() #642 Test AND if() #641 Else Start
COMPAREV D2 45
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3592 ==; Test 'if'
PUSHR D4; if() #642 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3364; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
GOTO 3740; if() #642 Body End
LOAD D2 0.0016; if() #643 Test AND if() #642 Else Start
COMPAREV D2 46
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3642 ==; Test 'if'
SETR D2 NPCCOUNT; InlineFunc[int screendata::NumNPCs()] Body AND if() #1052 Test AND if() #643 Body Start
COMPAREV D2 40
GOTOCMP 3609 >=
PUSHR D4
LOAD D2 0.0033; UsrFunc[int EZB_NumSummons(npc)] Params Start
PUSHR D2; UsrFunc[int EZB_NumSummons(npc)] Params End
CALLFUNC 3.6101; UsrFunc[int EZB_NumSummons(npc)] Call
POP D4
COMPAREV D2 8
GOTOCMP 3609 >=
SETV D2 1
GOTO 3610
SETV D2 0
COMPAREV D2 0
GOTOCMP 3740 ==; Test 'if'
SETV D2 56; InlineFunc[void Game::PlaySound(int)] Params AND if() #1052 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
LOAD D2 0.0021; UsrFunc[npc CreateNPCAt(int, int, int)] Params Start
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2; UsrFunc[npc CreateNPCAt(int, int, int)] Params End
CALLFUNC 2.0735; UsrFunc[npc CreateNPCAt(int, int, int)] Call
POP D4
STORE D2 0.0032
PUSHR D4
LOAD D2 0.0032; UsrFunc[void EZB_AddSummon(npc, npc)] Params Start
PUSHR D2
LOAD D2 0.0033
PUSHR D2; UsrFunc[void EZB_AddSummon(npc, npc)] Params End
CALLFUNC 3.0435; UsrFunc[void EZB_AddSummon(npc, npc)] Call
POP D4; if() #1052 Body End
GOTO 3740; if() #643 Body End
LOAD D2 0.0016; if() #644 Test AND if() #643 Else Start
COMPAREV D2 47
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3691 ==; Test 'if'
SETV D2 0; for() #264 setup AND if() #644 Body Start
STORE D2 0.0046
LOAD D2 0.0046; for() #264 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3740 ==; for() #264 TestFail?
PUSHR D4; for() #264 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0046
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3364; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #264 Body End
LOAD D2 0.0046; for() #264 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 3649; for() #264 End
GOTO 3740; if() #644 Body End
LOAD D2 0.0016; if() #1053 Test AND if() #644 Else Start
COMPAREV D2 48
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3740 ==; Test 'if'
SETV D2 0; for() #265 setup AND if() #1053 Body Start
STORE D2 0.0046
LOAD D2 0.0046; for() #265 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3740 ==; for() #265 TestFail?
PUSHR D4; for() #265 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0046
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
ADDV D2 45
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3364; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #265 Body End
LOAD D2 0.0046; for() #265 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 3698; for() #265 End
SETV D2 -8; if() #1053 Body End AND if() #644 Else End AND if() #643 Else End AND if() #642 Else End AND if() #641 Else End
STORE D2 0.0015; if() #1051 Body End
LOAD D2 0.0015; if() #1054 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3750 ==; Test 'if'
LOAD D2 0.0015; if() #1054 Body Start
ADDV D2 1
STORE D2 0.0015; if() #1054 Body End
LOAD D2 0.0002; if() #1055 Test
COMPAREV D2 0
GOTOCMP 3767 ==
LOAD D2 0.0030
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
GOTOCMP 3765 !=
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 200
COMPAREV D2 0
GOTOCMP 3767 ==
SETV D2 1
GOTO 3768
SETV D2 0
COMPAREV D2 0
GOTOCMP 20277 ==; Test 'if'
SETV D2 1; if() #1055 Body Start
PUSHR D2
LOAD D2 0.0027
SETR D0 D2
POP D2
WRITEPODARRAYVR 319 D2
STOREV 0 0.0001
LOAD D2 0.0030; InlineFunc[int Rand(int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0046
LOAD D2 0.0030
PUSHR D2
LOAD D2 0.0046
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001
LOAD D2 0.0017; if() #645 Test
ANDV D2 2048
COMPAREV D2 0
GOTOCMP 3816 ==; Test 'if'
LOAD D2 0.0030; if() #645 Body Start
PUSHR D2
LOAD D2 0.0003
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001
LOAD D2 0.0003
ADDV D2 1
STORE D2 0.0003
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0030
PUSHR D2
POP D0
READPODARRAYV D2 0
POP D3
MODR D3 D2
SETR D2 D3
STORE D2 0.0003
GOTO 3853; if() #645 Body End
LOAD D2 0.0004; if() #1057 Test AND if(true) #1056 [Opt:AlwaysOn] AND if() #645 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
GOTOCMP 3830 !=
LOAD D2 0.0030
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 2
GOTOCMP 3830 <=
SETV D2 1
GOTO 3831
SETV D2 0
COMPAREV D2 0
GOTOCMP 3853 ==; Test 'if'
LOAD D2 0.0046; if() #1057 Body Start
ADDV D2 1
STORE D2 0.0046
LOAD D2 0.0046
PUSHR D2
LOAD D2 0.0030
PUSHR D2
POP D0
READPODARRAYV D2 0
POP D3
MODR D3 D2
SETR D2 D3
STORE D2 0.0046
LOAD D2 0.0030
PUSHR D2
LOAD D2 0.0046
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001; if() #1057 Body End
LOAD D2 0.0001; if() #645 Else End
STORE D2 0.0004
LOAD D2 0.0001; if() #1058 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3953 ==; Test 'if'
PUSHR D4; if() #1058 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 2
STORE D2 0.0044
LOAD D2 0.0010
SETR GD10 D2
SETV D2 1; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4; while() #13 Test
LOAD D2 0.0042; UsrFunc[bool EZB_CanMoveAngle(int)] Params Start
PUSHR D2; UsrFunc[bool EZB_CanMoveAngle(int)] Params End
CALLFUNC 3.1306; UsrFunc[bool EZB_CanMoveAngle(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3953 ==; Test 'while'
LOAD D2 0.0044; InlineFunc[int Min(int, int)] Params Start AND while() #13 Body Start
ADDV D2 0.2000
PUSHVARGR D2
PUSHVARGV 5; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0044
PUSHR D4
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7426; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Trail(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Trail(ffc, npc, int)] Params End
CALLFUNC 3.6917; UsrFunc[void EZB_Trail(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #13 Body End
GOTO 3915; while() #13 End
LOAD D2 0.0001; if() #1058 Body End AND if() #1059 Test
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4005 ==; Test 'if'
PUSHR D4; if() #1059 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 3.1889; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3364; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1059 Body End
LOAD D2 0.0001; if() #1060 Test
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4083 ==; Test 'if'
PUSHR D4; if() #1060 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3364; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1060 Body End
LOAD D2 0.0001; if() #1061 Test
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4158 ==; Test 'if'
PUSHR D4; if() #1061 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 -1; for() #266 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #266 LoopTest
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 4148 ==; for() #266 TestFail?
PUSHR D4; for() #266 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 3.1889; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0046
MULTV D2 30
SETV D2 30
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 250; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3364; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #266 Body End
LOAD D2 0.0046; for() #266 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 4100; for() #266 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1061 Body End
LOAD D2 0.0001; if() #1062 Test
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4259 ==; Test 'if'
PUSHR D4; if() #1062 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 -1; for() #267 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #267 LoopTest
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 4249 ==; for() #267 TestFail?
PUSHR D4; for() #267 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0046
MULTV D2 30
SETV D2 30
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 250; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3364; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #267 Body End
LOAD D2 0.0046; for() #267 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 4183; for() #267 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1062 Body End
LOAD D2 0.0001; if() #1063 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4344 ==; Test 'if'
PUSHR D4; if() #1063 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 3.1889; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #268 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #268 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 4334 ==; for() #268 TestFail?
PUSHR D4; for() #268 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 350; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3364; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 8; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #268 Body End
LOAD D2 0.0046; for() #268 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 4290; for() #268 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1063 Body End
LOAD D2 0.0001; if() #1064 Test
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4456 ==; Test 'if'
PUSHR D4; if() #1064 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #269 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #269 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 4446 ==; for() #269 TestFail?
PUSHR D4; for() #269 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 350; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3364; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 8; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #269 Body End
LOAD D2 0.0046; for() #269 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 4402; for() #269 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1064 Body End
LOAD D2 0.0001; if() #1065 Test
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4543 ==; Test 'if'
PUSHR D4; if() #1065 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 3.1889; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #270 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #270 LoopTest
COMPAREV D2 24
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 4543 ==; for() #270 TestFail?
PUSHR D4; for() #270 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHR D4
LOAD D2 0.0046; UsrFunc[int Rand(int, int)] Params Start
SUBV2 -10 D2
PUSHR D2
LOAD D2 0.0046
ADDV D2 10
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 250; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3364; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 4; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #270 Body End
LOAD D2 0.0046; for() #270 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 4487; for() #270 End
LOAD D2 0.0001; if() #1065 Body End AND if() #1066 Test
COMPAREV D2 9
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4657 ==; Test 'if'
PUSHR D4; if() #1066 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #271 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #271 LoopTest
COMPAREV D2 24
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 4657 ==; for() #271 TestFail?
PUSHR D4; for() #271 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHR D4
LOAD D2 0.0046; UsrFunc[int Rand(int, int)] Params Start
SUBV2 -10 D2
PUSHR D2
LOAD D2 0.0046
ADDV D2 10
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 250; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3364; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 4; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #271 Body End
LOAD D2 0.0046; for() #271 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 4601; for() #271 End
LOAD D2 0.0001; if() #1066 Body End AND if() #1067 Test
COMPAREV D2 10
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4756 ==; Test 'if'
PUSHR D4; if() #1067 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
PUSHVARGV -1; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 1; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0044
PUSHR D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 3.1889; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0044
MULTV D2 75
SETV D2 75
PUSHR D2
LOAD D2 0.0044
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0042
SETV D2 0; for() #272 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #272 LoopTest
COMPAREV D2 7
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 4746 ==; for() #272 TestFail?
PUSHR D4; for() #272 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3364; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0044
MULTV D2 25
POP D3
ADDR D2 D3
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 4; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #272 Body End
LOAD D2 0.0046; for() #272 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 4694; for() #272 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 48; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1067 Body End
LOAD D2 0.0001; if() #1068 Test
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4881 ==; Test 'if'
PUSHR D4; if() #1068 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
PUSHVARGV -1; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 1; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0044
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0044
MULTV D2 75
SETV D2 75
PUSHR D2
LOAD D2 0.0044
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0042
SETV D2 0; for() #273 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #273 LoopTest
COMPAREV D2 7
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 4871 ==; for() #273 TestFail?
PUSHR D4; for() #273 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3364; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0044
MULTV D2 25
POP D3
ADDR D2 D3
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #273 Body End
LOAD D2 0.0046; for() #273 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 4819; for() #273 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 48; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1068 Body End
LOAD D2 0.0001; if() #1069 Test
COMPAREV D2 12
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5063 ==; Test 'if'
PUSHR D4; if() #1069 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
SUBV D2 45
STORE D2 0.0042
SETV D2 0; for() #274 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #274 LoopTest
COMPAREV D2 3
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5053 ==; for() #274 TestFail?
SETV D2 -4; for() #275 setup AND for() #274 Body Start
STORE D2 0.0045
LOAD D2 0.0045; for() #275 LoopTest
COMPAREV D2 4
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 4982 ==; for() #275 TestFail?
PUSHR D4; for() #275 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3364; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #275 Body End
LOAD D2 0.0045; for() #275 LoopIncrement
ADDV D2 2
STORE D2 0.0045
GOTO 4937; for() #275 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 16; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 -5; for() #276 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #276 LoopTest
COMPAREV D2 5
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 5039 ==; for() #276 TestFail?
PUSHR D4; for() #276 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3364; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #276 Body End
LOAD D2 0.0045; for() #276 LoopIncrement
ADDV D2 2
STORE D2 0.0045
GOTO 4994; for() #276 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #274 Body End
LOAD D2 0.0046; for() #274 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 4930; for() #274 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1069 Body End
LOAD D2 0.0001; if() #1070 Test
COMPAREV D2 13
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5183 ==; Test 'if'
PUSHR D4; if() #1070 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
PUSHVARGV -1; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 1; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0044
SETV D3 360; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0042
SETV D2 0; for() #277 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #277 LoopTest
COMPAREV D2 15
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5173 ==; for() #277 TestFail?
SETV D2 0; for() #278 setup AND for() #277 Body Start
STORE D2 0.0045
LOAD D2 0.0045; for() #278 LoopTest
COMPAREV D2 5
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5147 ==; for() #278 TestFail?
PUSHR D4; for() #278 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 72
SETV D2 72
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3364; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #278 Body End
LOAD D2 0.0045; for() #278 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 5102; for() #278 End
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0044
MULTV D2 4
SETV D2 4
PUSHR D2
LOAD D2 0.0044
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 4; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #277 Body End
LOAD D2 0.0046; for() #277 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 5095; for() #277 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1070 Body End
LOAD D2 0.0001; if() #1071 Test
COMPAREV D2 14
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5287 ==; Test 'if'
PUSHR D4; if() #1071 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #279 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #279 LoopTest
COMPAREV D2 3
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5277 ==; for() #279 TestFail?
SETV D3 360; InlineFunc[int Rand(int)] Params AND for() #279 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0042
SETV D2 0; for() #280 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #280 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5263 ==; for() #280 TestFail?
PUSHR D4; for() #280 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 36
SETV D2 36
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 180; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3364; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #280 Body End
LOAD D2 0.0045; for() #280 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 5218; for() #280 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 45; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #279 Body End
LOAD D2 0.0046; for() #279 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 5208; for() #279 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1071 Body End
LOAD D2 0.0001; if() #1072 Test
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5432 ==; Test 'if'
PUSHR D4; if() #1072 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #281 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #281 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5381 ==; for() #281 TestFail?
PUSHR D4; for() #281 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 8
LOAD D2 0.0042
PUSHR D2
PUSHV 0
LOAD D2 0.0028
PUSHR D2
PUSHV -1
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 30; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2016; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #281 Body End
LOAD D2 0.0046; for() #281 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 5337; for() #281 End
SETV D2 37; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #282 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #282 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5432 ==; for() #282 TestFail?
PUSHR D4; for() #282 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 8
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
PUSHV -1
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 20; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2016; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #282 Body End
LOAD D2 0.0046; for() #282 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 5385; for() #282 End
LOAD D2 0.0001; if() #1072 Body End AND if() #1073 Test
COMPAREV D2 16
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5579 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1073 Body Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #283 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #283 LoopTest
COMPAREV D2 60
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5526 ==; for() #283 TestFail?
PUSHR D4; for() #283 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 40
LOAD D2 0.0042
PUSHR D2
PUSHV 0
LOAD D2 0.0028
PUSHR D2
PUSHV -1
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 60; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2016; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #283 Body End
LOAD D2 0.0046; for() #283 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 5482; for() #283 End
SETV D2 37; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #284 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #284 LoopTest
COMPAREV D2 40
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5579 ==; for() #284 TestFail?
PUSHR D4; for() #284 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 40
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCWDP
MULTV D2 2
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV -1
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 40; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2016; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #284 Body End
LOAD D2 0.0046; for() #284 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 5530; for() #284 End
LOAD D2 0.0001; if() #1073 Body End AND if() #1074 Test
COMPAREV D2 17
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5896 ==; Test 'if'
PUSHR D4; if() #1074 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
LOAD D2 0.0012
MULTV D2 8
PUSHR D2
LOAD D2 0.0011
MULTV D2 8
POP D3
ADDR D2 D3
DIVV D2 2
STORE D2 0.0044
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #285 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #285 LoopTest
COMPAREV D2 40
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5761 ==; for() #285 TestFail?
LOAD D2 0.0028; InlineFunc[int Choose(int)] Params Start AND for() #285 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0043
SETV D2 -2; for() #286 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #286 LoopTest
COMPAREV D2 2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 5748 ==; for() #286 TestFail?
PUSHR D4; for() #286 Body Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0044; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 30
SETV D2 30
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7449; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0040
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0044; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 30
SETV D2 30
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7459; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0039
PUSHR D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 6
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 30
SETV D2 30
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 0
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 40; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2016; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #286 Body End
LOAD D2 0.0045; for() #286 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 5657; for() #286 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #285 Body End
LOAD D2 0.0046; for() #285 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 5638; for() #285 End
SETV D2 37; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #287 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #287 LoopTest
COMPAREV D2 25
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5896 ==; for() #287 TestFail?
LOAD D2 0.0028; InlineFunc[int Choose(int)] Params Start AND for() #287 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0043
SETV D2 -2; for() #288 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #288 LoopTest
COMPAREV D2 2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 5883 ==; for() #288 TestFail?
PUSHR D4; for() #288 Body Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0044; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 30
SETV D2 30
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7449; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0040
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0044; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 30
SETV D2 30
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7459; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0039
PUSHR D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 6
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 30
SETV D2 30
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 25; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2016; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #288 Body End
LOAD D2 0.0045; for() #288 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 5789; for() #288 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #287 Body End
LOAD D2 0.0046; for() #287 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 5765; for() #287 End
LOAD D2 0.0001; if() #1074 Body End AND if() #1075 Test
COMPAREV D2 18
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6450 ==; Test 'if'
PUSHR D4; if() #1075 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
PUSHVARGV -1; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 1; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0044
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
ADDV D2 45
STORE D2 0.0042
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #289 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #289 LoopTest
COMPAREV D2 40
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6073 ==; for() #289 TestFail?
LOAD D2 0.0028; InlineFunc[int Choose(int)] Params Start AND for() #289 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0043
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1076 Test
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 128
SETV D2 88; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 8
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 6011 ==; Test 'if'
PUSHARGSR D4 0.0003; if() #1076 Body Start AND UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 128
PUSHV 88; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 0.8000
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7426; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4; if() #1076 Body End
SETV D2 0; for() #290 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #290 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6060 ==; for() #290 TestFail?
PUSHR D4; for() #290 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 6
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 0
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 40; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2016; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #290 Body End
LOAD D2 0.0045; for() #290 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 6013; for() #290 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #289 Body End
LOAD D2 0.0046; for() #289 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 5951; for() #289 End
SETV D2 37; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #291 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #291 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6164 ==; for() #291 TestFail?
LOAD D2 0.0028; InlineFunc[int Choose(int)] Params Start AND for() #291 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0043
SETV D2 0; for() #292 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #292 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6151 ==; for() #292 TestFail?
PUSHR D4; for() #292 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 6
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 30; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2016; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #292 Body End
LOAD D2 0.0045; for() #292 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 6101; for() #292 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #291 Body End
LOAD D2 0.0046; for() #291 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 6077; for() #291 End
SETV D2 0; for() #293 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #293 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6259 ==; for() #293 TestFail?
LOAD D2 0.0028; InlineFunc[int Choose(int)] Params Start AND for() #293 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0043
SETV D2 0; for() #294 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #294 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6240 ==; for() #294 TestFail?
PUSHR D4; for() #294 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 6
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 30; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2016; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #294 Body End
LOAD D2 0.0045; for() #294 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 6190; for() #294 End
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0044
POP D3
ADDR D2 D3
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #293 Body End
LOAD D2 0.0046; for() #293 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 6166; for() #293 End
SETV D2 0; for() #295 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #295 LoopTest
COMPAREV D2 120
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6355 ==; for() #295 TestFail?
LOAD D2 0.0028; InlineFunc[int Choose(int)] Params Start AND for() #295 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0043
SETV D2 0; for() #296 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #296 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6335 ==; for() #296 TestFail?
PUSHR D4; for() #296 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 6
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 120; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2016; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #296 Body End
LOAD D2 0.0045; for() #296 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 6285; for() #296 End
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0044
MULTV D2 1.2500
POP D3
ADDR D2 D3
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #295 Body End
LOAD D2 0.0046; for() #295 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 6261; for() #295 End
SETV D2 0; for() #297 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #297 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6450 ==; for() #297 TestFail?
LOAD D2 0.0028; InlineFunc[int Choose(int)] Params Start AND for() #297 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0043
SETV D2 0; for() #298 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #298 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6431 ==; for() #298 TestFail?
PUSHR D4; for() #298 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 6
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 30; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2016; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #298 Body End
LOAD D2 0.0045; for() #298 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 6381; for() #298 End
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0044
POP D3
ADDR D2 D3
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #297 Body End
LOAD D2 0.0046; for() #297 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 6357; for() #297 End
LOAD D2 0.0001; if() #1075 Body End AND if() #1077 Test
COMPAREV D2 19
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6518 ==; Test 'if'
SETR D2 NPCCOUNT; InlineFunc[int screendata::NumNPCs()] Body AND if() #1078 Test AND if() #1077 Body Start
COMPAREV D2 40
GOTOCMP 6467 >=
PUSHR D4
LOAD D2 0.0033; UsrFunc[int EZB_NumSummons(npc)] Params Start
PUSHR D2; UsrFunc[int EZB_NumSummons(npc)] Params End
CALLFUNC 3.6101; UsrFunc[int EZB_NumSummons(npc)] Call
POP D4
COMPAREV D2 8
GOTOCMP 6467 >=
SETV D2 1
GOTO 6468
SETV D2 0
COMPAREV D2 0
GOTOCMP 6518 ==; Test 'if'
PUSHR D4; if() #1078 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 56; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
LOAD D2 0.0021; UsrFunc[npc CreateNPCAt(int, int, int)] Params Start
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2; UsrFunc[npc CreateNPCAt(int, int, int)] Params End
CALLFUNC 2.0735; UsrFunc[npc CreateNPCAt(int, int, int)] Call
POP D4
STORE D2 0.0032
PUSHR D4
LOAD D2 0.0032; UsrFunc[void EZB_AddSummon(npc, npc)] Params Start
PUSHR D2
LOAD D2 0.0033
PUSHR D2; UsrFunc[void EZB_AddSummon(npc, npc)] Params End
CALLFUNC 3.0435; UsrFunc[void EZB_AddSummon(npc, npc)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1078 Body End
LOAD D2 0.0001; if() #1077 Body End AND if() #1079 Test
COMPAREV D2 20
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6614 ==; Test 'if'
SETR D2 NPCCOUNT; InlineFunc[int screendata::NumNPCs()] Body AND if() #1080 Test AND if() #1079 Body Start
COMPAREV D2 40
GOTOCMP 6535 >=
PUSHR D4
LOAD D2 0.0033; UsrFunc[int EZB_NumSummons(npc)] Params Start
PUSHR D2; UsrFunc[int EZB_NumSummons(npc)] Params End
CALLFUNC 3.6101; UsrFunc[int EZB_NumSummons(npc)] Call
POP D4
COMPAREV D2 8
GOTOCMP 6535 >=
SETV D2 1
GOTO 6536
SETV D2 0
COMPAREV D2 0
GOTOCMP 6614 ==; Test 'if'
PUSHR D4; if() #1080 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 56; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #299 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #299 LoopTest
COMPAREV D2 2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6604 ==; for() #299 TestFail?
PUSHR D4; for() #299 Body Start
LOAD D2 0.0021; UsrFunc[npc CreateNPCAt(int, int, int)] Params Start
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
PUSHV -4; UsrFunc[int Rand(int, int)] Params Start
PUSHV 4; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
PUSHV -4; UsrFunc[int Rand(int, int)] Params Start
PUSHV 4; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[npc CreateNPCAt(int, int, int)] Params End
CALLFUNC 2.0735; UsrFunc[npc CreateNPCAt(int, int, int)] Call
POP D4
STORE D2 0.0032
PUSHR D4
LOAD D2 0.0032; UsrFunc[void EZB_AddSummon(npc, npc)] Params Start
PUSHR D2
LOAD D2 0.0033
PUSHR D2; UsrFunc[void EZB_AddSummon(npc, npc)] Params End
CALLFUNC 3.0435; UsrFunc[void EZB_AddSummon(npc, npc)] Call
POP D4; for() #299 Body End
LOAD D2 0.0046; for() #299 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 6552; for() #299 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1080 Body End
LOAD D2 0.0001; if() #1079 Body End AND if() #1081 Test
COMPAREV D2 21
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6710 ==; Test 'if'
SETR D2 NPCCOUNT; InlineFunc[int screendata::NumNPCs()] Body AND if() #1082 Test AND if() #1081 Body Start
COMPAREV D2 40
GOTOCMP 6631 >=
PUSHR D4
LOAD D2 0.0033; UsrFunc[int EZB_NumSummons(npc)] Params Start
PUSHR D2; UsrFunc[int EZB_NumSummons(npc)] Params End
CALLFUNC 3.6101; UsrFunc[int EZB_NumSummons(npc)] Call
POP D4
COMPAREV D2 8
GOTOCMP 6631 >=
SETV D2 1
GOTO 6632
SETV D2 0
COMPAREV D2 0
GOTOCMP 6710 ==; Test 'if'
PUSHR D4; if() #1082 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 56; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #300 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #300 LoopTest
COMPAREV D2 3
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6700 ==; for() #300 TestFail?
PUSHR D4; for() #300 Body Start
LOAD D2 0.0021; UsrFunc[npc CreateNPCAt(int, int, int)] Params Start
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
PUSHV -4; UsrFunc[int Rand(int, int)] Params Start
PUSHV 4; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
PUSHV -4; UsrFunc[int Rand(int, int)] Params Start
PUSHV 4; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[npc CreateNPCAt(int, int, int)] Params End
CALLFUNC 2.0735; UsrFunc[npc CreateNPCAt(int, int, int)] Call
POP D4
STORE D2 0.0032
PUSHR D4
LOAD D2 0.0032; UsrFunc[void EZB_AddSummon(npc, npc)] Params Start
PUSHR D2
LOAD D2 0.0033
PUSHR D2; UsrFunc[void EZB_AddSummon(npc, npc)] Params End
CALLFUNC 3.0435; UsrFunc[void EZB_AddSummon(npc, npc)] Call
POP D4; for() #300 Body End
LOAD D2 0.0046; for() #300 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 6648; for() #300 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1082 Body End
LOAD D2 0.0001; if() #1081 Body End AND if() #1083 Test
COMPAREV D2 22
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6797 ==; Test 'if'
PUSHR D4; if() #1083 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 100; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3364; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
STORE D2 0
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 3
PUSHV 0.0349
PUSHV 120; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9567; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1083 Body End
LOAD D2 0.0001; if() #1084 Test
COMPAREV D2 23
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6895 ==; Test 'if'
PUSHR D4; if() #1084 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #301 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #301 LoopTest
COMPAREV D2 5
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6895 ==; for() #301 TestFail?
PUSHR D4; for() #301 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 200; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3364; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 25; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #301 Body End
LOAD D2 0.0046; for() #301 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 6822; for() #301 End
LOAD D2 0.0001; if() #1084 Body End AND if() #1085 Test
COMPAREV D2 24
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6985 ==; Test 'if'
PUSHR D4; if() #1085 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #302 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #302 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6985 ==; for() #302 TestFail?
PUSHR D4; for() #302 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 200; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3364; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 6; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #302 Body End
LOAD D2 0.0046; for() #302 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 6920; for() #302 End
LOAD D2 0.0001; if() #1085 Body End AND if() #1086 Test
COMPAREV D2 25
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7070 ==; Test 'if'
PUSHR D4; if() #1086 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #303 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #303 LoopTest
COMPAREV D2 12
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7060 ==; for() #303 TestFail?
PUSHR D4; for() #303 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0046
MULTV D2 30
SETV D2 30
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
PUSHR D2
PUSHV 200; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3364; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
STORE D2 0
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 4
PUSHV 1
PUSHV 30; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9567; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
POP D4; for() #303 Body End
LOAD D2 0.0046; for() #303 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 7010; for() #303 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1086 Body End
LOAD D2 0.0001; if() #1087 Test
COMPAREV D2 26
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7138 ==; Test 'if'
PUSHR D4; if() #1087 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #304 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #304 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7128 ==; for() #304 TestFail?
PUSHR D4; for() #304 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0046
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3364; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #304 Body End
LOAD D2 0.0046; for() #304 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 7087; for() #304 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1087 Body End
LOAD D2 0.0001; if() #1088 Test
COMPAREV D2 27
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7207 ==; Test 'if'
PUSHR D4; if() #1088 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #305 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #305 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7197 ==; for() #305 TestFail?
PUSHR D4; for() #305 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0046
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
ADDV D2 45
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3364; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #305 Body End
LOAD D2 0.0046; for() #305 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 7155; for() #305 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1088 Body End
LOAD D2 0.0001; if() #1089 Test
COMPAREV D2 28
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7275 ==; Test 'if'
PUSHR D4; if() #1089 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #306 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #306 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7265 ==; for() #306 TestFail?
PUSHR D4; for() #306 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0046
MULTV D2 45
SETV D2 45
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3364; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #306 Body End
LOAD D2 0.0046; for() #306 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 7224; for() #306 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1089 Body End
LOAD D2 0.0001; if() #1090 Test
COMPAREV D2 29
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7376 ==; Test 'if'
PUSHR D4; if() #1090 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0
STORE D2 0.0042
PUSHR D4; if() #1091 Test
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
COMPAREV D2 128
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7301 ==; Test 'if'
SETV D2 180; if() #1091 Body Start
STORE D2 0.0042; if() #1091 Body End
SETV D2 0; for() #307 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #307 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7366 ==; for() #307 TestFail?
LOAD D2 0.0042; if() #646 Test AND for() #307 Body Start
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7333 ==; Test 'if'
PUSHR D4; if() #646 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0
PUSHR D4
PUSHV 8; UsrFunc[int Rand(int, int)] Params Start
PUSHV 152; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 250; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3364; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
GOTO 7352; if() #646 Body End
PUSHR D4; if() #646 Else Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 240
PUSHR D4
PUSHV 8; UsrFunc[int Rand(int, int)] Params Start
PUSHV 152; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 250; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3364; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; if() #646 Else End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 8; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #307 Body End
LOAD D2 0.0046; for() #307 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 7303; for() #307 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1090 Body End
LOAD D2 0.0001; if() #1092 Test
COMPAREV D2 30
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7555 ==; Test 'if'
PUSHR D4; if() #1092 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHV 8; UsrFunc[int Rand(int, int)] Params Start
PUSHV 152; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0.0044
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #308 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #308 LoopTest
COMPAREV D2 35
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7433 ==; for() #308 TestFail?
PUSHR D4; for() #308 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHV -32
LOAD D2 0.0044
PUSHR D2
PUSHV 8
PUSHARGSV 0 0.0002
LOAD D2 0.0028
PUSHR D2
PUSHV -1
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 35; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2016; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #308 Body End
LOAD D2 0.0046; for() #308 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 7400; for() #308 End
SETV D2 0; for() #309 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #309 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7555 ==; for() #309 TestFail?
SETV D2 37; InlineFunc[void Game::PlaySound(int)] Params AND for() #309 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
LOAD D2 0.0044
STORE D2 0.0039
PUSHR D4
PUSHV 8; UsrFunc[int Rand(int, int)] Params Start
PUSHV 152; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0.0044
LOAD D2 0.0044; while() #14 Test
PUSHR D2
LOAD D2 0.0039
POP D3
SUBR D3 D2
SETR D2 D3
COMPAREV D2 -40
GOTOCMP 7468 <=
LOAD D2 0.0044
PUSHR D2
LOAD D2 0.0039
POP D3
SUBR D3 D2
SETR D2 D3
COMPAREV D2 40
GOTOCMP 7468 >=
SETV D2 1
GOTO 7469
SETV D2 0
COMPAREV D2 0
GOTOCMP 7478 ==; Test 'while'
PUSHR D4; while() #14 Body Start
PUSHV 8; UsrFunc[int Rand(int, int)] Params Start
PUSHV 152; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0.0044; while() #14 Body End
GOTO 7450; while() #14 End
SETV D2 0; for() #310 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #310 LoopTest
COMPAREV D2 35
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7551 ==; for() #310 TestFail?
LOAD D2 0.0046; if() #1093 Test AND for() #310 Body Start
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7510 ==; Test 'if'
PUSHR D4; if() #1093 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHV -32
LOAD D2 0.0039
PUSHR D2
PUSHV 8
PUSHV 0
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
PUSHV -1
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 20; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2016; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; if() #1093 Body End
LOAD D2 0.0045; if() #1094 Test
COMPAREV D2 7
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7538 ==; Test 'if'
LOAD D2 0.0046; if() #1095 Test AND if() #1094 Body Start
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7522 ==; Test 'if'
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params AND if() #1095 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body AND if() #1095 Body End
PUSHR D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHV -32
LOAD D2 0.0044
PUSHR D2
PUSHV 8
PUSHARGSV 0 0.0002
LOAD D2 0.0028
PUSHR D2
PUSHV -1
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 7; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2016; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; if() #1094 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #310 Body End
LOAD D2 0.0046; for() #310 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 7480; for() #310 End
LOAD D2 0.0045; for() #309 Body End AND for() #309 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 7435; for() #309 End
LOAD D2 0.0001; if() #1092 Body End AND if() #1096 Test
COMPAREV D2 31
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7812 ==; Test 'if'
PUSHR D4; if() #1096 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0
STORE D2 0.0044
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params AND while(true) #15 Body [Opt:AlwaysOn] Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #311 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #311 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7640 ==; for() #311 TestFail?
SETV D2 -1; for() #312 setup AND for() #311 Body Start
STORE D2 0.0045
LOAD D2 0.0045; for() #312 LoopTest
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 7627 ==; for() #312 TestFail?
PUSHR D4; for() #312 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0044
MULTV D2 24
SETV D2 24
PUSHR D2
LOAD D2 0.0044
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV -32
PUSHV 12
PUSHV 90
PUSHV 0
LOAD D2 0.0028
PUSHR D2
PUSHV -1
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 30; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2016; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #312 Body End
LOAD D2 0.0045; for() #312 LoopIncrement
ADDV D2 2
STORE D2 0.0045
GOTO 7583; for() #312 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #311 Body End
LOAD D2 0.0046; for() #311 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 7576; for() #311 End
SETV D2 37; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #313 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #313 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7711 ==; for() #313 TestFail?
SETV D2 -1; for() #314 setup AND for() #313 Body Start
STORE D2 0.0045
LOAD D2 0.0045; for() #314 LoopTest
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 7698 ==; for() #314 TestFail?
PUSHR D4; for() #314 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0044
MULTV D2 24
SETV D2 24
PUSHR D2
LOAD D2 0.0044
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV -32
PUSHV 12
PUSHV 90
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
PUSHV -1
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 20; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2016; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #314 Body End
LOAD D2 0.0045; for() #314 LoopIncrement
ADDV D2 2
STORE D2 0.0045
GOTO 7651; for() #314 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #313 Body End
LOAD D2 0.0046; for() #313 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 7644; for() #313 End
LOAD D2 0.0044
ADDV D2 1
STORE D2 0.0044
PUSHR D4; if() #1097 Test
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0044
MULTV D2 24
SETV D2 24
PUSHR D2
LOAD D2 0.0044
POP D3
MULTR D2 D3
MULTV D2 -1
POP D3
ADDR D2 D3
COMPAREV D2 16
GOTOCMP 7749 >=
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0044
MULTV D2 24
SETV D2 24
PUSHR D2
LOAD D2 0.0044
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
COMPAREV D2 224
GOTOCMP 7754 >
LOAD D2 0.0044
COMPAREV D2 10
GOTOCMP 7754 >
SETV D2 0
GOTO 7755
SETV D2 1
COMPAREV D2 0
GOTOCMP 7812 !=; Test 'if' AND break 1; AND if() #1097 Body
LOAD D2 0.0044; if() #1098 Test
COMPAREV D2 2
GOTOCMP 7807 <=
SETR D2 LINKX
ADDV D2 8
SUBV D2 16
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0044
MULTV D2 24
SETV D2 24
PUSHR D2
LOAD D2 0.0044
POP D3
MULTR D2 D3
MULTV D2 -1
POP D3
ADDR D2 D3
POP D3
COMPARER D3 D2
GOTOCMP 7807 <=
SETR D2 LINKX
ADDV D2 8
ADDV D2 16
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0044
MULTV D2 24
SETV D2 24
PUSHR D2
LOAD D2 0.0044
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
POP D3
COMPARER D3 D2
GOTOCMP 7807 >=
SETV D2 1
GOTO 7808
SETV D2 0
COMPAREV D2 0
GOTOCMP 7572 ==; Test 'if'
GOTO 7812; break 1; AND if() #1098 Body
GOTO 7572; while(true) #15 Body [Opt:AlwaysOn] End AND while() #15 End
LOAD D2 0.0001; if() #1096 Body End AND if() #1099 Test
COMPAREV D2 32
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7914 ==; Test 'if'
PUSHR D4; if() #1099 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #315 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #315 LoopTest
COMPAREV D2 2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7904 ==; for() #315 TestFail?
PUSHR D4; for() #315 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
SUBV D2 20
PUSHR D2
LOAD D2 0.0046
MULTV D2 40
SETV D2 40
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 250; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3364; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #315 Body End
LOAD D2 0.0046; for() #315 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 7837; for() #315 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1099 Body End
LOAD D2 0.0001; if() #1100 Test
COMPAREV D2 33
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8015 ==; Test 'if'
PUSHR D4; if() #1100 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 1
STORE D2 0.0044
LOAD D2 0.0010
SETR GD10 D2
SETV D2 1; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #316 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #316 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8015 ==; for() #316 TestFail?
LOAD D2 0.0044; InlineFunc[int Min(int, int)] Params Start AND for() #316 Body Start
ADDV D2 0.5000
PUSHVARGR D2
PUSHVARGV 5; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0044
PUSHR D4
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7426; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Trail(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Trail(ffc, npc, int)] Params End
CALLFUNC 3.6917; UsrFunc[void EZB_Trail(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #316 Body End
LOAD D2 0.0046; for() #316 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 7976; for() #316 End
LOAD D2 0.0001; if() #1100 Body End AND if() #1101 Test
COMPAREV D2 34
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8237 ==; Test 'if'
PUSHR D4; if() #1101 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 2
STORE D2 0.0044
SETV D2 1; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0
STORE D2 0.0046
LOAD D2 0.0010
SETR GD10 D2
PUSHR D4; while() #16 Test
LOAD D2 0.0042; UsrFunc[bool EZB_CanMoveAngle(int)] Params Start
PUSHR D2; UsrFunc[bool EZB_CanMoveAngle(int)] Params End
CALLFUNC 3.1306; UsrFunc[bool EZB_CanMoveAngle(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 8237 ==; Test 'while'
LOAD D2 0.0046; while() #16 Body Start
ADDV D2 1
STORE D2 0.0046
LOAD D2 0.0044; InlineFunc[int Min(int, int)] Params Start
ADDV D2 0.2000
PUSHVARGR D2
PUSHVARGV 5; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0044
PUSHR D4
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7426; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4
LOAD D2 0.0046; if() #1102 Test
MODV D2 4
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8219 ==; Test 'if'
LOAD D2 0.0034; if() #647 Test AND if() #1102 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCWEAPON
COMPAREV D2 140
GOTOCMP 8121 ==
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCWEAPON
COMPAREV D2 139
GOTOCMP 8121 ==
SETV D2 0
GOTO 8122
SETV D2 1
COMPAREV D2 0
GOTOCMP 8172 ==; Test 'if'
PUSHR D4; if() #647 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 0; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3364; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
GOTO 8219; if() #647 Body End
PUSHR D4; if() #647 Else Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3364; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; if() #647 Else End
PUSHR D4; if() #1102 Body End
LOAD D2 0.0047; UsrFunc[void EZB_Trail(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Trail(ffc, npc, int)] Params End
CALLFUNC 3.6917; UsrFunc[void EZB_Trail(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #16 Body End
GOTO 8077; while() #16 End
LOAD D2 0.0001; if() #1101 Body End AND if() #1103 Test
COMPAREV D2 35
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8495 ==; Test 'if'
PUSHR D4; if() #1103 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 2
STORE D2 0.0044
SETV D2 1; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0
STORE D2 0.0046
LOAD D2 0.0010
SETR GD10 D2
SETV D2 0; for() #317 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #317 LoopTest
COMPAREV D2 40
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8340 ==; for() #317 TestFail?
LOAD D2 0.0044; InlineFunc[int Min(int, int)] Params Start AND for() #317 Body Start
ADDV D2 0.1000
PUSHVARGR D2
PUSHVARGV 4; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0044
PUSHR D4
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7426; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Trail(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Trail(ffc, npc, int)] Params End
CALLFUNC 3.6917; UsrFunc[void EZB_Trail(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #317 Body End
LOAD D2 0.0046; for() #317 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 8301; for() #317 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4
SETV D2 2
STORE D2 0.0044
SETV D2 1; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0
STORE D2 0.0046
LOAD D2 0.0010
SETR GD10 D2
SETV D2 0; for() #318 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #318 LoopTest
COMPAREV D2 40
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8495 ==; for() #318 TestFail?
PUSHARGSR D4 0.0002; for() #318 Body Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0045
LOAD D2 0.0046; if() #1104 Test
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8461 ==; Test 'if'
PUSHR D4; InlineFunc[int Abs(int)] Params Start AND if() #1105 Test AND if() #1104 Body Start
LOAD D2 0.0042; UsrFunc[int EZB_AngDiff(int, int)] Params Start
PUSHR D2
LOAD D2 0.0045
PUSHR D2; UsrFunc[int EZB_AngDiff(int, int)] Params End
CALLFUNC 3.0498; UsrFunc[int EZB_AngDiff(int, int)] Call
POP D4; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 1
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 8461 ==; Test 'if'
LOAD D2 0.0042; InlineFunc[int WrapDegrees(int)] Params Start AND if() #1105 Body Start
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
LOAD D2 0.0042; UsrFunc[int EZB_AngDiff(int, int)] Params Start
PUSHR D2
LOAD D2 0.0045
PUSHR D2; UsrFunc[int EZB_AngDiff(int, int)] Params End
CALLFUNC 3.0498; UsrFunc[int EZB_AngDiff(int, int)] Call
POP D4
PUSHR D2; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
POP D3
ADDR D2 D3; InlineFunc[int WrapDegrees(int)] Params End
WRAPDEGREES D2; InlineFunc[int WrapDegrees(int)] Body
STORE D2 0.0042; if() #1105 Body End
LOAD D2 0.0044; if() #1104 Body End AND InlineFunc[int Min(int, int)] Params Start
ADDV D2 0.1000
PUSHVARGR D2
PUSHVARGV 4; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0044
PUSHR D4
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7426; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Trail(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Trail(ffc, npc, int)] Params End
CALLFUNC 3.6917; UsrFunc[void EZB_Trail(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #318 Body End
LOAD D2 0.0046; for() #318 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 8400; for() #318 End
LOAD D2 0.0001; if() #1103 Body End AND if() #1106 Test
COMPAREV D2 36
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8644 ==; Test 'if'
PUSHR D4; if() #1106 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 3.3205; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
POP D4
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 2.6000
SETR GD5 D2
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0041
SETV D2 2
STORE D2 0.0044
LOAD D2 0.0041; if() #648 Test
COMPAREV D2 32
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8590 ==; Test 'if'
SETV D2 0.5000; if() #648 Body Start
STORE D2 0.0044
GOTO 8616; if() #648 Body End
LOAD D2 0.0041; if() #649 Test AND if() #648 Else Start
COMPAREV D2 64
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8598 ==; Test 'if'
SETV D2 1; if() #649 Body Start
STORE D2 0.0044
GOTO 8616; if() #649 Body End
LOAD D2 0.0041; if() #650 Test AND if() #649 Else Start
COMPAREV D2 96
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8606 ==; Test 'if'
SETV D2 2; if() #650 Body Start
STORE D2 0.0044
GOTO 8616; if() #650 Body End
LOAD D2 0.0041; if() #651 Test AND if() #650 Else Start
COMPAREV D2 128
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8614 ==; Test 'if'
SETV D2 3; if() #651 Body Start
STORE D2 0.0044
GOTO 8616; if() #651 Body End
SETV D2 4; if() #651 Else Start
STORE D2 0.0044; if() #651 Else End
SETR D2 GD5; if() #650 Else End AND if() #649 Else End AND if() #648 Else End AND while() #17 Test
COMPAREV D2 0
GOTOCMP 8624 >
SETR D2 GD3
COMPAREV D2 0
GOTOCMP 8624 >
SETV D2 0
GOTO 8625
SETV D2 1
COMPAREV D2 0
GOTOCMP 8644 ==; Test 'while'
PUSHR D4; while() #17 Body Start
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7426; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #17 Body End
GOTO 8616; while() #17 End
LOAD D2 0.0001; if() #1106 Body End AND if() #1107 Test
COMPAREV D2 37
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8862 ==; Test 'if'
PUSHR D4; if() #1107 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 3.3205; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
POP D4
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 2.6000
SETR GD5 D2
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0041
SETV D2 2
STORE D2 0.0044
LOAD D2 0.0041; if() #652 Test
COMPAREV D2 32
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8739 ==; Test 'if'
SETV D2 0.5000; if() #652 Body Start
STORE D2 0.0044
GOTO 8765; if() #652 Body End
LOAD D2 0.0041; if() #653 Test AND if() #652 Else Start
COMPAREV D2 64
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8747 ==; Test 'if'
SETV D2 1; if() #653 Body Start
STORE D2 0.0044
GOTO 8765; if() #653 Body End
LOAD D2 0.0041; if() #654 Test AND if() #653 Else Start
COMPAREV D2 96
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8755 ==; Test 'if'
SETV D2 2; if() #654 Body Start
STORE D2 0.0044
GOTO 8765; if() #654 Body End
LOAD D2 0.0041; if() #655 Test AND if() #654 Else Start
COMPAREV D2 128
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8763 ==; Test 'if'
SETV D2 3; if() #655 Body Start
STORE D2 0.0044
GOTO 8765; if() #655 Body End
SETV D2 4; if() #655 Else Start
STORE D2 0.0044; if() #655 Else End
LOAD D2 0.0010; if() #654 Else End AND if() #653 Else End AND if() #652 Else End
SETR GD10 D2
SETR D2 GD5; while() #18 Test
COMPAREV D2 0
GOTOCMP 8775 >
SETR D2 GD3
COMPAREV D2 0
GOTOCMP 8775 >
SETV D2 0
GOTO 8776
SETV D2 1
COMPAREV D2 0
GOTOCMP 8795 ==; Test 'while'
PUSHR D4; while() #18 Body Start
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7426; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #18 Body End
GOTO 8767; while() #18 End
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 3.3205; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
POP D4
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 2.6000
SETR GD5 D2
SETR D2 GD5; while() #19 Test
COMPAREV D2 0
GOTOCMP 8841 >
SETR D2 GD3
COMPAREV D2 0
GOTOCMP 8841 >
SETV D2 0
GOTO 8842
SETV D2 1
COMPAREV D2 0
GOTOCMP 8862 ==; Test 'while'
PUSHR D4; while() #19 Body Start
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0044
DIVV D2 2
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7426; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #19 Body End
GOTO 8833; while() #19 End
LOAD D2 0.0001; if() #1107 Body End AND if() #1108 Test
COMPAREV D2 38
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 9070 ==; Test 'if'
PUSHR D4; if() #1108 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 3.2000
SETR GD5 D2
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0041
SETV D2 2
STORE D2 0.0044
LOAD D2 0.0041; if() #656 Test
COMPAREV D2 32
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8954 ==; Test 'if'
SETV D2 0.5000; if() #656 Body Start
STORE D2 0.0044
GOTO 8980; if() #656 Body End
LOAD D2 0.0041; if() #657 Test AND if() #656 Else Start
COMPAREV D2 64
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8962 ==; Test 'if'
SETV D2 1; if() #657 Body Start
STORE D2 0.0044
GOTO 8980; if() #657 Body End
LOAD D2 0.0041; if() #658 Test AND if() #657 Else Start
COMPAREV D2 96
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8970 ==; Test 'if'
SETV D2 2; if() #658 Body Start
STORE D2 0.0044
GOTO 8980; if() #658 Body End
LOAD D2 0.0041; if() #659 Test AND if() #658 Else Start
COMPAREV D2 128
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8978 ==; Test 'if'
SETV D2 3; if() #659 Body Start
STORE D2 0.0044
GOTO 8980; if() #659 Body End
SETV D2 4; if() #659 Else Start
STORE D2 0.0044; if() #659 Else End
LOAD D2 0.0010; if() #658 Else End AND if() #657 Else End AND if() #656 Else End
SETR GD10 D2
SETR D2 GD5; while() #20 Test
COMPAREV D2 0
GOTOCMP 8990 >
SETR D2 GD3
COMPAREV D2 0
GOTOCMP 8990 >
SETV D2 0
GOTO 8991
SETV D2 1
COMPAREV D2 0
GOTOCMP 9010 ==; Test 'while'
PUSHR D4; while() #20 Body Start
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7426; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #20 Body End
GOTO 8982; while() #20 End
SETV D2 2; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #319 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #319 LoopTest
COMPAREV D2 96
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9070 ==; for() #319 TestFail?
PUSHR D4; for() #319 Body Start
PUSHV 2; UsrFunc[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0046
PUSHR D2
PUSHV 64
PUSHV 12
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 3
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 4
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 5
PUSHR D2; UsrFunc[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.6447; UsrFunc[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #319 Body End
LOAD D2 0.0046; for() #319 LoopIncrement
ADDV D2 3
STORE D2 0.0046
GOTO 9014; for() #319 End
LOAD D2 0.0001; if() #1108 Body End AND if() #1109 Test
COMPAREV D2 39
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 9440 ==; Test 'if'
PUSHR D4; if() #1109 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4
LOAD D2 0.0010
SETR GD10 D2
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #320 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #320 LoopTest
COMPAREV D2 176
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9195 ==; for() #320 TestFail?
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1110 Test AND for() #320 Body Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9177 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1110 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.4979; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1110 Body End
SETR D2 GD3
ADDV D2 4
SETR GD3 D2
SETV D2 0
SETR GD5 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #320 Body End
LOAD D2 0.0046; for() #320 LoopIncrement
ADDV D2 4
STORE D2 0.0046
GOTO 9107; for() #320 End
SETV D2 0; for() #321 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #321 LoopTest
COMPAREV D2 180
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9284 ==; for() #321 TestFail?
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1111 Test AND for() #321 Body Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9269 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1111 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.5000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.5000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.4979; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1111 Body End
SETV D2 0
SETR GD5 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #321 Body End
LOAD D2 0.0046; for() #321 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 9197; for() #321 End
SETV D2 38; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETR D2 GD3; while() #21 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9374 ==; Test 'while'
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1112 Test AND while() #21 Body Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9358 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1112 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.2000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.2000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.4979; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1112 Body End
SETR D2 GD3; InlineFunc[int Max(int, int)] Params Start
SUBV D2 4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD3 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #21 Body End
GOTO 9286; while() #21 End
SETV D2 3; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 20
PUSHR D2
POP D2
SETR QUAKE D2
SETV D2 2; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #322 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #322 LoopTest
COMPAREV D2 128
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9440 ==; for() #322 TestFail?
PUSHR D4; for() #322 Body Start
PUSHV 2; UsrFunc[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0046
PUSHR D2
PUSHV 80
PUSHV 16
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 3
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 4
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 5
PUSHR D2; UsrFunc[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.6447; UsrFunc[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #322 Body End
LOAD D2 0.0046; for() #322 LoopIncrement
ADDV D2 6
STORE D2 0.0046
GOTO 9384; for() #322 End
LOAD D2 0.0001; if() #1109 Body End AND if() #1113 Test
COMPAREV D2 40
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 9821 ==; Test 'if'
PUSHR D4; if() #1113 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4
LOAD D2 0.0010
SETR GD10 D2
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #323 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #323 LoopTest
COMPAREV D2 176
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9565 ==; for() #323 TestFail?
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1114 Test AND for() #323 Body Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9547 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1114 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.4979; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1114 Body End
SETR D2 GD3
ADDV D2 4
SETR GD3 D2
SETV D2 0
SETR GD5 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #323 Body End
LOAD D2 0.0046; for() #323 LoopIncrement
ADDV D2 4
STORE D2 0.0046
GOTO 9477; for() #323 End
SETV D2 0; for() #324 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #324 LoopTest
COMPAREV D2 120
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9654 ==; for() #324 TestFail?
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1115 Test AND for() #324 Body Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9639 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1115 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.5000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.5000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.4979; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1115 Body End
SETV D2 0
SETR GD5 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #324 Body End
LOAD D2 0.0046; for() #324 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 9567; for() #324 End
SETV D2 38; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETR D2 GD3; while() #22 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9744 ==; Test 'while'
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1116 Test AND while() #22 Body Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9728 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1116 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.2000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.2000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.4979; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1116 Body End
SETR D2 GD3; InlineFunc[int Max(int, int)] Params Start
SUBV D2 4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD3 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #22 Body End
GOTO 9656; while() #22 End
SETV D2 3; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 20
PUSHR D2
POP D2
SETR QUAKE D2
SETV D2 0; for() #325 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #325 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9821 ==; for() #325 TestFail?
PUSHR D4; for() #325 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
PUSHV 16; UsrFunc[int Rand(int, int)] Params Start
PUSHV 224; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2
PUSHR D4
PUSHV 16; UsrFunc[int Rand(int, int)] Params Start
PUSHV 144; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2
SETV D3 360; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
SETV D3 50; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
PUSHV 8; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params End
CALLFUNC 3.3388; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 19
PUSHV 176
PUSHV 1; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9567; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 3
LOAD D2 0.0031
PUSHR D2
POP REFEWPN
PUSHR EWPNPOWER; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 2.9457; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
PUSHV 2; UsrFunc[int Rand(int, int)] Params Start
PUSHV 6; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #325 Body End
LOAD D2 0.0046; for() #325 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 9752; for() #325 End
LOAD D2 0.0001; if() #1113 Body End AND if() #1117 Test
COMPAREV D2 41
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 10266 ==; Test 'if'
PUSHR D4; if() #1117 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4
LOAD D2 0.0010
SETR GD10 D2
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #326 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #326 LoopTest
COMPAREV D2 176
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9946 ==; for() #326 TestFail?
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1118 Test AND for() #326 Body Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9928 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1118 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.4979; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1118 Body End
SETR D2 GD3
ADDV D2 4
SETR GD3 D2
SETV D2 0
SETR GD5 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #326 Body End
LOAD D2 0.0046; for() #326 LoopIncrement
ADDV D2 4
STORE D2 0.0046
GOTO 9858; for() #326 End
SETV D2 0; for() #327 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #327 LoopTest
COMPAREV D2 120
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 10035 ==; for() #327 TestFail?
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1119 Test AND for() #327 Body Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 10020 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1119 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.5000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.5000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.4979; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1119 Body End
SETV D2 0
SETR GD5 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #327 Body End
LOAD D2 0.0046; for() #327 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 9948; for() #327 End
SETV D2 38; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETR D2 GD3; while() #23 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 10125 ==; Test 'while'
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1120 Test AND while() #23 Body Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 10109 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1120 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.2000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.2000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.4979; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1120 Body End
SETR D2 GD3; InlineFunc[int Max(int, int)] Params Start
SUBV D2 4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD3 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #23 Body End
GOTO 10037; while() #23 End
SETV D2 3; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 20
PUSHR D2
POP D2
SETR QUAKE D2
PUSHR D4
PUSHV 4; UsrFunc[int Rand(int, int)] Params Start
PUSHV 7; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0.0044
SETV D2 0; for() #328 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #328 LoopTest
PUSHR D2
LOAD D2 0.0044
POP D3
COMPARER D3 D2
GOTOCMP 10157 >=
SETR D2 NPCCOUNT; InlineFunc[int screendata::NumNPCs()] Body
COMPAREV D2 40
GOTOCMP 10157 >=
PUSHR D4
LOAD D2 0.0033; UsrFunc[int EZB_NumSummons(npc)] Params Start
PUSHR D2; UsrFunc[int EZB_NumSummons(npc)] Params End
CALLFUNC 3.6101; UsrFunc[int EZB_NumSummons(npc)] Call
POP D4
COMPAREV D2 8
GOTOCMP 10157 >=
SETV D2 1
GOTO 10158
SETV D2 0
COMPAREV D2 0
GOTOCMP 10266 ==; for() #328 TestFail?
SETV D3 176; InlineFunc[int Rand(int)] Params AND for() #328 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0045
SETV D2 0; for() #329 setup
STORE D2 0.0043
LOAD D2 0.0043; for() #329 LoopTest
COMPAREV D2 352
GOTOCMP 10192 >=
PUSHR D4
LOAD D2 0.0047; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int ComboX(int)] Params Start
PUSHR D2; UsrFunc[int ComboX(int)] Params End
CALLFUNC 2.0642; UsrFunc[int ComboX(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int ComboY(int)] Params Start
PUSHR D2; UsrFunc[int ComboY(int)] Params End
CALLFUNC 2.0648; UsrFunc[int ComboY(int)] Call
POP D4
PUSHR D2
PUSHARGSV 16 0.0002; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int, int, int)] Params End
CALLFUNC 3.1745; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 10192 !=
SETV D2 1
GOTO 10193
SETV D2 0
COMPAREV D2 0
GOTOCMP 10211 ==; for() #329 TestFail?
LOAD D2 0.0044; if() #660 Test AND for() #329 Body Start
COMPAREV D2 176
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 10204 ==; Test 'if'
SETV D3 176; InlineFunc[int Rand(int)] Params AND if() #660 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0045
GOTO 10207; if() #660 Body End
LOAD D2 0.0043; if() #660 Else Start
SUBV D2 176
STORE D2 0.0045; if() #660 Else End
LOAD D2 0.0043; for() #329 Body End AND for() #329 LoopIncrement
ADDV D2 1
STORE D2 0.0043
GOTO 10165; for() #329 End
SETV D2 38; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
LOAD D2 0.0021; UsrFunc[npc CreateNPCAt(int, int, int)] Params Start
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int ComboX(int)] Params Start
PUSHR D2; UsrFunc[int ComboX(int)] Params End
CALLFUNC 2.0642; UsrFunc[int ComboX(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int ComboY(int)] Params Start
PUSHR D2; UsrFunc[int ComboY(int)] Params End
CALLFUNC 2.0648; UsrFunc[int ComboY(int)] Call
POP D4
PUSHR D2; UsrFunc[npc CreateNPCAt(int, int, int)] Params End
CALLFUNC 2.0735; UsrFunc[npc CreateNPCAt(int, int, int)] Call
POP D4
STORE D2 0.0032
PUSHR D4
LOAD D2 0.0032; UsrFunc[void EZB_AddSummon(npc, npc)] Params Start
PUSHR D2
LOAD D2 0.0033
PUSHR D2; UsrFunc[void EZB_AddSummon(npc, npc)] Params End
CALLFUNC 3.0435; UsrFunc[void EZB_AddSummon(npc, npc)] Call
POP D4
SETV D2 176
PUSHR D2
LOAD D2 0.0032
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCZ D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
PUSHV 6; UsrFunc[int Rand(int, int)] Params Start
PUSHV 17; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #328 Body End
LOAD D2 0.0046; for() #328 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 10139; for() #328 End
LOAD D2 0.0001; if() #1117 Body End AND if() #1121 Test
COMPAREV D2 42
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 10379 ==; Test 'if'
PUSHR D4; if() #1121 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
LOAD D2 0.0010
SETR GD10 D2
SETV D2 0; for() #330 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #330 LoopTest
COMPAREV D2 300
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 10379 ==; for() #330 TestFail?
PUSHARGSR D4 0.0002; for() #330 Body Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7426; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #330 Body End
LOAD D2 0.0046; for() #330 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 10324; for() #330 End
LOAD D2 0.0001; if() #1121 Body End AND if() #1122 Test
COMPAREV D2 43
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 10633 ==; Test 'if'
PUSHR D4; if() #1122 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETR D2 GD1
PUSHR D2
PUSHR D4
PUSHV 32; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7449; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0040
SETR D2 GD2
PUSHR D2
PUSHR D4
PUSHV 32; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7459; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0039
PUSHR D4; if() #661 Test
LOAD D2 0.0047; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0039
PUSHR D2; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Params End
CALLFUNC 3.1597; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 10540 ==; Test 'if'
SETV D2 3; if() #661 Body Start
STORE D2 0.0044
LOAD D2 0.0010
SETR GD10 D2
SETV D2 1; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #331 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #331 LoopTest
COMPAREV D2 10
GOTOCMP 10471 >=
PUSHR D4
LOAD D2 0.0042; UsrFunc[bool EZB_CanMoveAngle(int)] Params Start
PUSHR D2; UsrFunc[bool EZB_CanMoveAngle(int)] Params End
CALLFUNC 3.1306; UsrFunc[bool EZB_CanMoveAngle(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 10471 ==
SETV D2 1
GOTO 10472
SETV D2 0
COMPAREV D2 0
GOTOCMP 10633 ==; for() #331 TestFail?
PUSHARGSR D4 0.0002; for() #331 Body Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
LOAD D2 0.0044; InlineFunc[int Min(int, int)] Params Start
ADDV D2 0.5000
PUSHVARGR D2
PUSHVARGV 5; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0044
PUSHR D4
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7426; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Trail(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Trail(ffc, npc, int)] Params End
CALLFUNC 3.6917; UsrFunc[void EZB_Trail(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #331 Body End
LOAD D2 0.0046; for() #331 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 10459; for() #331 End
GOTO 10633; if() #661 Body End
PUSHR D4; if() #661 Else Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 2
STORE D2 0.0044
LOAD D2 0.0010
SETR GD10 D2
SETV D2 1; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4; while() #24 Test
LOAD D2 0.0042; UsrFunc[bool EZB_CanMoveAngle(int)] Params Start
PUSHR D2; UsrFunc[bool EZB_CanMoveAngle(int)] Params End
CALLFUNC 3.1306; UsrFunc[bool EZB_CanMoveAngle(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 10633 ==; Test 'while'
LOAD D2 0.0044; InlineFunc[int Min(int, int)] Params Start AND while() #24 Body Start
ADDV D2 0.2000
PUSHVARGR D2
PUSHVARGV 5; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0044
PUSHR D4
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7426; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Trail(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Trail(ffc, npc, int)] Params End
CALLFUNC 3.6917; UsrFunc[void EZB_Trail(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #24 Body End
GOTO 10595; while() #24 End
LOAD D2 0.0001; if() #661 Else End AND if() #1122 Body End AND if() #1123 Test
COMPAREV D2 49
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 10842 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1123 Body Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #332 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #332 LoopTest
COMPAREV D2 90
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 10727 ==; for() #332 TestFail?
PUSHR D4; for() #332 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 64
LOAD D2 0.0042
PUSHR D2
PUSHV 0
LOAD D2 0.0028
PUSHR D2
PUSHV -1
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 90; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2016; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #332 Body End
LOAD D2 0.0046; for() #332 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 10683; for() #332 End
SETV D2 37; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #333 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #333 LoopTest
COMPAREV D2 40
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 10842 ==; for() #333 TestFail?
SETV D2 0; for() #334 setup AND for() #333 Body Start
STORE D2 0.0045
LOAD D2 0.0045; for() #334 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 10798 ==; for() #334 TestFail?
SETR D2 GD1; for() #334 Body Start
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
PUSHV 1; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0042
ADDV D2 180
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7449; UsrFunc[int VectorX(int, int)] Call
POP D4
PUSHR D2; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0040
SETR D2 GD2
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
PUSHV 1; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0042
ADDV D2 180
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7459; UsrFunc[int VectorY(int, int)] Call
POP D4
PUSHR D2; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0039
PUSHR D4; if() #1124 Test
LOAD D2 0.0047; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0039
PUSHR D2; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Params End
CALLFUNC 3.1597; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 10794 ==; Test 'if'
PUSHR D4; if() #1124 Body Start
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
ADDV D2 180
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7426; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4; if() #1124 Body End
LOAD D2 0.0045; for() #334 Body End AND for() #334 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 10738; for() #334 End
PUSHR D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 64
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCWDP
MULTV D2 2
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV -1
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 40; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2016; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #333 Body End
LOAD D2 0.0046; for() #333 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 10731; for() #333 End
LOAD D2 0.0001; if() #1123 Body End AND if() #1125 Test
COMPAREV D2 52
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 11260 ==; Test 'if'
PUSHR D4; if() #1125 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4
SETV D2 4
SETR GD5 D2
LOAD D2 0.0010
SETR GD10 D2
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETR D2 GD5; while() #25 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 10969 ==; Test 'while'
PUSHR D4; while() #25 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 10959 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1126 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 1.3000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 1.3000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.4979; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1126 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #25 Body End
GOTO 10879; while() #25 End
SETR D2 GD3
STORE D2 0.0044
SETV D2 0; for() #335 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #335 LoopTest
COMPAREV D2 90
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 11096 ==; for() #335 TestFail?
PUSHR D4; for() #335 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11053 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1127 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.7000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.7000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.4979; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1127 Body End
SETV D2 0
SETR GD5 D2
LOAD D2 0.0044
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 2
SETV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
SETR GD3 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #335 Body End
LOAD D2 0.0046; for() #335 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 10973; for() #335 End
SETV D2 38; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETR D2 GD3; while() #26 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11194 ==; Test 'while'
PUSHR D4; while() #26 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11178 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1128 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.3000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.3000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.4979; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1128 Body End
SETR D2 GD3; InlineFunc[int Max(int, int)] Params Start
SUBV D2 4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD3 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #26 Body End
GOTO 11098; while() #26 End
SETV D2 3; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 4
PUSHR D2
POP D2
SETR QUAKE D2
SETV D2 2; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #336 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #336 LoopTest
COMPAREV D2 96
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 11260 ==; for() #336 TestFail?
PUSHR D4; for() #336 Body Start
PUSHV 2; UsrFunc[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0046
PUSHR D2
PUSHV 48
PUSHV 16
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 3
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 4
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 5
PUSHR D2; UsrFunc[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.6447; UsrFunc[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #336 Body End
LOAD D2 0.0046; for() #336 LoopIncrement
ADDV D2 6
STORE D2 0.0046
GOTO 11204; for() #336 End
LOAD D2 0.0001; if() #1125 Body End AND if() #1129 Test
COMPAREV D2 53
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 11689 ==; Test 'if'
PUSHR D4; if() #1129 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4
SETV D2 4
SETR GD5 D2
LOAD D2 0.0010
SETR GD10 D2
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETR D2 GD5; while() #27 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11387 ==; Test 'while'
PUSHR D4; while() #27 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11377 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1130 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 1.3000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 1.3000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.4979; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1130 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #27 Body End
GOTO 11297; while() #27 End
SETR D2 GD3
STORE D2 0.0044
SETV D2 0; for() #337 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #337 LoopTest
COMPAREV D2 90
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 11514 ==; for() #337 TestFail?
PUSHR D4; for() #337 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11471 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1131 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.7000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.7000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.4979; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1131 Body End
SETV D2 0
SETR GD5 D2
LOAD D2 0.0044
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 2
SETV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
SETR GD3 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #337 Body End
LOAD D2 0.0046; for() #337 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 11391; for() #337 End
SETV D2 38; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETR D2 GD3; while() #28 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11612 ==; Test 'while'
PUSHR D4; while() #28 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11596 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1132 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.3000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.3000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.4979; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1132 Body End
SETR D2 GD3; InlineFunc[int Max(int, int)] Params Start
SUBV D2 4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD3 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #28 Body End
GOTO 11516; while() #28 End
SETV D2 3; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 4
PUSHR D2
POP D2
SETR QUAKE D2
SETV D2 0; for() #338 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #338 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 11689 ==; for() #338 TestFail?
PUSHR D4; for() #338 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
PUSHV 16; UsrFunc[int Rand(int, int)] Params Start
PUSHV 224; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2
PUSHR D4
PUSHV 16; UsrFunc[int Rand(int, int)] Params Start
PUSHV 144; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2
SETV D3 360; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
SETV D3 50; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
PUSHV 8; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params End
CALLFUNC 3.3388; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 19
PUSHV 176
PUSHV 1; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9567; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 3
LOAD D2 0.0031
PUSHR D2
POP REFEWPN
PUSHR EWPNPOWER; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 2.9457; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
PUSHV 4; UsrFunc[int Rand(int, int)] Params Start
PUSHV 12; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #338 Body End
LOAD D2 0.0046; for() #338 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 11620; for() #338 End
LOAD D2 0.0001; if() #1129 Body End AND if() #1133 Test
COMPAREV D2 54
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12182 ==; Test 'if'
PUSHR D4; if() #1133 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4
SETV D2 4
SETR GD5 D2
LOAD D2 0.0010
SETR GD10 D2
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETR D2 GD5; while() #29 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11816 ==; Test 'while'
PUSHR D4; while() #29 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11806 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1134 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 1.3000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 1.3000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.4979; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1134 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #29 Body End
GOTO 11726; while() #29 End
SETR D2 GD3
STORE D2 0.0044
SETV D2 0; for() #339 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #339 LoopTest
COMPAREV D2 90
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 11943 ==; for() #339 TestFail?
PUSHR D4; for() #339 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11900 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1135 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.7000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.7000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.4979; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1135 Body End
SETV D2 0
SETR GD5 D2
LOAD D2 0.0044
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 2
SETV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
SETR GD3 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #339 Body End
LOAD D2 0.0046; for() #339 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 11820; for() #339 End
SETV D2 38; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETR D2 GD3; while() #30 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 12041 ==; Test 'while'
PUSHR D4; while() #30 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 12025 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1136 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.3000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.3000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.4979; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1136 Body End
SETR D2 GD3; InlineFunc[int Max(int, int)] Params Start
SUBV D2 4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD3 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #30 Body End
GOTO 11945; while() #30 End
SETV D2 3; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 4
PUSHR D2
POP D2
SETR QUAKE D2
PUSHR D4
PUSHV 2; UsrFunc[int Rand(int, int)] Params Start
PUSHV 3; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0.0044
SETV D2 0; for() #340 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #340 LoopTest
PUSHR D2
LOAD D2 0.0044
POP D3
COMPARER D3 D2
GOTOCMP 12073 >=
SETR D2 NPCCOUNT; InlineFunc[int screendata::NumNPCs()] Body
COMPAREV D2 40
GOTOCMP 12073 >=
PUSHR D4
LOAD D2 0.0033; UsrFunc[int EZB_NumSummons(npc)] Params Start
PUSHR D2; UsrFunc[int EZB_NumSummons(npc)] Params End
CALLFUNC 3.6101; UsrFunc[int EZB_NumSummons(npc)] Call
POP D4
COMPAREV D2 8
GOTOCMP 12073 >=
SETV D2 1
GOTO 12074
SETV D2 0
COMPAREV D2 0
GOTOCMP 12182 ==; for() #340 TestFail?
SETV D3 176; InlineFunc[int Rand(int)] Params AND for() #340 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0045
SETV D2 0; for() #341 setup
STORE D2 0.0043
LOAD D2 0.0043; for() #341 LoopTest
COMPAREV D2 352
GOTOCMP 12108 >=
PUSHR D4
LOAD D2 0.0047; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int ComboX(int)] Params Start
PUSHR D2; UsrFunc[int ComboX(int)] Params End
CALLFUNC 2.0642; UsrFunc[int ComboX(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int ComboY(int)] Params Start
PUSHR D2; UsrFunc[int ComboY(int)] Params End
CALLFUNC 2.0648; UsrFunc[int ComboY(int)] Call
POP D4
PUSHR D2
PUSHARGSV 16 0.0002; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int, int, int)] Params End
CALLFUNC 3.1745; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 12108 !=
SETV D2 1
GOTO 12109
SETV D2 0
COMPAREV D2 0
GOTOCMP 12127 ==; for() #341 TestFail?
LOAD D2 0.0044; if() #662 Test AND for() #341 Body Start
COMPAREV D2 176
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 12120 ==; Test 'if'
SETV D3 176; InlineFunc[int Rand(int)] Params AND if() #662 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0045
GOTO 12123; if() #662 Body End
LOAD D2 0.0043; if() #662 Else Start
SUBV D2 176
STORE D2 0.0045; if() #662 Else End
LOAD D2 0.0043; for() #341 Body End AND for() #341 LoopIncrement
ADDV D2 1
STORE D2 0.0043
GOTO 12081; for() #341 End
SETV D2 38; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
LOAD D2 0.0021; UsrFunc[npc CreateNPCAt(int, int, int)] Params Start
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int ComboX(int)] Params Start
PUSHR D2; UsrFunc[int ComboX(int)] Params End
CALLFUNC 2.0642; UsrFunc[int ComboX(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int ComboY(int)] Params Start
PUSHR D2; UsrFunc[int ComboY(int)] Params End
CALLFUNC 2.0648; UsrFunc[int ComboY(int)] Call
POP D4
PUSHR D2; UsrFunc[npc CreateNPCAt(int, int, int)] Params End
CALLFUNC 2.0735; UsrFunc[npc CreateNPCAt(int, int, int)] Call
POP D4
STORE D2 0.0032
PUSHR D4
LOAD D2 0.0032; UsrFunc[void EZB_AddSummon(npc, npc)] Params Start
PUSHR D2
LOAD D2 0.0033
PUSHR D2; UsrFunc[void EZB_AddSummon(npc, npc)] Params End
CALLFUNC 3.0435; UsrFunc[void EZB_AddSummon(npc, npc)] Call
POP D4
SETV D2 176
PUSHR D2
LOAD D2 0.0032
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCZ D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
PUSHV 6; UsrFunc[int Rand(int, int)] Params Start
PUSHV 17; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #340 Body End
LOAD D2 0.0046; for() #340 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 12055; for() #340 End
LOAD D2 0.0001; if() #1133 Body End AND if() #1137 Test
COMPAREV D2 55
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12275 ==; Test 'if'
PUSHR D4; if() #1137 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 3.1889; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #342 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #342 LoopTest
COMPAREV D2 5
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 12265 ==; for() #342 TestFail?
PUSHR D4; for() #342 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 350; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3364; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHARGSV 16 0.0002; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9567; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 8; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #342 Body End
LOAD D2 0.0046; for() #342 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 12213; for() #342 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1137 Body End
LOAD D2 0.0001; if() #1138 Test
COMPAREV D2 56
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12395 ==; Test 'if'
PUSHR D4; if() #1138 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #343 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #343 LoopTest
COMPAREV D2 5
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 12385 ==; for() #343 TestFail?
PUSHR D4; for() #343 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 250; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3364; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHARGSV 16 0.0002; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9567; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #343 Body End
LOAD D2 0.0046; for() #343 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 12333; for() #343 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1138 Body End
LOAD D2 0.0001; if() #1139 Test
COMPAREV D2 57
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12515 ==; Test 'if'
PUSHR D4; if() #1139 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D3 360; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
PUSHVARGV -40; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 40; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0045
SETV D2 0; for() #344 setup
STORE D2 0.0044
LOAD D2 0.0044; for() #344 LoopTest
COMPAREV D2 3
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 12505 ==; for() #344 TestFail?
SETV D2 0; for() #345 setup AND for() #344 Body Start
STORE D2 0.0046
LOAD D2 0.0046; for() #345 LoopTest
COMPAREV D2 5
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 12491 ==; for() #345 TestFail?
PUSHR D4; for() #345 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 72
SETV D2 72
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 250; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3364; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 1
LOAD D2 0.0045
PUSHR D2
PUSHV 4; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9567; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
POP D4; for() #345 Body End
LOAD D2 0.0046; for() #345 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 12436; for() #345 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 4; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #344 Body End
LOAD D2 0.0044; for() #344 LoopIncrement
ADDV D2 1
STORE D2 0.0044
GOTO 12429; for() #344 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 32; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1139 Body End
LOAD D2 0.0001; if() #1140 Test
COMPAREV D2 58
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12629 ==; Test 'if'
PUSHR D4; if() #1140 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 3.1889; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 -1; for() #346 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #346 LoopTest
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 12619 ==; for() #346 TestFail?
PUSHR D4; for() #346 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 25
SETV D2 25
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 300; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3364; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
SETV D2 0
STORE D2 0.0045
LOAD D2 0.0034; if() #1141 Test
PUSHR D2
POP REFNPC
SETR D2 NPCWEAPON
COMPAREV D2 129
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12600 ==; Test 'if'
SETV D2 16; if() #1141 Body Start
STORE D2 0.0045; if() #1141 Body End
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 1
LOAD D2 0.0045
ADDV D2 24
PUSHR D2; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Params End
CALLFUNC 2.9521; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Call
PEEK D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 2
PUSHV 16; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 2.9457; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4; for() #346 Body End
LOAD D2 0.0046; for() #346 LoopIncrement
ADDV D2 2
STORE D2 0.0046
GOTO 12546; for() #346 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1140 Body End
LOAD D2 0.0001; if() #1142 Test
COMPAREV D2 59
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12770 ==; Test 'if'
PUSHR D4; if() #1142 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 -1; for() #347 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #347 LoopTest
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 12760 ==; for() #347 TestFail?
PUSHR D4; for() #347 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 45
SETV D2 45
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 300; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3364; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
SETV D2 0
STORE D2 0.0045
LOAD D2 0.0034; if() #1143 Test
PUSHR D2
POP REFNPC
SETR D2 NPCWEAPON
COMPAREV D2 129
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12741 ==; Test 'if'
SETV D2 16; if() #1143 Body Start
STORE D2 0.0045; if() #1143 Body End
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 1
LOAD D2 0.0045
ADDV D2 24
PUSHR D2; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Params End
CALLFUNC 2.9521; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Call
PEEK D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 2
PUSHV 16; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 2.9457; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4; for() #347 Body End
LOAD D2 0.0046; for() #347 LoopIncrement
ADDV D2 2
STORE D2 0.0046
GOTO 12687; for() #347 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1142 Body End
LOAD D2 0.0001; if() #1144 Test
COMPAREV D2 60
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12898 ==; Test 'if'
PUSHR D4; if() #1144 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 150
PUSHV 9; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params End
CALLFUNC 3.3388; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 15
PUSHV 3.6000
PUSHV 1; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9567; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0031; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params Start
PUSHR D2; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params End
CALLFUNC 3.6201; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1144 Body End
LOAD D2 0.0001; if() #1145 Test
COMPAREV D2 61
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13026 ==; Test 'if'
PUSHR D4; if() #1145 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 200
PUSHV 9; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params End
CALLFUNC 3.3388; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 15
PUSHV -1
PUSHV 1; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9567; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0031; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params Start
PUSHR D2; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params End
CALLFUNC 3.6201; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1145 Body End
LOAD D2 0.0001; if() #1146 Test
COMPAREV D2 62
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13175 ==; Test 'if'
PUSHR D4; if() #1146 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #348 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #348 LoopTest
COMPAREV D2 16
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 13165 ==; for() #348 TestFail?
PUSHARGSR D4 0.0002; for() #348 Body Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 200
PUSHV 9; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params End
CALLFUNC 3.3388; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 15
PUSHV -1
PUSHV 1; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9567; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0031; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params Start
PUSHR D2; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params End
CALLFUNC 3.6201; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 6; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #348 Body End
LOAD D2 0.0046; for() #348 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 13084; for() #348 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1146 Body End
LOAD D2 0.0001; if() #1147 Test
COMPAREV D2 63
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13325 ==; Test 'if'
PUSHR D4; if() #1147 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 -2; for() #349 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #349 LoopTest
COMPAREV D2 2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 13315 ==; for() #349 TestFail?
PUSHR D4; for() #349 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 20
SETV D2 20
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 200
PUSHV 9; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params End
CALLFUNC 3.3388; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 15
PUSHV 3.6000
PUSHV 1; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9567; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0031; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params Start
PUSHR D2; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params End
CALLFUNC 3.6201; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Call
POP D4; for() #349 Body End
LOAD D2 0.0046; for() #349 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 13256; for() #349 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1147 Body End
LOAD D2 0.0001; if() #1148 Test
COMPAREV D2 64
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13484 ==; Test 'if'
PUSHR D4; if() #1148 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 0; for() #350 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #350 LoopTest
COMPAREV D2 6
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 13474 ==; for() #350 TestFail?
PUSHR D4; for() #350 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHR D4
PUSHV -30; UsrFunc[int Rand(int, int)] Params Start
PUSHV 30; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
PUSHV 100; UsrFunc[int Rand(int, int)] Params Start
PUSHV 300; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2
PUSHV 9; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params End
CALLFUNC 3.3388; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 15
PUSHR D4
PUSHV 24; UsrFunc[int Rand(int, int)] Params Start
PUSHV 36; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
DIVV D2 10
PUSHR D2
PUSHV 1; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9567; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0031; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params Start
PUSHR D2; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params End
CALLFUNC 3.6201; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Call
POP D4; for() #350 Body End
LOAD D2 0.0046; for() #350 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 13406; for() #350 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1148 Body End
LOAD D2 0.0001; if() #1149 Test
COMPAREV D2 65
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13594 ==; Test 'if'
PUSHR D4; if() #1149 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 0; for() #351 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #351 LoopTest
COMPAREV D2 18
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 13594 ==; for() #351 TestFail?
PUSHR D4; for() #351 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
SETV D3 360; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
PUSHR D4
PUSHV 100; UsrFunc[int Rand(int, int)] Params Start
PUSHV 400; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2
PUSHV 9; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params End
CALLFUNC 3.3388; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 15
PUSHR D4
PUSHV 24; UsrFunc[int Rand(int, int)] Params Start
PUSHV 36; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
DIVV D2 10
PUSHR D2
PUSHV 1; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9567; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0031; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params Start
PUSHR D2; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params End
CALLFUNC 3.6201; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Call
POP D4; for() #351 Body End
LOAD D2 0.0046; for() #351 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 13533; for() #351 End
LOAD D2 0.0001; if() #1149 Body End AND if() #1150 Test
COMPAREV D2 66
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13669 ==; Test 'if'
PUSHR D4; if() #1150 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #352 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #352 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 13659 ==; for() #352 TestFail?
PUSHR D4; for() #352 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 3.1889; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0046
DIVV D2 7
MULTV D2 400
SETV D2 400
PUSHR D2
LOAD D2 0.0046
DIVV D2 7
POP D3
MULTR D2 D3
ADDV D2 200
PUSHR D2; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3364; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #352 Body End
LOAD D2 0.0046; for() #352 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 13611; for() #352 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1150 Body End
LOAD D2 0.0001; if() #1151 Test
COMPAREV D2 67
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13773 ==; Test 'if'
PUSHR D4; if() #1151 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 0; for() #353 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #353 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 13763 ==; for() #353 TestFail?
PUSHR D4; for() #353 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
DIVV D2 7
MULTV D2 400
SETV D2 400
PUSHR D2
LOAD D2 0.0046
DIVV D2 7
POP D3
MULTR D2 D3
ADDV D2 200
PUSHR D2; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3364; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #353 Body End
LOAD D2 0.0046; for() #353 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 13718; for() #353 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1151 Body End
LOAD D2 0.0001; if() #1152 Test
COMPAREV D2 68
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13872 ==; Test 'if'
PUSHR D4; if() #1152 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_Teleport(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Teleport(ffc, npc, int)] Params End
CALLFUNC 3.6586; UsrFunc[void EZB_Teleport(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3364; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1152 Body End
LOAD D2 0.0001; if() #1153 Test
COMPAREV D2 69
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13994 ==; Test 'if'
PUSHR D4; if() #1153 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_Teleport(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Teleport(ffc, npc, int)] Params End
CALLFUNC 3.6586; UsrFunc[void EZB_Teleport(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 -1; for() #354 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #354 LoopTest
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 13984 ==; for() #354 TestFail?
PUSHR D4; for() #354 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 20
SETV D2 20
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 250; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3364; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #354 Body End
LOAD D2 0.0046; for() #354 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 13939; for() #354 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1153 Body End
LOAD D2 0.0001; if() #1154 Test
COMPAREV D2 70
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 14127 ==; Test 'if'
SETV D2 0; for() #355 setup AND if() #1154 Body Start
STORE D2 0.0046
LOAD D2 0.0046; for() #355 LoopTest
COMPAREV D2 3
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14028 ==; for() #355 TestFail?
PUSHR D4; for() #355 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 4; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Teleport(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Teleport(ffc, npc, int)] Params End
CALLFUNC 3.6586; UsrFunc[void EZB_Teleport(ffc, npc, int)] Call
POP D4; for() #355 Body End
LOAD D2 0.0046; for() #355 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 14001; for() #355 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 0; for() #356 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #356 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14117 ==; for() #356 TestFail?
PUSHR D4; for() #356 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
DIVV D2 7
MULTV D2 400
SETV D2 400
PUSHR D2
LOAD D2 0.0046
DIVV D2 7
POP D3
MULTR D2 D3
ADDV D2 200
PUSHR D2; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3364; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #356 Body End
LOAD D2 0.0046; for() #356 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 14072; for() #356 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1154 Body End
LOAD D2 0.0001; if() #1155 Test
COMPAREV D2 72
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 14553 ==; Test 'if'
PUSHR D4; if() #1155 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHV -32; UsrFunc[int Rand(int, int)] Params Start
PUSHV 32; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
ADDV D2 -32
STORE D2 0.0040
PUSHR D4
PUSHV -32; UsrFunc[int Rand(int, int)] Params Start
PUSHV 32; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
ADDV D2 -32
STORE D2 0.0039
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #357 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #357 LoopTest
COMPAREV D2 60
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14344 ==; for() #357 TestFail?
LOAD D2 0.0028; InlineFunc[int Choose(int)] Params Start AND for() #357 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0043
PUSHR D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 2
PUSHV 45
PUSHV 0
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 60; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2016; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4
SETV D2 1; for() #358 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #358 LoopTest
COMPAREV D2 12
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14263 ==; for() #358 TestFail?
PUSHR D4; for() #358 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0045
MULTV D2 48
SETV D2 48
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 2
PUSHV 45
PUSHV 0
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 60; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2016; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0045
MULTV D2 48
SETV D2 48
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 2
PUSHV 135
PUSHV 0
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 60; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2016; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #358 Body End
LOAD D2 0.0045; for() #358 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 14197; for() #358 End
SETV D2 1; for() #359 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #359 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14331 ==; for() #359 TestFail?
PUSHR D4; for() #359 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0045
MULTV D2 48
SETV D2 48
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 2
PUSHV 45
PUSHV 0
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 60; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2016; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0045
MULTV D2 48
SETV D2 48
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 2
PUSHV -45
PUSHV 0
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 60; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2016; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #359 Body End
LOAD D2 0.0045; for() #359 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 14265; for() #359 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #357 Body End
LOAD D2 0.0046; for() #357 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 14159; for() #357 End
SETV D2 37; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #360 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #360 LoopTest
COMPAREV D2 16
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14553 ==; for() #360 TestFail?
LOAD D2 0.0028; InlineFunc[int Choose(int)] Params Start AND for() #360 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0043
PUSHR D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 2
PUSHV 45
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 16; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2016; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4
SETV D2 1; for() #361 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #361 LoopTest
COMPAREV D2 12
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14466 ==; for() #361 TestFail?
PUSHR D4; for() #361 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0045
MULTV D2 48
SETV D2 48
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 2
PUSHV 45
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 16; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2016; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0045
MULTV D2 48
SETV D2 48
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 2
PUSHV 135
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 16; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2016; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #361 Body End
LOAD D2 0.0045; for() #361 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 14394; for() #361 End
SETV D2 1; for() #362 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #362 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14540 ==; for() #362 TestFail?
PUSHR D4; for() #362 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0045
MULTV D2 48
SETV D2 48
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 2
PUSHV 45
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 16; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2016; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0045
MULTV D2 48
SETV D2 48
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 2
PUSHV -45
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 16; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2016; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #362 Body End
LOAD D2 0.0045; for() #362 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 14468; for() #362 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #360 Body End
LOAD D2 0.0046; for() #360 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 14348; for() #360 End
LOAD D2 0.0001; if() #1155 Body End AND if() #1156 Test
COMPAREV D2 73
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 14821 ==; Test 'if'
PUSHR D4; if() #1156 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
SETR D2 LINKX
ADDV D2 8
PUSHR D2
SETR D2 LINKY
ADDV D2 8
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHVARGV -60; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 60; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
PUSHV -15; UsrFunc[int Rand(int, int)] Params Start
PUSHV 15; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0042
SETV D2 0; for() #363 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #363 LoopTest
COMPAREV D2 256
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14623 ==; for() #363 TestFail?
SETV D2 0; for() #363 Body Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0046
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #363 Body End
LOAD D2 0.0046; for() #363 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 14605; for() #363 End
SETV D2 0; for() #364 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #364 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14657 ==; for() #364 TestFail?
PUSHR D4; for() #364 Body Start
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
PUSHV 2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7426; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #364 Body End
LOAD D2 0.0046; for() #364 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 14625; for() #364 End
SETV D2 0; for() #365 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #365 LoopTest
COMPAREV D2 64
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14786 ==; for() #365 TestFail?
LOAD D2 0.0046; if() #1157 Test AND for() #365 Body Start
MODV D2 4
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 14752 ==; Test 'if'
LOAD D2 0.0046; if() #1157 Body Start
DIVV D2 4
STORE D2 0.0045
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
SETR D2 LINKX
ADDV D2 8
PUSHR D2
SETR D2 LINKY
ADDV D2 8
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0044
LOAD D2 0.0012
MULTV D2 8
PUSHR D2
LOAD D2 0.0011
MULTV D2 8
POP D3
ADDR D2 D3
DIVV D2 2
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0035; UsrFunc[void EZB_SetLaserArray(int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 16
LOAD D2 0.0045
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0043; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0044
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7449; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0043; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0044
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7459; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 4
LOAD D2 0.0044
PUSHR D2
PUSHV 32
PUSHV 16
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_SetLaserArray(int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.6322; UsrFunc[void EZB_SetLaserArray(int, int, int, int, int, int, int, int, int, int)] Call
POP D4; if() #1157 Body End
PUSHR D4
LOAD D2 0.0035; UsrFunc[void EZB_UpdateLaserArray(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 16; UsrFunc[void EZB_UpdateLaserArray(int, int, int)] Params End
CALLFUNC 3.7179; UsrFunc[void EZB_UpdateLaserArray(int, int, int)] Call
PEEK D4
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
PUSHV 2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7426; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #365 Body End
LOAD D2 0.0046; for() #365 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 14659; for() #365 End
SETV D2 0; for() #366 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #366 LoopTest
COMPAREV D2 48
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14821 ==; for() #366 TestFail?
PUSHR D4; for() #366 Body Start
LOAD D2 0.0035; UsrFunc[void EZB_UpdateLaserArray(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 16; UsrFunc[void EZB_UpdateLaserArray(int, int, int)] Params End
CALLFUNC 3.7179; UsrFunc[void EZB_UpdateLaserArray(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #366 Body End
LOAD D2 0.0046; for() #366 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 14788; for() #366 End
LOAD D2 0.0001; if() #1156 Body End AND if() #1158 Test
COMPAREV D2 74
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 15389 ==; Test 'if'
SETR D2 LINKX; if() #1158 Body Start
STORE D2 0.0040
SETR D2 LINKY
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D3 2; InlineFunc[int Rand(int)] Params AND if() #1159 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
GOTOCMP 14848 ==; Test 'if'
SETR D2 LINKX; if() #1159 Body Start
STORE D2 0.0040
SETR D2 LINKY
STORE D2 0.0039; if() #1159 Body End
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #367 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #367 LoopTest
COMPAREV D2 40
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 15120 ==; for() #367 TestFail?
LOAD D2 0.0028; InlineFunc[int Choose(int)] Params Start AND for() #367 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0043
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 128
SETV D2 88; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0041
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 128
PUSHV 88; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0041; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0046
DIVV D2 40
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7449; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0036
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0041; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0046
DIVV D2 40
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7459; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0036
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
SETV D2 0; for() #368 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #368 LoopTest
COMPAREV D2 5
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 15035 ==; for() #368 TestFail?
LOAD D2 0.0036; for() #368 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
PUSHR D4
LOAD D2 0.0046; UsrFunc[int VectorX(int, int)] Params Start
MULTV D2 4
PUSHR D2
LOAD D2 0.0046
MULTV D2 5
PUSHR D2
LOAD D2 0.0045
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7449; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
PUSHR D4
LOAD D2 0.0046; UsrFunc[int VectorY(int, int)] Params Start
MULTV D2 4
PUSHR D2
LOAD D2 0.0046
MULTV D2 5
PUSHR D2
LOAD D2 0.0045
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7459; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
ADDV D2 5
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #368 Body End
LOAD D2 0.0045; for() #368 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 14957; for() #368 End
SETV D2 0; for() #369 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #369 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 15107 ==; for() #369 TestFail?
PUSHR D4; for() #369 Body Start
LOAD D2 0.0035; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0045
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
ADDV D2 5
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
ADDV D2 1
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
ADDV D2 5
ADDV D2 1
POP D0
READPODARRAYR D2 D2
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
ADDV D2 5
POP D0
READPODARRAYR D2 D2
PUSHR D2
PUSHV 6
LOAD D2 0.0042
PUSHR D2
PUSHV 0
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 40; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2016; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #369 Body End
LOAD D2 0.0045; for() #369 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 15037; for() #369 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #367 Body End
LOAD D2 0.0046; for() #367 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 14852; for() #367 End
SETV D3 2; InlineFunc[int Rand(int)] Params AND if() #1160 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
GOTOCMP 15128 ==; Test 'if'
SETR D2 LINKX; if() #1160 Body Start
STORE D2 0.0040
SETR D2 LINKY
STORE D2 0.0039; if() #1160 Body End
SETV D2 37; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #370 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #370 LoopTest
COMPAREV D2 80
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 15389 ==; for() #370 TestFail?
LOAD D2 0.0028; InlineFunc[int Choose(int)] Params Start AND for() #370 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0043
PUSHV 128; InlineFunc[int Distance(int, int, int, int)] Params Start
PUSHV 88
LOAD D2 0.0040
ADDV D2 8
PUSHR D2
LOAD D2 0.0039
ADDV D2 8; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0041
PUSHR D4
PUSHV 128; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHV 88
LOAD D2 0.0040
ADDV D2 8
PUSHR D2
LOAD D2 0.0039
ADDV D2 8
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0041; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0046
DIVV D2 80
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7449; UsrFunc[int VectorX(int, int)] Call
POP D4
ADDV D2 128
PUSHR D2
LOAD D2 0.0036
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
PUSHR D4
LOAD D2 0.0041; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0046
DIVV D2 80
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7459; UsrFunc[int VectorY(int, int)] Call
POP D4
ADDV D2 88
PUSHR D2
LOAD D2 0.0036
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
SETV D2 0; for() #371 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #371 LoopTest
COMPAREV D2 5
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 15301 ==; for() #371 TestFail?
LOAD D2 0.0046; InlineFunc[int Max(int, int)] Params Start AND for() #371 Body Start
MULTV D2 2
SUBV2 160 D2
PUSHVARGR D2
PUSHVARGV 40; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0044
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
PUSHR D4
LOAD D2 0.0044; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0046
MULTV D2 5
ADDV D2 200
PUSHR D2
LOAD D2 0.0045
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7449; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
PUSHR D4
LOAD D2 0.0044; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0046
MULTV D2 5
ADDV D2 200
PUSHR D2
LOAD D2 0.0045
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7459; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
ADDV D2 5
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #371 Body End
LOAD D2 0.0045; for() #371 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 15216; for() #371 End
SETV D2 0; for() #372 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #372 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 15376 ==; for() #372 TestFail?
PUSHR D4; for() #372 Body Start
LOAD D2 0.0035; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0045
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
ADDV D2 5
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
ADDV D2 1
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
ADDV D2 5
ADDV D2 1
POP D0
READPODARRAYR D2 D2
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
ADDV D2 5
POP D0
READPODARRAYR D2 D2
PUSHR D2
PUSHV 6
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 40; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2016; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #372 Body End
LOAD D2 0.0045; for() #372 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 15303; for() #372 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #370 Body End
LOAD D2 0.0046; for() #370 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 15132; for() #370 End
LOAD D2 0.0001; if() #1158 Body End AND if() #1161 Test
COMPAREV D2 75
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 15998 ==; Test 'if'
PUSHR D4; if() #1161 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #373 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #373 LoopTest
COMPAREV D2 80
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 15702 ==; for() #373 TestFail?
LOAD D2 0.0028; InlineFunc[int Choose(int)] Params Start AND for() #373 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
STORE D2 0.0040
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
STORE D2 0.0039
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
SETR D2 LINKX
ADDV D2 8
PUSHR D2
SETR D2 LINKY
ADDV D2 8
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 3.3205; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
PEEK D4
PUSHV 8; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7449; UsrFunc[int VectorX(int, int)] Call
POP D4
STORE D2 0.0038
PUSHR D4
PUSHV 8; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7459; UsrFunc[int VectorY(int, int)] Call
POP D4
STORE D2 0.0037
SETV D2 0; for() #374 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #374 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 15689 ==; for() #374 TestFail?
SETV D2 0; for() #375 setup AND for() #374 Body Start
STORE D2 0.0044
LOAD D2 0.0044; for() #375 LoopTest
COMPAREV D2 256
GOTOCMP 15520 >=
LOAD D2 0.0040; InlineFunc[bool screendata::isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 15520 !=
SETV D2 1
GOTO 15521
SETV D2 0
COMPAREV D2 0
GOTOCMP 15539 ==; for() #375 TestFail?
LOAD D2 0.0040; for() #375 Body Start
PUSHR D2
LOAD D2 0.0038
POP D3
ADDR D2 D3
STORE D2 0.0040
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0037
POP D3
ADDR D2 D3
STORE D2 0.0039; for() #375 Body End
LOAD D2 0.0044; for() #375 LoopIncrement
ADDV D2 8
STORE D2 0.0044
GOTO 15507; for() #375 End
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
ADDV D2 1
MULTV D2 2
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
ADDV D2 1
MULTV D2 2
ADDV D2 1
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0046; if() #1162 Test
MODV D2 4
COMPAREV D2 2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 15595 ==; Test 'if'
PUSHV 4; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Params Start AND if() #1162 Body Start
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
MULTV D2 2
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
MULTV D2 2
ADDV D2 1
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 128; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Params End
LINER; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Body End AND if() #1162 Body End
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0038
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0040
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0037
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0039
LOAD D2 0.0038; if() #1163 Test
COMPAREV D2 0
GOTOCMP 15621 >=
LOAD D2 0.0040; InlineFunc[bool screendata::isSolid(int, int)] Params Start
SUBV D2 8
PUSHR D2
LOAD D2 0.0039
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 15635 !=
LOAD D2 0.0038
COMPAREV D2 0
GOTOCMP 15633 <=
LOAD D2 0.0040; InlineFunc[bool screendata::isSolid(int, int)] Params Start
ADDV D2 8
PUSHR D2
LOAD D2 0.0039
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 15635 !=
SETV D2 0
GOTO 15636
SETV D2 1
COMPAREV D2 0
GOTOCMP 15647 ==; Test 'if'
LOAD D2 0.0038; if() #1163 Body Start
SUBV2 0 D2
STORE D2 0.0038
LOAD D2 0.0040; InlineFunc[int Floor(int)] Params Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MULTV D2 8
ADDV D2 4
STORE D2 0.0040; if() #1163 Body End
LOAD D2 0.0037; if() #1164 Test
COMPAREV D2 0
GOTOCMP 15659 >=
LOAD D2 0.0040; InlineFunc[bool screendata::isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
SUBV D2 8
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 15673 !=
LOAD D2 0.0037
COMPAREV D2 0
GOTOCMP 15671 <=
LOAD D2 0.0040; InlineFunc[bool screendata::isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
ADDV D2 8
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 15673 !=
SETV D2 0
GOTO 15674
SETV D2 1
COMPAREV D2 0
GOTOCMP 15685 ==; Test 'if'
LOAD D2 0.0037; if() #1164 Body Start
SUBV2 0 D2
STORE D2 0.0037
LOAD D2 0.0039; InlineFunc[int Floor(int)] Params Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MULTV D2 8
ADDV D2 4
STORE D2 0.0039; if() #1164 Body End
LOAD D2 0.0045; for() #374 Body End AND for() #374 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 15500; for() #374 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #373 Body End
LOAD D2 0.0046; for() #373 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 15406; for() #373 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 48; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #376 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #376 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 15962 ==; for() #376 TestFail?
LOAD D2 0.0035; for() #376 Body Start
PUSHR D2
LOAD D2 0.0046
MULTV D2 2
POP D0
READPODARRAYR D2 D2
STORE D2 0.0040
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0046
MULTV D2 2
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0039
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCTXSZ
MULTV D2 8
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCTYSZ
MULTV D2 8
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2
SETV D2 1; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #377 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #377 LoopTest
COMPAREV D2 64
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 15919 ==; for() #377 TestFail?
PUSHR D4; for() #377 Body Start
LOAD D2 0.0040; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0046
ADDV D2 1
MULTV D2 2
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0046
ADDV D2 1
MULTV D2 2
ADDV D2 1
POP D0
READPODARRAYR D2 D2
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 3.3205; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
POP D4
LOAD D2 0.0040
PUSHR D2
PUSHR D4
PUSHV 8; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7449; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0040
LOAD D2 0.0039
PUSHR D2
PUSHR D4
PUSHV 8; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7459; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0039
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCTXSZ
MULTV D2 8
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCTYSZ
MULTV D2 8
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2
LOAD D2 0.0040; InlineFunc[int Distance(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0046
ADDV D2 1
MULTV D2 2
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0046
ADDV D2 1
MULTV D2 2
ADDV D2 1
POP D0
READPODARRAYR D2 D2; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0041
LOAD D2 0.0041; if() #1165 Test
COMPAREV D2 8
GOTOCMP 15903 <
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
COMPAREV D2 0
GOTOCMP 15903 <
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
COMPAREV D2 255
GOTOCMP 15903 >
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
COMPAREV D2 0
GOTOCMP 15903 <
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
COMPAREV D2 175
GOTOCMP 15903 >
SETV D2 0
GOTO 15904
SETV D2 1
COMPAREV D2 0
GOTOCMP 15919 !=; Test 'if' AND break 1; AND if() #1165 Body
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #377 Body End
LOAD D2 0.0045; for() #377 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 15760; for() #377 End
PUSHR D4; if() #1166 Test
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
COMPAREV D2 0
GOTOCMP 15949 <
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
COMPAREV D2 255
GOTOCMP 15949 >
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
COMPAREV D2 0
GOTOCMP 15949 <
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
COMPAREV D2 175
GOTOCMP 15949 >
SETV D2 0
GOTO 15950
SETV D2 1
COMPAREV D2 0
GOTOCMP 15962 !=; Test 'if' AND break 1; AND if() #1166 Body
SETV D2 3; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 10
PUSHR D2
POP D2
SETR QUAKE D2; for() #376 Body End
LOAD D2 0.0046; for() #376 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 15714; for() #376 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCTXSZ
MULTV D2 8
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCTYSZ
MULTV D2 8
POP D3
SUBR D3 D2
PUSHR D3
PUSHV 16; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Params End
CALLFUNC 3.6600; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Call
POP D4; if() #1161 Body End
LOAD D2 0.0001; if() #1167 Test
COMPAREV D2 76
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 16082 ==; Test 'if'
PUSHR D4; if() #1167 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
SETR D2 LINKX
ADDV D2 8
PUSHR D2
SETR D2 LINKY
ADDV D2 8
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
LOAD D2 0.0019; if() #1168 Test
COMPAREV D2 0
GOTOCMP 16047 ==; Test 'if'
LOAD D2 0.0019; InlineFunc[void Game::PlaySound(int)] Params AND if() #1168 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body AND if() #1168 Body End
PUSHR D4
PUSHV 1; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int EZB_WeaponTypeToID(int)] Params Start
PUSHR D2
POP REFNPC
PUSHR NPCWEAPON; UsrFunc[int EZB_WeaponTypeToID(int)] Params End
CALLFUNC 3.3516; UsrFunc[int EZB_WeaponTypeToID(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 200
LOAD D2 0.0018
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.6128; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Call
POP D4; if() #1167 Body End
LOAD D2 0.0001; if() #1169 Test
COMPAREV D2 77
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 16187 ==; Test 'if'
PUSHR D4; if() #1169 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
SETR D2 LINKX
ADDV D2 8
PUSHR D2
SETR D2 LINKY
ADDV D2 8
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
LOAD D2 0.0019; if() #1170 Test
COMPAREV D2 0
GOTOCMP 16131 ==; Test 'if'
LOAD D2 0.0019; InlineFunc[void Game::PlaySound(int)] Params AND if() #1170 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body AND if() #1170 Body End
SETV D2 -1; for() #378 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #378 LoopTest
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 16187 ==; for() #378 TestFail?
PUSHR D4; for() #378 Body Start
PUSHV 1; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int EZB_WeaponTypeToID(int)] Params Start
PUSHR D2
POP REFNPC
PUSHR NPCWEAPON; UsrFunc[int EZB_WeaponTypeToID(int)] Params End
CALLFUNC 3.3516; UsrFunc[int EZB_WeaponTypeToID(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 45
SETV D2 45
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 200
LOAD D2 0.0018
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.6128; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Call
POP D4; for() #378 Body End
LOAD D2 0.0046; for() #378 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 16133; for() #378 End
LOAD D2 0.0001; if() #1169 Body End AND if() #1171 Test
COMPAREV D2 78
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 16271 ==; Test 'if'
PUSHR D4; if() #1171 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
SETR D2 LINKX
ADDV D2 8
PUSHR D2
SETR D2 LINKY
ADDV D2 8
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
LOAD D2 0.0019; if() #1172 Test
COMPAREV D2 0
GOTOCMP 16236 ==; Test 'if'
LOAD D2 0.0019; InlineFunc[void Game::PlaySound(int)] Params AND if() #1172 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body AND if() #1172 Body End
PUSHR D4
PUSHV 1; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int EZB_WeaponTypeToID(int)] Params Start
PUSHR D2
POP REFNPC
PUSHR NPCWEAPON; UsrFunc[int EZB_WeaponTypeToID(int)] Params End
CALLFUNC 3.3516; UsrFunc[int EZB_WeaponTypeToID(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 400
LOAD D2 0.0018
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.6128; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Call
POP D4; if() #1171 Body End
LOAD D2 0.0001; if() #1173 Test
COMPAREV D2 79
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 16351 ==; Test 'if'
PUSHR D4; if() #1173 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
SETR D2 LINKX
ADDV D2 8
PUSHR D2
SETR D2 LINKY
ADDV D2 8
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
PUSHV 2; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int EZB_WeaponTypeToID(int)] Params Start
PUSHR D2
POP REFNPC
PUSHR NPCWEAPON; UsrFunc[int EZB_WeaponTypeToID(int)] Params End
CALLFUNC 3.3516; UsrFunc[int EZB_WeaponTypeToID(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0018
PUSHR D2
LOAD D2 0.0019
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.6128; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Call
POP D4; if() #1173 Body End
LOAD D2 0.0001; if() #1174 Test
COMPAREV D2 80
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 16532 ==; Test 'if'
PUSHR D4; if() #1174 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV -1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 1
SETR GD4 D2
SETV D2 0; for() #379 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #379 LoopTest
COMPAREV D2 80
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 16436 ==; for() #379 TestFail?
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1175 Test AND for() #379 Body Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
SETV D2 40; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 16436 !=; Test 'if' AND break 1; AND if() #1175 Body
PUSHARGSR D4 0.0003; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHV 40; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7426; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #379 Body End
LOAD D2 0.0046; for() #379 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 16370; for() #379 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 54; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
PUSHV 3; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
PUSHV 90; UsrFunc[int EZB_AngDiff(int, int)] Params Start
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2; UsrFunc[int EZB_AngDiff(int, int)] Params End
CALLFUNC 3.0498; UsrFunc[int EZB_AngDiff(int, int)] Call
POP D4
PUSHR D2; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
PUSHR D2
PUSHR D4
PUSHV 0; UsrFunc[int Rand(int, int)] Params Start
PUSHV 35; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
MULTR D2 D3
ADDV D2 90
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.6128; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 40; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1174 Body End
LOAD D2 0.0001; if() #1176 Test
COMPAREV D2 81
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 16655 ==; Test 'if'
PUSHR D4; if() #1176 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_Teleport(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Teleport(ffc, npc, int)] Params End
CALLFUNC 3.6586; UsrFunc[void EZB_Teleport(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
SETR D2 LINKX
ADDV D2 8
PUSHR D2
SETR D2 LINKY
ADDV D2 8
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 3.3205; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
PEEK D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 3.1889; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 54; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
PUSHV 3; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.6128; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 40; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1176 Body End
LOAD D2 0.0001; if() #1177 Test
COMPAREV D2 82
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 16828 ==; Test 'if'
SETV D2 0; for() #380 setup AND if() #1177 Body Start
STORE D2 0.0046
LOAD D2 0.0046; for() #380 LoopTest
COMPAREV D2 5
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 16691 ==; for() #380 TestFail?
PUSHR D4; for() #380 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHARGSV -1000 0.0002
PUSHV 4; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Params End
CALLFUNC 3.6600; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Call
POP D4; for() #380 Body End
LOAD D2 0.0046; for() #380 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 16662; for() #380 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #381 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #381 LoopTest
COMPAREV D2 80
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 16828 ==; for() #381 TestFail?
PUSHR D4; for() #381 Body Start
LOAD D2 0.0042; UsrFunc[int EZB_TurnToAngle(int, int, int)] Params Start
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 1; UsrFunc[int EZB_TurnToAngle(int, int, int)] Params End
CALLFUNC 3.7140; UsrFunc[int EZB_TurnToAngle(int, int, int)] Call
POP D4
STORE D2 0.0042
LOAD D2 0.0046; if() #1178 Test
MODV D2 10
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 16815 ==; Test 'if'
SETV D2 54; InlineFunc[void Game::PlaySound(int)] Params AND if() #1178 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
PUSHV 4; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.6128; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Call
POP D4; if() #1178 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #381 Body End
LOAD D2 0.0046; for() #381 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 16735; for() #381 End
LOAD D2 0.0001; if() #1177 Body End AND if() #1179 Test
COMPAREV D2 83
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 16983 ==; Test 'if'
PUSHR D4; if() #1179 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 3.1889; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
STORE D2 0.0042
SETV D2 30; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SUBV D2 1
MULTV D2 8
ADDV D2 16
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
MULTV D2 8
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 0; for() #382 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #382 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 16983 ==; for() #382 TestFail?
PUSHR D4; for() #382 Body Start
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 3
ADDV D2 0.7500
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7426; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
SUBV D2 80
PUSHR D2
LOAD D2 0.0046
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0042
SUBV D2 60
PUSHR D2
LOAD D2 0.0046
MULTV D2 6
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.3000; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #382 Body End
LOAD D2 0.0046; for() #382 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 16892; for() #382 End
LOAD D2 0.0001; if() #1179 Body End AND if() #1180 Test
COMPAREV D2 84
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 17165 ==; Test 'if'
PUSHR D4; if() #1180 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 30; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SUBV D2 1
MULTV D2 8
ADDV D2 16
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
MULTV D2 8
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 0; for() #383 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #383 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 17165 ==; for() #383 TestFail?
PUSHR D4; for() #383 Body Start
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 3
ADDV D2 0.7500
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7426; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
SUBV D2 80
PUSHR D2
LOAD D2 0.0046
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0042
SUBV D2 60
PUSHR D2
LOAD D2 0.0046
MULTV D2 6
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.3000; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #383 Body End
LOAD D2 0.0046; for() #383 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 17074; for() #383 End
LOAD D2 0.0001; if() #1180 Body End AND if() #1181 Test
COMPAREV D2 85
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 17438 ==; Test 'if'
PUSHR D4; if() #1181 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SUBV D2 1
MULTV D2 8
ADDV D2 16
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
MULTV D2 8
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 -1
STORE D2 0.0043
SETV D2 0; for() #384 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #384 LoopTest
COMPAREV D2 3
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 17438 ==; for() #384 TestFail?
SETV D2 30; InlineFunc[void Game::PlaySound(int)] Params AND for() #384 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #385 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #385 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 17384 ==; for() #385 TestFail?
PUSHR D4; for() #385 Body Start
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 2
ADDV D2 0.5000
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7426; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0043
MULTV D2 80
SETV D2 80
PUSHR D2
LOAD D2 0.0043
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0046
MULTV D2 8
PUSHR D2
LOAD D2 0.0043
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0043
MULTV D2 60
SETV D2 60
PUSHR D2
LOAD D2 0.0043
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0046
MULTV D2 6
PUSHR D2
LOAD D2 0.0043
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.3000; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #385 Body End
LOAD D2 0.0046; for() #385 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 17265; for() #385 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 8; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
LOAD D2 0.0043
SUBV2 0 D2
STORE D2 0.0043
LOAD D2 0.0045; if() #1182 Test
COMPAREV D2 2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 17434 ==; Test 'if'
PUSHR D4; if() #1182 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042; if() #1182 Body End
LOAD D2 0.0045; for() #384 Body End AND for() #384 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 17256; for() #384 End
LOAD D2 0.0001; if() #1181 Body End AND if() #1183 Test
COMPAREV D2 86
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 17690 ==; Test 'if'
PUSHR D4; if() #1183 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SUBV D2 1
MULTV D2 8
ADDV D2 16
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
MULTV D2 4
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 0; for() #386 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #386 LoopTest
COMPAREV D2 5
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 17690 ==; for() #386 TestFail?
SETV D2 30; InlineFunc[void Game::PlaySound(int)] Params AND for() #386 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
PUSHV -20; UsrFunc[int Rand(int, int)] Params Start
PUSHV 20; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0.0043
SETV D2 0; for() #387 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #387 LoopTest
COMPAREV D2 12
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 17686 ==; for() #387 TestFail?
PUSHR D4; for() #387 Body Start
LOAD D2 0.0042; UsrFunc[int EZB_TurnToAngle(int, int, int)] Params Start
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 1; UsrFunc[int EZB_TurnToAngle(int, int, int)] Params End
CALLFUNC 3.7140; UsrFunc[int EZB_TurnToAngle(int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 3.3205; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 15
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 2
ADDV D2 1.5000
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7426; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0043
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 15
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 5
SETV D2 5
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 15
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0043
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 15
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.3000; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #387 Body End
LOAD D2 0.0046; for() #387 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 17543; for() #387 End
LOAD D2 0.0045; for() #386 Body End AND for() #386 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 17528; for() #386 End
LOAD D2 0.0001; if() #1183 Body End AND if() #1184 Test
COMPAREV D2 87
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 18143 ==; Test 'if'
PUSHR D4; if() #1184 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 3.1889; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
STORE D2 0.0042
SETV D2 30; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SUBV D2 1
MULTV D2 8
ADDV D2 16
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
MULTV D2 8
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 0; for() #388 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #388 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 17833 ==; for() #388 TestFail?
PUSHR D4; for() #388 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
SUBV D2 80
PUSHR D2
LOAD D2 0.0046
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0042
SUBV D2 60
PUSHR D2
LOAD D2 0.0046
MULTV D2 6
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.3000; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #388 Body End
LOAD D2 0.0046; for() #388 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 17754; for() #388 End
SETV D2 0; for() #389 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #389 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 17888 ==; for() #389 TestFail?
PUSHR D4; for() #389 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.3000; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #389 Body End
LOAD D2 0.0046; for() #389 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 17835; for() #389 End
SETV D2 35; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #390 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #390 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 17945 ==; for() #390 TestFail?
PUSHR D4; for() #390 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.3000; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #390 Body End
LOAD D2 0.0046; for() #390 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 17892; for() #390 End
SETV D2 0; for() #391 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #391 LoopTest
COMPAREV D2 144
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18061 ==; for() #391 TestFail?
LOAD D2 0.0046; if() #1185 Test AND for() #391 Body Start
MODV D2 18
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 17960 ==; Test 'if'
SETV D2 54; InlineFunc[void Game::PlaySound(int)] Params AND if() #1185 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body AND if() #1185 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0042; InlineFunc[int WrapDegrees(int)] Params Start
PUSHR D2
LOAD D2 0.0046
MULTV D2 20
POP D3
ADDR D2 D3; InlineFunc[int WrapDegrees(int)] Params End
WRAPDEGREES D2; InlineFunc[int WrapDegrees(int)] Body
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 3.3205; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
PEEK D4
PUSHARGSR D4 0.0002; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 0.7500
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7426; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 20
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 20
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.3000; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #391 Body End
LOAD D2 0.0046; for() #391 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 17947; for() #391 End
SETV D2 0; for() #392 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #392 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18143 ==; for() #392 TestFail?
PUSHR D4; for() #392 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 6
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
ADDV D2 90
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCWDP
MULTV D2 2
PUSHR D2; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.3000; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #392 Body End
LOAD D2 0.0046; for() #392 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 18063; for() #392 End
LOAD D2 0.0001; if() #1184 Body End AND if() #1186 Test
COMPAREV D2 88
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 18499 ==; Test 'if'
PUSHR D4; if() #1186 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 30; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SUBV D2 1
MULTV D2 8
ADDV D2 16
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
MULTV D2 8
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 30; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #393 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #393 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18307 ==; for() #393 TestFail?
PUSHR D4; for() #393 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
SUBV D2 120
PUSHR D2
LOAD D2 0.0042
SUBV D2 130
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCWDP
MULTV D2 2
PUSHR D2; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2715; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #393 Body End
LOAD D2 0.0046; for() #393 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 18236; for() #393 End
SETV D2 0; for() #394 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #394 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18402 ==; for() #394 TestFail?
PUSHR D4; for() #394 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
PUSHV 0.5000
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7426; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
SUBV D2 120
PUSHR D2
LOAD D2 0.0042
SUBV D2 130
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2715; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #394 Body End
LOAD D2 0.0046; for() #394 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 18309; for() #394 End
SETV D2 30; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #395 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #395 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18499 ==; for() #395 TestFail?
PUSHR D4; for() #395 Body Start
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 3
ADDV D2 0.7500
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7426; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
SUBV D2 120
PUSHR D2
LOAD D2 0.0046
MULTV D2 10
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0042
SUBV D2 130
PUSHR D2
LOAD D2 0.0046
MULTV D2 10
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCWDP
MULTV D2 2
PUSHR D2; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2715; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #395 Body End
LOAD D2 0.0046; for() #395 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 18406; for() #395 End
LOAD D2 0.0001; if() #1186 Body End AND if() #1187 Test
COMPAREV D2 89
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 18720 ==; Test 'if'
PUSHR D4; if() #1187 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SUBV D2 1
MULTV D2 8
ADDV D2 16
ADDV D2 8
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
MULTV D2 4
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 0; for() #396 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #396 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18720 ==; for() #396 TestFail?
SETV D2 30; InlineFunc[void Game::PlaySound(int)] Params AND for() #396 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
PUSHV -20; UsrFunc[int Rand(int, int)] Params Start
PUSHV 20; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0.0043
SETV D2 0; for() #397 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #397 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18716 ==; for() #397 TestFail?
LOAD D2 0.0045; if() #1188 Test AND for() #397 Body Start
COMPAREV D2 1
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18628 ==; Test 'if'
PUSHR D4; if() #1188 Body Start
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 22.5000
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 4
ADDV D2 4
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7426; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4; if() #1188 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0043
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 22.5000
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 5
SETV D2 5
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 22.5000
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0043
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 22.5000
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCWDP
MULTV D2 2
PUSHR D2; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2715; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #397 Body End
LOAD D2 0.0046; for() #397 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 18605; for() #397 End
LOAD D2 0.0045; for() #396 Body End AND for() #396 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 18590; for() #396 End
LOAD D2 0.0001; if() #1187 Body End AND if() #1189 Test
COMPAREV D2 90
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19500 ==; Test 'if'
PUSHR D4; if() #1189 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3639; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 3.1889; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
STORE D2 0.0042
SETV D2 30; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SUBV D2 1
MULTV D2 8
ADDV D2 16
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
MULTV D2 8
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 0; for() #398 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #398 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18863 ==; for() #398 TestFail?
PUSHR D4; for() #398 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
SUBV D2 80
PUSHR D2
LOAD D2 0.0046
MULTV D2 4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0042
SUBV D2 60
PUSHR D2
LOAD D2 0.0046
MULTV D2 3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 4.5000
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2715; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #398 Body End
LOAD D2 0.0046; for() #398 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 18784; for() #398 End
SETV D2 0; for() #399 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #399 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18918 ==; for() #399 TestFail?
PUSHR D4; for() #399 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2715; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #399 Body End
LOAD D2 0.0046; for() #399 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 18865; for() #399 End
SETV D2 35; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #400 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #400 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18975 ==; for() #400 TestFail?
PUSHR D4; for() #400 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2715; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #400 Body End
LOAD D2 0.0046; for() #400 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 18922; for() #400 End
SETV D2 0; for() #401 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #401 LoopTest
COMPAREV D2 108
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 19091 ==; for() #401 TestFail?
LOAD D2 0.0046; if() #1190 Test AND for() #401 Body Start
MODV D2 18
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 18990 ==; Test 'if'
SETV D2 54; InlineFunc[void Game::PlaySound(int)] Params AND if() #1190 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body AND if() #1190 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0042; InlineFunc[int WrapDegrees(int)] Params Start
PUSHR D2
LOAD D2 0.0046
MULTV D2 20
POP D3
ADDR D2 D3; InlineFunc[int WrapDegrees(int)] Params End
WRAPDEGREES D2; InlineFunc[int WrapDegrees(int)] Body
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 3.3205; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
PEEK D4
PUSHARGSR D4 0.0002; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 0.7500
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7426; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 20
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 20
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2715; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #401 Body End
LOAD D2 0.0046; for() #401 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 18977; for() #401 End
SETV D2 0; for() #402 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #402 LoopTest
COMPAREV D2 3
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 19199 ==; for() #402 TestFail?
PUSHR D4; for() #402 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0042; InlineFunc[int WrapDegrees(int)] Params Start
PUSHR D2
LOAD D2 0.0046
MULTV D2 20
POP D3
ADDR D2 D3; InlineFunc[int WrapDegrees(int)] Params End
WRAPDEGREES D2; InlineFunc[int WrapDegrees(int)] Body
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 3.3205; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
PEEK D4
PUSHARGSR D4 0.0002; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 0.5000
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7426; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 20
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 20
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2715; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #402 Body End
LOAD D2 0.0046; for() #402 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 19093; for() #402 End
SETV D2 3; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 40
PUSHR D2
POP D2
SETR QUAKE D2
SETV D2 0; for() #403 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #403 LoopTest
COMPAREV D2 24
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 19298 ==; for() #403 TestFail?
PUSHR D4; for() #403 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ADDV D2 16
PUSHR D2
LOAD D2 0.0042
ADDV D2 60
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7449; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ADDV D2 16
PUSHR D2
LOAD D2 0.0042
ADDV D2 60
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7459; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
SETV D3 360; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
PUSHR D4
PUSHV 100; UsrFunc[int Rand(int, int)] Params Start
PUSHV 400; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2
PUSHV 9; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params End
CALLFUNC 3.3388; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 15
PUSHR D4
PUSHV 24; UsrFunc[int Rand(int, int)] Params Start
PUSHV 36; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
DIVV D2 10
PUSHR D2
PUSHV 1; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9567; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0031; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params Start
PUSHR D2; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params End
CALLFUNC 3.6201; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Call
POP D4; for() #403 Body End
LOAD D2 0.0046; for() #403 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 19207; for() #403 End
SETV D2 0; for() #404 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #404 LoopTest
COMPAREV D2 60
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 19355 ==; for() #404 TestFail?
PUSHR D4; for() #404 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
ADDV D2 60
PUSHR D2
LOAD D2 0.0042
ADDV D2 60
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2715; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #404 Body End
LOAD D2 0.0046; for() #404 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 19300; for() #404 End
SETV D2 0; for() #405 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #405 LoopTest
COMPAREV D2 36
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 19429 ==; for() #405 TestFail?
LOAD D2 0.0046; if() #1191 Test AND for() #405 Body Start
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19369 ==; Test 'if'
SETV D2 54; InlineFunc[void Game::PlaySound(int)] Params AND if() #1191 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body AND if() #1191 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
ADDV D2 60
PUSHR D2
LOAD D2 0.0042
ADDV D2 60
PUSHR D2
LOAD D2 0.0046
MULTV D2 20
SETV D2 20
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2715; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #405 Body End
LOAD D2 0.0046; for() #405 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 19357; for() #405 End
SETV D2 0; for() #406 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #406 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 19500 ==; for() #406 TestFail?
PUSHR D4; for() #406 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
ADDV D2 60
PUSHR D2
LOAD D2 0.0042
ADDV D2 60
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2715; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #406 Body End
LOAD D2 0.0046; for() #406 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 19431; for() #406 End
SETV D2 0; if() #1189 Body End
STORE D2 0.0046
LOAD D2 0.0027; if() #1192 Test
PUSHR D2
POP D0
READPODARRAYV D2 200
COMPAREV D2 0
GOTOCMP 19717 ==; Test 'if'
LOAD D2 0.0027; if() #663 Test AND if() #1192 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 200
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19595 ==; Test 'if'
LOAD D2 0.0027; if() #1193 Test AND if() #663 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 202
COMPAREV D2 0
GOTOCMP 19717 ==; Test 'if'
PUSHR D4; if(true) #664 [Opt:AlwaysOn] AND if() #1193 Body Start
LOAD D2 0.0034; UsrFunc[int EZB_BarrierShift_TransformAnimSize(npc, int)] Params Start
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[int EZB_BarrierShift_TransformAnimSize(npc, int)] Params End
CALLFUNC 3.0551; UsrFunc[int EZB_BarrierShift_TransformAnimSize(npc, int)] Call
POP D4
STORE D2 0.0045
LOAD D2 0.0045; InlineFunc[int Max(int, int)] Params Start AND if(true) #1194 [Opt:AlwaysOn]
PUSHVARGR D2
LOAD D2 0.0034; InlineFunc[int Max(int, int)] Params Start
PUSHR D2
POP REFNPC
PUSHVARGR NPCTXSZ
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHVARGR NPCTYSZ; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
MULTV D2 8
ADDV D2 8
STORE D2 0.0044
PUSHR D4
PUSHV 0; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0047; UsrFunc[int CenterX(ffc)] Params Start
PUSHR D2; UsrFunc[int CenterX(ffc)] Params End
CALLFUNC 2.0505; UsrFunc[int CenterX(ffc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[int CenterY(ffc)] Params Start
PUSHR D2; UsrFunc[int CenterY(ffc)] Params End
CALLFUNC 2.0551; UsrFunc[int CenterY(ffc)] Call
POP D4
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 12
PUSHARGSV 0 0.0003; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.6128; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 16; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7543; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 56; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
LOAD D2 0.0034; UsrFunc[void EZB_Barriershift_Load(npc, int, bool, bool)] Params Start
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0
PUSHV 1; UsrFunc[void EZB_Barriershift_Load(npc, int, bool, bool)] Params End
CALLFUNC 3.0609; UsrFunc[void EZB_Barriershift_Load(npc, int, bool, bool)] Call
POP D4
SETV D2 0
PUSHR D2
LOAD D2 0.0027
SETR D0 D2
POP D2
WRITEPODARRAYVR 202 D2
SETV D2 1
STORE D2 0.0046; if() #1193 Body End
GOTO 19717; if() #663 Body End
LOAD D2 0.0027; if() #665 Test AND if() #663 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 200
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19661 ==; Test 'if'
SETV D2 0; if() #665 Body Start
STORE D2 0.0045
LOAD D2 0.0027; if() #666 Test
PUSHR D2
POP D0
READPODARRAYV D2 314
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19616 ==; Test 'if'
SETV D2 1; if() #666 Body Start
STORE D2 0.0045
GOTO 19628; if() #666 Body End
LOAD D2 0.0027; InlineFunc[int Rand(int)] Params Start AND if() #1195 Test AND if() #666 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 314
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19628 ==; Test 'if'
SETV D2 1; if() #1195 Body Start
STORE D2 0.0045; if() #1195 Body End
LOAD D2 0.0027; if() #666 Else End AND if() #667 Test
PUSHR D2
POP D0
READPODARRAYV D2 313
COMPAREV D2 0
GOTOCMP 19645 ==; Test 'if'
LOAD D2 0.0027; if() #667 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 313
SUBV D2 1
PUSHR D2
LOAD D2 0.0027
SETR D0 D2
POP D2
WRITEPODARRAYVR 313 D2
GOTO 19717; if() #667 Body End
LOAD D2 0.0045; if() #1196 Test AND if() #667 Else Start
COMPAREV D2 0
GOTOCMP 19717 ==; Test 'if'
SETV D2 56; InlineFunc[void Game::PlaySound(int)] Params AND if() #1196 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
LOAD D2 0.0034; UsrFunc[void EZB_Barriershift_Load(npc, int, bool, bool)] Params Start
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHARGSV 0 0.0002; UsrFunc[void EZB_Barriershift_Load(npc, int, bool, bool)] Params End
CALLFUNC 3.0609; UsrFunc[void EZB_Barriershift_Load(npc, int, bool, bool)] Call
POP D4
SETV D2 1
STORE D2 0.0046; if() #1196 Body End
GOTO 19717; if() #667 Else End AND if() #665 Body End
SETV D2 0; if() #665 Else Start
STORE D2 0.0045
LOAD D2 0.0027; if() #668 Test
PUSHR D2
POP D0
READPODARRAYV D2 314
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19674 ==; Test 'if'
SETV D2 1; if() #668 Body Start
STORE D2 0.0045
GOTO 19686; if() #668 Body End
LOAD D2 0.0027; InlineFunc[int Rand(int)] Params Start AND if() #1197 Test AND if() #668 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 314
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19686 ==; Test 'if'
SETV D2 1; if() #1197 Body Start
STORE D2 0.0045; if() #1197 Body End
LOAD D2 0.0027; if() #668 Else End AND if() #669 Test
PUSHR D2
POP D0
READPODARRAYV D2 313
COMPAREV D2 0
GOTOCMP 19703 ==; Test 'if'
LOAD D2 0.0027; if() #669 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 313
SUBV D2 1
PUSHR D2
LOAD D2 0.0027
SETR D0 D2
POP D2
WRITEPODARRAYVR 313 D2
GOTO 19717; if() #669 Body End
LOAD D2 0.0045; if() #1198 Test AND if() #669 Else Start
COMPAREV D2 0
GOTOCMP 19717 ==; Test 'if'
SETV D2 56; InlineFunc[void Game::PlaySound(int)] Params AND if() #1198 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
LOAD D2 0.0034; UsrFunc[void EZB_Barriershift_Load(npc, int, bool, bool)] Params Start
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[void EZB_Barriershift_Load(npc, int, bool, bool)] Params End
CALLFUNC 3.0609; UsrFunc[void EZB_Barriershift_Load(npc, int, bool, bool)] Call
POP D4; if() #1198 Body End
LOAD D2 0.0046; if() #669 Else End AND if() #665 Else End AND if() #663 Else End AND if() #1192 Body End AND if() #1199 Test
COMPAREV D2 0
GOTOCMP 20221 ==; Test 'if'
PUSHR D4; if() #1199 Body Start
PUSHV 512; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.4952; UsrFunc[void Ghost_UnsetFlag(int)] Call
PEEK D4
PUSHV 256; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.4952; UsrFunc[void Ghost_UnsetFlag(int)] Call
PEEK D4
PUSHV 32; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.4952; UsrFunc[void Ghost_UnsetFlag(int)] Call
PEEK D4
PUSHV 7168; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.4952; UsrFunc[void Ghost_UnsetFlag(int)] Call
PEEK D4
PUSHV 65536; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.4952; UsrFunc[void Ghost_UnsetFlag(int)] Call
PEEK D4
PUSHV 16384; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.4952; UsrFunc[void Ghost_UnsetFlag(int)] Call
PEEK D4
PUSHV 65538; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.4952; UsrFunc[void Ghost_UnsetFlag(int)] Call
PEEK D4
PUSHV 1; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.4952; UsrFunc[void Ghost_UnsetFlag(int)] Call
PEEK D4
PUSHV 16384; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.4952; UsrFunc[void Ghost_UnsetFlag(int)] Call
PEEK D4
PUSHV 16; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.4952; UsrFunc[void Ghost_UnsetFlag(int)] Call
PEEK D4
PUSHV 8; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.4952; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP D4
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 300
STORE D2 0.0026
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 301
STORE D2 0.0025
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 302
STORE D2 0.0024
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 303
STORE D2 0.0023
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 304
STORE D2 0.0022
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 305
STORE D2 0.0021
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 306
STORE D2 0.0020
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 307
STORE D2 0.0019
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 308
STORE D2 0.0018
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0.0017
SETV D2 0
PUSHR D2
LOAD D2 0.0030
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0030
SETR D0 D2
POP D2
WRITEPODARRAYVR 100 D2
PUSHR D4
LOAD D2 0.0027; UsrFunc[void EZB_InitVars(int)] Params Start
PUSHR D2; UsrFunc[void EZB_InitVars(int)] Params End
CALLFUNC 3.5304; UsrFunc[void EZB_InitVars(int)] Call
POP D4
SETV D2 0
STORE D2 0.0016
SETV D2 0
STORE D2 0.0015
LOAD D2 0.0025; if() #670 Test
COMPAREV D2 44
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19833 ==; Test 'if'
SETV D2 44; if() #670 Body Start
STORE D2 0.0016
GOTO 19864; if() #670 Body End
LOAD D2 0.0025; if() #671 Test AND if() #670 Else Start
COMPAREV D2 45
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19841 ==; Test 'if'
SETV D2 45; if() #671 Body Start
STORE D2 0.0016
GOTO 19864; if() #671 Body End
LOAD D2 0.0025; if() #672 Test AND if() #671 Else Start
COMPAREV D2 46
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19849 ==; Test 'if'
SETV D2 46; if() #672 Body Start
STORE D2 0.0016
GOTO 19864; if() #672 Body End
LOAD D2 0.0025; if() #673 Test AND if() #672 Else Start
COMPAREV D2 47
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19857 ==; Test 'if'
SETV D2 47; if() #673 Body Start
STORE D2 0.0016
GOTO 19864; if() #673 Body End
LOAD D2 0.0025; if() #1200 Test AND if() #673 Else Start
COMPAREV D2 48
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19864 ==; Test 'if'
SETV D2 48; if() #1200 Body Start
STORE D2 0.0016; if() #1200 Body End
LOAD D2 0.0016; if() #673 Else End AND if() #672 Else End AND if() #671 Else End AND if() #670 Else End AND if() #1201 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 19875 ==; Test 'if'
LOAD D2 0.0024; if() #1201 Body Start
STORE D2 0.0025
LOAD D2 0.0023
STORE D2 0.0024
SETV D2 0
STORE D2 0.0023; if() #1201 Body End
LOAD D2 0.0022
ANDV D2 15
STORE D2 0.0014
LOAD D2 0.0022; InlineFunc[int Floor(int)] Params Start
RSHIFTV D2 4; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
ANDV D2 15
STORE D2 0.0013
LOAD D2 0.0017; if() #1202 Test
ANDV D2 512
COMPAREV D2 0
GOTOCMP 19893 !=
LOAD D2 0.0017
ANDV D2 1024
COMPAREV D2 0
GOTOCMP 19893 !=
SETV D2 1
GOTO 19894
SETV D2 0
COMPAREV D2 0
GOTOCMP 19903 ==; Test 'if'
PUSHR D4; if() #1202 Body Start
PUSHV 8; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4591; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK D4
PUSHV 16; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4591; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #1202 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_GetExtraProperties(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 312
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0025
PUSHR D2
LOAD D2 0.0024
PUSHR D2
LOAD D2 0.0023
PUSHR D2
LOAD D2 0.0030
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_GetExtraProperties(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.4749; UsrFunc[void EZB_GetExtraProperties(ffc, npc, int, int, int, int, int, int, int)] Call
POP D4
LOAD D2 0.0020
ANDV D2 15
STORE D2 0.0012
LOAD D2 0.0020
RSHIFTV D2 4
ANDV D2 15
STORE D2 0.0011
LOAD D2 0.0011; if() #1203 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19941 ==; Test 'if'
LOAD D2 0.0012; if() #1203 Body Start
STORE D2 0.0011; if() #1203 Body End
PUSHR D4
LOAD D2 0.0012; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 4; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0609; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0012
PUSHR D4
LOAD D2 0.0011; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 4; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0609; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0011
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 310
STORE D2 0.0010
SETR D2 GD12; if() #1204 Test
PUSHR D2
LOAD D2 0.0012
POP D3
COMPARER D3 D2
GOTOCMP 19976 !=
SETR D2 GD13
PUSHR D2
LOAD D2 0.0011
POP D3
COMPARER D3 D2
GOTOCMP 19976 !=
SETV D2 0
GOTO 19977
SETV D2 1
COMPAREV D2 0
GOTOCMP 19991 ==; Test 'if'
PUSHR D4; if() #1204 Body Start
LOAD D2 0.0047; UsrFunc[void Ghost_Transform(ffc, npc, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
PUSHARGSV -1 0.0002
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0011
PUSHR D2; UsrFunc[void Ghost_Transform(ffc, npc, int, int, int, int)] Params End
CALLFUNC 2.7722; UsrFunc[void Ghost_Transform(ffc, npc, int, int, int, int)] Call
POP D4; if() #1204 Body End
PUSHR D4
LOAD D2 0.0034; UsrFunc[void Ghost_SetHitOffsets(npc, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0014
PUSHR D2
LOAD D2 0.0014
PUSHR D2; UsrFunc[void Ghost_SetHitOffsets(npc, int, int, int, int)] Params End
CALLFUNC 2.7486; UsrFunc[void Ghost_SetHitOffsets(npc, int, int, int, int)] Call
POP D4
LOAD D2 0.0017; if() #674 Test
ANDV D2 2
COMPAREV D2 0
GOTOCMP 20013 ==; Test 'if'
PUSHR D4; if() #674 Body Start
PUSHV 512; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4591; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4
GOTO 20021; if() #674 Body End
LOAD D2 0.0017; if() #1205 Test AND if() #674 Else Start
ANDV D2 1
COMPAREV D2 0
GOTOCMP 20021 ==; Test 'if'
PUSHR D4; if() #1205 Body Start
PUSHV 256; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4591; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #1205 Body End
LOAD D2 0.0017; if() #674 Else End AND if() #1206 Test
ANDV D2 16
COMPAREV D2 0
GOTOCMP 20029 ==; Test 'if'
PUSHR D4; if() #1206 Body Start
PUSHV 32; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4591; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #1206 Body End
LOAD D2 0.0017; if() #675 Test
ANDV D2 4
COMPAREV D2 0
GOTOCMP 20073 ==; Test 'if'
PUSHR D4; if() #675 Body Start
PUSHV 7168; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4591; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK D4
PUSHV 65536; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4591; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4
SETV D2 1
PUSHR D2
LOAD D2 0.0047
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2
LOAD D2 0.0017; if() #1207 Test
ANDV D2 16
COMPAREV D2 0
GOTOCMP 20063 ==
PUSHR D4
CALLFUNC 2.7469; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 20063 !=
SETV D2 1
GOTO 20064
SETV D2 0
COMPAREV D2 0
GOTOCMP 20081 ==; Test 'if'
PUSHR D4; if() #1207 Body Start
PUSHV 16384; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4591; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4
SETV D2 8
SETR GD3 D2; if() #1207 Body End
GOTO 20081; if() #675 Body End
LOAD D2 0.0017; if() #1208 Test AND if() #675 Else Start
ANDV D2 8
COMPAREV D2 0
GOTOCMP 20081 ==; Test 'if'
PUSHR D4; if() #1208 Body Start
PUSHV 65538; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4591; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #1208 Body End
LOAD D2 0.0017; if() #675 Else End AND if() #1209 Test
ANDV D2 256
COMPAREV D2 0
GOTOCMP 20089 ==; Test 'if'
PUSHR D4; if() #1209 Body Start
PUSHV 1; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4591; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #1209 Body End
SETV D2 -1
STORE D2 0.0009
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
MULTV D2 10
STORE D2 0.0008
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0007
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
STORE D2 0.0006
SETV D2 0
STORE D2 0.0038
SETV D2 0
STORE D2 0.0037
SETV D2 -1
STORE D2 0.0004
LOAD D2 0.0026; if() #1211 Test
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 20163 ==; Test 'if'
SETV D3 360; InlineFunc[int Rand(int)] Params AND if() #1211 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0034; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7449; UsrFunc[int VectorX(int, int)] Call
POP D4
STORE D2 0.0038
PUSHR D4
LOAD D2 0.0034; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7459; UsrFunc[int VectorY(int, int)] Call
POP D4
STORE D2 0.0037; if() #1211 Body End
LOAD D2 0.0026; if() #1212 Test
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 20171 ==; Test 'if'
SETV D3 4; InlineFunc[int Rand(int)] Params AND if() #1212 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0007; if() #1212 Body End
LOAD D2 0.0026; if() #1213 Test
COMPAREV D2 12
GOTOCMP 20179 ==
LOAD D2 0.0026
COMPAREV D2 13
GOTOCMP 20179 ==
SETV D2 0
GOTO 20180
SETV D2 1
COMPAREV D2 0
GOTOCMP 20187 ==; Test 'if'
LOAD D2 0.0034; if() #1213 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
STORE D2 0.0006; if() #1213 Body End
LOAD D2 0.0027; if() #1214 Test
PUSHR D2
POP D0
READPODARRAYV D2 200
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 20201 ==; Test 'if'
SETV D2 0; if() #1214 Body Start
PUSHR D2
LOAD D2 0.0027
SETR D0 D2
POP D2
WRITEPODARRAYVR 200 D2; if() #1214 Body End
SETV D2 0; for() #407 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #407 LoopTest
COMPAREV D2 16
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 20221 ==; for() #407 TestFail?
SETV D2 0; for() #407 Body Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0046
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #407 Body End
LOAD D2 0.0046; for() #407 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 20203; for() #407 End
LOAD D2 0.0010; if() #1199 Body End
SETR GD10 D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
MULTV D2 10
STORE D2 0.0008
LOAD D2 0.0026; if() #1215 Test
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 20261 ==; Test 'if'
SETV D3 360; InlineFunc[int Rand(int)] Params AND if() #1215 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0034; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7449; UsrFunc[int VectorX(int, int)] Call
POP D4
STORE D2 0.0038
PUSHR D4
LOAD D2 0.0034; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7459; UsrFunc[int VectorY(int, int)] Call
POP D4
STORE D2 0.0037; if() #1215 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR GD4; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params End
CALLFUNC 3.3231; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Call
POP D4
SETV D2 0
PUSHR D2
LOAD D2 0.0027
SETR D0 D2
POP D2
WRITEPODARRAYVR 319 D2; if() #1055 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while(true) #9 Body [Opt:AlwaysOn] End
GOTO 480; while() #9 End
LOAD D3 0.0005
DEALLOCATEMEMR D3
LOAD D3 0.0027
DEALLOCATEMEMR D3
LOAD D3 0.0028
DEALLOCATEMEMR D3
LOAD D3 0.0030
DEALLOCATEMEMR D3
LOAD D3 0.0033
DEALLOCATEMEMR D3
LOAD D3 0.0035
DEALLOCATEMEMR D3
LOAD D3 0.0036
DEALLOCATEMEMR D3; [Opt:NeverRet] AND void run(int) Body End
SETR D4 SP2; Func[int DirNormal(int)] Body Start
LOAD D2 0; switch() #15 Key
SETR SWITCHKEY D2; Store key
COMPAREV SWITCHKEY 8
GOTOCMP 20321 ==; case '80000'
COMPAREV SWITCHKEY 9
GOTOCMP 20323 ==; case '90000'
COMPAREV SWITCHKEY 10
GOTOCMP 20325 ==; case '100000'
COMPAREV SWITCHKEY 11
GOTOCMP 20327 ==; case '110000'
COMPAREV SWITCHKEY 12
GOTOCMP 20329 ==; case '120000'
COMPAREV SWITCHKEY 13
GOTOCMP 20331 ==; case '130000'
COMPAREV SWITCHKEY 14
GOTOCMP 20333 ==; case '140000'
COMPAREV SWITCHKEY 15
GOTOCMP 20335 ==; case '150000'
GOTO 20337; switch() #15 NoMatch
SETV D2 0; Case block AND return Start
GOTO 20338; return End
SETV D2 5; Case block AND return Start
GOTO 20338; return End
SETV D2 3; Case block AND return Start
GOTO 20338; return End
SETV D2 7; Case block AND return Start
GOTO 20338; return End
SETV D2 1; Case block AND return Start
GOTO 20338; return End
SETV D2 6; Case block AND return Start
GOTO 20338; return End
SETV D2 2; Case block AND return Start
GOTO 20338; return End
SETV D2 4; Case block AND return Start
GOTO 20338; return End
LOAD D2 0; Case block AND return Start
POP D5; return End
RETURNFUNC; Func[int DirNormal(int)] Body End
SETR D4 SP2; Func[int Angle(int, int, int, int)] Body Start
LOAD D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start AND return Start
PUSHR D2
LOAD D2 0.0003
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
SETR D3 D2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
POPARGS D5 0.0004; return End
RETURNFUNC; Func[int Angle(int, int, int, int)] Body End
SETR D4 SP2; Func[int AngleDir4(int)] Body Start
LOAD D2 0; if() #4 Test
COMPAREV D2 135
GOTOCMP 20368 >
LOAD D2 0
COMPAREV D2 45
GOTOCMP 20368 <=
SETV D2 1
GOTO 20369
SETV D2 0
COMPAREV D2 0
GOTOCMP 20373 ==; Test 'if'
SETV D2 1; return Start AND if() #4 Body Start
GOTO 20400; return End AND if() #4 Body End
LOAD D2 0; if() #5 Test AND if() #4 Else Start
COMPAREV D2 45
GOTOCMP 20381 >
LOAD D2 0
COMPAREV D2 -45
GOTOCMP 20381 <=
SETV D2 1
GOTO 20382
SETV D2 0
COMPAREV D2 0
GOTOCMP 20386 ==; Test 'if'
SETV D2 3; return Start AND if() #5 Body Start
GOTO 20400; return End AND if() #5 Body End
LOAD D2 0; if() #6 Test AND if() #5 Else Start
COMPAREV D2 -45
GOTOCMP 20394 >
LOAD D2 0
COMPAREV D2 -135
GOTOCMP 20394 <=
SETV D2 1
GOTO 20395
SETV D2 0
COMPAREV D2 0
GOTOCMP 20399 ==; Test 'if'
SETV D2 0; return Start AND if() #6 Body Start
GOTO 20400; return End AND if() #6 Body End
SETV D2 2; return Start AND if() #6 Else Start
POP D5; return End AND if() #6 Else End AND if() #5 Else End AND if() #4 Else End
RETURNFUNC; Func[int AngleDir4(int)] Body End
SETR D4 SP2; Func[int AngleDir8(int)] Body Start
LOAD D2 0; if() #7 Test
COMPAREV D2 157.5000
GOTOCMP 20411 >
LOAD D2 0
COMPAREV D2 112.5000
GOTOCMP 20411 <=
SETV D2 1
GOTO 20412
SETV D2 0
COMPAREV D2 0
GOTOCMP 20416 ==; Test 'if'
SETV D2 6; return Start AND if() #7 Body Start
GOTO 20495; return End AND if() #7 Body End
LOAD D2 0; if() #8 Test AND if() #7 Else Start
COMPAREV D2 112.5000
GOTOCMP 20424 >
LOAD D2 0
COMPAREV D2 67.5000
GOTOCMP 20424 <=
SETV D2 1
GOTO 20425
SETV D2 0
COMPAREV D2 0
GOTOCMP 20429 ==; Test 'if'
SETV D2 1; return Start AND if() #8 Body Start
GOTO 20495; return End AND if() #8 Body End
LOAD D2 0; if() #9 Test AND if() #8 Else Start
COMPAREV D2 67.5000
GOTOCMP 20437 >
LOAD D2 0
COMPAREV D2 22.5000
GOTOCMP 20437 <=
SETV D2 1
GOTO 20438
SETV D2 0
COMPAREV D2 0
GOTOCMP 20442 ==; Test 'if'
SETV D2 7; return Start AND if() #9 Body Start
GOTO 20495; return End AND if() #9 Body End
LOAD D2 0; if() #10 Test AND if() #9 Else Start
COMPAREV D2 22.5000
GOTOCMP 20450 >
LOAD D2 0
COMPAREV D2 -22.5000
GOTOCMP 20450 <=
SETV D2 1
GOTO 20451
SETV D2 0
COMPAREV D2 0
GOTOCMP 20455 ==; Test 'if'
SETV D2 3; return Start AND if() #10 Body Start
GOTO 20495; return End AND if() #10 Body End
LOAD D2 0; if() #11 Test AND if() #10 Else Start
COMPAREV D2 -22.5000
GOTOCMP 20463 >
LOAD D2 0
COMPAREV D2 -67.5000
GOTOCMP 20463 <=
SETV D2 1
GOTO 20464
SETV D2 0
COMPAREV D2 0
GOTOCMP 20468 ==; Test 'if'
SETV D2 5; return Start AND if() #11 Body Start
GOTO 20495; return End AND if() #11 Body End
LOAD D2 0; if() #12 Test AND if() #11 Else Start
COMPAREV D2 -67.5000
GOTOCMP 20476 >
LOAD D2 0
COMPAREV D2 -112.5000
GOTOCMP 20476 <=
SETV D2 1
GOTO 20477
SETV D2 0
COMPAREV D2 0
GOTOCMP 20481 ==; Test 'if'
SETV D2 0; return Start AND if() #12 Body Start
GOTO 20495; return End AND if() #12 Body End
LOAD D2 0; if() #13 Test AND if() #12 Else Start
COMPAREV D2 -112.5000
GOTOCMP 20489 >
LOAD D2 0
COMPAREV D2 -157.5000
GOTOCMP 20489 <=
SETV D2 1
GOTO 20490
SETV D2 0
COMPAREV D2 0
GOTOCMP 20494 ==; Test 'if'
SETV D2 4; return Start AND if() #13 Body Start
GOTO 20495; return End AND if() #13 Body End
SETV D2 2; return Start AND if() #13 Else Start
POP D5; return End AND if() #13 Else End AND if() #12 Else End AND if() #11 Else End AND if() #10 Else End AND if() #9 Else End AND if() #8 Else End AND if() #7 Else End
RETURNFUNC; Func[int AngleDir8(int)] Body End
SETR D4 SP2; Func[int CenterLinkX()] Body Start
SETR D2 LINKX; return Start
ADDV D2 8
RETURNFUNC; return End AND Func[int CenterLinkX()] Body End
SETR D4 SP2; Func[int CenterLinkY()] Body Start
SETR D2 LINKY; return Start
ADDV D2 8
RETURNFUNC; return End AND Func[int CenterLinkY()] Body End
SETR D4 SP2; Func[int CenterX(ffc)] Body Start
LOAD D2 0; return Start
PUSHR D2
POP REFFFC
SETR D2 X
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFFFC
SETR D2 FFTWIDTH
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFFFC
SETR D2 FFTWIDTH
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
POP D5; return End
RETURNFUNC; Func[int CenterX(ffc)] Body End
SETR D4 SP2; Func[int CenterX(npc)] Body Start
LOAD D2 0; return Start
PUSHR D2
POP REFNPC
SETR D2 NPCX
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCTXSZ
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCTXSZ
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
POP D5; return End
RETURNFUNC; Func[int CenterX(npc)] Body End
SETR D4 SP2; Func[int CenterY(ffc)] Body Start
LOAD D2 0; return Start
PUSHR D2
POP REFFFC
SETR D2 Y
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFFFC
SETR D2 FFTHEIGHT
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFFFC
SETR D2 FFTHEIGHT
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
POP D5; return End
RETURNFUNC; Func[int CenterY(ffc)] Body End
SETR D4 SP2; Func[int CenterY(npc)] Body Start
LOAD D2 0; return Start
PUSHR D2
POP REFNPC
SETR D2 NPCY
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCTYSZ
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCTYSZ
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
POP D5; return End
RETURNFUNC; Func[int CenterY(npc)] Body End
SETR D4 SP2; Func[int Rand(int, int)] Body Start
SETV D2 0; InlineFunc[int randgen::Rand(int, int)] Params Start AND return Start
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0001
SETR D3 D2; InlineFunc[int randgen::Rand(int, int)] Params End
POP D2; InlineFunc[int randgen::Rand(int, int)] Body Start
POP REFRNG
RNGRAND3 D2 D3; InlineFunc[int randgen::Rand(int, int)] Body End
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int Rand(int, int)] Body End
SETR D4 SP2; Func[int Clamp(int, int, int)] Body Start
LOAD D2 0.0002; if() #20 Test
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 20621 ==; Test 'if'
LOAD D2 0.0001; if() #20 Body Start
STORE D2 0.0002
GOTO 20631; if() #20 Body End
LOAD D2 0.0002; if() #85 Test AND if() #20 Else Start
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 20631 ==; Test 'if'
LOAD D2 0; if() #85 Body Start
STORE D2 0.0002; if() #85 Body End
LOAD D2 0.0002; if() #20 Else End AND return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[int Clamp(int, int, int)] Body End
SETR D4 SP2; Func[bool ClockIsActive()] Body Start
SETR D2 GD26; return Start
PUSHR D2
POP D0
READPODARRAYV D2 6
COMPAREV D2 0
SETCMP D2 I!=
RETURNFUNC; return End AND Func[bool ClockIsActive()] Body End
SETR D4 SP2; Func[int ComboX(int)] Body Start
LOAD D2 0; return Start
MODV D2 16
MULTV D2 16
POP D5; return End
RETURNFUNC; Func[int ComboX(int)] Body End
SETR D4 SP2; Func[int ComboY(int)] Body Start
LOAD D2 0; return Start
ANDV D2 240
POP D5; return End
RETURNFUNC; Func[int ComboY(int)] Body End
SETR D4 SP2; Func[int ComboAt(int, int)] Body Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int VBound(int, int, int)] Params Start
PUSHR D2
PUSHV 255
PUSHV 0; UsrFunc[int VBound(int, int, int)] Params End
CALLFUNC 2.0679; UsrFunc[int VBound(int, int, int)] Call
POP D4
STORE D2 0.0001
PUSHR D4
LOAD D2 0; UsrFunc[int VBound(int, int, int)] Params Start
PUSHR D2
PUSHV 175
PUSHV 0; UsrFunc[int VBound(int, int, int)] Params End
CALLFUNC 2.0679; UsrFunc[int VBound(int, int, int)] Call
POP D4
STORE D2 0
LOAD D2 0; return Start
ANDV D2 240
PUSHR D2
LOAD D2 0.0001
RSHIFTV D2 4
POP D3
ADDR D2 D3
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int ComboAt(int, int)] Body End
SETR D4 SP2; Func[int VBound(int, int, int)] Body Start
LOAD D2 0.0002; if() #348 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 20691 ==; Test 'if'
LOAD D2 0; if() #348 Body Start
STORE D2 0.0002
GOTO 20701; if() #348 Body End
LOAD D2 0.0002; if() #581 Test AND if() #348 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 20701 ==; Test 'if'
LOAD D2 0.0001; if() #581 Body Start
STORE D2 0.0002; if() #581 Body End
LOAD D2 0.0002; if() #348 Else End AND return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[int VBound(int, int, int)] Body End
PUSHV 0; Func[lweapon CreateLWeaponAt(int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0003; InlineFunc[lweapon screendata::CreateLWeapon(int)] Params
CREATELWEAPONR D2; InlineFunc[lweapon screendata::CreateLWeapon(int)] Body Start
SETR D2 REFLWPN; InlineFunc[lweapon screendata::CreateLWeapon(int)] Body End
STORE D2 0
LOAD D2 0; InlineFunc[bool lweapon::isValid()] Params AND if() #115 Test
ISVALIDLWPN D2; InlineFunc[bool lweapon::isValid()] Body
COMPAREV D2 0
GOTOCMP 20732 ==; Test 'if'
LOAD D2 0.0002; if() #115 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFLWPN
SETR LWPNX D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFLWPN
SETR LWPNY D2; if() #115 Body End
LOAD D2 0; return Start
POPARGS D5 0.0004; return End
RETURNFUNC; Func[lweapon CreateLWeaponAt(int, int, int)] Body End
PUSHV 0; Func[npc CreateNPCAt(int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0003; InlineFunc[npc screendata::CreateNPC(int)] Params
CREATENPCR D2; InlineFunc[npc screendata::CreateNPC(int)] Body Start
SETR D2 REFNPC; InlineFunc[npc screendata::CreateNPC(int)] Body End
STORE D2 0
LOAD D2 0; InlineFunc[bool npc::isValid()] Params AND if() #116 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 20763 ==; Test 'if'
LOAD D2 0.0002; if() #116 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCX D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCY D2; if() #116 Body End
LOAD D2 0; return Start
POPARGS D5 0.0004; return End
RETURNFUNC; Func[npc CreateNPCAt(int, int, int)] Body End
PUSHV 0; Func[bool IsWater(int)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
POP D0
SETR D2 COMBOTD
STORE D2 0
LOAD D2 0; if() #371 Test
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 20780 ==; Test 'if'
SETV D2 1; return Start AND if() #371 Body Start
GOTO 20808; return End AND if() #371 Body End
LOAD D2 0; if() #372 Test
COMPAREV D2 18
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 20787 ==; Test 'if'
SETV D2 1; return Start AND if() #372 Body Start
GOTO 20808; return End AND if() #372 Body End
LOAD D2 0; if() #373 Test
COMPAREV D2 19
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 20794 ==; Test 'if'
SETV D2 1; return Start AND if() #373 Body Start
GOTO 20808; return End AND if() #373 Body End
LOAD D2 0; if() #374 Test
COMPAREV D2 86
GOTOCMP 20802 <
LOAD D2 0
COMPAREV D2 91
GOTOCMP 20802 >
SETV D2 1
GOTO 20803
SETV D2 0
COMPAREV D2 0
GOTOCMP 20807 ==; Test 'if'
SETV D2 1; return Start AND if() #374 Body Start
GOTO 20808; return End AND if() #374 Body End
SETV D2 0; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[bool IsWater(int)] Body End
SETR D4 SP2; Func[bool __IsPit(int)] Body Start
PUSHR D4; return Start
LOAD D2 0; UsrFunc[bool IsPit(int)] Params Start
PUSHR D2; UsrFunc[bool IsPit(int)] Params End
CALLFUNC 2.9187; UsrFunc[bool IsPit(int)] Call
POP D4
POP D5; return End
RETURNFUNC; Func[bool __IsPit(int)] Body End
PUSHV 0; Func[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0003; if() #178 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 20831 ==; Test 'if'
PUSHR D4; if() #178 Body Start
LOAD D2 0.0009; UsrFunc[int GetDefaultEWeaponSprite(int)] Params Start
PUSHR D2; UsrFunc[int GetDefaultEWeaponSprite(int)] Params End
CALLFUNC 2.0968; UsrFunc[int GetDefaultEWeaponSprite(int)] Call
POP D4
STORE D2 0.0003; if() #178 Body End
LOAD D2 0.0002; if() #179 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 20842 ==; Test 'if'
PUSHR D4; if() #179 Body Start
LOAD D2 0.0009; UsrFunc[int GetDefaultEWeaponSound(int)] Params Start
PUSHR D2; UsrFunc[int GetDefaultEWeaponSound(int)] Params End
CALLFUNC 2.1128; UsrFunc[int GetDefaultEWeaponSound(int)] Call
POP D4
STORE D2 0.0002; if() #179 Body End
LOAD D2 0.0009; InlineFunc[eweapon screendata::CreateEWeapon(int)] Params
CREATEEWEAPONR D2; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body Start
SETR D2 REFEWPN; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body End
STORE D2 0
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNX D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNY D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNPOWER D2
SETV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNANGULAR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
LOAD D2 0.0003; if() #180 Test
COMPAREV D2 0
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 20912 ==; Test 'if'
LOAD D2 0; InlineFunc[void eweapon::UseSprite(int)] Params Start AND if() #180 Body Start
PUSHR D2
LOAD D2 0.0003; InlineFunc[void eweapon::UseSprite(int)] Params End
POP D3; InlineFunc[void eweapon::UseSprite(int)] Body Start
SETR REFEWPN D3
EWPNUSESPRITER D2; InlineFunc[void eweapon::UseSprite(int)] Body End AND if() #180 Body End
LOAD D2 0.0001
ORV D2 512
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 2.1181; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0.0001; if() #181 Test
ANDV D2 32
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 20946 ==; Test 'if'
SETV D2 0; if() #181 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNCOLLDET D2; if() #181 Body End
LOAD D2 0; if() #182 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 20963 ==; Test 'if'
PUSHR D4; if() #182 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 2.1291; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #182 Body End
LOAD D2 0.0002; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
LOAD D2 0; return Start
POPARGS D5 0.0010; return End
RETURNFUNC; Func[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0003; Func[int GetDefaultEWeaponSprite(int)] Body Start
SETR D4 SP2
LOAD D2 0.0003; if() #58 Test
COMPAREV D2 129
GOTOCMP 20978 ==
LOAD D2 0.0003
COMPAREV D2 145
GOTOCMP 20978 ==
SETV D2 0
GOTO 20979
SETV D2 1
COMPAREV D2 0
GOTOCMP 20983 ==; Test 'if'
SETV D2 17; return Start AND if() #58 Body Start
GOTO 21126; return End AND if() #58 Body End
LOAD D2 0.0003; if() #59 Test AND if() #58 Else Start
COMPAREV D2 133
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 20990 ==; Test 'if'
SETV D2 18; return Start AND if() #59 Body Start
GOTO 21126; return End AND if() #59 Body End
LOAD D2 0.0003; if() #60 Test AND if() #59 Else Start
COMPAREV D2 130
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 20997 ==; Test 'if'
SETV D2 19; return Start AND if() #60 Body Start
GOTO 21126; return End AND if() #60 Body End
LOAD D2 0.0003; if() #61 Test AND if() #60 Else Start
COMPAREV D2 140
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21004 ==; Test 'if'
SETV D2 35; return Start AND if() #61 Body Start
GOTO 21126; return End AND if() #61 Body End
LOAD D2 0.0003; if() #62 Test AND if() #61 Else Start
COMPAREV D2 142
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21011 ==; Test 'if'
SETV D2 81; return Start AND if() #62 Body Start
GOTO 21126; return End AND if() #62 Body End
LOAD D2 0.0003; if() #63 Test AND if() #62 Else Start
COMPAREV D2 139
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21018 ==; Test 'if'
SETV D2 80; return Start AND if() #63 Body Start
GOTO 21126; return End AND if() #63 Body End
LOAD D2 0.0003; if() #64 Test AND if() #63 Else Start
COMPAREV D2 134
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21025 ==; Test 'if'
SETV D2 21; return Start AND if() #64 Body Start
GOTO 21126; return End AND if() #64 Body End
LOAD D2 0.0003; if() #65 Test AND if() #64 Else Start
COMPAREV D2 132
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21032 ==; Test 'if'
SETV D2 20; return Start AND if() #65 Body Start
GOTO 21126; return End AND if() #65 Body End
LOAD D2 0.0003; if() #66 Test AND if() #65 Else Start
COMPAREV D2 141
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21039 ==; Test 'if'
SETV D2 36; return Start AND if() #66 Body Start
GOTO 21126; return End AND if() #66 Body End
LOAD D2 0.0003; if() #67 Test AND if() #66 Else Start
COMPAREV D2 137
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21046 ==; Test 'if'
SETV D2 76; return Start AND if() #67 Body Start
GOTO 21126; return End AND if() #67 Body End
LOAD D2 0.0003; if() #68 Test AND if() #67 Else Start
COMPAREV D2 138
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21053 ==; Test 'if'
SETV D2 77; return Start AND if() #68 Body Start
GOTO 21126; return End AND if() #68 Body End
LOAD D2 0.0003; if() #69 Test AND if() #68 Else Start
COMPAREV D2 131
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21125 ==; Test 'if'
STOREV 0 0.0002; if() #69 Body Start
STOREV 0 0.0001
STOREV 0 0; for() #48 setup
LOAD D2 0; for() #48 LoopTest
COMPAREV D2 256
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 21109 ==; for() #48 TestFail?
LOAD D2 0; unless() #211 Test AND for() #48 Body Start
PUSHR D2
POP D0
SETR D2 LINKITEMD
COMPAREV D2 0
GOTOCMP 21105 ==; Test 'unless' AND continue 1; AND unless() #211 Body
LOAD D2 0; InlineFunc[itemdata Game::LoadItemData(int)] Params
LOADITEMDATAR D2; InlineFunc[itemdata Game::LoadItemData(int)] Body Start
SETR D2 REFITEMCLASS; InlineFunc[itemdata Game::LoadItemData(int)] Body End
STORE D2 0.0001
LOAD D2 0.0001; if() #212 Test
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATAFAMILY
COMPAREV D2 1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 21105 !=; Test 'if' AND continue 1; AND if() #212 Body
LOAD D2 0.0001; if() #213 Test
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATALEVEL
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 21105 ==; Test 'if'
LOAD D2 0.0001; if() #213 Body Start
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATALEVEL
STORE D2 0.0002
LOAD D2 0.0002; if() #214 Test
COMPAREV D2 3
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 21109 !=; Test 'if' AND break 1; AND if() #214 Body
LOAD D2 0; if() #213 Body End AND for() #48 Body End AND for() #48 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 21061; for() #48 End
LOAD D2 0.0002; if() #70 Test
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 21116 ==; Test 'if'
SETV D2 4; return Start AND if() #70 Body Start
GOTO 21126; return End AND if() #70 Body End
LOAD D2 0.0002; if() #71 Test AND if() #70 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21123 ==; Test 'if'
SETV D2 5; return Start AND if() #71 Body Start
GOTO 21126; return End AND if() #71 Body End
SETV D2 6; return Start AND if() #71 Else Start
GOTO 21126; return End AND if() #71 Else End AND if() #70 Else End AND if() #69 Body End
SETV D2 0; return Start AND if() #69 Else Start
POPARGS D5 0.0004; return End AND if() #69 Else End AND if() #68 Else End AND if() #67 Else End AND if() #66 Else End AND if() #65 Else End AND if() #64 Else End AND if() #63 Else End AND if() #62 Else End AND if() #61 Else End AND if() #60 Else End AND if() #59 Else End AND if() #58 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSprite(int)] Body End
SETR D4 SP2; Func[int GetDefaultEWeaponSound(int)] Body Start
LOAD D2 0; if() #54 Test
COMPAREV D2 129
GOTOCMP 21137 ==
LOAD D2 0
COMPAREV D2 145
GOTOCMP 21137 ==
SETV D2 0
GOTO 21138
SETV D2 1
COMPAREV D2 0
GOTOCMP 21142 ==; Test 'if'
SETV D2 40; return Start AND if() #54 Body Start
GOTO 21179; return End AND if() #54 Body End
LOAD D2 0; if() #55 Test AND if() #54 Else Start
COMPAREV D2 134
GOTOCMP 21150 ==
LOAD D2 0
COMPAREV D2 141
GOTOCMP 21150 ==
SETV D2 0
GOTO 21151
SETV D2 1
COMPAREV D2 0
GOTOCMP 21155 ==; Test 'if'
SETV D2 32; return Start AND if() #55 Body Start
GOTO 21179; return End AND if() #55 Body End
LOAD D2 0; if() #56 Test AND if() #55 Else Start
COMPAREV D2 140
GOTOCMP 21166 ==
LOAD D2 0
COMPAREV D2 142
GOTOCMP 21166 ==
LOAD D2 0
COMPAREV D2 139
GOTOCMP 21166 ==
SETV D2 0
GOTO 21167
SETV D2 1
COMPAREV D2 0
GOTOCMP 21171 ==; Test 'if'
SETV D2 13; return Start AND if() #56 Body Start
GOTO 21179; return End AND if() #56 Body End
LOAD D2 0; if() #57 Test AND if() #56 Else Start
COMPAREV D2 133
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21178 ==; Test 'if'
SETV D2 51; return Start AND if() #57 Body Start
GOTO 21179; return End AND if() #57 Body End
SETV D2 0; return Start AND if() #57 Else Start
POP D5; return End AND if() #57 Else End AND if() #56 Else End AND if() #55 Else End AND if() #54 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSound(int)] Body End
PUSHARGSV 0 0.0002; Func[void SetEWeaponDir(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
MODV D2 6.2832
STORE D2 0.0001
STOREV 0 0
LOAD D2 0.0001; if() #518 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 21198 ==; Test 'if'
LOAD D2 0.0001; if() #518 Body Start
ADDV D2 6.2832
STORE D2 0.0001; if() #518 Body End
LOAD D2 0.0001; if() #247 Test
COMPAREV D2 0.3927
GOTOCMP 21206 <
LOAD D2 0.0001
COMPAREV D2 5.8905
GOTOCMP 21206 >
SETV D2 0
GOTO 21207
SETV D2 1
COMPAREV D2 0
GOTOCMP 21212 ==; Test 'if'
SETV D2 3; if() #247 Body Start
STORE D2 0
GOTO 21262; if() #247 Body End
LOAD D2 0.0001; if() #248 Test AND if() #247 Else Start
COMPAREV D2 1.1781
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 21220 ==; Test 'if'
SETV D2 7; if() #248 Body Start
STORE D2 0
GOTO 21262; if() #248 Body End
LOAD D2 0.0001; if() #249 Test AND if() #248 Else Start
COMPAREV D2 1.9635
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 21228 ==; Test 'if'
SETV D2 1; if() #249 Body Start
STORE D2 0
GOTO 21262; if() #249 Body End
LOAD D2 0.0001; if() #250 Test AND if() #249 Else Start
COMPAREV D2 2.7489
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 21236 ==; Test 'if'
SETV D2 6; if() #250 Body Start
STORE D2 0
GOTO 21262; if() #250 Body End
LOAD D2 0.0001; if() #251 Test AND if() #250 Else Start
COMPAREV D2 3.5343
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 21244 ==; Test 'if'
SETV D2 2; if() #251 Body Start
STORE D2 0
GOTO 21262; if() #251 Body End
LOAD D2 0.0001; if() #252 Test AND if() #251 Else Start
COMPAREV D2 4.3197
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 21252 ==; Test 'if'
SETV D2 4; if() #252 Body Start
STORE D2 0
GOTO 21262; if() #252 Body End
LOAD D2 0.0001; if() #253 Test AND if() #252 Else Start
COMPAREV D2 5.1051
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 21260 ==; Test 'if'
SETV D2 0; if() #253 Body Start
STORE D2 0
GOTO 21262; if() #253 Body End
SETV D2 5; if() #253 Else Start
STORE D2 0; if() #253 Else End
LOAD D2 0.0002; if() #252 Else End AND if() #251 Else End AND if() #250 Else End AND if() #249 Else End AND if() #248 Else End AND if() #247 Else End AND if() #519 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 21280 ==; Test 'if'
PUSHR D4; if() #519 Body Start
LOAD D2 0; UsrFunc[int __UnblockableDir(int)] Params Start
PUSHR D2; UsrFunc[int __UnblockableDir(int)] Params End
CALLFUNC 2.1456; UsrFunc[int __UnblockableDir(int)] Call
POP D4
STORE D2 0; if() #519 Body End
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDIR D2
POPARGS D5 0.0003
RETURNFUNC; Func[void SetEWeaponDir(eweapon)] Body End
PUSHV 0; Func[void SetEWeaponRotation(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #271 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 21374 ==; Test 'if'
LOAD D2 0.0001; if() #271 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
MODV D2 6.2832
STORE D2 0
LOAD D2 0; if() #524 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 21313 ==; Test 'if'
LOAD D2 0; if() #524 Body Start
ADDV D2 6.2832
STORE D2 0; if() #524 Body End
LOAD D2 0; if() #272 Test
COMPAREV D2 0.7854
GOTOCMP 21321 <
LOAD D2 0
COMPAREV D2 5.4978
GOTOCMP 21321 >
SETV D2 0
GOTO 21322
SETV D2 1
COMPAREV D2 0
GOTOCMP 21334 ==; Test 'if'
SETV D2 4; if() #272 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2
GOTO 21454; if() #272 Body End
LOAD D2 0; if() #273 Test AND if() #272 Else Start
COMPAREV D2 2.3562
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 21349 ==; Test 'if'
SETV D2 3; if() #273 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2
GOTO 21454; if() #273 Body End
LOAD D2 0; if() #274 Test AND if() #273 Else Start
COMPAREV D2 3.9270
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 21364 ==; Test 'if'
SETV D2 7; if() #274 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2
GOTO 21454; if() #274 Body End
SETV D2 0; if() #274 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2; if() #274 Else End
GOTO 21454; if() #273 Else End AND if() #272 Else End AND if() #271 Body End
PUSHR D4; if() #271 Else Start
LOAD D2 0.0001; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2
POP REFEWPN
PUSHR EWPNDIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 2.1592; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #275 Test
COMPAREV D2 0
GOTOCMP 21393 ==
LOAD D2 0
COMPAREV D2 5
GOTOCMP 21393 ==
LOAD D2 0
COMPAREV D2 4
GOTOCMP 21393 ==
SETV D2 0
GOTO 21394
SETV D2 1
COMPAREV D2 0
GOTOCMP 21406 ==; Test 'if'
SETV D2 0; if() #275 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2
GOTO 21454; if() #275 Body End
LOAD D2 0; if() #276 Test AND if() #275 Else Start
COMPAREV D2 1
GOTOCMP 21417 ==
LOAD D2 0
COMPAREV D2 7
GOTOCMP 21417 ==
LOAD D2 0
COMPAREV D2 6
GOTOCMP 21417 ==
SETV D2 0
GOTO 21418
SETV D2 1
COMPAREV D2 0
GOTOCMP 21430 ==; Test 'if'
SETV D2 3; if() #276 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2
GOTO 21454; if() #276 Body End
LOAD D2 0; if() #277 Test AND if() #276 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21445 ==; Test 'if'
SETV D2 7; if() #277 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2
GOTO 21454; if() #277 Body End
SETV D2 4; if() #277 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2; if() #277 Else End
POPARGS D5 0.0002; if() #276 Else End AND if() #275 Else End AND if() #271 Else End
RETURNFUNC; Func[void SetEWeaponRotation(eweapon)] Body End
SETR D4 SP2; Func[int __UnblockableDir(int)] Body Start
LOAD D2 0; if() #715 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21464 ==; Test 'if'
SETV D2 8; return Start AND if() #715 Body Start
GOTO 21514; return End AND if() #715 Body End
LOAD D2 0; if() #716 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21471 ==; Test 'if'
SETV D2 12; return Start AND if() #716 Body Start
GOTO 21514; return End AND if() #716 Body End
LOAD D2 0; if() #717 Test
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21478 ==; Test 'if'
SETV D2 14; return Start AND if() #717 Body Start
GOTO 21514; return End AND if() #717 Body End
LOAD D2 0; if() #718 Test
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21485 ==; Test 'if'
SETV D2 10; return Start AND if() #718 Body Start
GOTO 21514; return End AND if() #718 Body End
LOAD D2 0; if() #719 Test
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21492 ==; Test 'if'
SETV D2 15; return Start AND if() #719 Body Start
GOTO 21514; return End AND if() #719 Body End
LOAD D2 0; if() #720 Test
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21499 ==; Test 'if'
SETV D2 9; return Start AND if() #720 Body Start
GOTO 21514; return End AND if() #720 Body End
LOAD D2 0; if() #721 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21506 ==; Test 'if'
SETV D2 13; return Start AND if() #721 Body Start
GOTO 21514; return End AND if() #721 Body End
LOAD D2 0; if() #722 Test
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21513 ==; Test 'if'
SETV D2 11; return Start AND if() #722 Body Start
GOTO 21514; return End AND if() #722 Body End
LOAD D2 0; return Start
POP D5; return End
RETURNFUNC; Func[int __UnblockableDir(int)] Body End
SETR D4 SP2; Func[bool Ghost_CanMove(int, int, int)] Body Start
PUSHR D4; return Start
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
SETR D2 GD3
COMPAREV D2 0
SETCMP D2 I>
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 2.1532; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
POPARGS D5 0.0003; return End
RETURNFUNC; Func[bool Ghost_CanMove(int, int, int)] Body End
SETR D4 SP2; Func[bool Ghost_CanMove(int, int, int, bool)] Body Start
LOAD D2 0.0002; if() #241 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21540 ==; Test 'if'
SETV D2 1; return Start AND if() #241 Body Start
GOTO 21590; return End AND if() #241 Body End
LOAD D2 0.0003; if() #242 Test
COMPAREV D2 4
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 21548 ==; Test 'if'
LOAD D2 0.0002; if() #242 Body Start
MULTV D2 0.7071
STORE D2 0.0002; if() #242 Body End
PUSHR D4
LOAD D2 0.0003; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 2.1592; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0.0003
LOAD D2 0.0002; while() #1 Test
COMPAREV D2 8
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 21579 ==; Test 'while'
PUSHR D4; unless() #243 Test AND while() #1 Body Start
LOAD D2 0.0003; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
SUBV D2 8
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params End
CALLFUNC 2.1665; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 21575 !=; Test 'unless'
SETV D2 0; return Start AND unless() #243 Body Start
GOTO 21590; return End AND unless() #243 Body End
LOAD D2 0.0002
SUBV D2 8
STORE D2 0.0002; while() #1 Body End
GOTO 21554; while() #1 End
PUSHR D4; return Start
LOAD D2 0.0003; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params End
CALLFUNC 2.1665; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Call
POP D4
POPARGS D5 0.0004; return End
RETURNFUNC; Func[bool Ghost_CanMove(int, int, int, bool)] Body End
SETR D4 SP2; Func[int __NormalizeDir(int)] Body Start
LOAD D2 0; if() #701 Test
COMPAREV D2 0
GOTOCMP 21601 <
LOAD D2 0
COMPAREV D2 7
GOTOCMP 21601 >
SETV D2 1
GOTO 21602
SETV D2 0
COMPAREV D2 0
GOTOCMP 21606 ==; Test 'if'
LOAD D2 0; return Start AND if() #701 Body Start
GOTO 21663; return End AND if() #701 Body End
LOAD D2 0; if() #702 Test
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21613 ==; Test 'if'
SETV D2 0; return Start AND if() #702 Body Start
GOTO 21663; return End AND if() #702 Body End
LOAD D2 0; if() #703 Test
COMPAREV D2 9
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21620 ==; Test 'if'
SETV D2 5; return Start AND if() #703 Body Start
GOTO 21663; return End AND if() #703 Body End
LOAD D2 0; if() #704 Test
COMPAREV D2 10
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21627 ==; Test 'if'
SETV D2 3; return Start AND if() #704 Body Start
GOTO 21663; return End AND if() #704 Body End
LOAD D2 0; if() #705 Test
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21634 ==; Test 'if'
SETV D2 7; return Start AND if() #705 Body Start
GOTO 21663; return End AND if() #705 Body End
LOAD D2 0; if() #706 Test
COMPAREV D2 12
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21641 ==; Test 'if'
SETV D2 1; return Start AND if() #706 Body Start
GOTO 21663; return End AND if() #706 Body End
LOAD D2 0; if() #707 Test
COMPAREV D2 13
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21648 ==; Test 'if'
SETV D2 6; return Start AND if() #707 Body Start
GOTO 21663; return End AND if() #707 Body End
LOAD D2 0; if() #708 Test
COMPAREV D2 14
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21655 ==; Test 'if'
SETV D2 2; return Start AND if() #708 Body Start
GOTO 21663; return End AND if() #708 Body End
LOAD D2 0; if() #709 Test
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21662 ==; Test 'if'
SETV D2 4; return Start AND if() #709 Body Start
GOTO 21663; return End AND if() #709 Body End
SETV D2 0; return Start
POP D5; return End
RETURNFUNC; Func[int __NormalizeDir(int)] Body End
PUSHARGSV 0 0.0006; Func[bool __Ghost_CanMoveSingle(int, int, int, bool)] Body Start
SETR D4 SP2
STOREV 0 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
LOAD D2 0.0009; if() #363 Test
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21794 ==; Test 'if'
SETR D2 GD13; if() #363 Body Start
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
PUSHR D2
SETR D2 GD23
RSHIFTV D2 8
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
SETR D2 GD23
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0003
SETR D2 GD1
PUSHR D2
SETR D2 GD22
RSHIFTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0004
SETR D2 GD2
PUSHR D2
SETR D2 GD23
RSHIFTV D2 8
POP D3
ADDR D2 D3
STORE D2 0.0002
LOAD D2 0.0003
DIVV D2 8
SUBV D2 1
STORE D2 0.0001
SETV D2 1; for() #171 setup
STORE D2 0.0005
LOAD D2 0.0005; for() #171 LoopTest
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 21752 ==; for() #171 TestFail?
PUSHR D4; unless() #610 Test AND for() #171 Body Start
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0005
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.2461; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 21748 !=; Test 'unless'
SETV D2 0; return Start AND unless() #610 Body Start
GOTO 22445; return End AND unless() #610 Body End
LOAD D2 0.0005; for() #171 Body End AND for() #171 LoopIncrement
ADDV D2 1
STORE D2 0.0005
GOTO 21722; for() #171 End
PUSHR D4; unless() #611 Test
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.2461; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 21769 !=; Test 'unless'
SETV D2 0; return Start AND unless() #611 Body Start
GOTO 22445; return End AND unless() #611 Body End
PUSHR D4; unless() #612 Test
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.2461; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 21792 !=; Test 'unless'
SETV D2 0; return Start AND unless() #612 Body Start
GOTO 22445; return End AND unless() #612 Body End
SETV D2 1; return Start
GOTO 22445; return End AND if() #363 Body End
LOAD D2 0.0009; if() #364 Test AND if() #363 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21927 ==; Test 'if'
SETR D2 GD13; if() #364 Body Start
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
PUSHR D2
SETR D2 GD23
RSHIFTV D2 8
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
SETR D2 GD23
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0003
SETR D2 GD1
PUSHR D2
SETR D2 GD12
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
SETR D2 GD22
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
STORE D2 0.0004
SETR D2 GD2
PUSHR D2
SETR D2 GD23
RSHIFTV D2 8
POP D3
ADDR D2 D3
STORE D2 0.0002
LOAD D2 0.0003
DIVV D2 8
SUBV D2 1
STORE D2 0.0001
SETV D2 1; for() #172 setup
STORE D2 0.0005
LOAD D2 0.0005; for() #172 LoopTest
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 21885 ==; for() #172 TestFail?
PUSHR D4; unless() #613 Test AND for() #172 Body Start
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0005
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.2461; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 21881 !=; Test 'unless'
SETV D2 0; return Start AND unless() #613 Body Start
GOTO 22445; return End AND unless() #613 Body End
LOAD D2 0.0005; for() #172 Body End AND for() #172 LoopIncrement
ADDV D2 1
STORE D2 0.0005
GOTO 21855; for() #172 End
PUSHR D4; unless() #614 Test
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.2461; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 21902 !=; Test 'unless'
SETV D2 0; return Start AND unless() #614 Body Start
GOTO 22445; return End AND unless() #614 Body End
PUSHR D4; unless() #615 Test
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.2461; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 21925 !=; Test 'unless'
SETV D2 0; return Start AND unless() #615 Body Start
GOTO 22445; return End AND unless() #615 Body End
SETV D2 1; return Start
GOTO 22445; return End AND if() #364 Body End
LOAD D2 0.0009; if() #365 Test AND if() #364 Else Start
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22067 ==; Test 'if'
PUSHR D4; if() #616 Test AND if() #365 Body Start
CALLFUNC 2.7469; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 21945 ==
PUSHR D4
PUSHV 32; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 21945 !=
SETV D2 1
GOTO 21946
SETV D2 0
COMPAREV D2 0
GOTOCMP 21950 ==; Test 'if'
SETV D2 0; return Start AND if() #616 Body Start
GOTO 22445; return End AND if() #616 Body End
SETR D2 GD12
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
PUSHR D2
SETR D2 GD22
RSHIFTV D2 8
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
SETR D2 GD22
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0003
SETR D2 GD2
PUSHR D2
SETR D2 GD23
RSHIFTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0004
SETR D2 GD1
PUSHR D2
SETR D2 GD22
RSHIFTV D2 8
POP D3
ADDR D2 D3
STORE D2 0.0002
LOAD D2 0.0003
DIVV D2 8
SUBV D2 1
STORE D2 0.0001
SETV D2 1; for() #173 setup
STORE D2 0.0005
LOAD D2 0.0005; for() #173 LoopTest
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 22025 ==; for() #173 TestFail?
PUSHR D4; unless() #617 Test AND for() #173 Body Start
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0005
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.2461; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22021 !=; Test 'unless'
SETV D2 0; return Start AND unless() #617 Body Start
GOTO 22445; return End AND unless() #617 Body End
LOAD D2 0.0005; for() #173 Body End AND for() #173 LoopIncrement
ADDV D2 1
STORE D2 0.0005
GOTO 21995; for() #173 End
PUSHR D4; unless() #618 Test
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.2461; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22042 !=; Test 'unless'
SETV D2 0; return Start AND unless() #618 Body Start
GOTO 22445; return End AND unless() #618 Body End
PUSHR D4; unless() #619 Test
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.2461; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22065 !=; Test 'unless'
SETV D2 0; return Start AND unless() #619 Body Start
GOTO 22445; return End AND unless() #619 Body End
SETV D2 1; return Start
GOTO 22445; return End AND if() #365 Body End
LOAD D2 0.0009; if() #366 Test AND if() #365 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22200 ==; Test 'if'
SETR D2 GD12; if() #366 Body Start
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
PUSHR D2
SETR D2 GD22
RSHIFTV D2 8
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
SETR D2 GD22
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0003
SETR D2 GD2
PUSHR D2
SETR D2 GD13
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
SETR D2 GD23
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
STORE D2 0.0004
SETR D2 GD1
PUSHR D2
SETR D2 GD22
RSHIFTV D2 8
POP D3
ADDR D2 D3
STORE D2 0.0002
LOAD D2 0.0003
DIVV D2 8
SUBV D2 1
STORE D2 0.0001
SETV D2 1; for() #174 setup
STORE D2 0.0005
LOAD D2 0.0005; for() #174 LoopTest
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 22158 ==; for() #174 TestFail?
PUSHR D4; unless() #620 Test AND for() #174 Body Start
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0005
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.2461; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22154 !=; Test 'unless'
SETV D2 0; return Start AND unless() #620 Body Start
GOTO 22445; return End AND unless() #620 Body End
LOAD D2 0.0005; for() #174 Body End AND for() #174 LoopIncrement
ADDV D2 1
STORE D2 0.0005
GOTO 22128; for() #174 End
PUSHR D4; unless() #621 Test
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.2461; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22175 !=; Test 'unless'
SETV D2 0; return Start AND unless() #621 Body Start
GOTO 22445; return End AND unless() #621 Body End
PUSHR D4; unless() #622 Test
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.2461; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22198 !=; Test 'unless'
SETV D2 0; return Start AND unless() #622 Body Start
GOTO 22445; return End AND unless() #622 Body End
SETV D2 1; return Start
GOTO 22445; return End AND if() #366 Body End
LOAD D2 0.0009; if() #367 Test AND if() #366 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22261 ==; Test 'if'
STOREV 0 0; if() #367 Body Start
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2
PUSHR D4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 2.1532; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD1 D2
LOAD D2 0; unless() #623 Test
COMPAREV D2 0
GOTOCMP 22235 !=; Test 'unless'
SETV D2 0; return Start AND unless() #623 Body Start
GOTO 22445; return End AND unless() #623 Body End
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2
PUSHR D4
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 2.1532; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD2 D2
LOAD D2 0; return Start
GOTO 22445; return End AND if() #367 Body End
LOAD D2 0.0009; if() #368 Test AND if() #367 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22322 ==; Test 'if'
STOREV 0 0; if() #368 Body Start
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD1 D2
PUSHR D4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 2.1532; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2
LOAD D2 0; unless() #624 Test
COMPAREV D2 0
GOTOCMP 22296 !=; Test 'unless'
SETV D2 0; return Start AND unless() #624 Body Start
GOTO 22445; return End AND unless() #624 Body End
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 2.1532; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD2 D2
LOAD D2 0; return Start
GOTO 22445; return End AND if() #368 Body End
LOAD D2 0.0009; if() #369 Test AND if() #368 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22383 ==; Test 'if'
STOREV 0 0; if() #369 Body Start
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2
PUSHR D4
PUSHV 1; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 2.1532; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD1 D2
LOAD D2 0; unless() #625 Test
COMPAREV D2 0
GOTOCMP 22357 !=; Test 'unless'
SETV D2 0; return Start AND unless() #625 Body Start
GOTO 22445; return End AND unless() #625 Body End
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD2 D2
PUSHR D4
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 2.1532; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2
LOAD D2 0; return Start
GOTO 22445; return End AND if() #369 Body End
LOAD D2 0.0009; if() #370 Test AND if() #369 Else Start
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22444 ==; Test 'if'
STOREV 0 0; if() #370 Body Start
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD1 D2
PUSHR D4
PUSHV 1; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 2.1532; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2
LOAD D2 0; unless() #626 Test
COMPAREV D2 0
GOTOCMP 22418 !=; Test 'unless'
SETV D2 0; return Start AND unless() #626 Body Start
GOTO 22445; return End AND unless() #626 Body End
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD2 D2
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 2.1532; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2
LOAD D2 0; return Start
GOTO 22445; return End AND if() #370 Body End
SETV D2 0; return Start AND if() #370 Else Start
POPARGS D5 0.0010; return End AND if() #370 Else End AND if() #369 Else End AND if() #368 Else End AND if() #367 Else End AND if() #366 Else End AND if() #365 Else End AND if() #364 Else End AND if() #363 Else End
RETURNFUNC; Func[bool __Ghost_CanMoveSingle(int, int, int, bool)] Body End
SETR D4 SP2; Func[bool Ghost_CanMovePixel(int, int)] Body Start
PUSHR D4; return Start
LOAD D2 0.0001; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2
SETR D2 GD3
COMPAREV D2 0
SETCMP D2 I>
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.2461; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
POPARGS D5 0.0002; return End
RETURNFUNC; Func[bool Ghost_CanMovePixel(int, int)] Body End
PUSHV 0; Func[bool Ghost_CanMovePixel(int, int, bool)] Body Start
SETR D4 SP2
LOAD D2 0.0003; if() #244 Test
COMPAREV D2 0
GOTOCMP 22477 <
LOAD D2 0.0003
COMPAREV D2 255
GOTOCMP 22477 >
LOAD D2 0.0002
COMPAREV D2 0
GOTOCMP 22477 <
LOAD D2 0.0002
COMPAREV D2 175
GOTOCMP 22477 >
SETV D2 0
GOTO 22478
SETV D2 1
COMPAREV D2 0
GOTOCMP 22485 ==; Test 'if'
PUSHR D4; return Start AND if() #244 Body Start
PUSHV 8192; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
GOTO 22679; return End AND if() #244 Body End
PUSHR D4
LOAD D2 0.0003; UsrFunc[int ComboAt(int, int)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[int ComboAt(int, int)] Params End
CALLFUNC 2.0653; UsrFunc[int ComboAt(int, int)] Call
POP D4
STORE D2 0
PUSHR D4; unless() #245 Test
PUSHV 65537; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22590 !=; Test 'unless'
LOAD D2 0; if() #246 Test AND unless() #245 Body Start
PUSHR D2
POP D0
SETR D2 COMBOTD
COMPAREV D2 110
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22509 ==; Test 'if'
SETV D2 0; return Start AND if() #246 Body Start
GOTO 22679; return End AND if() #246 Body End
LOAD D2 0; if() #247 Test
PUSHR D2
POP D0
SETR D2 COMBOFD
COMPAREV D2 96
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22519 ==; Test 'if'
SETV D2 0; return Start AND if() #247 Body Start
GOTO 22679; return End AND if() #247 Body End
LOAD D2 0; if() #248 Test
PUSHR D2
POP D0
SETR D2 COMBOID
COMPAREV D2 96
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22529 ==; Test 'if'
SETV D2 0; return Start AND if() #248 Body Start
GOTO 22679; return End AND if() #248 Body End
PUSHR D4; if() #80 Test
PUSHV 65536; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22546 ==; Test 'if'
LOAD D2 0; if() #249 Test AND if() #80 Body Start
PUSHR D2
POP D0
SETR D2 COMBOTD
COMPAREV D2 44
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22590 ==; Test 'if'
SETV D2 0; return Start AND if() #249 Body Start
GOTO 22679; return End AND if() #249 Body End
GOTO 22590; if() #80 Body End
LOAD D2 0.0001; if() #81 Test AND if() #80 Else Start
COMPAREV D2 0
GOTOCMP 22560 ==; Test 'if'
LOAD D2 0; if() #250 Test AND if() #81 Body Start
PUSHR D2
POP D0
SETR D2 COMBOTD
COMPAREV D2 54
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22590 ==; Test 'if'
SETV D2 0; return Start AND if() #250 Body Start
GOTO 22679; return End AND if() #250 Body End
GOTO 22590; if() #81 Body End
LOAD D2 0; if() #251 Test AND if() #81 Else Start
PUSHR D2
POP D0
SETR D2 COMBOTD
COMPAREV D2 128
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22570 ==; Test 'if'
SETV D2 0; return Start AND if() #251 Body Start
GOTO 22679; return End AND if() #251 Body End
LOAD D2 0; if() #252 Test
PUSHR D2
POP D0
SETR D2 COMBOFD
COMPAREV D2 97
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22580 ==; Test 'if'
SETV D2 0; return Start AND if() #252 Body Start
GOTO 22679; return End AND if() #252 Body End
LOAD D2 0; if() #253 Test
PUSHR D2
POP D0
SETR D2 COMBOID
COMPAREV D2 97
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22590 ==; Test 'if'
SETV D2 0; return Start AND if() #253 Body Start
GOTO 22679; return End AND if() #253 Body End
PUSHR D4; if() #81 Else End AND if() #80 Else End AND unless() #245 Body End AND if() #254 Test
PUSHV 65539; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22602 ==; Test 'if'
PUSHR D4; return Start AND if() #254 Body Start
LOAD D2 0; UsrFunc[bool IsWater(int)] Params Start
PUSHR D2; UsrFunc[bool IsWater(int)] Params End
CALLFUNC 2.0766; UsrFunc[bool IsWater(int)] Call
POP D4
GOTO 22679; return End AND if() #254 Body End
PUSHR D4; if() #255 Test
PUSHV 65538; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22625 ==; Test 'if'
PUSHR D4; return Start AND if() #255 Body Start
LOAD D2 0; UsrFunc[bool IsWater(int)] Params Start
PUSHR D2; UsrFunc[bool IsWater(int)] Params End
CALLFUNC 2.0766; UsrFunc[bool IsWater(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22623 !=
LOAD D2 0
PUSHR D2
POP D0
SETR D2 COMBOTD
COMPAREV D2 58
GOTOCMP 22623 ==
SETV D2 0
GOTO 22679
SETV D2 1
GOTO 22679; return End AND if() #255 Body End
PUSHR D4; if() #256 Test
LOAD D2 0; UsrFunc[bool IsWater(int)] Params Start
PUSHR D2; UsrFunc[bool IsWater(int)] Params End
CALLFUNC 2.0766; UsrFunc[bool IsWater(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22637 ==; Test 'if'
PUSHR D4; return Start AND if() #256 Body Start
PUSHV 2048; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
GOTO 22679; return End AND if() #256 Body End
PUSHR D4; if() #257 Test
LOAD D2 0; UsrFunc[bool __IsPit(int)] Params Start
PUSHR D2; UsrFunc[bool __IsPit(int)] Params End
CALLFUNC 2.0810; UsrFunc[bool __IsPit(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22649 ==; Test 'if'
PUSHR D4; return Start AND if() #257 Body Start
PUSHV 4096; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
GOTO 22679; return End AND if() #257 Body End
PUSHR D4; if() #82 Test
PUSHV 1024; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22657 ==; Test 'if'
SETV D2 1; return Start AND if() #82 Body Start
GOTO 22679; return End AND if() #82 Body End
PUSHR D4; if() #83 Test AND if() #82 Else Start
PUSHV 32768; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22671 ==; Test 'if'
PUSHR D4; return Start AND if() #83 Body Start
LOAD D2 0.0003; UsrFunc[bool __FullTileWalkable(int, int)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[bool __FullTileWalkable(int, int)] Params End
CALLFUNC 2.2712; UsrFunc[bool __FullTileWalkable(int, int)] Call
POP D4
GOTO 22679; return End AND if() #83 Body End
LOAD D2 0.0003; InlineFunc[bool screendata::isSolid(int, int)] Params Start AND return Start AND if() #83 Else Start
PUSHR D2
LOAD D2 0.0002
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
SETCMP D2 I==
POPARGS D5 0.0004; return End AND if() #83 Else End AND if() #82 Else End
RETURNFUNC; Func[bool Ghost_CanMovePixel(int, int, bool)] Body End
SETR D4 SP2; Func[bool Ghost_FlagIsSet(int)] Body Start
LOAD D2 0; if() #116 Test
ANDV D2 65536
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 22700 ==; Test 'if'
SETR D2 GD16; return Start AND if() #116 Body Start
PUSHR D2
LOAD D2 0
ANDV D2 65535
SETV D3 1
LSHIFTR D3 D2
SETR D2 D3
POP D3
ANDR D2 D3
COMPAREV D2 0
SETCMP D2 I!=
GOTO 22710; return End AND if() #116 Body End
SETR D2 GD15; return Start AND if() #116 Else Start
PUSHR D2
LOAD D2 0
POP D3
ANDR D2 D3
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I==
POP D5; return End AND if() #116 Else End
RETURNFUNC; Func[bool Ghost_FlagIsSet(int)] Body End
SETR D4 SP2; Func[bool __FullTileWalkable(int, int)] Body Start
LOAD D2 0.0001; if() #600 Test
COMPAREV D2 0
GOTOCMP 22727 <
LOAD D2 0
COMPAREV D2 0
GOTOCMP 22727 <
LOAD D2 0.0001
COMPAREV D2 256
GOTOCMP 22727 >=
LOAD D2 0
COMPAREV D2 176
GOTOCMP 22727 >=
SETV D2 0
GOTO 22728
SETV D2 1
COMPAREV D2 0
GOTOCMP 22735 ==; Test 'if'
PUSHR D4; return Start AND if() #600 Body Start
PUSHV 8192; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
GOTO 22795; return End AND if() #600 Body End
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0001
MODV D2 16
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0001
LOAD D2 0
PUSHR D2
LOAD D2 0
MODV D2 16
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0
LOAD D2 0.0001; InlineFunc[bool screendata::isSolid(int, int)] Params Start AND if() #601 Test
PUSHR D2
LOAD D2 0
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 22789 !=
LOAD D2 0.0001; InlineFunc[bool screendata::isSolid(int, int)] Params Start
ADDV D2 8
PUSHR D2
LOAD D2 0
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 22789 !=
LOAD D2 0.0001; InlineFunc[bool screendata::isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0
ADDV D2 8
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 22789 !=
LOAD D2 0.0001; InlineFunc[bool screendata::isSolid(int, int)] Params Start
ADDV D2 8
PUSHR D2
LOAD D2 0
ADDV D2 8
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 22789 !=
SETV D2 0
GOTO 22790
SETV D2 1
COMPAREV D2 0
GOTOCMP 22794 ==; Test 'if'
SETV D2 0; return Start AND if() #601 Body Start
GOTO 22795; return End AND if() #601 Body End
SETV D2 1; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[bool __FullTileWalkable(int, int)] Body End
PUSHARGSV 0 0.0004; Func[bool Ghost_CheckFreeze(ffc, npc)] Body Start
SETR D4 SP2
PUSHR D4; if() #258 Test
PUSHV 16; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22810 ==
PUSHR D4
CALLFUNC 2.0634; UsrFunc[bool ClockIsActive()] Call
POP D4
COMPAREV D2 0
GOTOCMP 22824 !=
PUSHR D4
PUSHV 8; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22822 ==
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCSTUN
COMPAREV D2 0
GOTOCMP 22824 >
SETV D2 0
GOTO 22825
SETV D2 1
COMPAREV D2 0
GOTOCMP 23053 ==; Test 'if'
LOAD D2 0.0005; if() #258 Body Start
PUSHR D2
POP REFFFC
SETR D2 XD
STORE D2 0.0003
LOAD D2 0.0005
PUSHR D2
POP REFFFC
SETR D2 YD
STORE D2 0.0002
LOAD D2 0.0005
PUSHR D2
POP REFFFC
SETR D2 XD2
STORE D2 0.0001
LOAD D2 0.0005
PUSHR D2
POP REFFFC
SETR D2 YD2
STORE D2 0
SETV D2 0
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD2 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD2 D2
SETR D2 GD17
ORV D2 2
SETR GD17 D2
PUSHR D4; while() #2 Test
PUSHV 16; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22897 ==
PUSHR D4
CALLFUNC 2.0634; UsrFunc[bool ClockIsActive()] Call
POP D4
COMPAREV D2 0
GOTOCMP 22911 !=
PUSHR D4
PUSHV 8; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22909 ==
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCSTUN
COMPAREV D2 0
GOTOCMP 22911 >
SETV D2 0
GOTO 22912
SETV D2 1
COMPAREV D2 0
GOTOCMP 23017 ==; Test 'while'
PUSHR D4; while() #2 Body Start
LOAD D2 0.0005; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Params End
CALLFUNC 2.3056; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Call
PEEK D4
LOAD D2 0.0004; UsrFunc[void __Ghost_DrawShadow(npc)] Params Start
PUSHR D2; UsrFunc[void __Ghost_DrawShadow(npc)] Params End
CALLFUNC 2.3141; UsrFunc[void __Ghost_DrawShadow(npc)] Call
PEEK D4
LOAD D2 0.0005; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params End
CALLFUNC 2.3306; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Call
POP D4
LOAD D2 0.0004; InlineFunc[bool npc::isValid()] Params AND unless() #84 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 22938 !=; Test 'unless'
SETV D2 0; return Start AND unless() #84 Body Start
GOTO 23054; return End
GOTO 22948; unless() #84 Body End
LOAD D2 0.0004; if() #259 Test AND unless() #84 Else Start
PUSHR D2
POP REFNPC
SETR D2 NPCHP
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 22948 ==; Test 'if'
SETV D2 0; return Start AND if() #259 Body Start
GOTO 23054; return End AND if() #259 Body End
PUSHR D4; unless() #84 Else End
LOAD D2 0.0005; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 2.3706; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
PEEK D4
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22977 ==; Test 'if'
SETR D2 GD10; if() #85 Body Start
PUSHR D2
PUSHR D4
PUSHR GD4; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 2.1592; UsrFunc[int __NormalizeDir(int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
GOTO 23009; if() #85 Body End
PUSHR D4; if() #86 Test AND if() #85 Else Start
PUSHV 256; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 23000 ==; Test 'if'
SETR D2 GD10; if() #86 Body Start
PUSHR D2
PUSHR D4
PUSHR GD4; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 2.1592; UsrFunc[int __NormalizeDir(int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
GOTO 23009; if() #86 Body End
SETR D2 GD10; if() #86 Else Start
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #86 Else End
PUSHR D4; if() #85 Else End
LOAD D2 0.0005; UsrFunc[void Ghost_CheckHit(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_CheckHit(ffc, npc)] Params End
CALLFUNC 2.3840; UsrFunc[void Ghost_CheckHit(ffc, npc)] Call
POP D4; while() #2 Body End
GOTO 22886; while() #2 End
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD2 D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD2 D2; if() #258 Body End
SETV D2 1; return Start
POPARGS D5 0.0006; return End
RETURNFUNC; Func[bool Ghost_CheckFreeze(ffc, npc)] Body End
PUSHV 0; Func[void __Ghost_UpdateFlashing(ffc, npc)] Body Start
SETR D4 SP2
STOREV 0 0
SETR D2 GD20; if() #667 Test
COMPAREV D2 1
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 23074 ==; Test 'if'
SETR D2 GD20; if() #667 Body Start
SUBV D2 1
SETR GD20 D2
SETR D2 GD20; if() #668 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 23074 ==; Test 'if'
SETV D2 1; if() #668 Body Start
STORE D2 0; if() #668 Body End
SETR D2 GD17; if() #667 Body End AND if() #669 Test
ANDV D2 8
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 23139 ==; Test 'if'
SETR D2 GD20; if() #399 Test AND if() #669 Body Start
COMPAREV D2 0
GOTOCMP 23085 <=
SETV D2 1
GOTO 23086
SETV D2 0
COMPAREV D2 0
GOTOCMP 23103 ==; Test 'if'
SETR D2 GD26; if() #399 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
RSHIFTV D2 1
SUBV2 9 D2
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR CSET D2
GOTO 23139; if() #399 Body End
LOAD D2 0.0001; if() #400 Test AND if() #399 Else Start
PUSHR D2
POP REFNPC
SETR D2 NPCMFLAGS
ANDV D2 64
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 23127 ==; Test 'if'
SETR D2 GD26; if() #400 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
ANDV D2 3
ADDV D2 6
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR CSET D2
GOTO 23139; if() #400 Body End
LOAD D2 0; if() #670 Test AND if() #400 Else Start
COMPAREV D2 0
GOTOCMP 23139 ==; Test 'if'
SETR D2 GD11; if() #670 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR CSET D2; if() #670 Body End
POPARGS D5 0.0003; if() #400 Else End AND if() #399 Else End AND if() #669 Body End
RETURNFUNC; Func[void __Ghost_UpdateFlashing(ffc, npc)] Body End
PUSHARGSV 0 0.0004; Func[void __Ghost_DrawShadow(npc)] Body Start
SETR D4 SP2
SETR D2 GD3; if() #627 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 23304 !=; Test 'if' AND return (Void) AND if() #627 Body
PUSHR D4; unless() #628 Test
PUSHV 16384; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 23168 !=
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCEXTEND
COMPAREV D2 4
GOTOCMP 23168 ==
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCTYPE
COMPAREV D2 40
GOTOCMP 23168 ==
SETV D2 0
GOTO 23169
SETV D2 1
COMPAREV D2 0
GOTOCMP 23304 ==; Test 'unless' AND return (Void) AND unless() #628 Body
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
STOREV 0 0
SETR D2 GD12; if() #371 Test
COMPAREV D2 3
GOTOCMP 23183 <
SETR D2 GD13
COMPAREV D2 3
GOTOCMP 23183 <
SETV D2 0
GOTO 23184
SETV D2 1
COMPAREV D2 0
GOTOCMP 23232 ==; Test 'if'
SETR D2 GD1; if() #371 Body Start
PUSHR D2
SETR D2 GD12
SUBV D2 1
MULTV D2 8
SETV D2 8
PUSHR D2
SETR D2 GD12
SUBV D2 1
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0003
SETR D2 GD2
PUSHR D2
SETR D2 GD13
SUBV D2 1
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
SUBV D2 1
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0002
SETV D2 1
STORE D2 0
PUSHR D4; if() #372 Test
PUSHV 65540; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 23225 ==; Test 'if'
SETV D2 27400; if() #372 Body Start
STORE D2 0.0001
GOTO 23286; if() #372 Body End
SETR D2 GD26; if() #372 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 2
ADDV D2 27400
STORE D2 0.0001; if() #372 Else End
GOTO 23286; if() #371 Body End
SETR D2 GD1; if() #371 Else Start
PUSHR D2
SETR D2 GD12
SUBV D2 2
MULTV D2 8
SETV D2 8
PUSHR D2
SETR D2 GD12
SUBV D2 2
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0003
SETR D2 GD2
PUSHR D2
SETR D2 GD13
SUBV D2 2
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
SUBV D2 2
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0002
SETV D2 2
STORE D2 0
PUSHR D4; if() #373 Test
PUSHV 65540; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 23271 ==; Test 'if'
SETV D2 27392; if() #373 Body Start
STORE D2 0.0001
GOTO 23286; if() #373 Body End
SETR D2 GD26; if() #373 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 4
MULTV D2 2
SETV D2 2
PUSHR D2
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 4
POP D3
MULTR D2 D3
ADDV D2 27392
STORE D2 0.0001; if() #373 Else End
PUSHV 1; if() #371 Else End AND InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if(true) #374 [Opt:AlwaysOn]
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 7
PUSHARGSV -1 0.0002
PUSHARGSV 0 0.0004
PUSHV 1
PUSHV 64; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILER; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0015; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS D5 0.0005
RETURNFUNC; Func[void __Ghost_DrawShadow(npc)] Body End
PUSHARGSV 0 0.0004; Func[void Ghost_WaitframeLight(ffc, npc)] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 24 0
PUSHR D2
SETR D0 D2
PUSHR D0
SETR D2 GD1
POP D0
WRITEPODARRAYVR 0 D2
PUSHR D0
SETR D2 GD2
POP D0
WRITEPODARRAYVR 1 D2
PUSHR D0
SETR D2 GD3
POP D0
WRITEPODARRAYVR 2 D2
PUSHR D0
SETR D2 GD5
POP D0
WRITEPODARRAYVR 3 D2
PUSHR D0
SETR D2 GD6
POP D0
WRITEPODARRAYVR 4 D2
PUSHR D0
SETR D2 GD7
POP D0
WRITEPODARRAYVR 5 D2
PUSHR D0
SETR D2 GD8
POP D0
WRITEPODARRAYVR 6 D2
PUSHR D0
SETR D2 GD9
POP D0
WRITEPODARRAYVR 7 D2
PUSHR D0
SETR D2 GD18
POP D0
WRITEPODARRAYVR 8 D2
PUSHR D0
SETR D2 GD19
POP D0
WRITEPODARRAYVR 9 D2
PUSHR D0
SETR D2 GD11
POP D0
WRITEPODARRAYVR 10 D2
PUSHR D0
SETR D2 GD4
POP D0
WRITEPODARRAYVR 11 D2
PUSHR D0
SETR D2 GD10
POP D0
WRITEPODARRAYVR 12 D2
PUSHR D0
SETR D2 GD12
POP D0
WRITEPODARRAYVR 13 D2
PUSHR D0
SETR D2 GD13
POP D0
WRITEPODARRAYVR 14 D2
PUSHR D0
SETR D2 GD15
POP D0
WRITEPODARRAYVR 15 D2
PUSHR D0
SETR D2 GD16
POP D0
WRITEPODARRAYVR 16 D2
PUSHR D0
SETR D2 GD17
POP D0
WRITEPODARRAYVR 17 D2
PUSHR D0
SETR D2 GD20
POP D0
WRITEPODARRAYVR 18 D2
PUSHR D0
SETR D2 GD21
POP D0
WRITEPODARRAYVR 19 D2
PUSHR D0
SETR D2 GD14
POP D0
WRITEPODARRAYVR 20 D2
PUSHR D0
SETR D2 GD22
POP D0
WRITEPODARRAYVR 21 D2
PUSHR D0
SETR D2 GD23
POP D0
WRITEPODARRAYVR 22 D2
POP D2
STORE D2 0.0002
ALLOCATEMEMV D2 21 0
STORE D2 0.0001
SETR D2 GD25; if() #355 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 23438 ==; Test 'if'
STOREV 0 0; for() #67 setup AND if() #355 Body Start
LOAD D2 0; for() #67 LoopTest
COMPAREV D2 21
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 23438 ==; for() #67 TestFail?
SETR D2 GD25; for() #67 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #67 Body End
LOAD D2 0; for() #67 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 23416; for() #67 End
LOAD D2 0.0004; if() #355 Body End AND InlineFunc[bool npc::isValid()] Params AND if() #356 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 23455 ==; Test 'if'
LOAD D2 0.0002; if() #356 Body Start
ORV D2 65536
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFNPC
SETR NPCMISCD D2; if() #356 Body End
LOAD D2 0.0004; InlineFunc[bool npc::isValid()] Params AND if() #165 Test AND do-while() #2 Body Start
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 23517 ==; Test 'if'
SETR D2 GD25; if() #167 Test AND if(true) #166 [Opt:AlwaysOn] AND if() #165 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 23492 ==; Test 'if'
ALLOCATEMEMV D2 34 0; if() #167 Body Start
STORE D2 0
PUSHR D4
LOAD D2 0.0005; UsrFunc[void __SetUpDrawingArray(ffc, npc, int[])] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[void __SetUpDrawingArray(ffc, npc, int[])] Params End
CALLFUNC 2.8842; UsrFunc[void __SetUpDrawingArray(ffc, npc, int[])] Call
POP D4
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 23 D2
PUSHR D4
LOAD D2 0.0005; UsrFunc[void __HideFFCAndWait(ffc)] Params Start
PUSHR D2; UsrFunc[void __HideFFCAndWait(ffc)] Params End
CALLFUNC 2.9117; UsrFunc[void __HideFFCAndWait(ffc)] Call
POP D4
LOAD D3 0
DEALLOCATEMEMR D3
GOTO 23522; if() #167 Body End
ALLOCATEMEMV D2 10 0; if() #167 Else Start
STORE D2 0
PUSHR D4
LOAD D2 0.0005; UsrFunc[void __SetUpDrawingArray(ffc, npc, int[])] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[void __SetUpDrawingArray(ffc, npc, int[])] Params End
CALLFUNC 2.8842; UsrFunc[void __SetUpDrawingArray(ffc, npc, int[])] Call
POP D4
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 23 D2
PUSHR D4
LOAD D2 0.0005; UsrFunc[void __HideFFCAndWait(ffc)] Params Start
PUSHR D2; UsrFunc[void __HideFFCAndWait(ffc)] Params End
CALLFUNC 2.9117; UsrFunc[void __HideFFCAndWait(ffc)] Call
POP D4
LOAD D3 0
DEALLOCATEMEMR D3; if() #167 Else End
GOTO 23522; if() #165 Body End
PUSHR D4; if() #165 Else Start
LOAD D2 0.0005; UsrFunc[void __HideFFCAndWait(ffc)] Params Start
PUSHR D2; UsrFunc[void __HideFFCAndWait(ffc)] Params End
CALLFUNC 2.9117; UsrFunc[void __HideFFCAndWait(ffc)] Call
POP D4; if() #165 Else End
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 0
SETR GD1 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 1
SETR GD2 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 2
SETR GD3 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 3
SETR GD5 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 4
SETR GD6 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 5
SETR GD7 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 6
SETR GD8 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 7
SETR GD9 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 8
SETR GD18 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 9
SETR GD19 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 10
SETR GD11 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 11
SETR GD4 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 12
SETR GD10 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 13
SETR GD12 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 14
SETR GD13 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 15
SETR GD15 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 16
SETR GD16 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 17
SETR GD17 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 18
SETR GD20 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 19
SETR GD21 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 20
SETR GD14 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 21
SETR GD22 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 22
SETR GD23 D2
LOAD D2 0.0001; if() #168 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 23669 ==; Test 'if'
STOREV 0 0; for() #68 setup AND if() #168 Body Start
LOAD D2 0; for() #68 LoopTest
COMPAREV D2 21
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 23675 ==; for() #68 TestFail?
LOAD D2 0.0001; for() #68 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
PUSHR D2
SETR D2 GD25
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #68 Body End
LOAD D2 0; for() #68 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 23646; for() #68 End
GOTO 23675; if() #168 Body End
SETV D2 0; if() #168 Else Start
PUSHR D2
SETR D2 GD25
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; if() #168 Else End
SETR D2 GD26; do-while() #2 Body End AND do-while() #2 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 23455 !=; Test 'while'
LOAD D2 0.0004; InlineFunc[bool npc::isValid()] Params AND if() #357 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 23700 ==; Test 'if'
SETV D2 65536; if() #357 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFNPC
SETR NPCMISCD D2; if() #357 Body End
LOAD D3 0.0001
DEALLOCATEMEMR D3
LOAD D3 0.0002
DEALLOCATEMEMR D3
POPARGS D5 0.0006
RETURNFUNC; Func[void Ghost_WaitframeLight(ffc, npc)] Body End
SETR D4 SP2; Func[void Ghost_SetPosition(ffc, npc)] Body Start
LOAD D2 0; InlineFunc[bool npc::isValid()] Params AND unless() #324 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 23838 ==; Test 'unless' AND return (Void) AND unless() #324 Body
PUSHR D4; if() #159 Test
PUSHV 16384; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 23719 !=
SETV D2 1
GOTO 23720
SETV D2 0
COMPAREV D2 0
GOTOCMP 23750 ==; Test 'if'
SETR D2 GD1; if() #159 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCX D2
SETR D2 GD2
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCY D2
SETR D2 GD3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCZ D2
GOTO 23782; if() #159 Body End
SETR D2 GD1; if() #159 Else Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCX D2
SETR D2 GD2
PUSHR D2
SETR D2 GD3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCY D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCZ D2; if() #159 Else End
PUSHR D4
SETR D2 GD1; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCXOFS
POP D3
ADDR D2 D3
PUSHR D2
PUSHV -64
PUSHV 256; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0609; UsrFunc[int Clamp(int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR X D2
PUSHR D4
SETR D2 GD2; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
SETR D2 GD3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCYOFS
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCZOFS
POP D3
SUBR D3 D2
PUSHR D3
PUSHV -64
PUSHV 176; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0609; UsrFunc[int Clamp(int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR Y D2
POPARGS D5 0.0002
RETURNFUNC; Func[void Ghost_SetPosition(ffc, npc)] Body End
PUSHARGSV 0 0.0005; Func[void Ghost_CheckHit(ffc, npc)] Body Start
SETR D4 SP2
LOAD D2 0.0005; if() #260 Test
PUSHR D2
POP REFNPC
SETR D2 NPCHP
PUSHR D2
SETR D2 GD14
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 24009 ==; Test 'if'
SETR D2 GD17; if() #260 Body Start
ORV D2 1
SETR GD17 D2
LOAD D2 0.0005
PUSHR D2
POP REFNPC
SETR D2 NPCHP
SETR GD14 D2
SETR D2 GD20; if() #261 Test
COMPAREV D2 32
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 23868 ==; Test 'if'
SETV D2 32; if() #261 Body Start
SETR GD20 D2; if() #261 Body End
PUSHR D4; if() #262 Test
PUSHV 1; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24009 ==; Test 'if'
SETR D2 LINKX; if() #262 Body Start
PUSHR D2
SETR D2 GD1
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0004
SETR D2 LINKY
PUSHR D2
SETR D2 GD2
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0003
LOAD D2 0.0004; InlineFunc[int Abs(int)] Params AND if() #87 Test
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
SETR D2 GD12
ADDV D2 1
MULTV D2 16
POP D3
COMPARER D3 D2
GOTOCMP 23908 >=
LOAD D2 0.0003; InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
SETR D2 GD13
ADDV D2 1
MULTV D2 16
POP D3
COMPARER D3 D2
GOTOCMP 23908 >=
SETV D2 1
GOTO 23909
SETV D2 0
COMPAREV D2 0
GOTOCMP 23938 ==; Test 'if'
SETR D2 LINKDIR; if() #263 Test AND if() #87 Body Start
ANDV D2 2
PUSHR D2
SETR D2 GD4
ANDV D2 2
POP D3
COMPARER D3 D2
GOTOCMP 23930 ==
SETR D2 GD4
COMPAREV D2 3
GOTOCMP 23930 >
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 23930 !=
SETV D2 0
GOTO 23931
SETV D2 1
COMPAREV D2 0
GOTOCMP 24009 ==; Test 'if'
SETR D2 LINKDIR; if() #263 Body Start
LSHIFTV D2 12
ORV D2 16
SETR GD21 D2; if() #263 Body End
GOTO 24009; if() #87 Body End
LOAD D2 0.0004; InlineFunc[int Abs(int)] Params AND if() #88 Test AND if() #87 Else Start
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0.0003; InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 23979 ==; Test 'if'
SETR D2 GD4; if() #264 Test AND if() #88 Body Start
COMPAREV D2 0
GOTOCMP 23965 ==
SETR D2 GD4
COMPAREV D2 1
GOTOCMP 23965 ==
SETR D2 GD4
COMPAREV D2 3
GOTOCMP 23965 >
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 23965 !=
SETV D2 0
GOTO 23966
SETV D2 1
COMPAREV D2 0
GOTOCMP 24009 ==; Test 'if'
LOAD D2 0.0003; if() #89 Test AND if() #264 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 23976 ==; Test 'if'
SETV D2 16; if() #89 Body Start
SETR GD21 D2
GOTO 24009; if() #89 Body End
SETV D2 4112; if() #89 Else Start
SETR GD21 D2; if() #89 Else End
GOTO 24009; if() #264 Body End AND if() #88 Body End
SETR D2 GD4; if() #265 Test AND if() #88 Else Start
COMPAREV D2 2
GOTOCMP 23996 ==
SETR D2 GD4
COMPAREV D2 3
GOTOCMP 23996 ==
SETR D2 GD4
COMPAREV D2 3
GOTOCMP 23996 >
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 23996 !=
SETV D2 0
GOTO 23997
SETV D2 1
COMPAREV D2 0
GOTOCMP 24009 ==; Test 'if'
LOAD D2 0.0004; if() #90 Test AND if() #265 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 24007 ==; Test 'if'
SETV D2 8208; if() #90 Body Start
SETR GD21 D2
GOTO 24009; if() #90 Body End
SETV D2 12304; if() #90 Else Start
SETR GD21 D2; if() #90 Else End
SETR D2 GD21; if() #265 Body End AND if() #88 Else End AND if() #87 Else End AND if() #262 Body End AND if() #260 Body End AND if() #266 Test
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 24236 ==; Test 'if'
SETR D2 GD21; if() #266 Body Start
RSHIFTV D2 12
STORE D2 0.0004
SETR D2 GD21
ANDV D2 4095
STORE D2 0.0003
STOREV 4 0.0002
PUSHR D4; if() #267 Test
PUSHV 5; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24030 ==; Test 'if'
LOAD D2 0.0002; if() #267 Body Start
DIVV D2 2
STORE D2 0.0002; if() #267 Body End
PUSHR D4; if() #91 Test
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1516; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24138 ==; Test 'if'
STOREV 0 0.0001; if() #91 Body Start
STOREV 0 0
LOAD D2 0.0003
SUBV D2 1
STORE D2 0.0003
LOAD D2 0.0003; if() #92 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 24058 ==; Test 'if'
LOAD D2 0.0004; if() #92 Body Start
LSHIFTV D2 12
PUSHR D2
LOAD D2 0.0003
POP D3
ORR D2 D3
SETR GD21 D2
GOTO 24060; if() #92 Body End
SETV D2 0; if() #92 Else Start
SETR GD21 D2; if() #92 Else End
LOAD D2 0.0004; if() #93 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24069 ==; Test 'if'
LOAD D2 0.0002; if() #93 Body Start
SUBV2 0 D2
STORE D2 0
GOTO 24088; if() #93 Body End
LOAD D2 0.0004; if() #94 Test AND if() #93 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24077 ==; Test 'if'
LOAD D2 0.0002; if() #94 Body Start
STORE D2 0
GOTO 24088; if() #94 Body End
LOAD D2 0.0004; if() #95 Test AND if() #94 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24086 ==; Test 'if'
LOAD D2 0.0002; if() #95 Body Start
SUBV2 0 D2
STORE D2 0.0001
GOTO 24088; if() #95 Body End
LOAD D2 0.0002; if() #95 Else Start
STORE D2 0.0001; if() #95 Else End
LOAD D2 0.0001; if() #94 Else End AND if() #93 Else End AND if() #96 Test
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 24113 ==; Test 'if'
SETR D2 GD1; if() #96 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
SETR GD1 D2
SETR D2 GD18
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
SETR GD18 D2
PUSHR D4
LOAD D2 0.0006; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 2.3706; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
POP D4
GOTO 24236; if() #96 Body End
LOAD D2 0; if() #268 Test AND if() #96 Else Start
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 24236 ==; Test 'if'
SETR D2 GD2; if() #268 Body Start
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR GD2 D2
SETR D2 GD19
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR GD19 D2
PUSHR D4
LOAD D2 0.0006; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 2.3706; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
POP D4; if() #268 Body End
GOTO 24236; if() #96 Else End AND if() #91 Body End
STOREV -1 0.0001; if() #91 Else Start
STOREV -1 0
SETV D2 0
SETR GD21 D2
SETR D2 GD17
ORV D2 16
SETR GD17 D2
LOAD D2 0.0004; if() #97 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24156 ==; Test 'if'
SETR D2 GD2; InlineFunc[int Floor(int)] Params Start AND if() #97 Body Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MULTV D2 8
STORE D2 0
GOTO 24185; if() #97 Body End
LOAD D2 0.0004; if() #98 Test AND if() #97 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24168 ==; Test 'if'
SETR D2 GD2; InlineFunc[int Ceiling(int)] Params Start AND if() #98 Body Start
LSHIFTV D2 0
DIVV D2 8; InlineFunc[int Ceiling(int)] Params End
CEILING D2; InlineFunc[int Ceiling(int)] Body
MULTV D2 8
STORE D2 0
GOTO 24185; if() #98 Body End
LOAD D2 0.0004; if() #99 Test AND if() #98 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24179 ==; Test 'if'
SETR D2 GD1; InlineFunc[int Floor(int)] Params Start AND if() #99 Body Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MULTV D2 8
STORE D2 0.0001
GOTO 24185; if() #99 Body End
SETR D2 GD1; InlineFunc[int Ceiling(int)] Params Start AND if() #99 Else Start
LSHIFTV D2 0
DIVV D2 8; InlineFunc[int Ceiling(int)] Params End
CEILING D2; InlineFunc[int Ceiling(int)] Body
MULTV D2 8
STORE D2 0.0001; if() #99 Else End
LOAD D2 0.0001; if() #98 Else End AND if() #97 Else End AND if() #100 Test
COMPAREV D2 -1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 24211 ==; Test 'if'
SETR D2 GD18; if() #100 Body Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETR D2 GD1
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
SETR GD18 D2
LOAD D2 0.0001
SETR GD1 D2
PUSHR D4
LOAD D2 0.0006; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 2.3706; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
POP D4
GOTO 24236; if() #100 Body End
LOAD D2 0; if() #269 Test AND if() #100 Else Start
COMPAREV D2 -1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 24236 ==; Test 'if'
SETR D2 GD19; if() #269 Body Start
PUSHR D2
LOAD D2 0
PUSHR D2
SETR D2 GD2
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
SETR GD19 D2
LOAD D2 0
SETR GD2 D2
PUSHR D4
LOAD D2 0.0006; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 2.3706; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
POP D4; if() #269 Body End
POPARGS D5 0.0007; if() #100 Else End AND if() #91 Else End AND if() #266 Body End
RETURNFUNC; Func[void Ghost_CheckHit(ffc, npc)] Body End
SETR D4 SP2; Func[void Ghost_ClearCombos()] Body Start
SETV D2 0
PUSHR D2
SETR D2 GD25
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
RETURNFUNC; Func[void Ghost_ClearCombos()] Body End
PUSHARGSV 0 0.0005; Func[int Ghost_ConstantWalk4(int, int, int, int, int)] Body Start
SETR D4 SP2
SETR D2 GD21; if() #270 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 24255 ==; Test 'if'
LOAD D2 0.0009; return Start AND if() #270 Body Start
GOTO 24589; return End AND if() #270 Body End
STOREV 0 0.0004
STOREV 0 0.0003
PUSHR D4
PUSHV 32768; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
STORE D2 0.0002
PUSHR D4; unless() #271 Test
PUSHV 1024; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24272 !=; Test 'unless'
PUSHR D4; unless() #271 Body Start
PUSHV 32768; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4591; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; unless() #271 Body End
LOAD D2 0.0008
DIVV D2 100
STORE D2 0.0008
SETR D2 GD17; if() #272 Test
ANDV D2 16
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 24416 ==; Test 'if'
SETR D2 GD1; if() #101 Test AND if() #272 Body Start
MODV D2 16
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24344 ==; Test 'if'
PUSHR D4; if() #101 Body Start
PUSHV 2; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4617; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
STORE D2 0.0001
PUSHR D4
PUSHV 3; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4617; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
STORE D2 0
LOAD D2 0.0001; if() #102 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 BI==
COMPAREV D2 0
GOTOCMP 24325 ==; Test 'if'
SETR D2 GD4; unless() #273 Test AND if() #102 Body Start
COMPAREV D2 2
GOTOCMP 24317 ==
SETR D2 GD4
COMPAREV D2 3
GOTOCMP 24317 ==
SETV D2 0
GOTO 24318
SETV D2 1
COMPAREV D2 0
GOTOCMP 24333 !=; Test 'unless'
PUSHVARGV 2; InlineFunc[Direction Choose(Direction)] Params Start AND unless() #273 Body Start
PUSHVARGV 3; InlineFunc[Direction Choose(Direction)] Params End
CHOOSEVARG; InlineFunc[Direction Choose(Direction)] Body
SETR GD4 D2; unless() #273 Body End
GOTO 24333; if() #102 Body End
LOAD D2 0.0001; if() #103 Test AND if() #102 Else Start
COMPAREV D2 0
GOTOCMP 24331 ==; Test 'if'
SETV D2 2; if() #103 Body Start
SETR GD4 D2
GOTO 24333; if() #103 Body End
SETV D2 3; if() #103 Else Start
SETR GD4 D2; if() #103 Else End
LOAD D2 0.0008; if() #102 Else End AND InlineFunc[int Floor(int)] Params Start
DIVV2 8 D2
SETV D2 8
PUSHR D2
LOAD D2 0.0008
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0009
GOTO 24416; if() #101 Body End
SETR D2 GD2; if() #104 Test AND if() #101 Else Start
MODV D2 16
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24406 ==; Test 'if'
PUSHR D4; if() #104 Body Start
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4617; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
STORE D2 0.0001
PUSHR D4
PUSHARGSV 1 0.0002; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4617; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
STORE D2 0
LOAD D2 0.0001; if() #105 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 BI==
COMPAREV D2 0
GOTOCMP 24387 ==; Test 'if'
SETR D2 GD4; unless() #274 Test AND if() #105 Body Start
COMPAREV D2 0
GOTOCMP 24379 ==
SETR D2 GD4
COMPAREV D2 1
GOTOCMP 24379 ==
SETV D2 0
GOTO 24380
SETV D2 1
COMPAREV D2 0
GOTOCMP 24395 !=; Test 'unless'
PUSHVARGV 0; InlineFunc[Direction Choose(Direction)] Params Start AND unless() #274 Body Start
PUSHVARGV 1; InlineFunc[Direction Choose(Direction)] Params End
CHOOSEVARG; InlineFunc[Direction Choose(Direction)] Body
SETR GD4 D2; unless() #274 Body End
GOTO 24395; if() #105 Body End
LOAD D2 0.0001; if() #106 Test AND if() #105 Else Start
COMPAREV D2 0
GOTOCMP 24393 ==; Test 'if'
SETV D2 0; if() #106 Body Start
SETR GD4 D2
GOTO 24395; if() #106 Body End
SETV D2 1; if() #106 Else Start
SETR GD4 D2; if() #106 Else End
LOAD D2 0.0008; if() #105 Else End AND InlineFunc[int Floor(int)] Params Start
DIVV2 8 D2
SETV D2 8
PUSHR D2
LOAD D2 0.0008
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0009
GOTO 24416; if() #104 Body End
LOAD D2 0.0008; InlineFunc[int Floor(int)] Params Start AND if() #104 Else Start
DIVV2 16 D2
SETV D2 16
PUSHR D2
LOAD D2 0.0008
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0009; if() #104 Else End
LOAD D2 0.0009; if() #101 Else End AND if() #272 Body End AND if() #275 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 24450 ==; Test 'if'
PUSHR D4; if() #275 Body Start
CALLFUNC 2.4667; UsrFunc[void __Ghost_FixCoords()] Call
PEEK D4
LOAD D2 0.0007; UsrFunc[void __Ghost_NewDir4(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2; UsrFunc[void __Ghost_NewDir4(int, int, int)] Params End
CALLFUNC 2.4723; UsrFunc[void __Ghost_NewDir4(int, int, int)] Call
POP D4
LOAD D2 0.0008; if() #107 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24440 ==; Test 'if'
SETV D2 0; if() #107 Body Start
STORE D2 0.0009
GOTO 24450; if() #107 Body End
LOAD D2 0.0008; InlineFunc[int Floor(int)] Params Start AND if() #107 Else Start
DIVV2 16 D2
SETV D2 16
PUSHR D2
LOAD D2 0.0008
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0009; if() #107 Else End
SETR D2 GD1; if() #275 Body End AND InlineFunc[int Abs(int)] Params Start AND if() #108 Test
PUSHR D2
SETR D2 LINKX
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 16
GOTOCMP 24470 >=
SETR D2 GD2; InlineFunc[int Abs(int)] Params Start
PUSHR D2
SETR D2 LINKY
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 16
GOTOCMP 24470 >=
SETV D2 1
GOTO 24471
SETV D2 0
COMPAREV D2 0
GOTOCMP 24507 ==; Test 'if'
SETR D2 LINKACTION; if() #276 Test AND if() #108 Body Start
COMPAREV D2 7
GOTOCMP 24482 !=
SETR D2 GD17
ANDV D2 32
COMPAREV D2 0
GOTOCMP 24482 !=
SETV D2 1
GOTO 24483
SETV D2 0
COMPAREV D2 0
GOTOCMP 24510 ==; Test 'if'
SETR D2 GD4; if() #276 Body Start
XORV D2 1
SETR GD4 D2
LOAD D2 0.0008; InlineFunc[int Floor(int)] Params Start
DIVV2 16 D2
SETV D2 16
PUSHR D2
LOAD D2 0.0008
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
PUSHR D2
LOAD D2 0.0009
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0009
SETR D2 GD17
ORV D2 32
SETR GD17 D2; if() #276 Body End
GOTO 24510; if() #108 Body End
SETR D2 GD17; if() #108 Else Start
ANDV D2 -33
SETR GD17 D2; if() #108 Else End
SETR D2 GD4; if() #277 Test
COMPAREV D2 0
GOTOCMP 24518 ==
SETR D2 GD4
COMPAREV D2 1
GOTOCMP 24518 ==
SETV D2 1
GOTO 24519
SETV D2 0
COMPAREV D2 0
GOTOCMP 24541 ==; Test 'if'
SETR D2 GD4; if() #109 Test AND if() #277 Body Start
COMPAREV D2 2
GOTOCMP 24532 ==
SETR D2 GD4
COMPAREV D2 4
GOTOCMP 24532 ==
SETR D2 GD4
COMPAREV D2 6
GOTOCMP 24532 ==
SETV D2 0
GOTO 24533
SETV D2 1
COMPAREV D2 0
GOTOCMP 24539 ==; Test 'if'
LOAD D2 0.0008; if() #109 Body Start
SUBV2 0 D2
STORE D2 0.0004
GOTO 24541; if() #109 Body End
LOAD D2 0.0008; if() #109 Else Start
STORE D2 0.0004; if() #109 Else End
SETR D2 GD4; if() #277 Body End AND if() #278 Test
COMPAREV D2 2
GOTOCMP 24549 ==
SETR D2 GD4
COMPAREV D2 3
GOTOCMP 24549 ==
SETV D2 1
GOTO 24550
SETV D2 0
COMPAREV D2 0
GOTOCMP 24572 ==; Test 'if'
SETR D2 GD4; if() #110 Test AND if() #278 Body Start
COMPAREV D2 0
GOTOCMP 24563 ==
SETR D2 GD4
COMPAREV D2 4
GOTOCMP 24563 ==
SETR D2 GD4
COMPAREV D2 5
GOTOCMP 24563 ==
SETV D2 0
GOTO 24564
SETV D2 1
COMPAREV D2 0
GOTOCMP 24570 ==; Test 'if'
LOAD D2 0.0008; if() #110 Body Start
SUBV2 0 D2
STORE D2 0.0003
GOTO 24572; if() #110 Body End
LOAD D2 0.0008; if() #110 Else Start
STORE D2 0.0003; if() #110 Else End
LOAD D2 0.0002; if() #278 Body End AND unless() #279 Test
COMPAREV D2 0
GOTOCMP 24579 !=; Test 'unless'
PUSHR D4; unless() #279 Body Start
PUSHV 32768; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.4952; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP D4; unless() #279 Body End
PUSHR D4
LOAD D2 0.0004; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.4979; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0009; return Start
SUBV D2 1
POPARGS D5 0.0010; return End
RETURNFUNC; Func[int Ghost_ConstantWalk4(int, int, int, int, int)] Body End
SETR D4 SP2; Func[void Ghost_SetFlag(int)] Body Start
LOAD D2 0; if() #158 Test
ANDV D2 65536
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 24609 ==; Test 'if'
SETR D2 GD16; if() #158 Body Start
PUSHR D2
LOAD D2 0
ANDV D2 65535
SETV D3 1
LSHIFTR D3 D2
SETR D2 D3
POP D3
ORR D2 D3
SETR GD16 D2
GOTO 24615; if() #158 Body End
SETR D2 GD15; if() #158 Else Start
PUSHR D2
LOAD D2 0
POP D3
ORR D2 D3
SETR GD15 D2; if() #158 Else End
POP D5
RETURNFUNC; Func[void Ghost_SetFlag(int)] Body End
SETR D4 SP2; Func[bool __Ghost_CanMoveNES(int, int, int)] Body Start
LOAD D2 0.0001; if() #608 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24625 ==; Test 'if'
SETV D2 1; return Start AND if() #608 Body Start
GOTO 24665; return End AND if() #608 Body End
LOAD D2 0.0001; while() #7 Test
COMPAREV D2 8
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 24652 ==; Test 'while'
PUSHR D4; unless() #609 Test AND while() #7 Body Start
LOAD D2 0.0002; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0001
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
SETR D2 GD3
COMPAREV D2 0
SETCMP D2 I>
PUSHR D2; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params End
CALLFUNC 2.1665; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24648 !=; Test 'unless'
SETV D2 0; return Start AND unless() #609 Body Start
GOTO 24665; return End AND unless() #609 Body End
LOAD D2 0.0001
SUBV D2 8
STORE D2 0.0001; while() #7 Body End
GOTO 24625; while() #7 End
PUSHR D4; return Start
LOAD D2 0.0002; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
SETR D2 GD3
COMPAREV D2 0
SETCMP D2 I>
PUSHR D2; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params End
CALLFUNC 2.1665; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Call
POP D4
POPARGS D5 0.0003; return End
RETURNFUNC; Func[bool __Ghost_CanMoveNES(int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[void __Ghost_FixCoords()] Body Start
SETR D4 SP2
SETR D2 GD1
ANDV D2 240
STORE D2 0.0001
SETR D2 GD1; if() #631 Test
ANDV D2 8
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 24681 ==; Test 'if'
LOAD D2 0.0001; if() #631 Body Start
ADDV D2 16
STORE D2 0.0001; if() #631 Body End
LOAD D2 0.0001
SETR GD1 D2
SETV D2 0; if() #376 Test
PUSHR D2
POP D0
SETR D2 SCREENFLAGSD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 24707 ==; Test 'if'
SETR D2 GD2; if() #376 Body Start
ANDV D2 248
STORE D2 0
SETR D2 GD2; if() #632 Test
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 24704 ==; Test 'if'
LOAD D2 0; if() #632 Body Start
ADDV D2 8
STORE D2 0; if() #632 Body End
LOAD D2 0
SETR GD2 D2
GOTO 24721; if() #376 Body End
SETR D2 GD2; if() #376 Else Start
ANDV D2 240
STORE D2 0
SETR D2 GD2; if() #633 Test
ANDV D2 8
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 24719 ==; Test 'if'
LOAD D2 0; if() #633 Body Start
ADDV D2 16
STORE D2 0; if() #633 Body End
LOAD D2 0
SETR GD2 D2; if() #376 Else End
POPARGS D5 0.0002
RETURNFUNC; Func[void __Ghost_FixCoords()] Body End
PUSHARGSV 0 0.0005; Func[void __Ghost_NewDir4(int, int, int)] Body Start
SETR D4 SP2
STOREV -1 0.0004
SETV D3 4; InlineFunc[int Rand(int)] Params AND if() #643 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0005
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 24814 ==; Test 'if'
PUSHR D4; if() #643 Body Start
PUSHV 11; UsrFunc[lweapon LoadLWeaponOf(int)] Params
CALLFUNC 2.9224; UsrFunc[lweapon LoadLWeaponOf(int)] Call
POP D4
STORE D2 0.0003
LOAD D2 0.0003; InlineFunc[bool lweapon::isValid()] Params AND if() #644 Test
ISVALIDLWPN D2; InlineFunc[bool lweapon::isValid()] Body
COMPAREV D2 0
GOTOCMP 24814 ==; Test 'if'
SETR D2 GD2; InlineFunc[int Abs(int)] Params Start AND if() #645 Test AND if() #644 Body Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
POP REFLWPN
SETR D2 LWPNY
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 14
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 24786 ==; Test 'if'
LOAD D2 0.0003; if() #386 Test AND if() #645 Body Start
PUSHR D2
POP REFLWPN
SETR D2 LWPNY
PUSHR D2
SETR D2 GD2
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 24772 ==; Test 'if'
SETV D2 0; if() #386 Body Start
STORE D2 0.0004
GOTO 24774; if() #386 Body End
SETV D2 1; if() #386 Else Start
STORE D2 0.0004; if() #386 Else End
PUSHR D4; if() #646 Test
LOAD D2 0.0004; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHR D2
PUSHV 16
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4617; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24786 ==; Test 'if'
LOAD D2 0.0004; if() #646 Body Start
SETR GD4 D2
GOTO 24950; return (Void) AND if() #646 Body End
LOAD D2 0.0003; if() #645 Body End AND if() #387 Test
PUSHR D2
POP REFLWPN
SETR D2 LWPNX
PUSHR D2
SETR D2 GD1
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 24800 ==; Test 'if'
SETV D2 2; if() #387 Body Start
STORE D2 0.0004
GOTO 24802; if() #387 Body End
SETV D2 3; if() #387 Else Start
STORE D2 0.0004; if() #387 Else End
PUSHR D4; if() #647 Test
LOAD D2 0.0004; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHR D2
PUSHV 16
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4617; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24814 ==; Test 'if'
LOAD D2 0.0004; if() #647 Body Start
SETR GD4 D2
GOTO 24950; return (Void) AND if() #647 Body End
SETV D3 256; if() #644 Body End AND if() #643 Body End AND InlineFunc[int Rand(int)] Params AND if() #648 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0006
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 24849 ==; Test 'if'
PUSHR D4; if() #648 Body Start
PUSHV 8; UsrFunc[int __Ghost_LinedUp(int, bool)] Params Start
PUSHV 0; UsrFunc[int __Ghost_LinedUp(int, bool)] Params End
CALLFUNC 3.0190; UsrFunc[int __Ghost_LinedUp(int, bool)] Call
POP D4
STORE D2 0.0004
LOAD D2 0.0004; if() #649 Test
COMPAREV D2 0
GOTOCMP 24843 <
PUSHR D4
LOAD D2 0.0004; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHR D2
PUSHV 16
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4617; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24843 ==
SETV D2 1
GOTO 24844
SETV D2 0
COMPAREV D2 0
GOTOCMP 24849 ==; Test 'if'
LOAD D2 0.0004; if() #649 Body Start
SETR GD4 D2
GOTO 24950; return (Void) AND if() #649 Body End
ALLOCATEMEMV D2 4 0; if() #648 Body End
STORE D2 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
STOREV 0 0; for() #177 setup
LOAD D2 0; for() #177 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 24884 ==; for() #177 TestFail?
PUSHR D4; if() #650 Test AND for() #177 Body Start
LOAD D2 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHR D2
PUSHV 16
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4617; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24880 ==; Test 'if'
SETV D2 1; if() #650 Body Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0002
ADDV D2 1
STORE D2 0.0002; if() #650 Body End
LOAD D2 0; for() #177 Body End AND for() #177 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 24854; for() #177 End
LOAD D2 0.0002; if() #651 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24894 ==; Test 'if'
SETV D2 -1; if() #651 Body Start
SETR GD4 D2
LOAD D3 0.0003
DEALLOCATEMEMR D3
GOTO 24950; return (Void) AND if() #651 Body End
SETV D3 16; InlineFunc[int Rand(int)] Params AND if() #652 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0007
POP D3
COMPARER D3 D2
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 24913 ==; Test 'if'
LOAD D2 0.0003; if() #653 Test AND if() #652 Body Start
PUSHR D2
SETR D2 GD4
POP D0
READPODARRAYR D2 D2
COMPAREV D2 0
GOTOCMP 24913 ==; Test 'if'
LOAD D3 0.0003; if() #653 Body Start
DEALLOCATEMEMR D3
GOTO 24950; return (Void) AND if() #653 Body End
LOAD D2 0.0002; if() #652 Body End AND InlineFunc[int Rand(int)] Params Start
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0001
STOREV 0 0; for() #178 setup
LOAD D2 0; for() #178 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 24948 ==; for() #178 TestFail?
LOAD D2 0.0003; unless() #654 Test AND for() #178 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
COMPAREV D2 0
GOTOCMP 24944 ==; Test 'unless' AND continue 1; AND unless() #654 Body
LOAD D2 0.0001; if() #388 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24941 ==; Test 'if'
LOAD D2 0; if() #388 Body Start
SETR GD4 D2
LOAD D3 0.0003
DEALLOCATEMEMR D3
GOTO 24950; return (Void)
GOTO 24944; if() #388 Body End
LOAD D2 0.0001; if() #388 Else Start
SUBV D2 1
STORE D2 0.0001; if() #388 Else End
LOAD D2 0; for() #178 Body End AND for() #178 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 24918; for() #178 End
LOAD D3 0.0003
DEALLOCATEMEMR D3
POPARGS D5 0.0008
RETURNFUNC; Func[void __Ghost_NewDir4(int, int, int)] Body End
SETR D4 SP2; Func[void Ghost_UnsetFlag(int)] Body Start
LOAD D2 0; if() #160 Test
ANDV D2 65536
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 24970 ==; Test 'if'
SETR D2 GD16; if() #160 Body Start
PUSHR D2
LOAD D2 0
ANDV D2 65535
SETV D3 -2
LSHIFTR D3 D2
SETR D2 D3
POP D3
ANDR D2 D3
SETR GD16 D2
GOTO 24977; if() #160 Body End
SETR D2 GD15; if() #160 Else Start
PUSHR D2
LOAD D2 0
BITNOT D2
POP D3
ANDR D2 D3
SETR GD15 D2; if() #160 Else End
POP D5
RETURNFUNC; Func[void Ghost_UnsetFlag(int)] Body End
PUSHARGSV 0 0.0004; Func[void Ghost_MoveXY(int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0005; if() #316 Test
COMPAREV D2 0
GOTOCMP 24997 >=
PUSHR D4
CALLFUNC 2.7469; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 24997 ==
PUSHR D4
PUSHV 32; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24997 !=
SETV D2 1
GOTO 24998
SETV D2 0
COMPAREV D2 0
GOTOCMP 25002 ==; Test 'if'
SETV D2 0; if() #316 Body Start
STORE D2 0.0005; if() #316 Body End
LOAD D2 0.0006; while() #3 Test AND InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 8
GOTOCMP 25012 >
LOAD D2 0.0005; InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 8
GOTOCMP 25012 >
SETV D2 0
GOTO 25013
SETV D2 1
COMPAREV D2 0
GOTOCMP 25079 ==; Test 'while'
LOAD D2 0.0006; InlineFunc[int Abs(int)] Params AND if() #141 Test AND while() #3 Body Start
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0.0005; InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
POP D3
COMPARER D3 D2
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 25052 ==; Test 'if'
LOAD D2 0.0006; if() #142 Test AND if() #141 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 25041 ==; Test 'if'
PUSHR D4; if() #142 Body Start
PUSHV 8; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV 0
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.4979; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0006
SUBV D2 8
STORE D2 0.0006
GOTO 25002; if() #142 Body End
PUSHR D4; if() #142 Else Start
PUSHV -8; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV 0
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.4979; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0006
ADDV D2 8
STORE D2 0.0006; if() #142 Else End
GOTO 25002; if() #141 Body End
LOAD D2 0.0005; if() #143 Test AND if() #141 Else Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 25068 ==; Test 'if'
PUSHR D4; if() #143 Body Start
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV 8
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.4979; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0005
SUBV D2 8
STORE D2 0.0005
GOTO 25002; if() #143 Body End
PUSHR D4; if() #143 Else Start
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV -8
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.4979; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0005
ADDV D2 8
STORE D2 0.0005; if() #143 Else End
GOTO 25002; if() #141 Else End AND while() #3 Body End AND while() #3 End
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
STOREV 0 0
LOAD D2 0.0006; if() #144 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25154 ==; Test 'if'
SETR D2 GD22; if() #144 Body Start
RSHIFTV D2 8
STORE D2 0.0002
SETR D2 GD1
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
STORE D2 0.0003
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0001
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
PUSHR D2
LOAD D2 0.0006
POP D3
ADDR D2 D3
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0
LOAD D2 0.0001; if() #145 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 25124 ==; Test 'if'
LOAD D2 0.0003; if() #145 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 25146; if() #145 Body End
PUSHR D4; if() #146 Test AND if() #145 Else Start
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOAD D2 0.0006
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1516; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25142 ==; Test 'if'
LOAD D2 0.0003; if() #146 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 25146; if() #146 Body End
LOAD D2 0.0003; if() #146 Else Start
RSHIFTV D2 3
LSHIFTV D2 3
STORE D2 0.0003; if() #146 Else End
LOAD D2 0.0003; if() #145 Else End
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2
GOTO 25237; if() #144 Body End
LOAD D2 0.0006; if() #317 Test AND if() #144 Else Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 25237 ==; Test 'if'
SETR D2 GD12; if() #317 Body Start
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
PUSHR D2
SETR D2 GD22
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
STORE D2 0.0002
SETR D2 GD1
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
STORE D2 0.0003
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0001
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
PUSHR D2
LOAD D2 0.0006
POP D3
ADDR D2 D3
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0
LOAD D2 0.0001; if() #147 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 25207 ==; Test 'if'
LOAD D2 0.0003; if() #147 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 25230; if() #147 Body End
PUSHR D4; if() #148 Test AND if() #147 Else Start
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1516; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25224 ==; Test 'if'
LOAD D2 0.0003; if() #148 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 25230; if() #148 Body End
LOAD D2 0.0003; if() #148 Else Start
ADDV D2 7
RSHIFTV D2 3
LSHIFTV D2 3
SUBV D2 1
STORE D2 0.0003; if() #148 Else End
LOAD D2 0.0003; if() #147 Else End
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2; if() #317 Body End
LOAD D2 0.0005; if() #144 Else End AND if() #149 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25308 ==; Test 'if'
SETR D2 GD23; if() #149 Body Start
RSHIFTV D2 8
STORE D2 0.0002
SETR D2 GD2
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
STORE D2 0.0003
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0001
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0
LOAD D2 0.0001; if() #150 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 25278 ==; Test 'if'
LOAD D2 0.0003; if() #150 Body Start
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 25300; if() #150 Body End
PUSHR D4; if() #151 Test AND if() #150 Else Start
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOAD D2 0.0005
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1516; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25296 ==; Test 'if'
LOAD D2 0.0003; if() #151 Body Start
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 25300; if() #151 Body End
LOAD D2 0.0003; if() #151 Else Start
RSHIFTV D2 3
LSHIFTV D2 3
STORE D2 0.0003; if() #151 Else End
LOAD D2 0.0003; if() #150 Else End
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2
GOTO 25391; if() #149 Body End
LOAD D2 0.0005; if() #318 Test AND if() #149 Else Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 25391 ==; Test 'if'
SETR D2 GD13; if() #318 Body Start
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
PUSHR D2
SETR D2 GD23
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
STORE D2 0.0002
SETR D2 GD2
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
STORE D2 0.0003
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0001
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0
LOAD D2 0.0001; if() #152 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 25361 ==; Test 'if'
LOAD D2 0.0003; if() #152 Body Start
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 25384; if() #152 Body End
PUSHR D4; if() #153 Test AND if() #152 Else Start
PUSHV 1; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1516; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25378 ==; Test 'if'
LOAD D2 0.0003; if() #153 Body Start
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 25384; if() #153 Body End
LOAD D2 0.0003; if() #153 Else Start
ADDV D2 7
RSHIFTV D2 3
LSHIFTV D2 3
SUBV D2 1
STORE D2 0.0003; if() #153 Else End
LOAD D2 0.0003; if() #152 Else End
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2; if() #318 Body End
PUSHR D4; if() #149 Else End AND if() #319 Test
PUSHV 64; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25403 ==
SETR D2 GD17
ANDV D2 4
COMPAREV D2 0
GOTOCMP 25403 !=
SETV D2 1
GOTO 25404
SETV D2 0
COMPAREV D2 0
GOTOCMP 25461 ==; Test 'if'
PUSHR D4; if() #154 Test AND if() #319 Body Start
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25426 ==; Test 'if'
PUSHR D4; if() #154 Body Start
LOAD D2 0.0006; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int WrapAngle(int)] Params Start AND UsrFunc[int AngleDir8(int)] Params Start
PUSHR D2
LOAD D2 0.0005
SETR D1 D2; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End AND InlineFunc[int WrapAngle(int)] Params End
WRAPRADIANS D2; InlineFunc[int WrapAngle(int)] Body
MULTV D2 57.2958
PUSHR D2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 2.0402; UsrFunc[int AngleDir8(int)] Call
POP D4
SETR GD4 D2
GOTO 25457; if() #154 Body End
LOAD D2 0.0006; InlineFunc[int Abs(int)] Params AND if() #155 Test AND if() #154 Else Start
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0.0005; InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25447 ==; Test 'if'
LOAD D2 0.0005; if() #156 Test AND if() #155 Body Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25444 ==; Test 'if'
SETV D2 0; if() #156 Body Start
SETR GD4 D2
GOTO 25457; if() #156 Body End
SETV D2 1; if() #156 Else Start
SETR GD4 D2; if() #156 Else End
GOTO 25457; if() #155 Body End
LOAD D2 0.0006; if() #157 Test AND if() #155 Else Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25455 ==; Test 'if'
SETV D2 2; if() #157 Body Start
SETR GD4 D2
GOTO 25457; if() #157 Body End
SETV D2 3; if() #157 Else Start
SETR GD4 D2; if() #157 Else End
SETR D2 GD1; if() #155 Else End AND if() #154 Else End
SETR GD18 D2
SETR D2 GD2
SETR GD19 D2; if() #319 Body End
POPARGS D5 0.0007
RETURNFUNC; Func[void Ghost_MoveXY(int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[int Ghost_ConstantWalk8(int, int, int, int, int)] Body Start
SETR D4 SP2
SETR D2 GD21; if() #280 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 25472 ==; Test 'if'
LOAD D2 0.0006; return Start AND if() #280 Body Start
GOTO 25573; return End AND if() #280 Body End
STOREV 0 0.0001
STOREV 0 0
LOAD D2 0.0005
DIVV D2 100
STORE D2 0.0005
LOAD D2 0.0006; if() #281 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 25501 ==; Test 'if'
PUSHR D4; if() #281 Body Start
LOAD D2 0.0004; UsrFunc[void __Ghost_NewDir8(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[void __Ghost_NewDir8(int, int, int)] Params End
CALLFUNC 2.5575; UsrFunc[void __Ghost_NewDir8(int, int, int)] Call
POP D4
LOAD D2 0.0005; InlineFunc[int Floor(int)] Params Start
DIVV2 8 D2
SETV D2 8
PUSHR D2
LOAD D2 0.0005
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0006; if() #281 Body End
SETR D2 GD4; if() #282 Test
COMPAREV D2 0
GOTOCMP 25509 ==
SETR D2 GD4
COMPAREV D2 1
GOTOCMP 25509 ==
SETV D2 1
GOTO 25510
SETV D2 0
COMPAREV D2 0
GOTOCMP 25532 ==; Test 'if'
SETR D2 GD4; if() #111 Test AND if() #282 Body Start
COMPAREV D2 2
GOTOCMP 25523 ==
SETR D2 GD4
COMPAREV D2 4
GOTOCMP 25523 ==
SETR D2 GD4
COMPAREV D2 6
GOTOCMP 25523 ==
SETV D2 0
GOTO 25524
SETV D2 1
COMPAREV D2 0
GOTOCMP 25530 ==; Test 'if'
LOAD D2 0.0005; if() #111 Body Start
SUBV2 0 D2
STORE D2 0.0001
GOTO 25532; if() #111 Body End
LOAD D2 0.0005; if() #111 Else Start
STORE D2 0.0001; if() #111 Else End
SETR D2 GD4; if() #282 Body End AND if() #283 Test
COMPAREV D2 2
GOTOCMP 25540 ==
SETR D2 GD4
COMPAREV D2 3
GOTOCMP 25540 ==
SETV D2 1
GOTO 25541
SETV D2 0
COMPAREV D2 0
GOTOCMP 25563 ==; Test 'if'
SETR D2 GD4; if() #112 Test AND if() #283 Body Start
COMPAREV D2 0
GOTOCMP 25554 ==
SETR D2 GD4
COMPAREV D2 4
GOTOCMP 25554 ==
SETR D2 GD4
COMPAREV D2 5
GOTOCMP 25554 ==
SETV D2 0
GOTO 25555
SETV D2 1
COMPAREV D2 0
GOTOCMP 25561 ==; Test 'if'
LOAD D2 0.0005; if() #112 Body Start
SUBV2 0 D2
STORE D2 0
GOTO 25563; if() #112 Body End
LOAD D2 0.0005; if() #112 Else Start
STORE D2 0; if() #112 Else End
PUSHR D4; if() #283 Body End
LOAD D2 0.0001; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.4979; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0006; return Start
SUBV D2 1
POPARGS D5 0.0007; return End
RETURNFUNC; Func[int Ghost_ConstantWalk8(int, int, int, int, int)] Body End
PUSHARGSV 0 0.0005; Func[void __Ghost_NewDir8(int, int, int)] Body Start
SETR D4 SP2
STOREV -1 0.0004
PUSHR D4; if() #655 Test
PUSHR GD4; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHV 8
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4617; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25756 ==; Test 'if'
SETV D3 4; InlineFunc[int Rand(int)] Params AND if() #656 Test AND if() #655 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0005
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25706 ==; Test 'if'
PUSHR D4; if() #656 Body Start
PUSHV 11; UsrFunc[lweapon LoadLWeaponOf(int)] Params
CALLFUNC 2.9224; UsrFunc[lweapon LoadLWeaponOf(int)] Call
POP D4
STORE D2 0.0003
LOAD D2 0.0003; InlineFunc[bool lweapon::isValid()] Params AND if() #657 Test
ISVALIDLWPN D2; InlineFunc[bool lweapon::isValid()] Body
COMPAREV D2 0
GOTOCMP 25706 ==; Test 'if'
LOAD D2 0.0003; if() #389 Test AND if() #657 Body Start
PUSHR D2
POP REFLWPN
SETR D2 LWPNX
PUSHR D2
SETR D2 GD1
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25618 ==; Test 'if'
SETV D2 2; if() #389 Body Start
STORE D2 0.0004
GOTO 25634; if() #389 Body End
LOAD D2 0.0003; if() #390 Test AND if() #389 Else Start
PUSHR D2
POP REFLWPN
SETR D2 LWPNX
PUSHR D2
SETR D2 GD1
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 25632 ==; Test 'if'
SETV D2 3; if() #390 Body Start
STORE D2 0.0004
GOTO 25634; if() #390 Body End
SETV D2 0; if() #390 Else Start
STORE D2 0.0004; if() #390 Else End
SETR D2 GD2; if() #389 Else End AND InlineFunc[int Abs(int)] Params Start AND if() #658 Test
PUSHR D2
LOAD D2 0.0003
PUSHR D2
POP REFLWPN
SETR D2 LWPNY
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 14
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 25688 ==; Test 'if'
LOAD D2 0.0004; if() #391 Test AND if() #658 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 25672 ==; Test 'if'
LOAD D2 0.0003; if() #392 Test AND if() #391 Body Start
PUSHR D2
POP REFLWPN
SETR D2 LWPNY
PUSHR D2
SETR D2 GD2
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25668 ==; Test 'if'
LOAD D2 0.0004; if() #392 Body Start
ADDV D2 2
STORE D2 0.0004
GOTO 25688; if() #392 Body End
LOAD D2 0.0004; if() #392 Else Start
ADDV D2 4
STORE D2 0.0004; if() #392 Else End
GOTO 25688; if() #391 Body End
LOAD D2 0.0003; if() #393 Test AND if() #391 Else Start
PUSHR D2
POP REFLWPN
SETR D2 LWPNY
PUSHR D2
SETR D2 GD2
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25686 ==; Test 'if'
SETV D2 0; if() #393 Body Start
STORE D2 0.0004
GOTO 25688; if() #393 Body End
SETV D2 1; if() #393 Else Start
STORE D2 0.0004; if() #393 Else End
PUSHR D4; if() #391 Else End AND if() #658 Body End AND if() #659 Test
LOAD D2 0.0004; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHR D2
PUSHV 8
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4617; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25706 ==; Test 'if'
LOAD D2 0.0004; if() #659 Body Start
SETR GD4 D2
SETR D2 GD1
LSHIFTV D2 0
SETR GD1 D2
SETR D2 GD2
LSHIFTV D2 0
SETR GD2 D2
GOTO 25850; return (Void) AND if() #659 Body End
SETV D3 256; if() #657 Body End AND if() #656 Body End AND InlineFunc[int Rand(int)] Params AND if() #660 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0006
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25747 ==; Test 'if'
PUSHR D4; if() #660 Body Start
PUSHV 8; UsrFunc[int __Ghost_LinedUp(int, bool)] Params Start
PUSHV 1; UsrFunc[int __Ghost_LinedUp(int, bool)] Params End
CALLFUNC 3.0190; UsrFunc[int __Ghost_LinedUp(int, bool)] Call
POP D4
STORE D2 0.0004
LOAD D2 0.0004; if() #661 Test
COMPAREV D2 0
GOTOCMP 25735 <
PUSHR D4
LOAD D2 0.0004; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHR D2
PUSHV 8
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4617; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25735 ==
SETV D2 1
GOTO 25736
SETV D2 0
COMPAREV D2 0
GOTOCMP 25747 ==; Test 'if'
LOAD D2 0.0004; if() #661 Body Start
SETR GD4 D2
SETR D2 GD1
LSHIFTV D2 0
SETR GD1 D2
SETR D2 GD2
LSHIFTV D2 0
SETR GD2 D2
GOTO 25850; return (Void) AND if() #661 Body End
SETV D3 16; if() #660 Body End AND InlineFunc[int Rand(int)] Params AND if() #662 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0007
POP D3
COMPARER D3 D2
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 25850 !=; Test 'if' AND return (Void) AND if() #662 Body
ALLOCATEMEMV D2 8 0; if() #655 Body End
STORE D2 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
STOREV 0 0; for() #179 setup
LOAD D2 0; for() #179 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25791 ==; for() #179 TestFail?
PUSHR D4; if() #663 Test AND for() #179 Body Start
LOAD D2 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHR D2
PUSHV 8
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4617; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25787 ==; Test 'if'
LOAD D2 0.0002; if() #663 Body Start
ADDV D2 1
STORE D2 0.0002
SETV D2 1
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; if() #663 Body End
LOAD D2 0; for() #179 Body End AND for() #179 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 25761; for() #179 End
LOAD D2 0.0002; if() #664 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 25807 ==; Test 'if'
SETV D2 -1; if() #664 Body Start
SETR GD4 D2
SETR D2 GD1
LSHIFTV D2 0
SETR GD1 D2
SETR D2 GD2
LSHIFTV D2 0
SETR GD2 D2
LOAD D3 0.0003
DEALLOCATEMEMR D3
GOTO 25850; return (Void) AND if() #664 Body End
LOAD D2 0.0002; InlineFunc[int Rand(int)] Params Start
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0001
STOREV 0 0; for() #180 setup
LOAD D2 0; for() #180 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25848 ==; for() #180 TestFail?
LOAD D2 0.0003; unless() #665 Test AND for() #180 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
COMPAREV D2 0
GOTOCMP 25844 ==; Test 'unless' AND continue 1; AND unless() #665 Body
LOAD D2 0.0001; if() #394 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 25841 ==; Test 'if'
LOAD D2 0; if() #394 Body Start
SETR GD4 D2
SETR D2 GD1
LSHIFTV D2 0
SETR GD1 D2
SETR D2 GD2
LSHIFTV D2 0
SETR GD2 D2
LOAD D3 0.0003
DEALLOCATEMEMR D3
GOTO 25850; return (Void)
GOTO 25844; if() #394 Body End
LOAD D2 0.0001; if() #394 Else Start
SUBV D2 1
STORE D2 0.0001; if() #394 Else End
LOAD D2 0; for() #180 Body End AND for() #180 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 25812; for() #180 End
LOAD D3 0.0003
DEALLOCATEMEMR D3
POPARGS D5 0.0008
RETURNFUNC; Func[void __Ghost_NewDir8(int, int, int)] Body End
SETR D4 SP2; Func[void Ghost_DeathAnimation(ffc, npc, int)] Body Start
LOAD D2 0; if() #113 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 25867 ==; Test 'if'
PUSHR D4; if() #113 Body Start
LOAD D2 0.0002; UsrFunc[void __Ghost_Explode(ffc, npc, bool)] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
PUSHV 0; UsrFunc[void __Ghost_Explode(ffc, npc, bool)] Params End
CALLFUNC 2.5976; UsrFunc[void __Ghost_Explode(ffc, npc, bool)] Call
POP D4
GOTO 25974; if() #113 Body End
LOAD D2 0; if() #114 Test AND if() #113 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 25881 ==; Test 'if'
PUSHR D4; if() #114 Body Start
LOAD D2 0.0002; UsrFunc[void __Ghost_Explode(ffc, npc, bool)] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
PUSHV 1; UsrFunc[void __Ghost_Explode(ffc, npc, bool)] Params End
CALLFUNC 2.5976; UsrFunc[void __Ghost_Explode(ffc, npc, bool)] Call
POP D4
GOTO 25974; if() #114 Body End
LOAD D2 0; if() #115 Test AND if() #114 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 25894 ==; Test 'if'
PUSHR D4; if() #115 Body Start
LOAD D2 0.0002; UsrFunc[void __Ghost_ShrinkAway(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[void __Ghost_ShrinkAway(ffc, npc)] Params End
CALLFUNC 2.6145; UsrFunc[void __Ghost_ShrinkAway(ffc, npc)] Call
POP D4
GOTO 25974; if() #115 Body End
LOAD D2 0.0001; InlineFunc[bool npc::isValid()] Params AND if() #284 Test AND if() #115 Else Start
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 25967 ==; Test 'if'
SETV D2 1; if() #284 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCTXSZ D2
SETV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCTYSZ D2
SETR D2 GD1
PUSHR D2
SETR D2 GD12
SUBV D2 1
MULTV D2 8
SETV D2 8
PUSHR D2
SETR D2 GD12
SUBV D2 1
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCX D2
SETR D2 GD2
PUSHR D2
SETR D2 GD13
SUBV D2 1
MULTV D2 8
SETV D2 8
PUSHR D2
SETR D2 GD13
SUBV D2 1
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCY D2
SETR D2 GD3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCZ D2; if() #284 Body End
PUSHR D4
LOAD D2 0.0002; UsrFunc[void __GhCleanUp(ffc)] Params Start
PUSHR D2; UsrFunc[void __GhCleanUp(ffc)] Params End
CALLFUNC 2.6412; UsrFunc[void __GhCleanUp(ffc)] Call
POP D4
SETV D2 0
SETR GD10 D2; if() #115 Else End
POPARGS D5 0.0003; if() #114 Else End AND if() #113 Else End
RETURNFUNC; Func[void Ghost_DeathAnimation(ffc, npc, int)] Body End
PUSHARGSV 0 0.0005; Func[void __Ghost_Explode(ffc, npc, bool)] Body Start
SETR D4 SP2
STOREV 0 0.0004
SETR D2 GD1
PUSHR D2
LOAD D2 0.0006
PUSHR D2
POP REFNPC
SETR D2 NPCXOFS
POP D3
ADDR D2 D3
STORE D2 0.0003
SETR D2 GD2
PUSHR D2
LOAD D2 0.0006
PUSHR D2
POP REFNPC
SETR D2 NPCYOFS
POP D3
ADDR D2 D3
PUSHR D2
SETR D2 GD3
PUSHR D2
LOAD D2 0.0006
PUSHR D2
POP REFNPC
SETR D2 NPCZOFS
POP D3
ADDR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0002
PUSHR D4
LOAD D2 0.0007; UsrFunc[void __DeathAnimStart(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[void __DeathAnimStart(ffc, npc)] Params End
CALLFUNC 3.0099; UsrFunc[void __DeathAnimStart(ffc, npc)] Call
PEEK D4
LOAD D2 0.0006; UsrFunc[void __DeathAnimSFX(int, int)] Params Start
PUSHR D2
POP REFNPC
PUSHR NPCID
LOAD D2 0.0006
PUSHR D2
POP REFNPC
PUSHR NPCX; UsrFunc[void __DeathAnimSFX(int, int)] Params End
CALLFUNC 3.0043; UsrFunc[void __DeathAnimSFX(int, int)] Call
POP D4
LOAD D2 0.0005; if() #375 Test
COMPAREV D2 0
GOTOCMP 26032 ==; Test 'if'
SETV D2 10000; if() #375 Body Start
SETR GD20 D2
GOTO 26034; if() #375 Body End
SETV D2 0; if() #375 Else Start
SETR GD20 D2; if() #375 Else End
STOREV 0 0.0001; for() #175 setup
LOAD D2 0.0001; for() #175 LoopTest
COMPAREV D2 15
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 26136 ==; for() #175 TestFail?
SETV D2 4; InlineFunc[lweapon screendata::CreateLWeapon(int)] Params AND for() #175 Body Start
CREATELWEAPONR D2; InlineFunc[lweapon screendata::CreateLWeapon(int)] Body Start
SETR D2 REFLWPN; InlineFunc[lweapon screendata::CreateLWeapon(int)] Body End
STORE D2 0.0004
LOAD D2 0.0003
PUSHR D2
SETR D2 GD12; InlineFunc[int Rand(int)] Params Start
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
POP D3
ADDR D2 D3
SUBV D2 8
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFLWPN
SETR LWPNX D2
LOAD D2 0.0002
PUSHR D2
SETR D2 GD13; InlineFunc[int Rand(int)] Params Start
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
POP D3
ADDR D2 D3
SUBV D2 8
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFLWPN
SETR LWPNY D2
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFLWPN
SETR LWPNCOLLDET D2
STOREV 0 0; for() #176 setup
LOAD D2 0; for() #176 LoopTest
COMPAREV D2 16
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 26132 ==; for() #176 TestFail?
PUSHR D4; for() #176 Body Start
LOAD D2 0.0007; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 2.3706; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
POP D4
LOAD D2 0.0005; if() #630 Test
COMPAREV D2 0
GOTOCMP 26121 ==; Test 'if'
PUSHR D4; if() #630 Body Start
LOAD D2 0.0007; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Params End
CALLFUNC 2.3056; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Call
POP D4; if() #630 Body End
PUSHR D4
LOAD D2 0.0007; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params End
CALLFUNC 2.3306; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Call
POP D4; for() #176 Body End
LOAD D2 0; for() #176 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 26099; for() #176 End
LOAD D2 0.0001; for() #175 Body End AND for() #175 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 26035; for() #175 End
PUSHR D4
LOAD D2 0.0007; UsrFunc[void __DeathAnimEnd(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[void __DeathAnimEnd(ffc, npc)] Params End
CALLFUNC 2.9972; UsrFunc[void __DeathAnimEnd(ffc, npc)] Call
POP D4
POPARGS D5 0.0008
RETURNFUNC; Func[void __Ghost_Explode(ffc, npc, bool)] Body End
PUSHARGSV 0 0.0011; Func[void __Ghost_ShrinkAway(ffc, npc)] Body Start
SETR D4 SP2
SETR D2 GD1
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFNPC
SETR D2 NPCXOFS
POP D3
ADDR D2 D3
STORE D2 0.0010
SETR D2 GD2
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFNPC
SETR D2 NPCYOFS
POP D3
ADDR D2 D3
PUSHR D2
SETR D2 GD3
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFNPC
SETR D2 NPCZOFS
POP D3
ADDR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0009
SETR D2 GD12
MULTV D2 16
STORE D2 0.0008
SETR D2 GD13
MULTV D2 16
STORE D2 0.0007
LOAD D2 0.0011
PUSHR D2
POP REFNPC
SETR D2 NPCTILE
STORE D2 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
LOAD D2 0.0012; if() #395 Test
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 26202 ==; Test 'if'
SETV D2 4; if() #395 Body Start
STORE D2 0.0005
GOTO 26216; if() #395 Body End
SETV D2 1; if() #396 Test AND if() #395 Else Start
PUSHR D2
POP D0
SETR D2 SCREENFLAGSD
ANDV D2 16
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 26214 ==; Test 'if'
SETV D2 1; if() #396 Body Start
STORE D2 0.0005
GOTO 26216; if() #396 Body End
SETV D2 2; if() #396 Else Start
STORE D2 0.0005; if() #396 Else End
LOAD D2 0.0011; if() #395 Else End AND if() #397 Test
PUSHR D2
POP REFNPC
SETR D2 NPCMFLAGS
ANDV D2 256
COMPAREV D2 0
GOTOCMP 26234 !=
LOAD D2 0.0012
PUSHR D2
SETV D2 1
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 26234 !=
SETV D2 0
GOTO 26235
SETV D2 1
COMPAREV D2 0
GOTOCMP 26240 ==; Test 'if'
SETV D2 64; if() #397 Body Start
STORE D2 0.0004
GOTO 26242; if() #397 Body End
SETV D2 128; if() #397 Else Start
STORE D2 0.0004; if() #397 Else End
PUSHR D4
LOAD D2 0.0012; UsrFunc[void __DeathAnimStart(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2; UsrFunc[void __DeathAnimStart(ffc, npc)] Params End
CALLFUNC 3.0099; UsrFunc[void __DeathAnimStart(ffc, npc)] Call
POP D4
SETV D2 1024
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCXOFS D2
SETV D2 0
SETR GD20 D2
STOREV 0 0.0003; for() #181 setup
LOAD D2 0.0003; for() #181 LoopTest
COMPAREV D2 120
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 26403 ==; for() #181 TestFail?
LOAD D2 0.0003; InlineFunc[int Cos(int)] Params Start AND for() #181 Body Start
SUBV D2 30
SETR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
PUSHR D2
SETV D3 30; InlineFunc[int Cos(int)] Params
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
DIVR D3 D2
SETR D2 D3
STORE D2 0.0002
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0002
POP D3
MULTR D2 D3
STORE D2 0.0001
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0002
POP D3
MULTR D2 D3
STORE D2 0
LOAD D2 0.0003; if() #666 Test
COMPAREV D2 30
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26305 ==; Test 'if'
PUSHR D4; if() #666 Body Start
LOAD D2 0.0011; UsrFunc[void __DeathAnimSFX(int, int)] Params Start
PUSHR D2
POP REFNPC
PUSHR NPCID
LOAD D2 0.0011
PUSHR D2
POP REFNPC
PUSHR NPCX; UsrFunc[void __DeathAnimSFX(int, int)] Params End
CALLFUNC 3.0043; UsrFunc[void __DeathAnimSFX(int, int)] Call
POP D4; if() #666 Body End
SETR D2 GD10; if() #398 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26352 ==; Test 'if'
LOAD D2 0.0005; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #398 Body Start
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
DIVV D2 2
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0009
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
SETR D2 D3
DIVV D2 2
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0006
PUSHR D2
PUSHR GD12
PUSHR GD13
PUSHR GD11
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHARGSV 0 0.0004
PUSHV 1
LOAD D2 0.0004
PUSHR D2; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILER; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0015; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
GOTO 26392; if() #398 Body End
LOAD D2 0.0005; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #398 Else Start
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
DIVV D2 2
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0009
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
SETR D2 D3
DIVV D2 2
POP D3
SUBR D3 D2
PUSHR D3
PUSHR GD10
PUSHR GD12
PUSHR GD13
PUSHR GD11
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHARGSV 0 0.0005
PUSHV 1
LOAD D2 0.0004
PUSHR D2; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWCOMBOR; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0016; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End AND if() #398 Else End
PUSHR D4
LOAD D2 0.0012; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params End
CALLFUNC 2.3306; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Call
POP D4; for() #181 Body End
LOAD D2 0.0003; for() #181 LoopIncrement
ADDV D2 1
STORE D2 0.0003
GOTO 26261; for() #181 End
PUSHR D4
LOAD D2 0.0012; UsrFunc[void __DeathAnimEnd(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2; UsrFunc[void __DeathAnimEnd(ffc, npc)] Params End
CALLFUNC 2.9972; UsrFunc[void __DeathAnimEnd(ffc, npc)] Call
POP D4
POPARGS D5 0.0013
RETURNFUNC; Func[void __Ghost_ShrinkAway(ffc, npc)] Body End
PUSHV 0; Func[void __GhCleanUp(ffc)] Body Start
SETR D4 SP2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR X D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR Y D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD2 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD2 D2
SETV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFTWIDTH D2
SETV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFTHEIGHT D2
SETV D2 16
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFCWIDTH D2
SETV D2 16
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFCHEIGHT D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DELAY D2
STOREV 0 0; for() #170 setup
LOAD D2 0; for() #170 LoopTest
COMPAREV D2 11
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 26544 ==; for() #170 TestFail?
SETV D2 0; for() #170 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
LOAD D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2; for() #170 Body End
LOAD D2 0; for() #170 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 26523; for() #170 End
POPARGS D5 0.0002
RETURNFUNC; Func[void __GhCleanUp(ffc)] Body End
SETR D4 SP2; Func[void Ghost_ForceDir(int)] Body Start
LOAD D2 0
SETR GD4 D2
SETR D2 GD17
ORV D2 4
SETR GD17 D2
POP D5
RETURNFUNC; Func[void Ghost_ForceDir(int)] Body End
PUSHARGSV 0 0.0005; Func[int Ghost_HaltingWalk4(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
SETR D2 GD21; if() #296 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 26563 ==; Test 'if'
LOAD D2 0.0011; return Start AND if() #296 Body Start
GOTO 26886; return End AND if() #296 Body End
STOREV 0 0.0004
STOREV 0 0.0003
LOAD D2 0.0011; if() #122 Test
COMPAREV D2 -1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26575 ==; Test 'if'
SETV D2 0; if() #122 Body Start
STORE D2 0.0004
SETV D2 0
STORE D2 0.0003
GOTO 26581; if() #122 Body End
LOAD D2 0.0011; if() #122 Else Start
MULTV D2 10000
STORE D2 0.0004
LOAD D2 0.0011
RSHIFTV D2 0
STORE D2 0.0003; if() #122 Else End
LOAD D2 0.0003; if() #297 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 26589 ==; Test 'if'
LOAD D2 0.0003; return Start AND if() #297 Body Start
SUBV D2 1
GOTO 26886; return End AND if() #297 Body End
PUSHR D4
PUSHV 32768; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
STORE D2 0.0002
PUSHR D4; unless() #298 Test
PUSHV 1024; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 26604 !=; Test 'unless'
PUSHR D4; unless() #298 Body Start
PUSHV 32768; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4591; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; unless() #298 Body End
LOAD D2 0.0010
DIVV D2 100
STORE D2 0.0010
SETR D2 GD17; if() #299 Test
ANDV D2 16
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 26748 ==; Test 'if'
SETR D2 GD1; if() #123 Test AND if() #299 Body Start
MODV D2 16
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26676 ==; Test 'if'
PUSHR D4; if() #123 Body Start
PUSHV 2; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4617; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
STORE D2 0.0001
PUSHR D4
PUSHV 3; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4617; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
STORE D2 0
LOAD D2 0.0001; if() #124 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 BI==
COMPAREV D2 0
GOTOCMP 26657 ==; Test 'if'
SETR D2 GD4; unless() #300 Test AND if() #124 Body Start
COMPAREV D2 2
GOTOCMP 26649 ==
SETR D2 GD4
COMPAREV D2 3
GOTOCMP 26649 ==
SETV D2 0
GOTO 26650
SETV D2 1
COMPAREV D2 0
GOTOCMP 26665 !=; Test 'unless'
PUSHVARGV 2; InlineFunc[Direction Choose(Direction)] Params Start AND unless() #300 Body Start
PUSHVARGV 3; InlineFunc[Direction Choose(Direction)] Params End
CHOOSEVARG; InlineFunc[Direction Choose(Direction)] Body
SETR GD4 D2; unless() #300 Body End
GOTO 26665; if() #124 Body End
LOAD D2 0.0001; if() #125 Test AND if() #124 Else Start
COMPAREV D2 0
GOTOCMP 26663 ==; Test 'if'
SETV D2 2; if() #125 Body Start
SETR GD4 D2
GOTO 26665; if() #125 Body End
SETV D2 3; if() #125 Else Start
SETR GD4 D2; if() #125 Else End
LOAD D2 0.0010; if() #124 Else End AND InlineFunc[int Floor(int)] Params Start
DIVV2 8 D2
SETV D2 8
PUSHR D2
LOAD D2 0.0010
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0004
GOTO 26748; if() #123 Body End
SETR D2 GD2; if() #126 Test AND if() #123 Else Start
MODV D2 16
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26738 ==; Test 'if'
PUSHR D4; if() #126 Body Start
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4617; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
STORE D2 0.0001
PUSHR D4
PUSHARGSV 1 0.0002; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4617; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
STORE D2 0
LOAD D2 0.0001; if() #127 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 BI==
COMPAREV D2 0
GOTOCMP 26719 ==; Test 'if'
SETR D2 GD4; unless() #301 Test AND if() #127 Body Start
COMPAREV D2 0
GOTOCMP 26711 ==
SETR D2 GD4
COMPAREV D2 1
GOTOCMP 26711 ==
SETV D2 0
GOTO 26712
SETV D2 1
COMPAREV D2 0
GOTOCMP 26727 !=; Test 'unless'
PUSHVARGV 0; InlineFunc[Direction Choose(Direction)] Params Start AND unless() #301 Body Start
PUSHVARGV 1; InlineFunc[Direction Choose(Direction)] Params End
CHOOSEVARG; InlineFunc[Direction Choose(Direction)] Body
SETR GD4 D2; unless() #301 Body End
GOTO 26727; if() #127 Body End
LOAD D2 0.0001; if() #128 Test AND if() #127 Else Start
COMPAREV D2 0
GOTOCMP 26725 ==; Test 'if'
SETV D2 0; if() #128 Body Start
SETR GD4 D2
GOTO 26727; if() #128 Body End
SETV D2 1; if() #128 Else Start
SETR GD4 D2; if() #128 Else End
LOAD D2 0.0010; if() #127 Else End AND InlineFunc[int Floor(int)] Params Start
DIVV2 8 D2
SETV D2 8
PUSHR D2
LOAD D2 0.0010
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0004
GOTO 26748; if() #126 Body End
LOAD D2 0.0010; InlineFunc[int Floor(int)] Params Start AND if() #126 Else Start
DIVV2 16 D2
SETV D2 16
PUSHR D2
LOAD D2 0.0010
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0004; if() #126 Else End
LOAD D2 0.0004; if() #123 Else End AND if() #299 Body End AND if() #302 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26800 ==; Test 'if'
PUSHR D4; if() #302 Body Start
CALLFUNC 2.4667; UsrFunc[void __Ghost_FixCoords()] Call
POP D4
LOAD D2 0.0010; InlineFunc[int Floor(int)] Params Start
DIVV2 16 D2
SETV D2 16
PUSHR D2
LOAD D2 0.0010
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0004
LOAD D2 0.0011; if() #303 Test
COMPAREV D2 -1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26800 ==; Test 'if'
PUSHR D4; if() #303 Body Start
LOAD D2 0.0009; UsrFunc[void __Ghost_NewDir4(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[void __Ghost_NewDir4(int, int, int)] Params End
CALLFUNC 2.4723; UsrFunc[void __Ghost_NewDir4(int, int, int)] Call
POP D4
SETV D3 16; InlineFunc[int Rand(int)] Params AND if() #304 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0006
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 26800 ==; Test 'if'
LOAD D2 0.0002; unless() #305 Test AND if() #304 Body Start
COMPAREV D2 0
GOTOCMP 26796 !=; Test 'unless'
PUSHR D4; unless() #305 Body Start
PUSHV 32768; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.4952; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP D4; unless() #305 Body End
LOAD D2 0.0005
STORE D2 0.0003
LOAD D2 0.0003; return Start
GOTO 26886; return End AND if() #304 Body End
SETR D2 GD1; if() #303 Body End AND if() #302 Body End AND InlineFunc[int Abs(int)] Params Start AND if() #129 Test
PUSHR D2
SETR D2 LINKX
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 16
GOTOCMP 26820 >=
SETR D2 GD2; InlineFunc[int Abs(int)] Params Start
PUSHR D2
SETR D2 LINKY
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 16
GOTOCMP 26820 >=
SETV D2 1
GOTO 26821
SETV D2 0
COMPAREV D2 0
GOTOCMP 26857 ==; Test 'if'
SETR D2 LINKACTION; if() #306 Test AND if() #129 Body Start
COMPAREV D2 7
GOTOCMP 26832 !=
SETR D2 GD17
ANDV D2 32
COMPAREV D2 0
GOTOCMP 26832 !=
SETV D2 1
GOTO 26833
SETV D2 0
COMPAREV D2 0
GOTOCMP 26860 ==; Test 'if'
SETR D2 GD4; if() #306 Body Start
XORV D2 1
SETR GD4 D2
LOAD D2 0.0010; InlineFunc[int Floor(int)] Params Start
DIVV2 16 D2
SETV D2 16
PUSHR D2
LOAD D2 0.0010
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0004
SETR D2 GD17
ORV D2 32
SETR GD17 D2; if() #306 Body End
GOTO 26860; if() #129 Body End
SETR D2 GD17; if() #129 Else Start
ANDV D2 -33
SETR GD17 D2; if() #129 Else End
LOAD D2 0.0004
SUBV D2 1
STORE D2 0.0004
PUSHR D4
PUSHR GD4; UsrFunc[void Ghost_Move(int, int, int)] Params Start
LOAD D2 0.0010
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 2.6888; UsrFunc[void Ghost_Move(int, int, int)] Call
POP D4
LOAD D2 0.0002; unless() #307 Test
COMPAREV D2 0
GOTOCMP 26877 !=; Test 'unless'
PUSHR D4; unless() #307 Body Start
PUSHV 32768; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.4952; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP D4; unless() #307 Body End
LOAD D2 0.0004; if() #130 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 26885 ==; Test 'if'
LOAD D2 0.0004; return Start AND if() #130 Body Start
DIVV D2 10000
GOTO 26886; return End AND if() #130 Body End
SETV D2 -1; return Start AND if() #130 Else Start
POPARGS D5 0.0012; return End AND if() #130 Else End
RETURNFUNC; Func[int Ghost_HaltingWalk4(int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[void Ghost_Move(int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0001
STOREV 0 0
LOAD D2 0.0004; if() #133 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26901 ==; Test 'if'
LOAD D2 0.0003; if() #133 Body Start
SUBV2 0 D2
STORE D2 0
GOTO 26979; if() #133 Body End
LOAD D2 0.0004; if() #134 Test AND if() #133 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26909 ==; Test 'if'
LOAD D2 0.0003; if() #134 Body Start
STORE D2 0
GOTO 26979; if() #134 Body End
LOAD D2 0.0004; if() #135 Test AND if() #134 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26918 ==; Test 'if'
LOAD D2 0.0003; if() #135 Body Start
SUBV2 0 D2
STORE D2 0.0001
GOTO 26979; if() #135 Body End
LOAD D2 0.0004; if() #136 Test AND if() #135 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26926 ==; Test 'if'
LOAD D2 0.0003; if() #136 Body Start
STORE D2 0.0001
GOTO 26979; if() #136 Body End
LOAD D2 0.0004; if() #137 Test AND if() #136 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26940 ==; Test 'if'
LOAD D2 0.0003; if() #137 Body Start
SUBV2 0 D2
MULTV D2 0.7071
STORE D2 0.0001
LOAD D2 0.0003
SUBV2 0 D2
MULTV D2 0.7071
STORE D2 0
GOTO 26979; if() #137 Body End
LOAD D2 0.0004; if() #138 Test AND if() #137 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26953 ==; Test 'if'
LOAD D2 0.0003; if() #138 Body Start
MULTV D2 0.7071
STORE D2 0.0001
LOAD D2 0.0003
SUBV2 0 D2
MULTV D2 0.7071
STORE D2 0
GOTO 26979; if() #138 Body End
LOAD D2 0.0004; if() #139 Test AND if() #138 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26966 ==; Test 'if'
LOAD D2 0.0003; if() #139 Body Start
SUBV2 0 D2
MULTV D2 0.7071
STORE D2 0.0001
LOAD D2 0.0003
MULTV D2 0.7071
STORE D2 0
GOTO 26979; if() #139 Body End
LOAD D2 0.0004; if() #140 Test AND if() #139 Else Start
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26988 ==; Test 'if'
LOAD D2 0.0003; if() #140 Body Start
MULTV D2 0.7071
STORE D2 0.0001
LOAD D2 0.0003
MULTV D2 0.7071
STORE D2 0
GOTO 26979; if() #140 Body End
GOTO 26988; return (Void) AND if() #140 Else
PUSHR D4; if() #139 Else End AND if() #138 Else End AND if() #137 Else End AND if() #136 Else End AND if() #135 Else End AND if() #134 Else End AND if() #133 Else End
LOAD D2 0.0001; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.4979; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
POPARGS D5 0.0005
RETURNFUNC; Func[void Ghost_Move(int, int, int)] Body End
SETR D4 SP2; Func[void __Ghost_InitInternal(ffc, npc, bool, int, int)] Body Start
LOAD D2 0.0001; if() #634 Test
COMPAREV D2 -1
GOTOCMP 26999 ==
LOAD D2 0.0001
COMPAREV D2 -2
GOTOCMP 26999 ==
SETV D2 0
GOTO 27000
SETV D2 1
COMPAREV D2 0
GOTOCMP 27004 ==; Test 'if'
SETV D2 1; if() #634 Body Start
STORE D2 0.0001; if() #634 Body End
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
LOAD D2 0.0001
SETR GD10 D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR CSET D2
LOAD D2 0
SETR GD11 D2
LOAD D2 0.0002; if() #377 Test
COMPAREV D2 0
GOTOCMP 27050 ==; Test 'if'
LOAD D2 0.0003; if() #377 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCX
SETR GD1 D2
LOAD D2 0.0003
PUSHR D2
POP REFNPC
SETR D2 NPCY
SETR GD2 D2
LOAD D2 0.0003
PUSHR D2
POP REFNPC
SETR D2 NPCZ
SETR GD3 D2
LOAD D2 0.0003
PUSHR D2
POP REFNPC
SETR D2 NPCJUMP
SETR GD5 D2
GOTO 27082; if() #377 Body End
LOAD D2 0.0004; if() #377 Else Start
PUSHR D2
POP REFFFC
SETR D2 X
SETR GD1 D2
LOAD D2 0.0004
PUSHR D2
POP REFFFC
SETR D2 Y
SETR GD2 D2
SETV D2 0
SETR GD3 D2
SETV D2 0
SETR GD5 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCZ D2
SETV D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCJUMP D2; if() #377 Else End
PUSHR D4
LOAD D2 0.0004; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 2.3706; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
POP D4
LOAD D2 0.0003
PUSHR D2
POP REFNPC
SETR D2 NPCDIR
SETR GD4 D2
SETV D2 0
SETR GD6 D2
SETV D2 0
SETR GD7 D2
SETV D2 0
SETR GD8 D2
SETV D2 0
SETR GD9 D2
SETR D2 GD1
SETR GD18 D2
SETR D2 GD2
SETR GD19 D2
LOAD D2 0.0004
PUSHR D2
POP REFFFC
SETR D2 FFTWIDTH
SETR GD12 D2
LOAD D2 0.0004
PUSHR D2
POP REFFFC
SETR D2 FFTHEIGHT
SETR GD13 D2
SETV D2 0
SETR GD22 D2
SETV D2 0
SETR GD23 D2
LOAD D2 0.0001; if() #635 Test
COMPAREV D2 1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 27200 ==; Test 'if'
SETV D2 3; if(true) #378 [Opt:AlwaysOn] AND if() #635 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCEXTEND D2
SETV D2 65456
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCOTILE D2
SETV D2 65456; if(true) #636 [Opt:AlwaysOn]
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCTILE D2
SETR D2 GD12
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCTXSZ D2
SETR D2 GD13
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCTYSZ D2
SETR D2 GD12
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHXSZ D2
SETR D2 GD13
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHYSZ D2; if() #635 Body End
SETV D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCXOFS D2
LOAD D2 0.0003; if() #379 Test
PUSHR D2
POP REFNPC
SETR D2 NPCMFLAGS
ANDV D2 32
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 27231 ==; Test 'if'
SETV D2 1; if() #379 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2
GOTO 27243; if() #379 Body End
SETV D2 0; if() #379 Else Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2; if() #379 Else End
LOAD D2 0.0003
PUSHR D2
POP REFNPC
SETR D2 NPCHP
SETR GD14 D2
SETV D2 0
SETR GD15 D2
SETV D2 0
SETR GD16 D2
SETV D2 0
SETR GD20 D2
SETV D2 0
SETR GD21 D2
SETV D2 0
SETR GD17 D2
SETV D2 0
PUSHR D2
SETR D2 GD25
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
SETV D2 65536
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFNPC
SETR NPCMISCD D2
POPARGS D5 0.0005
RETURNFUNC; Func[void __Ghost_InitInternal(ffc, npc, bool, int, int)] Body End
PUSHARGSV 0 0.0008; Func[npc Ghost_InitAutoGhost(ffc, int)] Body Start
SETR D4 SP2
STOREV 0 0.0007
STOREV 0 0.0006
SETR D2 NPCCOUNT; for() #55 setup
STORE D2 0.0005
LOAD D2 0.0005; for() #55 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 27379 ==; for() #55 TestFail?
LOAD D2 0.0005; InlineFunc[npc screendata::LoadNPC(int)] Params AND for() #55 Body Start
SUBV D2 1; InlineFunc[npc screendata::LoadNPC(int)] Body Start
LOADNPCR D2
SETR D2 REFNPC; InlineFunc[npc screendata::LoadNPC(int)] Body End
STORE D2 0.0007
LOAD D2 0.0007; if() #131 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 27309 ==; Test 'if'
SETV D2 0; if() #131 Body Start
STORE D2 0.0006
GOTO 27375; continue 1;
GOTO 27311; if() #131 Body End
SETV D2 1; if() #131 Else Start
STORE D2 0.0006; if() #131 Else End
LOAD D2 0.0007; if() #308 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCMISCD
ANDV D2 65536
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 27326 ==; Test 'if'
SETV D2 0; if() #308 Body Start
STORE D2 0.0006
GOTO 27375; continue 1; AND if() #308 Body End
LOAD D2 0.0006; if() #132 Test
COMPAREV D2 0
GOTOCMP 27379 ==; Test 'if'
PUSHR D4; if() #132 Body Start
LOAD D2 0.0009; UsrFunc[void __Ghost_InitInternal(ffc, npc, bool, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
PUSHV 1
LOAD D2 0.0007
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCMISCD
ANDV D2 65535
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFNPC
PUSHR NPCCSET; UsrFunc[void __Ghost_InitInternal(ffc, npc, bool, int, int)] Params End
CALLFUNC 2.6990; UsrFunc[void __Ghost_InitInternal(ffc, npc, bool, int, int)] Call
POP D4
LOAD D2 0.0007; if() #309 Test
PUSHR D2
POP REFNPC
SETR D2 NPCMFLAGS
ANDV D2 256
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 27371 ==; Test 'if'
SETV D2 1; if() #309 Body Start
PUSHR D2
LOAD D2 0.0009
POP D3
PUSHR D2
PUSHR D3
SETV D2 1
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2; if() #309 Body End
LOAD D2 0.0007; return Start
GOTO 27424; return End
GOTO 27375; if() #132 Body End
GOTO 27379; break 1; AND if() #132 Else
LOAD D2 0.0005; for() #55 Body End AND for() #55 LoopIncrement
SUBV D2 1
STORE D2 0.0005
GOTO 27284; for() #55 End
ALLOCATEMEMV D2 60 0
WRITEPODSTRING D2 "ghost.zh: AutoGhost initialization failed - enemy missing.\n"
STORE D2 0.0004
ALLOCATEMEMV D2 30 0
WRITEPODSTRING D2 "  DMap %d, screen %X\n"
STORE D2 0.0002
ALLOCATEMEMV D2 30 0
WRITEPODSTRING D2 "  Script %d, enemy ID %d\n"
STORE D2 0
LOAD D2 0.0004; InlineFunc[void printf(char32[])] Params Start
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0.0002; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
PUSHVARGR CURDMAP
PUSHVARGR CURDSCR; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
LOAD D2 0.0009
PUSHR D2
POP REFFFC
PUSHVARGR FFSCRIPT
LOAD D2 0.0008
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
SETV D2 0
PUSHR D2
LOAD D2 0.0009
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
QUIT; InlineFunc[void Quit()] Body
LOAD D3 0
DEALLOCATEMEMR D3
LOAD D3 0.0002
DEALLOCATEMEMR D3
LOAD D3 0.0004
DEALLOCATEMEMR D3
POPARGS D5 0.0010
RETURNFUNC; Func[npc Ghost_InitAutoGhost(ffc, int)] Body End
SETR D4 SP2; Func[void Ghost_MoveAtAngle(int, int, int)] Body Start
PUSHARGSR D4 0.0002; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
LOAD D2 0.0001; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7449; UsrFunc[int VectorX(int, int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7459; UsrFunc[int VectorY(int, int)] Call
POP D4
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.4979; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
POPARGS D5 0.0003
RETURNFUNC; Func[void Ghost_MoveAtAngle(int, int, int)] Body End
SETR D4 SP2; Func[int VectorX(int, int)] Body Start
LOAD D2 0; InlineFunc[int Cos(int)] Params Start AND return Start
SETR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int VectorX(int, int)] Body End
SETR D4 SP2; Func[int VectorY(int, int)] Body Start
LOAD D2 0; InlineFunc[int Sin(int)] Params Start AND return Start
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int VectorY(int, int)] Body End
SETR D4 SP2; Func[bool IsSideview()] Body Start
SETV D2 0; return Start
PUSHR D2
POP D0
SETR D2 SCREENFLAGSD
ANDV D2 4
PUSHR D2
SETR D2 CURDMAP; InlineFunc[dmapdata Game::LoadDMapData(int)] Params
LOADDMAPDATAR D2; InlineFunc[dmapdata Game::LoadDMapData(int)] Body Start
SETR D2 REFDMAPDATA; InlineFunc[dmapdata Game::LoadDMapData(int)] Body End
PUSHR D2
POP REFDMAPDATA
SETR D2 DMAPDATASIDEVIEW
POP D3
COMPARER D3 D2
SETCMP D2 BI!=
RETURNFUNC; return End AND Func[bool IsSideview()] Body End
SETR D4 SP2; Func[void Ghost_SetHitOffsets(npc, int, int, int, int)] Body Start
SETR D2 GD13
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCTYSZ D2
SETR D2 GD12
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCTXSZ D2
LOAD D2 0.0003; if() #320 Test
COMPAREV D2 0
GOTOCMP 27513 <=
LOAD D2 0.0003
COMPAREV D2 1
GOTOCMP 27513 >=
SETV D2 1
GOTO 27514
SETV D2 0
COMPAREV D2 0
GOTOCMP 27527 ==; Test 'if'
PUSHR D4; if() #320 Body Start
LOAD D2 0.0003; UsrFunc[int Round(int)] Params Start
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
MULTV D2 16
PUSHR D2; UsrFunc[int Round(int)] Params End
CALLFUNC 2.7707; UsrFunc[int Round(int)] Call
POP D4
STORE D2 0.0003; if() #320 Body End
LOAD D2 0.0002; if() #321 Test
COMPAREV D2 0
GOTOCMP 27535 <=
LOAD D2 0.0002
COMPAREV D2 1
GOTOCMP 27535 >=
SETV D2 1
GOTO 27536
SETV D2 0
COMPAREV D2 0
GOTOCMP 27549 ==; Test 'if'
PUSHR D4; if() #321 Body Start
LOAD D2 0.0002; UsrFunc[int Round(int)] Params Start
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
MULTV D2 16
PUSHR D2; UsrFunc[int Round(int)] Params End
CALLFUNC 2.7707; UsrFunc[int Round(int)] Call
POP D4
STORE D2 0.0002; if() #321 Body End
LOAD D2 0.0001; if() #322 Test
COMPAREV D2 0
GOTOCMP 27557 <=
LOAD D2 0.0001
COMPAREV D2 1
GOTOCMP 27557 >=
SETV D2 1
GOTO 27558
SETV D2 0
COMPAREV D2 0
GOTOCMP 27571 ==; Test 'if'
PUSHR D4; if() #322 Body Start
LOAD D2 0.0001; UsrFunc[int Round(int)] Params Start
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
MULTV D2 16
PUSHR D2; UsrFunc[int Round(int)] Params End
CALLFUNC 2.7707; UsrFunc[int Round(int)] Call
POP D4
STORE D2 0.0001; if() #322 Body End
LOAD D2 0; if() #323 Test
COMPAREV D2 0
GOTOCMP 27579 <=
LOAD D2 0
COMPAREV D2 1
GOTOCMP 27579 >=
SETV D2 1
GOTO 27580
SETV D2 0
COMPAREV D2 0
GOTOCMP 27593 ==; Test 'if'
PUSHR D4; if() #323 Body Start
LOAD D2 0; UsrFunc[int Round(int)] Params Start
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
MULTV D2 16
PUSHR D2; UsrFunc[int Round(int)] Params End
CALLFUNC 2.7707; UsrFunc[int Round(int)] Call
POP D4
STORE D2 0; if() #323 Body End
PUSHR D4
LOAD D2 0.0003; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 0
PUSHV 64; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0609; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0003
PUSHR D4
LOAD D2 0.0002; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 0
PUSHV 64; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0609; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0002
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 0
PUSHV 64; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0609; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0001
PUSHR D4
LOAD D2 0; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 0
PUSHV 64; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0609; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHXOFS D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHYOFS D2
SETR D2 GD12
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHXSZ D2
SETR D2 GD13
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHYSZ D2
LOAD D2 0.0001
LSHIFTV D2 8
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR GD22 D2
LOAD D2 0.0003
LSHIFTV D2 8
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
SETR GD23 D2
POPARGS D5 0.0005
RETURNFUNC; Func[void Ghost_SetHitOffsets(npc, int, int, int, int)] Body End
SETR D4 SP2; Func[int Round(int)] Body Start
LOAD D2 0; return Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 27717 ==
LOAD D2 0
SUBV D2 0.5000
LSHIFTV D2 0
GOTO 27720
LOAD D2 0
ADDV D2 0.5000
LSHIFTV D2 0
POP D5; return End
RETURNFUNC; Func[int Round(int)] Body End
PUSHV 0; Func[void Ghost_Transform(ffc, npc, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0
LOAD D2 0.0004; if() #337 Test
COMPAREV D2 0
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 27741 ==; Test 'if'
LOAD D2 0.0004; if() #337 Body Start
SETR GD10 D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #337 Body End
LOAD D2 0.0003; if() #338 Test
COMPAREV D2 0
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 27766 ==; Test 'if'
LOAD D2 0.0003; if() #338 Body Start
SETR GD11 D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR CSET D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCCSET D2; if() #338 Body End
LOAD D2 0.0002; if() #339 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 27833 ==; Test 'if'
SETR D2 GD12; if() #339 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
MULTV D2 8
SETV D2 8
PUSHR D2
SETR D2 GD12
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
STORE D2 0
LOAD D2 0.0002
SETR GD12 D2
SETR D2 GD12
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCTXSZ D2
SETR D2 GD12
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFTWIDTH D2
SETR D2 GD1
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR GD1 D2
SETR D2 GD1
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR X D2
SETR D2 GD1
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCX D2; if() #339 Body End
LOAD D2 0.0001; if() #340 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 27900 ==; Test 'if'
SETR D2 GD13; if() #340 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
SUBR D3 D2
SETR D2 D3
MULTV D2 8
SETV D2 8
PUSHR D2
SETR D2 GD13
PUSHR D2
LOAD D2 0.0001
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
STORE D2 0
LOAD D2 0.0001
SETR GD13 D2
SETR D2 GD13
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCTYSZ D2
SETR D2 GD13
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFTHEIGHT D2
SETR D2 GD2
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR GD2 D2
SETR D2 GD2
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR Y D2
SETR D2 GD2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCY D2; if() #340 Body End
PUSHR D4
LOAD D2 0.0005; UsrFunc[void Ghost_SetHitOffsets(npc, int, int, int, int)] Params Start
PUSHR D2
PUSHARGSV 0 0.0004; UsrFunc[void Ghost_SetHitOffsets(npc, int, int, int, int)] Params End
CALLFUNC 2.7486; UsrFunc[void Ghost_SetHitOffsets(npc, int, int, int, int)] Call
POP D4
POPARGS D5 0.0007
RETURNFUNC; Func[void Ghost_Transform(ffc, npc, int, int, int, int)] Body End
SETR D4 SP2; Func[void Ghost_Waitframe(ffc, npc)] Body Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHARGSV 1 0.0002; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Params End
CALLFUNC 2.7919; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Call
POP D4
POPARGS D5 0.0002
RETURNFUNC; Func[void Ghost_Waitframe(ffc, npc)] Body End
PUSHV 0; Func[bool Ghost_Waitframe(ffc, npc, bool, bool)] Body Start
SETR D4 SP2
SETV D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCJUMP D2
PUSHR D4; unless() #346 Test
PUSHV 32; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 28076 !=; Test 'unless'
PUSHR D4; if() #161 Test AND unless() #346 Body Start
CALLFUNC 2.7469; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 28039 ==; Test 'if'
SETR D2 GD5; if() #347 Test AND if() #161 Body Start
COMPAREV D2 0
GOTOCMP 27953 !=
PUSHR D4
PUSHARGSV 1 0.0002; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1516; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 27953 !=
SETV D2 0
GOTO 27954
SETV D2 1
COMPAREV D2 0
GOTOCMP 28076 ==; Test 'if'
PUSHR D4; if() #347 Body Start
PUSHV 64; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
STORE D2 0
PUSHR D4
PUSHV 64; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.4952; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP D4
SETR D2 GD5; if() #162 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 28008 ==; Test 'if'
PUSHR D4; if() #162 Body Start
PUSHV 32; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4591; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK D4
PUSHV 0; UsrFunc[void Ghost_Move(int, int, int)] Params Start
PUSHR GD5
PUSHV 2; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 2.6888; UsrFunc[void Ghost_Move(int, int, int)] Call
POP D4
SETR D2 GD5; InlineFunc[int Max(int, int)] Params Start
SUBV D2 0.1600
PUSHVARGR D2
PUSHVARGV -3.2000; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD5 D2
SETR D2 GD5; if() #348 Test
COMPAREV D2 0
GOTOCMP 27998 <=
PUSHR D4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1516; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 27998 !=
SETV D2 1
GOTO 27999
SETV D2 0
COMPAREV D2 0
GOTOCMP 28003 ==; Test 'if'
SETV D2 0; if() #348 Body Start
SETR GD5 D2; if() #348 Body End
PUSHR D4
PUSHV 32; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.4952; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP D4
GOTO 28031; if() #162 Body End
PUSHR D4; if() #162 Else Start
PUSHV 1; UsrFunc[void Ghost_Move(int, int, int)] Params Start
SETR D2 GD5
SUBV2 0 D2
PUSHR D2
PUSHV 2; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 2.6888; UsrFunc[void Ghost_Move(int, int, int)] Call
PEEK D4
PUSHARGSV 1 0.0002; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1516; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 28029 ==; Test 'if'
SETR D2 GD5; InlineFunc[int Max(int, int)] Params Start AND if() #163 Body Start
SUBV D2 0.1600
PUSHVARGR D2
PUSHVARGV -3.2000; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD5 D2
GOTO 28031; if() #163 Body End
SETV D2 0; if() #163 Else Start
SETR GD5 D2; if() #163 Else End
LOAD D2 0; if() #162 Else End AND if() #349 Test
COMPAREV D2 0
GOTOCMP 28076 ==; Test 'if'
PUSHR D4; if() #349 Body Start
PUSHV 64; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4591; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #349 Body End
GOTO 28076; if() #347 Body End AND if() #161 Body End
SETR D2 GD5; if() #350 Test AND if() #161 Else Start
COMPAREV D2 0
GOTOCMP 28047 !=
SETR D2 GD3
COMPAREV D2 0
GOTOCMP 28047 >
SETV D2 0
GOTO 28048
SETV D2 1
COMPAREV D2 0
GOTOCMP 28076 ==; Test 'if'
SETR D2 GD3; if() #164 Test AND if() #350 Body Start
PUSHR D2
SETR D2 GD5
POP D3
ADDR D2 D3
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 28064 ==; Test 'if'
SETV D2 0; if() #164 Body Start
SETR GD3 D2
SETV D2 0
SETR GD5 D2
GOTO 28076; if() #164 Body End
SETR D2 GD3; if() #164 Else Start
PUSHR D2
SETR D2 GD5
POP D3
ADDR D2 D3
SETR GD3 D2
SETR D2 GD5; InlineFunc[int Max(int, int)] Params Start
SUBV D2 0.1600
PUSHVARGR D2
PUSHVARGV -3.2000; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD5 D2; if() #164 Else End
SETR D2 GD6; if() #350 Body End AND if() #161 Else End AND unless() #346 Body End AND if() #351 Test
COMPAREV D2 0
GOTOCMP 28090 !=
SETR D2 GD7
COMPAREV D2 0
GOTOCMP 28090 !=
SETR D2 GD8
COMPAREV D2 0
GOTOCMP 28090 !=
SETR D2 GD9
COMPAREV D2 0
GOTOCMP 28090 !=
SETV D2 0
GOTO 28091
SETV D2 1
COMPAREV D2 0
GOTOCMP 28114 ==; Test 'if'
SETR D2 GD6; if() #351 Body Start
PUSHR D2
SETR D2 GD8
POP D3
ADDR D2 D3
SETR GD6 D2
SETR D2 GD7
PUSHR D2
SETR D2 GD9
POP D3
ADDR D2 D3
SETR GD7 D2
PUSHR D4
PUSHR GD6; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR GD7
PUSHV 2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.4979; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
PEEK D4
PUSHR GD4; UsrFunc[void Ghost_ForceDir(int)] Params
CALLFUNC 2.6546; UsrFunc[void Ghost_ForceDir(int)] Call
POP D4; if() #351 Body End
PUSHR D4
LOAD D2 0.0004; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 2.3706; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
PEEK D4
LOAD D2 0.0004; UsrFunc[void __Ghost_WaitframePart1(ffc, npc, bool)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV 0; UsrFunc[void __Ghost_WaitframePart1(ffc, npc, bool)] Params End
CALLFUNC 2.8185; UsrFunc[void __Ghost_WaitframePart1(ffc, npc, bool)] Call
PEEK D4
LOAD D2 0.0004; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Params End
CALLFUNC 2.3056; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Call
PEEK D4
LOAD D2 0.0004; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params End
CALLFUNC 2.3306; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Call
POP D4
SETR D2 GD17
ANDV D2 32
SETR GD17 D2
PUSHR D4; return Start
LOAD D2 0.0004; UsrFunc[bool __Ghost_WaitframePart2(ffc, npc, bool, bool)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[bool __Ghost_WaitframePart2(ffc, npc, bool, bool)] Params End
CALLFUNC 2.8689; UsrFunc[bool __Ghost_WaitframePart2(ffc, npc, bool, bool)] Call
POP D4
POPARGS D5 0.0005; return End
RETURNFUNC; Func[bool Ghost_Waitframe(ffc, npc, bool, bool)] Body End
SETR D4 SP2; Func[bool Ghost_Waitframe(ffc, npc, int, bool)] Body Start
PUSHR D4; unless() #344 Test
LOAD D2 0.0003; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHARGSV 0 0.0002; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Params End
CALLFUNC 2.7919; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 28182 !=; Test 'unless'
PUSHR D4; unless() #344 Body Start
LOAD D2 0.0003; UsrFunc[void Ghost_DeathAnimation(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[void Ghost_DeathAnimation(ffc, npc, int)] Params End
CALLFUNC 2.5852; UsrFunc[void Ghost_DeathAnimation(ffc, npc, int)] Call
POP D4
LOAD D2 0; if() #345 Test
COMPAREV D2 0
GOTOCMP 28180 ==; Test 'if'
QUIT; InlineFunc[void Quit()] Body AND if() #345 Body
SETV D2 0; return Start
GOTO 28183; return End AND unless() #344 Body End
SETV D2 1; return Start
POPARGS D5 0.0004; return End
RETURNFUNC; Func[bool Ghost_Waitframe(ffc, npc, int, bool)] Body End
PUSHARGSV 0 0.0002; Func[void __Ghost_WaitframePart1(ffc, npc, bool)] Body Start
SETR D4 SP2
SETR D2 GD17; if() #401 Test
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 28203 ==; Test 'if'
SETR D2 GD4; if() #401 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCDIR D2
GOTO 28300; if() #401 Body End
LOAD D2 0.0002; if() #402 Test AND if() #401 Else Start
COMPAREV D2 0
GOTOCMP 28212 ==; Test 'if'
LOAD D2 0.0003; if() #402 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCDIR
SETR GD4 D2
GOTO 28300; if() #402 Body End
PUSHR D4; if() #671 Test AND if() #402 Else Start
PUSHV 64; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 28232 ==
SETR D2 GD18
PUSHR D2
SETR D2 GD1
POP D3
COMPARER D3 D2
GOTOCMP 28230 !=
SETR D2 GD19
PUSHR D2
SETR D2 GD2
POP D3
COMPARER D3 D2
GOTOCMP 28232 ==
SETV D2 1
GOTO 28233
SETV D2 0
COMPAREV D2 0
GOTOCMP 28300 ==; Test 'if'
SETR D2 GD1; if() #671 Body Start
PUSHR D2
SETR D2 GD18
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0001
SETR D2 GD2
PUSHR D2
SETR D2 GD19
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0
PUSHR D4; if() #403 Test
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 28269 ==; Test 'if'
PUSHR D4; if() #403 Body Start
LOAD D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int WrapAngle(int)] Params Start AND UsrFunc[int AngleDir8(int)] Params Start
PUSHR D2
LOAD D2 0
SETR D1 D2; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End AND InlineFunc[int WrapAngle(int)] Params End
WRAPRADIANS D2; InlineFunc[int WrapAngle(int)] Body
MULTV D2 57.2958
PUSHR D2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 2.0402; UsrFunc[int AngleDir8(int)] Call
POP D4
SETR GD4 D2
GOTO 28300; if() #403 Body End
LOAD D2 0.0001; InlineFunc[int Abs(int)] Params AND if() #404 Test AND if() #403 Else Start
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0; InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 28290 ==; Test 'if'
LOAD D2 0.0001; if() #405 Test AND if() #404 Body Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 28287 ==; Test 'if'
SETV D2 2; if() #405 Body Start
SETR GD4 D2
GOTO 28300; if() #405 Body End
SETV D2 3; if() #405 Else Start
SETR GD4 D2; if() #405 Else End
GOTO 28300; if() #404 Body End
LOAD D2 0; if() #406 Test AND if() #404 Else Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 28298 ==; Test 'if'
SETV D2 0; if() #406 Body Start
SETR GD4 D2
GOTO 28300; if() #406 Body End
SETV D2 1; if() #406 Else Start
SETR GD4 D2; if() #406 Else End
SETR D2 GD4; if() #404 Else End AND if() #403 Else End AND if() #671 Body End AND if() #402 Else End AND if() #401 Else End
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCDIR D2
SETR D2 GD1
SETR GD18 D2
SETR D2 GD2
SETR GD19 D2
SETR D2 GD10; if() #407 Test
COMPAREV D2 0
GOTOCMP 28321 ==
SETR D2 GD10
COMPAREV D2 1
GOTOCMP 28321 ==
SETV D2 0
GOTO 28322
SETV D2 1
COMPAREV D2 0
GOTOCMP 28345 ==; Test 'if'
LOAD D2 0.0004; if() #672 Test AND if() #407 Body Start
PUSHR D2
POP REFFFC
SETR D2 DATA
PUSHR D2
SETR D2 GD10
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 28441 ==; Test 'if'
SETR D2 GD10; if() #672 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #672 Body End
GOTO 28441; if() #407 Body End
PUSHR D4; if() #408 Test AND if() #407 Else Start
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 28383 ==; Test 'if'
LOAD D2 0.0004; if() #673 Test AND if() #408 Body Start
PUSHR D2
POP REFFFC
SETR D2 DATA
PUSHR D2
SETR D2 GD10
PUSHR D2
SETR D2 GD4
POP D3
ADDR D2 D3
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 28441 ==; Test 'if'
SETR D2 GD10; if() #673 Body Start
PUSHR D2
PUSHR D4
PUSHR GD4; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 2.1592; UsrFunc[int __NormalizeDir(int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #673 Body End
GOTO 28441; if() #408 Body End
PUSHR D4; if() #409 Test AND if() #408 Else Start
PUSHV 256; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 28421 ==; Test 'if'
LOAD D2 0.0004; if() #674 Test AND if() #409 Body Start
PUSHR D2
POP REFFFC
SETR D2 DATA
PUSHR D2
SETR D2 GD10
PUSHR D2
SETR D2 GD4
POP D3
ADDR D2 D3
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 28441 ==; Test 'if'
SETR D2 GD10; if() #674 Body Start
PUSHR D2
PUSHR D4
PUSHR GD4; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 2.1592; UsrFunc[int __NormalizeDir(int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #674 Body End
GOTO 28441; if() #409 Body End
LOAD D2 0.0004; if() #675 Test AND if() #409 Else Start
PUSHR D2
POP REFFFC
SETR D2 DATA
PUSHR D2
SETR D2 GD10
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 28441 ==; Test 'if'
SETR D2 GD10; if() #675 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #675 Body End
LOAD D2 0.0004; if() #409 Else End AND if() #408 Else End AND if() #407 Else End AND if() #676 Test
PUSHR D2
POP REFFFC
SETR D2 FFTWIDTH
PUSHR D2
SETR D2 GD12
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 28461 ==; Test 'if'
SETR D2 GD12; if() #676 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFTWIDTH D2; if() #676 Body End
LOAD D2 0.0003; if() #677 Test
PUSHR D2
POP REFNPC
SETR D2 NPCTXSZ
PUSHR D2
SETR D2 GD12
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 28505 ==; Test 'if'
SETR D2 GD12; if() #677 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCTXSZ D2
SETR D2 GD12
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHXSZ D2
SETV D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHXOFS D2; if() #677 Body End
LOAD D2 0.0004; if() #678 Test
PUSHR D2
POP REFFFC
SETR D2 FFTHEIGHT
PUSHR D2
SETR D2 GD13
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 28525 ==; Test 'if'
SETR D2 GD13; if() #678 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFTHEIGHT D2; if() #678 Body End
LOAD D2 0.0003; if() #679 Test
PUSHR D2
POP REFNPC
SETR D2 NPCTYSZ
PUSHR D2
SETR D2 GD13
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 28569 ==; Test 'if'
SETR D2 GD13; if() #679 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCTYSZ D2
SETR D2 GD13
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHYSZ D2
SETV D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHYOFS D2; if() #679 Body End
PUSHR D4; if() #680 Test
PUSHV 128; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 28634 ==; Test 'if'
SETR D2 GD3; if() #410 Test AND if() #680 Body Start
COMPAREV D2 32
GOTOCMP 28589 <
LOAD D2 0.0004
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 28589 !=
SETV D2 1
GOTO 28590
SETV D2 0
COMPAREV D2 0
GOTOCMP 28605 ==; Test 'if'
SETV D2 1; if() #410 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2
GOTO 28634; if() #410 Body End
SETR D2 GD3; if() #681 Test AND if() #410 Else Start
COMPAREV D2 32
GOTOCMP 28619 >=
LOAD D2 0.0004
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 28619 ==
SETV D2 1
GOTO 28620
SETV D2 0
COMPAREV D2 0
GOTOCMP 28634 ==; Test 'if'
SETV D2 0; if() #681 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2; if() #681 Body End
SETR D2 GD14; if() #410 Else End AND if() #680 Body End
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHP D2
SETR D2 GD11
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCCSET D2
SETR D2 GD17; if() #411 Test
ANDV D2 8
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 28668 ==; Test 'if'
SETR D2 GD11; if() #411 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR CSET D2
GOTO 28682; if() #411 Body End
SETR D2 GD20; if() #682 Test AND if() #411 Else Start
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 28682 ==; Test 'if'
SETR D2 GD11; if() #682 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR CSET D2; if() #682 Body End
PUSHR D4; if() #411 Else End
LOAD D2 0.0003; UsrFunc[void __Ghost_DrawShadow(npc)] Params Start
PUSHR D2; UsrFunc[void __Ghost_DrawShadow(npc)] Params End
CALLFUNC 2.3141; UsrFunc[void __Ghost_DrawShadow(npc)] Call
POP D4
POPARGS D5 0.0005
RETURNFUNC; Func[void __Ghost_WaitframePart1(ffc, npc, bool)] Body End
PUSHV 0; Func[bool __Ghost_WaitframePart2(ffc, npc, bool, bool)] Body Start
SETR D4 SP2
LOAD D2 0.0003; InlineFunc[bool npc::isValid()] Params AND unless() #683 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 28716 !=; Test 'unless'
LOAD D2 0.0002; if() #684 Test AND unless() #683 Body Start
COMPAREV D2 0
GOTOCMP 28708 ==; Test 'if'
PUSHR D4; if() #684 Body Start
LOAD D2 0.0004; UsrFunc[void __GhCleanUp(ffc)] Params Start
PUSHR D2; UsrFunc[void __GhCleanUp(ffc)] Params End
CALLFUNC 2.6412; UsrFunc[void __GhCleanUp(ffc)] Call
POP D4
SETV D2 0
SETR GD10 D2
PUSHR D4
CALLFUNC 2.4238; UsrFunc[void Ghost_ClearCombos()] Call
POP D4; if() #684 Body End
LOAD D2 0.0001; if() #685 Test
COMPAREV D2 0
GOTOCMP 28712 ==; Test 'if'
QUIT; InlineFunc[void Quit()] Body AND if() #685 Body
SETV D2 0
SETR GD14 D2
SETV D2 0; return Start
GOTO 28840; return End AND unless() #683 Body End
STOREV 0 0
LOAD D2 0.0003; if() #686 Test
PUSHR D2
POP REFNPC
SETR D2 NPCHP
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 28727 ==; Test 'if'
SETV D2 1; if() #686 Body Start
STORE D2 0; if() #686 Body End
LOAD D2 0; unless() #687 Test
COMPAREV D2 0
GOTOCMP 28746 !=; Test 'unless'
PUSHR D4; unless() #687 Body Start
LOAD D2 0.0004; UsrFunc[void Ghost_CheckHit(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[void Ghost_CheckHit(ffc, npc)] Params End
CALLFUNC 2.3840; UsrFunc[void Ghost_CheckHit(ffc, npc)] Call
PEEK D4
LOAD D2 0.0004; UsrFunc[bool Ghost_CheckFreeze(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[bool Ghost_CheckFreeze(ffc, npc)] Params End
CALLFUNC 2.2797; UsrFunc[bool Ghost_CheckFreeze(ffc, npc)] Call
POP D4
COMPAREV D2 0
SETCMP D2 I==
STORE D2 0; unless() #687 Body End
LOAD D2 0.0003
PUSHR D2
POP REFNPC
SETR D2 NPCHP
SETR GD14 D2
LOAD D2 0; if() #688 Test
COMPAREV D2 0
GOTOCMP 28839 ==; Test 'if'
LOAD D2 0.0002; if() #689 Test AND if() #688 Body Start
COMPAREV D2 0
GOTOCMP 28833 ==; Test 'if'
SETV D2 1; if() #689 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCTXSZ D2
SETV D2 1
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCTYSZ D2
SETR D2 GD1
PUSHR D2
SETR D2 GD12
SUBV D2 1
MULTV D2 8
SETV D2 8
PUSHR D2
SETR D2 GD12
SUBV D2 1
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCX D2
SETR D2 GD2
PUSHR D2
SETR D2 GD13
SUBV D2 1
MULTV D2 8
SETV D2 8
PUSHR D2
SETR D2 GD13
SUBV D2 1
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCY D2
SETR D2 GD3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCZ D2
PUSHR D4
LOAD D2 0.0004; UsrFunc[void __GhCleanUp(ffc)] Params Start
PUSHR D2; UsrFunc[void __GhCleanUp(ffc)] Params End
CALLFUNC 2.6412; UsrFunc[void __GhCleanUp(ffc)] Call
POP D4
SETV D2 0
SETR GD10 D2; if() #689 Body End
LOAD D2 0.0001; if() #690 Test
COMPAREV D2 0
GOTOCMP 28837 ==; Test 'if'
QUIT; InlineFunc[void Quit()] Body AND if() #690 Body
SETV D2 0; return Start
GOTO 28840; return End AND if() #688 Body End
SETV D2 1; return Start
POPARGS D5 0.0005; return End
RETURNFUNC; Func[bool __Ghost_WaitframePart2(ffc, npc, bool, bool)] Body End
PUSHARGSV 0 0.0006; Func[void __SetUpDrawingArray(ffc, npc, int[])] Body Start
SETR D4 SP2
STOREV 0 0.0005
LOAD D2 0.0008; if() #710 Test
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 28857 ==; Test 'if'
LOAD D2 0.0005; if() #710 Body Start
ORV D2 4
STORE D2 0.0005; if() #710 Body End
LOAD D2 0.0008; if() #711 Test
PUSHR D2
SETV D2 1
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 28869 ==; Test 'if'
LOAD D2 0.0005; if() #711 Body Start
ORV D2 1
STORE D2 0.0005; if() #711 Body End
PUSHR D4; if() #712 Test
LOAD D2 0.0007; UsrFunc[bool __Ghost_IsFlickering(npc)] Params Start
PUSHR D2; UsrFunc[bool __Ghost_IsFlickering(npc)] Params End
CALLFUNC 3.0175; UsrFunc[bool __Ghost_IsFlickering(npc)] Call
POP D4
COMPAREV D2 0
GOTOCMP 28879 ==; Test 'if'
LOAD D2 0.0005; if() #712 Body Start
ORV D2 2
STORE D2 0.0005; if() #712 Body End
LOAD D2 0.0008
PUSHR D2
POP REFFFC
SETR D2 CSET
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
STOREV 3 0.0004
SETR D2 GD1
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFNPC
SETR D2 NPCXOFS
POP D3
ADDR D2 D3
STORE D2 0.0003
SETR D2 GD2
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFNPC
SETR D2 NPCYOFS
POP D3
ADDR D2 D3
PUSHR D2
SETR D2 GD3
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFNPC
SETR D2 NPCZOFS
POP D3
ADDR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0002
SETR D2 GD25; if() #713 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 29047 ==; Test 'if'
STOREV 1 0.0001; if() #713 Body Start
STOREV 0 0; for() #182 setup
LOAD D2 0; for() #182 LoopTest
PUSHR D2
SETR D2 GD25
PUSHR D2
POP D0
READPODARRAYV D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 29047 ==; for() #182 TestFail?
SETR D2 GD25; for() #182 Body Start
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0003
PUSHR D2
SETR D2 GD25
PUSHR D2
LOAD D2 0.0001
ADDV D2 1
POP D0
READPODARRAYR D2 D2
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 1
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0002
PUSHR D2
SETR D2 GD25
PUSHR D2
LOAD D2 0.0001
ADDV D2 2
POP D0
READPODARRAYR D2 D2
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 2
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETR D2 GD25
PUSHR D2
LOAD D2 0.0001
ADDV D2 3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETR D2 GD25
PUSHR D2
LOAD D2 0.0001
ADDV D2 4
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 4
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0004
ADDV D2 6
STORE D2 0.0004
LOAD D2 0.0001
ADDV D2 6
STORE D2 0.0001
LOAD D2 0.0006
PUSHR D2
POP D0
READPODARRAYV D2 0
ADDV D2 1
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; for() #182 Body End
LOAD D2 0; for() #182 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 28935; for() #182 End
LOAD D2 0.0008; if() #713 Body End AND if(true) #714 [Opt:AlwaysOn]
PUSHR D2
POP REFFFC
SETR D2 DATA
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 1
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 2
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0008
PUSHR D2
POP REFFFC
SETR D2 FFTWIDTH
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0008
PUSHR D2
POP REFFFC
SETR D2 FFTHEIGHT
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 4
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0006
PUSHR D2
POP D0
READPODARRAYV D2 0
ADDV D2 1
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
POPARGS D5 0.0009
RETURNFUNC; Func[void __SetUpDrawingArray(ffc, npc, int[])] Body End
PUSHV 0; Func[void __HideFFCAndWait(ffc)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 DATA
STORE D2 0
SETV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
WAITFRAME; InlineFunc[void Waitframe()] Body
LOAD D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __HideFFCAndWait(ffc)] Body End
SETR D4 SP2; Func[int InFrontX(int, int)] Body Start
PUSHR D4; switch() #28 Key
LOAD D2 0.0001; UsrFunc[int DirNormal(int)] Params Start
PUSHR D2; UsrFunc[int DirNormal(int)] Params End
CALLFUNC 2.0301; UsrFunc[int DirNormal(int)] Call
POP D4
SETR SWITCHKEY D2; Store key
COMPAREV SWITCHKEY 2
GOTOCMP 29157 ==; case '20000'
COMPAREV SWITCHKEY 3
GOTOCMP 29160 ==; case '30000'
GOTO 29163; switch() #28 NoMatch
LOAD D2 0; Case block AND return Start
SUBV D2 16
GOTO 29164; return End
LOAD D2 0; Case block AND return Start
SUBV2 16 D2
GOTO 29164; return End
SETV D2 0; Case block AND return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int InFrontX(int, int)] Body End
SETR D4 SP2; Func[int InFrontY(int, int)] Body Start
PUSHR D4; switch() #29 Key
LOAD D2 0.0001; UsrFunc[int DirNormal(int)] Params Start
PUSHR D2; UsrFunc[int DirNormal(int)] Params End
CALLFUNC 2.0301; UsrFunc[int DirNormal(int)] Call
POP D4
SETR SWITCHKEY D2; Store key
COMPAREV SWITCHKEY 0
GOTOCMP 29178 ==; case '0'
COMPAREV SWITCHKEY 1
GOTOCMP 29181 ==; case '10000'
GOTO 29184; switch() #29 NoMatch
LOAD D2 0; Case block AND return Start
SUBV D2 16
GOTO 29185; return End
LOAD D2 0; Case block AND return Start
SUBV2 16 D2
GOTO 29185; return End
SETV D2 0; Case block AND return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int InFrontY(int, int)] Body End
PUSHV 0; Func[bool IsPit(int)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
POP D0
SETR D2 COMBOTD
STORE D2 0
LOAD D2 0; if() #368 Test
COMPAREV D2 41
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 29201 ==; Test 'if'
SETV D2 1; return Start AND if() #368 Body Start
GOTO 29222; return End AND if() #368 Body End
LOAD D2 0; if() #369 Test
COMPAREV D2 93
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 29208 ==; Test 'if'
SETV D2 1; return Start AND if() #369 Body Start
GOTO 29222; return End AND if() #369 Body End
LOAD D2 0; if() #370 Test
COMPAREV D2 80
GOTOCMP 29216 <
LOAD D2 0
COMPAREV D2 82
GOTOCMP 29216 >
SETV D2 1
GOTO 29217
SETV D2 0
COMPAREV D2 0
GOTOCMP 29221 ==; Test 'if'
SETV D2 1; return Start AND if() #370 Body Start
GOTO 29222; return End AND if() #370 Body End
SETV D2 0; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[bool IsPit(int)] Body End
PUSHARGSV 0 0.0002; Func[lweapon LoadLWeaponOf(int)] Body Start
SETR D4 SP2
STOREV 0 0.0001
SETR D2 LWPNCOUNT; for() #84 setup
STORE D2 0
LOAD D2 0; for() #84 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 29256 ==; for() #84 TestFail?
LOAD D2 0; InlineFunc[lweapon screendata::LoadLWeapon(int)] Params AND for() #84 Body Start
SUBV D2 1; InlineFunc[lweapon screendata::LoadLWeapon(int)] Body Start
LOADLWEAPONR D2
SETR D2 REFLWPN; InlineFunc[lweapon screendata::LoadLWeapon(int)] Body End
STORE D2 0.0001
LOAD D2 0.0001; if() #410 Test
PUSHR D2
POP REFLWPN
SETR D2 LWPNID
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 29252 ==; Test 'if'
LOAD D2 0.0001; return Start AND if() #410 Body Start
GOTO 29258; return End AND if() #410 Body End
LOAD D2 0; for() #84 Body End AND for() #84 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 29229; for() #84 End
STOREV 0 0
LOAD D2 0; return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[lweapon LoadLWeaponOf(int)] Body End
SETR D4 SP2; Func[int OppositeDir(int)] Body Start
LOAD D2 0; if() #465 Test
COMPAREV D2 7
GOTOCMP 29269 <=
LOAD D2 0
COMPAREV D2 16
GOTOCMP 29269 >=
SETV D2 1
GOTO 29270
SETV D2 0
COMPAREV D2 0
GOTOCMP 29277 ==; Test 'if'
LOAD D2 0; return Start AND if() #465 Body Start
ADDV D2 4
MODV D2 8
ADDV D2 8
GOTO 29287; return End AND if() #465 Body End
LOAD D2 0; return Start
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 29285 ==
LOAD D2 0
XORV D2 1
GOTO 29287
LOAD D2 0
XORV D2 3
POP D5; return End
RETURNFUNC; Func[int OppositeDir(int)] Body End
PUSHARGSV 0 0.0003; Func[int RunFFCScript(int, untyped[])] Body Start
SETR D4 SP2
LOAD D2 0.0004; if() #484 Test
COMPAREV D2 0
GOTOCMP 29299 <
LOAD D2 0.0004
COMPAREV D2 511
GOTOCMP 29299 >
SETV D2 0
GOTO 29300
SETV D2 1
COMPAREV D2 0
GOTOCMP 29304 ==; Test 'if'
SETV D2 0; return Start AND if() #484 Body Start
GOTO 29408; return End AND if() #484 Body End
STOREV 0 0.0002
STOREV 1 0.0001; for() #129 setup
LOAD D2 0.0001; for() #129 LoopTest
COMPAREV D2 128
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 29407 ==; for() #129 TestFail?
LOAD D2 0.0001; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #129 Body Start
SUBV D2 1; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0002
LOAD D2 0.0002; if() #485 Test
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
COMPAREV D2 0
GOTOCMP 29343 !=
LOAD D2 0.0002
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 0
GOTOCMP 29332 ==
LOAD D2 0.0002
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 1
GOTOCMP 29343 !=
LOAD D2 0.0002
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 29343 !=
SETV D2 0
GOTO 29344
SETV D2 1
COMPAREV D2 0
GOTOCMP 29403 !=; Test 'if' AND continue 1; AND if() #485 Body
SETV D2 1
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFSCRIPT D2
LOAD D2 0.0003; if() #486 Test
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 29401 ==; Test 'if'
LOAD D2 0.0003; InlineFunc[int SizeOfArray(untyped[])] Params AND InlineFunc[int Min(int, int)] Params Start AND for() #130 setup AND if() #486 Body Start
ARRAYSIZE D2; InlineFunc[int SizeOfArray(untyped[])] Body
PUSHVARGR D2
PUSHVARGV 8; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
SUBV D2 1
STORE D2 0
LOAD D2 0; for() #130 LoopTest
COMPAREV D2 0
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 29401 ==; for() #130 TestFail?
LOAD D2 0.0003; for() #130 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
LOAD D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFINITDD D2; for() #130 Body End
LOAD D2 0; for() #130 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 29376; for() #130 End
LOAD D2 0.0001; if() #486 Body End AND return Start
GOTO 29408; return End AND for() #129 Body End
LOAD D2 0.0001; for() #129 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 29306; for() #129 End
SETV D2 0; return Start
POPARGS D5 0.0005; return End
RETURNFUNC; Func[int RunFFCScript(int, untyped[])] Body End
PUSHARGSV 0 0.0002; Func[int ScreenFlag(int, int)] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 10 0
PUSHR D2
WRITEPODARRAY D2 {3,9,4,6,7,4,4,2,3,7}
POP D2
STORE D2 0
LOAD D2 0.0002; if() #505 Test
COMPAREV D2 0
GOTOCMP 29432 <
LOAD D2 0.0002
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0003
POP D0
READPODARRAYR D2 D2
POP D3
COMPARER D3 D2
GOTOCMP 29432 >=
SETV D2 0
GOTO 29433
SETV D2 1
COMPAREV D2 0
GOTOCMP 29439 ==; Test 'if'
SETV D2 -1; return Start AND if() #505 Body Start
LOAD D3 0
DEALLOCATEMEMR D3
GOTO 29455; return End AND if() #505 Body End
LOAD D2 0.0003; return Start
PUSHR D2
POP D0
SETR D2 SCREENFLAGSD
PUSHR D2
LOAD D2 0.0002
SETV D3 1
LSHIFTR D3 D2
SETR D2 D3
POP D3
ANDR D2 D3
LOAD D3 0
DEALLOCATEMEMR D3
GOTO 29455; return End
LOAD D3 0
DEALLOCATEMEMR D3
POPARGS D5 0.0004
RETURNFUNC; Func[int ScreenFlag(int, int)] Body End
SETR D4 SP2; Func[void SetEWeaponDeathEffect(eweapon, int, int)] Body Start
LOAD D2 0.0001; if() #516 Test
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 29476 ==; Test 'if'
LOAD D2 0; if() #517 Test AND if() #516 Body Start
COMPAREV D2 1
GOTOCMP 29471 <
LOAD D2 0
COMPAREV D2 511
GOTOCMP 29471 >
SETV D2 0
GOTO 29472
SETV D2 1
COMPAREV D2 0
GOTOCMP 29476 ==; Test 'if'
SETV D2 1; if() #517 Body Start
STORE D2 0.0001; if() #517 Body End
LOAD D2 0.0001; if() #516 Body End
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 13
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 14
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0002
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ORV D2 512
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
POPARGS D5 0.0003
RETURNFUNC; Func[void SetEWeaponDeathEffect(eweapon, int, int)] Body End
SETR D4 SP2; Func[void SetEWeaponLifespan(eweapon, int, int)] Body Start
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 11
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 12
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0002
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ORV D2 512
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
POPARGS D5 0.0003
RETURNFUNC; Func[void SetEWeaponLifespan(eweapon, int, int)] Body End
SETR D4 SP2; Func[void SetEWeaponMovement(eweapon, int, int, int)] Body Start
LOAD D2 0.0003; if() #521 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 256
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 29610 ==; Test 'if'
LOAD D2 0.0003; if() #521 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNX
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0003
PUSHR D2
POP REFEWPN
SETR D2 EWPNY
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2; if() #521 Body End
SETV D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 8
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 10
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0003
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ORV D2 512
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0002; if() #267 Test
COMPAREV D2 4
GOTOCMP 29685 ==
LOAD D2 0.0002
COMPAREV D2 6
GOTOCMP 29685 ==
SETV D2 0
GOTO 29686
SETV D2 1
COMPAREV D2 0
GOTOCMP 29735 ==; Test 'if'
LOAD D2 0.0003; if() #268 Test AND if() #267 Body Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 256
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 29719 ==; Test 'if'
LOAD D2 0.0003; if() #268 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 29840; if() #268 Body End
LOAD D2 0.0003; if() #268 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2; if() #268 Else End
GOTO 29840; if() #267 Body End
LOAD D2 0.0002; if() #269 Test AND if() #267 Else Start
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 29802 ==; Test 'if'
LOAD D2 0.0003; if() #269 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNZ
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001; if() #522 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 29840 ==; Test 'if'
LOAD D2 0.0003; if() #270 Test AND if() #522 Body Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 256
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 29785 ==; Test 'if'
SETV D2 -1; if() #270 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 29840; if() #270 Body End
PUSHR D4; if() #270 Else Start
LOAD D2 0.0003; UsrFunc[int __GetEWeaponThrowHeight(eweapon)] Params Start
PUSHR D2; UsrFunc[int __GetEWeaponThrowHeight(eweapon)] Params End
CALLFUNC 2.9842; UsrFunc[int __GetEWeaponThrowHeight(eweapon)] Call
POP D4
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2; if() #270 Else End
GOTO 29840; if() #522 Body End AND if() #269 Body End
LOAD D2 0.0002; if() #523 Test AND if() #269 Else Start
COMPAREV D2 19
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 29840 ==; Test 'if'
LOAD D2 0.0001; if() #523 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNZ D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
SETV D2 0.1600
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2; if() #523 Body End
POPARGS D5 0.0004; if() #269 Else End AND if() #267 Else End
RETURNFUNC; Func[void SetEWeaponMovement(eweapon, int, int, int)] Body End
PUSHARGSV 0 0.0005; Func[int __GetEWeaponThrowHeight(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0005
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
STORE D2 0.0004
LOAD D2 0.0004; if() #604 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 29857 ==; Test 'if'
SETV D2 1; return Start AND if() #604 Body Start
GOTO 29952; return End AND if() #604 Body End
LOAD D2 0.0005; InlineFunc[int Distance(int, int, int, int)] Params Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNX
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP REFEWPN
SETR D2 EWPNHXSZ
DIVV D2 2
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP REFEWPN
SETR D2 EWPNY
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP REFEWPN
SETR D2 EWPNHYSZ
DIVV D2 2
POP D3
ADDR D2 D3
PUSHR D2
SETR D2 LINKX
ADDV D2 8
PUSHR D2
SETR D2 LINKY
ADDV D2 8; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0003
LOAD D2 0.0003; if() #605 Test
COMPAREV D2 1
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 29900 ==; Test 'if'
SETV D2 1; return Start AND if() #605 Body Start
GOTO 29952; return End AND if() #605 Body End
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0004
POP D3
DIVR D3 D2
SETR D2 D3
STORE D2 0.0002
STOREV 0 0.0001
LOAD D2 0.0001; while() #5 Test
COMPAREV D2 3.2000
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 29927 ==; Test 'while'
LOAD D2 0.0001; while() #5 Body Start
ADDV D2 0.1600
STORE D2 0.0001
LOAD D2 0.0002
SUBV D2 2
STORE D2 0.0002
LOAD D2 0.0002; if() #606 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 29908 ==; Test 'if'
LOAD D2 0.0001; return Start AND if() #606 Body Start
GOTO 29952; return End AND if() #606 Body End
GOTO 29908; while() #5 Body End AND while() #5 End
STOREV 0 0
LOAD D2 0.0002; while() #6 Test
PUSHR D2
LOAD D2 0
DIVV D2 3.2000
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 29951 ==; Test 'while'
LOAD D2 0.0001; while() #6 Body Start
ADDV D2 0.1600
STORE D2 0.0001
LOAD D2 0
PUSHR D2
LOAD D2 0.0001
SUBV D2 3.2000
POP D3
ADDR D2 D3
STORE D2 0
LOAD D2 0.0002
SUBV D2 2
STORE D2 0.0002; while() #6 Body End
GOTO 29928; while() #6 End
LOAD D2 0.0001; return Start
POPARGS D5 0.0006; return End
RETURNFUNC; Func[int __GetEWeaponThrowHeight(eweapon)] Body End
SETR D4 SP2; Func[int Sign(int)] Body Start
LOAD D2 0; if() #296 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 29962 ==; Test 'if'
SETV D2 1; return Start AND if() #296 Body Start
GOTO 29970; return End AND if() #296 Body End
LOAD D2 0; if() #297 Test AND if() #296 Else Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 29969 ==; Test 'if'
SETV D2 -1; return Start AND if() #297 Body Start
GOTO 29970; return End AND if() #297 Body End
SETV D2 0; return Start AND if() #297 Else Start
POP D5; return End AND if() #297 Else End AND if() #296 Else End
RETURNFUNC; Func[int Sign(int)] Body End
SETR D4 SP2; Func[void __DeathAnimEnd(ffc, npc)] Body Start
LOAD D2 0; InlineFunc[bool npc::isValid()] Params AND if() #593 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 30031 ==; Test 'if'
SETV D2 -1000; if() #593 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHP D2
SETV D2 1024
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCXOFS D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCX
PUSHR D2
SETR D2 GD12
SUBV D2 1
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCX D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCY
PUSHR D2
SETR D2 GD13
SUBV D2 1
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCY D2; if() #593 Body End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void __GhCleanUp(ffc)] Params Start
PUSHR D2; UsrFunc[void __GhCleanUp(ffc)] Params End
CALLFUNC 2.6412; UsrFunc[void __GhCleanUp(ffc)] Call
POP D4
SETV D2 0
SETR GD10 D2
PUSHR D4
CALLFUNC 2.4238; UsrFunc[void Ghost_ClearCombos()] Call
POP D4
POPARGS D5 0.0002
RETURNFUNC; Func[void __DeathAnimEnd(ffc, npc)] Body End
PUSHV 0; Func[void __DeathAnimSFX(int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0002; InlineFunc[npc screendata::CreateNPC(int)] Params
CREATENPCR D2; InlineFunc[npc screendata::CreateNPC(int)] Body Start
SETR D2 REFNPC; InlineFunc[npc screendata::CreateNPC(int)] Body End
STORE D2 0
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCX D2
SETV D2 176
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCY D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCITEMSET D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHP D2
SETV D2 65536
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFNPC
SETR NPCMISCD D2
POPARGS D5 0.0003
RETURNFUNC; Func[void __DeathAnimSFX(int, int)] Body End
SETR D4 SP2; Func[void __DeathAnimStart(ffc, npc)] Body Start
SETR D2 GD11
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR CSET D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD2 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD2 D2
SETV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHP D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFNPC
SETR NPCCOLLDET D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCBGSFX D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DeathAnimStart(ffc, npc)] Body End
SETR D4 SP2; Func[bool __Ghost_IsFlickering(npc)] Body Start
LOAD D2 0; if() #638 Test
PUSHR D2
POP REFNPC
SETR D2 NPCMFLAGS
ANDV D2 128
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 30187 ==; Test 'if'
SETV D2 1; return Start AND if() #638 Body Start
GOTO 30188; return End AND if() #638 Body End
SETV D2 0; return Start
POP D5; return End
RETURNFUNC; Func[bool __Ghost_IsFlickering(npc)] Body End
SETR D4 SP2; Func[int __Ghost_LinedUp(int, bool)] Body Start
SETR D2 LINKX; InlineFunc[int Abs(int)] Params Start AND if() #380 Test
PUSHR D2
SETR D2 GD1
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 30219 ==; Test 'if'
SETR D2 LINKY; if() #381 Test AND if() #380 Body Start
PUSHR D2
SETR D2 GD2
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 30216 ==; Test 'if'
SETV D2 0; return Start AND if() #381 Body Start
GOTO 30310; return End
GOTO 30246; if() #381 Body End
SETV D2 1; return Start AND if() #381 Else Start
GOTO 30310; return End AND if() #381 Else End
GOTO 30246; if() #380 Body End
SETR D2 LINKY; InlineFunc[int Abs(int)] Params Start AND if() #640 Test AND if() #380 Else Start
PUSHR D2
SETR D2 GD2
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 30246 ==; Test 'if'
SETR D2 LINKX; if() #382 Test AND if() #640 Body Start
PUSHR D2
SETR D2 GD1
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 30244 ==; Test 'if'
SETV D2 2; return Start AND if() #382 Body Start
GOTO 30310; return End
GOTO 30246; if() #382 Body End
SETV D2 3; return Start AND if() #382 Else Start
GOTO 30310; return End AND if() #382 Else End
LOAD D2 0; if() #640 Body End AND if() #380 Else End AND if() #641 Test
COMPAREV D2 0
GOTOCMP 30309 ==; Test 'if'
SETR D2 LINKX; InlineFunc[int Abs(int)] Params Start AND if() #642 Test AND if() #641 Body Start
PUSHR D2
SETR D2 GD1
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
SETR D2 LINKY; InlineFunc[int Abs(int)] Params Start
PUSHR D2
SETR D2 GD2
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 30309 ==; Test 'if'
SETR D2 LINKY; if() #383 Test AND if() #642 Body Start
PUSHR D2
SETR D2 GD2
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 30296 ==; Test 'if'
SETR D2 LINKX; if() #384 Test AND if() #383 Body Start
PUSHR D2
SETR D2 GD1
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 30293 ==; Test 'if'
SETV D2 4; return Start AND if() #384 Body Start
GOTO 30310; return End
GOTO 30309; if() #384 Body End
SETV D2 5; return Start AND if() #384 Else Start
GOTO 30310; return End AND if() #384 Else End
GOTO 30309; if() #383 Body End
SETR D2 LINKX; if() #385 Test AND if() #383 Else Start
PUSHR D2
SETR D2 GD1
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 30307 ==; Test 'if'
SETV D2 6; return Start AND if() #385 Body Start
GOTO 30310; return End
GOTO 30309; if() #385 Body End
SETV D2 7; return Start AND if() #385 Else Start
GOTO 30310; return End AND if() #385 Else End
SETV D2 -1; if() #383 Else End AND if() #642 Body End AND if() #641 Body End AND return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int __Ghost_LinedUp(int, bool)] Body End
SETR D4 SP2; Func[void EZB_AddAttack(ffc, npc, int, int, int)] Body Start
LOAD D2 0.0001; if() #842 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 30433 !=; Test 'if' AND return (Void) AND if() #842 Body
LOAD D2 0.0001; if() #843 Test
COMPAREV D2 91
GOTOCMP 30326 <
LOAD D2 0.0001
COMPAREV D2 93
GOTOCMP 30326 >
SETV D2 1
GOTO 30327
SETV D2 0
COMPAREV D2 0
GOTOCMP 30410 ==; Test 'if'
SETV D2 0; if() #843 Body Start
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 315 D2
LOAD D2 0.0003
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 317 D2
LOAD D2 0.0001; if() #499 Test
COMPAREV D2 91
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 30366 ==; Test 'if'
SETV D2 300; if() #499 Body Start
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 316 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 317
MULTV D2 2
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 318 D2
GOTO 30433; if() #499 Body End
LOAD D2 0.0001; if() #500 Test AND if() #499 Else Start
COMPAREV D2 92
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 30388 ==; Test 'if'
SETV D2 600; if() #500 Body Start
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 316 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 317
MULTV D2 3
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 318 D2
GOTO 30433; if() #500 Body End
LOAD D2 0.0001; if() #844 Test AND if() #500 Else Start
COMPAREV D2 93
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 30433 ==; Test 'if'
SETV D2 900; if() #844 Body Start
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 316 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 317
MULTV D2 4
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 318 D2; if() #844 Body End
GOTO 30433; if() #500 Else End AND if() #499 Else End AND return (Void) AND if() #843 Body End
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 0
ADDV D2 1
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 0
ADDV D2 1
PUSHR D2
LOAD D2 0
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
POPARGS D5 0.0005
RETURNFUNC; Func[void EZB_AddAttack(ffc, npc, int, int, int)] Body End
PUSHV 0; Func[void EZB_AddSummon(npc, npc)] Body Start
SETR D4 SP2
STOREV 0 0; for() #226 setup
LOAD D2 0; for() #226 LoopTest
COMPAREV D2 256
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 30465 ==; for() #226 TestFail?
LOAD D2 0.0001; InlineFunc[bool npc::isValid()] Params Start AND unless() #845 Test AND for() #226 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2; InlineFunc[bool npc::isValid()] Params End
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 30461 !=; Test 'unless'
LOAD D2 0.0002; unless() #845 Body Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
GOTO 30465; return (Void) AND unless() #845 Body End
LOAD D2 0; for() #226 Body End AND for() #226 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 30438; for() #226 End
POPARGS D5 0.0003
RETURNFUNC; Func[void EZB_AddSummon(npc, npc)] Body End
SETR D4 SP2; Func[void EZB_AddTransformation(ffc, npc, int, int, int)] Body Start
LOAD D2 0.0001; if() #846 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 30496 !=; Test 'if' AND return (Void) AND if() #846 Body
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 100
ADDV D2 101
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 100
ADDV D2 1
PUSHR D2
LOAD D2 0
SETR D0 D2
POP D2
WRITEPODARRAYVR 100 D2
POPARGS D5 0.0005
RETURNFUNC; Func[void EZB_AddTransformation(ffc, npc, int, int, int)] Body End
PUSHV 0; Func[int EZB_AngDiff(int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0
LOAD D2 0; if() #501 Test
COMPAREV D2 180
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 30516 ==; Test 'if'
LOAD D2 0; if() #501 Body Start
SUBV D2 360
STORE D2 0
GOTO 30524; if() #501 Body End
LOAD D2 0; if() #847 Test AND if() #501 Else Start
COMPAREV D2 -180
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 30524 ==; Test 'if'
LOAD D2 0; if() #847 Body Start
ADDV D2 360
STORE D2 0; if() #847 Body End
LOAD D2 0; if() #501 Else End AND return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[int EZB_AngDiff(int, int)] Body End
PUSHV 0; Func[int EZB_AngleDir(ffc, npc, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0
LOAD D2 0; if() #502 Test
ANDV D2 2
COMPAREV D2 0
GOTOCMP 30544 ==; Test 'if'
PUSHR D4; return Start AND if() #502 Body Start
LOAD D2 0.0001; UsrFunc[int AngleDir8(int)] Params Start
PUSHR D2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 2.0402; UsrFunc[int AngleDir8(int)] Call
POP D4
GOTO 30549; return End AND if() #502 Body End
PUSHR D4; return Start AND if() #502 Else Start
LOAD D2 0.0001; UsrFunc[int AngleDir4(int)] Params Start
PUSHR D2; UsrFunc[int AngleDir4(int)] Params End
CALLFUNC 2.0359; UsrFunc[int AngleDir4(int)] Call
POP D4
POPARGS D5 0.0005; return End AND if() #502 Else End
RETURNFUNC; Func[int EZB_AngleDir(ffc, npc, int, int)] Body End
PUSHARGSV 0 0.0005; Func[int EZB_BarrierShift_TransformAnimSize(npc, int)] Body Start
SETR D4 SP2
STOREV 0 0.0004
LOAD D2 0.0005; if() #848 Test
PUSHR D2
POP D0
READPODARRAYV D2 201
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 30564 ==; Test 'if'
SETV D2 100; if() #848 Body Start
STORE D2 0.0004; if() #848 Body End
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
ADDV D2 11
ADDV D2 6
POP D0
READPODARRAYR D2 D2
STORE D2 0.0003
LOAD D2 0.0003
ANDV D2 15
STORE D2 0.0002
LOAD D2 0.0003
RSHIFTV D2 4
ANDV D2 15
STORE D2 0.0001
LOAD D2 0.0001; if() #849 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 30586 ==; Test 'if'
LOAD D2 0.0002; if() #849 Body Start
STORE D2 0.0001; if() #849 Body End
PUSHR D4
LOAD D2 0.0002; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 4; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0609; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0002
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 4; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0609; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0001
LOAD D2 0.0002; InlineFunc[int Max(int, int)] Params Start AND return Start
PUSHVARGR D2
LOAD D2 0.0001
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POPARGS D5 0.0007; return End
RETURNFUNC; Func[int EZB_BarrierShift_TransformAnimSize(npc, int)] Body End
PUSHARGSV 0 0.0002; Func[void EZB_Barriershift_Load(npc, int, bool, bool)] Body Start
SETR D4 SP2
STOREV 0 0.0001
STOREV 0 0
LOAD D2 0.0004; if() #850 Test
PUSHR D2
POP D0
READPODARRAYV D2 201
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 30623 ==; Test 'if'
SETV D2 100; if() #850 Body Start
STORE D2 0; if() #850 Body End
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
SETR GD11 D2
LOAD D2 0.0003; unless() #851 Test
COMPAREV D2 0
GOTOCMP 30802 !=; Test 'unless'
LOAD D2 0.0004; unless() #851 Body Start
PUSHR D2
LOAD D2 0
ADDV D2 1
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCDP D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
ADDV D2 2
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCWDP D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
ADDV D2 3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHUNGER D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
ADDV D2 4
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCRATE D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
ADDV D2 5
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHALTRATE D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
ADDV D2 6
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHOMING D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
ADDV D2 7
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCSTEP D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
ADDV D2 8
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCWEAPON D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
ADDV D2 9
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCITEMSET D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
ADDV D2 10
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCBGSFX D2
SETV D2 0; for() #227 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #227 LoopTest
COMPAREV D2 11
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 30802 ==; for() #227 TestFail?
LOAD D2 0.0004; for() #227 Body Start
PUSHR D2
LOAD D2 0
ADDV D2 11
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0001
ADDV D2 300
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #227 Body End
LOAD D2 0.0001; for() #227 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 30774; for() #227 End
SETV D2 0; unless() #851 Body End AND for() #228 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #228 LoopTest
COMPAREV D2 18
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 30834 ==; for() #228 TestFail?
LOAD D2 0.0004; for() #228 Body Start
PUSHR D2
LOAD D2 0
ADDV D2 22
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
LOAD D2 0.0001
PUSHR D2
POP D0
POP D2
POP REFNPC
SETR NPCDEFENSED D2; for() #228 Body End
LOAD D2 0.0001; for() #228 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 30804; for() #228 End
LOAD D2 0.0002; if() #852 Test
COMPAREV D2 0
GOTOCMP 30856 ==; Test 'if'
LOAD D2 0.0004; if() #852 Body Start
PUSHR D2
LOAD D2 0
ADDV D2 40
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHP D2
LOAD D2 0.0005
PUSHR D2
POP REFNPC
SETR D2 NPCHP
SETR GD14 D2; if() #852 Body End
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
ADDV D2 41
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0004
SETR D0 D2
POP D2
WRITEPODARRAYVR 312 D2
LOAD D2 0.0004; if() #503 Test
PUSHR D2
POP D0
READPODARRAYV D2 201
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 30882 ==; Test 'if'
SETV D2 1; if() #503 Body Start
PUSHR D2
LOAD D2 0.0004
SETR D0 D2
POP D2
WRITEPODARRAYVR 201 D2
GOTO 30888; if() #503 Body End
SETV D2 0; if() #503 Else Start
PUSHR D2
LOAD D2 0.0004
SETR D0 D2
POP D2
WRITEPODARRAYVR 201 D2; if() #503 Else End
POPARGS D5 0.0006
RETURNFUNC; Func[void EZB_Barriershift_Load(npc, int, bool, bool)] Body End
PUSHARGSV 0 0.0002; Func[void EZB_Barriershift_Store(npc, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0001
PUSHR D4
LOAD D2 0.0003; UsrFunc[npc CreateNPCAt(int, int, int)] Params Start
PUSHR D2
PUSHV 128
PUSHV -1000; UsrFunc[npc CreateNPCAt(int, int, int)] Params End
CALLFUNC 2.0735; UsrFunc[npc CreateNPCAt(int, int, int)] Call
POP D4
STORE D2 0
SETR D2 GD11
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCDP
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCWDP
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCHUNGER
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 4 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 7 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCWEAPON
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 8 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCITEMSET
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 9 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCBGSFX
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 10 D2
SETV D2 0; for() #229 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #229 LoopTest
COMPAREV D2 11
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 31024 ==; for() #229 TestFail?
LOAD D2 0.0004; for() #229 Body Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
ADDV D2 11
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #229 Body End
LOAD D2 0.0001; for() #229 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 30999; for() #229 End
SETV D2 0; for() #230 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #230 LoopTest
COMPAREV D2 18
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 31051 ==; for() #230 TestFail?
LOAD D2 0.0004; for() #230 Body Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDEFENSED
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
ADDV D2 22
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #230 Body End
LOAD D2 0.0001; for() #230 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 31026; for() #230 End
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCHP
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 40 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 41 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCCSET
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 100 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCDP
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 101 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCWDP
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 102 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCHUNGER
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 103 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 104 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 105 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 106 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 107 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCWEAPON
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 108 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCITEMSET
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 109 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCBGSFX
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 110 D2
SETV D2 0; for() #231 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #231 LoopTest
COMPAREV D2 11
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 31195 ==; for() #231 TestFail?
LOAD D2 0; for() #231 Body Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
ADDV D2 111
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #231 Body End
LOAD D2 0.0001; for() #231 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 31170; for() #231 End
SETV D2 0; for() #232 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #232 LoopTest
COMPAREV D2 18
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 31222 ==; for() #232 TestFail?
LOAD D2 0; for() #232 Body Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDEFENSED
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
ADDV D2 122
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #232 Body End
LOAD D2 0.0001; for() #232 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 31197; for() #232 End
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCHP
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 140 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 141 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 201 D2
SETV D2 -1000
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHP D2
SETV D2 -1000
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCXOFS D2
SETV D2 -1000
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCYOFS D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCITEMSET D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFNPC
SETR NPCCOLLDET D2
SETV D2 65536
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFNPC
SETR NPCMISCD D2
POPARGS D5 0.0005
RETURNFUNC; Func[void EZB_Barriershift_Store(npc, int, int)] Body End
PUSHARGSV 0 0.0002; Func[bool EZB_CanMoveAngle(int)] Body Start
SETR D4 SP2
PUSHR D4
PUSHV 10; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0002
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7449; UsrFunc[int VectorX(int, int)] Call
POP D4
STORE D2 0.0001
PUSHR D4
PUSHV 10; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0002
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7459; UsrFunc[int VectorY(int, int)] Call
POP D4
STORE D2 0
LOAD D2 0.0001; if() #853 Test
COMPAREV D2 0
GOTOCMP 31333 >=
PUSHR D4
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1516; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 31346 ==
LOAD D2 0.0001
COMPAREV D2 0
GOTOCMP 31344 <=
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1516; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 31346 ==
SETV D2 0
GOTO 31347
SETV D2 1
COMPAREV D2 0
GOTOCMP 31351 ==; Test 'if'
SETV D2 0; return Start AND if() #853 Body Start
GOTO 31380; return End AND if() #853 Body End
LOAD D2 0; if() #854 Test
COMPAREV D2 0
GOTOCMP 31362 >=
PUSHR D4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1516; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 31374 ==
LOAD D2 0
COMPAREV D2 0
GOTOCMP 31372 <=
PUSHR D4
PUSHARGSV 1 0.0002; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1516; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 31374 ==
SETV D2 0
GOTO 31375
SETV D2 1
COMPAREV D2 0
GOTOCMP 31379 ==; Test 'if'
SETV D2 0; return Start AND if() #854 Body Start
GOTO 31380; return End AND if() #854 Body End
SETV D2 1; return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[bool EZB_CanMoveAngle(int)] Body End
PUSHV 0; Func[bool EZB_CanMoveAtPos(int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0
LOAD D2 0.0001; if() #504 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31436 ==; Test 'if'
SETV D2 0; for() #233 setup AND if() #504 Body Start
STORE D2 0
LOAD D2 0; for() #233 LoopTest
PUSHR D2
LOAD D2 0.0003
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 31594 ==; for() #233 TestFail?
PUSHR D4; unless() #855 Test AND for() #233 Body Start
LOAD D2 0.0005; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params Start
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
SUBV D2 1
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params End
CALLFUNC 2.2447; UsrFunc[bool Ghost_CanMovePixel(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 31417 !=; Test 'unless'
SETV D2 0; return Start AND unless() #855 Body Start
GOTO 31595; return End AND unless() #855 Body End
LOAD D2 0; if() #856 Test
PUSHR D2
LOAD D2 0.0003
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31594 !=; Test 'if' AND break 1; AND if() #856 Body
LOAD D2 0; for() #233 Body End AND for() #233 LoopIncrement AND InlineFunc[int Min(int, int)] Params Start
ADDV D2 8
PUSHVARGR D2
LOAD D2 0.0003
SUBV D2 1
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0
GOTO 31392; for() #233 End
GOTO 31594; if() #504 Body End
LOAD D2 0.0001; if() #505 Test AND if() #504 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31490 ==; Test 'if'
SETV D2 0; for() #234 setup AND if() #505 Body Start
STORE D2 0
LOAD D2 0; for() #234 LoopTest
PUSHR D2
LOAD D2 0.0003
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 31594 ==; for() #234 TestFail?
PUSHR D4; unless() #857 Test AND for() #234 Body Start
LOAD D2 0.0005; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params Start
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params End
CALLFUNC 2.2447; UsrFunc[bool Ghost_CanMovePixel(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 31471 !=; Test 'unless'
SETV D2 0; return Start AND unless() #857 Body Start
GOTO 31595; return End AND unless() #857 Body End
LOAD D2 0; if() #858 Test
PUSHR D2
LOAD D2 0.0003
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31594 !=; Test 'if' AND break 1; AND if() #858 Body
LOAD D2 0; for() #234 Body End AND for() #234 LoopIncrement AND InlineFunc[int Min(int, int)] Params Start
ADDV D2 8
PUSHVARGR D2
LOAD D2 0.0003
SUBV D2 1
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0
GOTO 31443; for() #234 End
GOTO 31594; if() #505 Body End
LOAD D2 0.0001; if() #506 Test AND if() #505 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31541 ==; Test 'if'
SETV D2 0; for() #235 setup AND if() #506 Body Start
STORE D2 0
LOAD D2 0; for() #235 LoopTest
PUSHR D2
LOAD D2 0.0002
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 31594 ==; for() #235 TestFail?
PUSHR D4; unless() #859 Test AND for() #235 Body Start
LOAD D2 0.0005; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params Start
SUBV D2 1
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params End
CALLFUNC 2.2447; UsrFunc[bool Ghost_CanMovePixel(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 31522 !=; Test 'unless'
SETV D2 0; return Start AND unless() #859 Body Start
GOTO 31595; return End AND unless() #859 Body End
LOAD D2 0; if() #860 Test
PUSHR D2
LOAD D2 0.0002
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31594 !=; Test 'if' AND break 1; AND if() #860 Body
LOAD D2 0; for() #235 Body End AND for() #235 LoopIncrement AND InlineFunc[int Min(int, int)] Params Start
ADDV D2 8
PUSHVARGR D2
LOAD D2 0.0002
SUBV D2 1
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0
GOTO 31497; for() #235 End
GOTO 31594; if() #506 Body End
LOAD D2 0.0001; if() #861 Test AND if() #506 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31594 ==; Test 'if'
SETV D2 0; for() #236 setup AND if() #861 Body Start
STORE D2 0
LOAD D2 0; for() #236 LoopTest
PUSHR D2
LOAD D2 0.0002
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 31594 ==; for() #236 TestFail?
PUSHR D4; unless() #862 Test AND for() #236 Body Start
LOAD D2 0.0005; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params End
CALLFUNC 2.2447; UsrFunc[bool Ghost_CanMovePixel(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 31576 !=; Test 'unless'
SETV D2 0; return Start AND unless() #862 Body Start
GOTO 31595; return End AND unless() #862 Body End
LOAD D2 0; if() #863 Test
PUSHR D2
LOAD D2 0.0002
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31594 !=; Test 'if' AND break 1; AND if() #863 Body
LOAD D2 0; for() #236 Body End AND for() #236 LoopIncrement AND InlineFunc[int Min(int, int)] Params Start
ADDV D2 8
PUSHVARGR D2
LOAD D2 0.0002
SUBV D2 1
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0
GOTO 31548; for() #236 End
SETV D2 1; if() #861 Body End AND if() #506 Else End AND if() #505 Else End AND if() #504 Else End AND return Start
POPARGS D5 0.0006; return End
RETURNFUNC; Func[bool EZB_CanMoveAtPos(int, int, int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[bool EZB_CanPlace(ffc, npc, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0004; for() #237 setup
PUSHR D2
POP REFNPC
SETR D2 NPCHXOFS
STORE D2 0.0001
LOAD D2 0.0001; for() #237 LoopTest
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCHXOFS
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCHXSZ
POP D3
ADDR D2 D3
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 31742 ==; for() #237 TestFail?
LOAD D2 0.0004; for() #238 setup AND for() #237 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCHYOFS
STORE D2 0
LOAD D2 0; for() #238 LoopTest
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCHYOFS
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCHYSZ
POP D3
ADDR D2 D3
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 31704 ==; for() #238 TestFail?
PUSHR D4; unless() #864 Test AND for() #238 Body Start
LOAD D2 0.0003; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params Start
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params End
CALLFUNC 2.2447; UsrFunc[bool Ghost_CanMovePixel(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 31666 !=; Test 'unless'
SETV D2 0; return Start AND unless() #864 Body Start
GOTO 31743; return End AND unless() #864 Body End
LOAD D2 0; if() #865 Test
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCHYOFS
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCHYSZ
POP D3
ADDR D2 D3
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31704 !=; Test 'if' AND break 1; AND if() #865 Body
LOAD D2 0; for() #238 Body End AND for() #238 LoopIncrement AND InlineFunc[int Min(int, int)] Params Start
ADDV D2 8
PUSHVARGR D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCHYOFS
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCHYSZ
POP D3
ADDR D2 D3
SUBV D2 1
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0
GOTO 31628; for() #238 End
LOAD D2 0.0001; if() #866 Test
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCHXOFS
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCHXSZ
POP D3
ADDR D2 D3
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31742 !=; Test 'if' AND break 1; AND if() #866 Body
LOAD D2 0.0001; for() #237 Body End AND for() #237 LoopIncrement AND InlineFunc[int Min(int, int)] Params Start
ADDV D2 8
PUSHVARGR D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCHXOFS
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCHXSZ
POP D3
ADDR D2 D3
SUBV D2 1
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0001
GOTO 31604; for() #237 End
SETV D2 1; return Start
POPARGS D5 0.0006; return End
RETURNFUNC; Func[bool EZB_CanPlace(ffc, npc, int, int)] Body End
PUSHARGSV 0 0.0002; Func[bool EZB_CanPlace(ffc, npc, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0001; for() #239 setup
LOAD D2 0.0001; for() #239 LoopTest
PUSHR D2
LOAD D2 0.0003
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 31822 ==; for() #239 TestFail?
STOREV 0 0; for() #240 setup AND for() #239 Body Start
LOAD D2 0; for() #240 LoopTest
PUSHR D2
LOAD D2 0.0002
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 31804 ==; for() #240 TestFail?
PUSHR D4; unless() #867 Test AND for() #240 Body Start
LOAD D2 0.0005; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params Start
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params End
CALLFUNC 2.2447; UsrFunc[bool Ghost_CanMovePixel(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 31786 !=; Test 'unless'
SETV D2 0; return Start AND unless() #867 Body Start
GOTO 31823; return End AND unless() #867 Body End
LOAD D2 0; if() #868 Test
PUSHR D2
LOAD D2 0.0002
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31804 !=; Test 'if' AND break 1; AND if() #868 Body
LOAD D2 0; for() #240 Body End AND for() #240 LoopIncrement AND InlineFunc[int Min(int, int)] Params Start
ADDV D2 8
PUSHVARGR D2
LOAD D2 0.0002
SUBV D2 1
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0
GOTO 31758; for() #240 End
LOAD D2 0.0001; if() #869 Test
PUSHR D2
LOAD D2 0.0003
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31822 !=; Test 'if' AND break 1; AND if() #869 Body
LOAD D2 0.0001; for() #239 Body End AND for() #239 LoopIncrement AND InlineFunc[int Min(int, int)] Params Start
ADDV D2 8
PUSHVARGR D2
LOAD D2 0.0003
SUBV D2 1
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0001
GOTO 31748; for() #239 End
SETV D2 1; return Start
POPARGS D5 0.0008; return End
RETURNFUNC; Func[bool EZB_CanPlace(ffc, npc, int, int, int, int)] Body End
PUSHV 0; Func[void EZB_DamageLink(int)] Body Start
SETR D4 SP2
PUSHR D4
PUSHV 40; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
SETR D2 LINKX
PUSHR D2
PUSHR D4
PUSHR LINKDIR; UsrFunc[int InFrontX(int, int)] Params Start
PUSHV 12; UsrFunc[int InFrontX(int, int)] Params End
CALLFUNC 2.9145; UsrFunc[int InFrontX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
SETR D2 LINKY
PUSHR D2
PUSHR D4
PUSHR LINKDIR; UsrFunc[int InFrontY(int, int)] Params Start
PUSHV 12; UsrFunc[int InFrontY(int, int)] Params End
CALLFUNC 2.9166; UsrFunc[int InFrontY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHARGSV 0 0.0002
LOAD D2 0.0001
PUSHR D2
PUSHARGSV -1 0.0002
PUSHV 1; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 2.0818; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
STORE D2 0
SETR D2 LINKDIR
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDIR D2
SETV D2 -1000
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNYOFS D2
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Params Start
PUSHR D2
PUSHARGSV 1 0.0002; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Params End
CALLFUNC 2.9521; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Call
PEEK D4
LOAD D2 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 2.9457; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4
POPARGS D5 0.0002
RETURNFUNC; Func[void EZB_DamageLink(int)] Body End
SETR D4 SP2; Func[int EZB_DirAngle(int)] Body Start
LOAD D2 0; if() #507 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31897 ==; Test 'if'
SETV D2 -90; return Start AND if() #507 Body Start
GOTO 31940; return End AND if() #507 Body End
LOAD D2 0; if() #508 Test AND if() #507 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31904 ==; Test 'if'
SETV D2 90; return Start AND if() #508 Body Start
GOTO 31940; return End AND if() #508 Body End
LOAD D2 0; if() #509 Test AND if() #508 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31911 ==; Test 'if'
SETV D2 180; return Start AND if() #509 Body Start
GOTO 31940; return End AND if() #509 Body End
LOAD D2 0; if() #510 Test AND if() #509 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31918 ==; Test 'if'
SETV D2 -135; return Start AND if() #510 Body Start
GOTO 31940; return End AND if() #510 Body End
LOAD D2 0; if() #511 Test AND if() #510 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31925 ==; Test 'if'
SETV D2 -45; return Start AND if() #511 Body Start
GOTO 31940; return End AND if() #511 Body End
LOAD D2 0; if() #512 Test AND if() #511 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31932 ==; Test 'if'
SETV D2 135; return Start AND if() #512 Body Start
GOTO 31940; return End AND if() #512 Body End
LOAD D2 0; if() #513 Test AND if() #512 Else Start
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31939 ==; Test 'if'
SETV D2 45; return Start AND if() #513 Body Start
GOTO 31940; return End AND if() #513 Body End
SETV D2 0; return Start AND if() #513 Else Start
POP D5; return End AND if() #513 Else End AND if() #512 Else End AND if() #511 Else End AND if() #510 Else End AND if() #509 Else End AND if() #508 Else End AND if() #507 Else End
RETURNFUNC; Func[int EZB_DirAngle(int)] Body End
SETR D4 SP2; Func[int EZB_DirX(int, int)] Body Start
LOAD D2 0.0001; if() #870 Test
COMPAREV D2 2
GOTOCMP 31954 ==
LOAD D2 0.0001
COMPAREV D2 4
GOTOCMP 31954 ==
LOAD D2 0.0001
COMPAREV D2 6
GOTOCMP 31954 ==
SETV D2 0
GOTO 31955
SETV D2 1
COMPAREV D2 0
GOTOCMP 31960 ==; Test 'if'
LOAD D2 0; return Start AND if() #870 Body Start
SUBV2 0 D2
GOTO 31977; return End AND if() #870 Body End
LOAD D2 0.0001; if() #871 Test
COMPAREV D2 3
GOTOCMP 31971 ==
LOAD D2 0.0001
COMPAREV D2 5
GOTOCMP 31971 ==
LOAD D2 0.0001
COMPAREV D2 7
GOTOCMP 31971 ==
SETV D2 0
GOTO 31972
SETV D2 1
COMPAREV D2 0
GOTOCMP 31976 ==; Test 'if'
LOAD D2 0; return Start AND if() #871 Body Start
GOTO 31977; return End AND if() #871 Body End
SETV D2 0; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int EZB_DirX(int, int)] Body End
SETR D4 SP2; Func[int EZB_DirY(int, int)] Body Start
LOAD D2 0.0001; if() #872 Test
COMPAREV D2 0
GOTOCMP 31991 ==
LOAD D2 0.0001
COMPAREV D2 4
GOTOCMP 31991 ==
LOAD D2 0.0001
COMPAREV D2 5
GOTOCMP 31991 ==
SETV D2 0
GOTO 31992
SETV D2 1
COMPAREV D2 0
GOTOCMP 31997 ==; Test 'if'
LOAD D2 0; return Start AND if() #872 Body Start
SUBV2 0 D2
GOTO 32014; return End AND if() #872 Body End
LOAD D2 0.0001; if() #873 Test
COMPAREV D2 1
GOTOCMP 32008 ==
LOAD D2 0.0001
COMPAREV D2 6
GOTOCMP 32008 ==
LOAD D2 0.0001
COMPAREV D2 7
GOTOCMP 32008 ==
SETV D2 0
GOTO 32009
SETV D2 1
COMPAREV D2 0
GOTOCMP 32013 ==; Test 'if'
LOAD D2 0; return Start AND if() #873 Body Start
GOTO 32014; return End AND if() #873 Body End
SETV D2 0; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int EZB_DirY(int, int)] Body End
PUSHARGSV 0 0.0004; Func[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
PUSHR D4; if() #514 Test
PUSHV 1; UsrFunc[int ScreenFlag(int, int)] Params Start
PUSHV 4; UsrFunc[int ScreenFlag(int, int)] Params End
CALLFUNC 2.9410; UsrFunc[int ScreenFlag(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 32030 ==
LOAD D2 0.0014
COMPAREV D2 2
GOTOCMP 32030 !=
SETV D2 1
GOTO 32031
SETV D2 0
COMPAREV D2 0
GOTOCMP 32036 ==; Test 'if'
SETV D2 1; if() #514 Body Start
STORE D2 0.0014
GOTO 32053; if() #514 Body End
PUSHR D4; if() #874 Test AND if() #514 Else Start
PUSHV 1; UsrFunc[int ScreenFlag(int, int)] Params Start
PUSHV 5; UsrFunc[int ScreenFlag(int, int)] Params End
CALLFUNC 2.9410; UsrFunc[int ScreenFlag(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 32048 ==
LOAD D2 0.0014
COMPAREV D2 3
GOTOCMP 32048 !=
SETV D2 1
GOTO 32049
SETV D2 0
COMPAREV D2 0
GOTOCMP 32053 ==; Test 'if'
SETV D2 4; if() #874 Body Start
STORE D2 0.0014; if() #874 Body End
STOREV 0 0.0003; if() #514 Else End AND if(false) #515 [Opt:AlwaysOff]
STOREV 0 0.0002
STOREV 0 0.0001
LOAD D2 0.0006; if() #516 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32360 ==; Test 'if'
LOAD D2 0.0008; InlineFunc[int Choose(int)] Params Start AND if() #516 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0008
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0003
LOAD D2 0.0007; if() #875 Test
COMPAREV D2 -1
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 32080 ==; Test 'if'
LOAD D2 0.0007; if() #875 Body Start
STORE D2 0.0003; if() #875 Body End
LOAD D2 0.0005; if() #876 Test
MODV D2 4
COMPAREV D2 2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 32448 ==; Test 'if'
LOAD D2 0.0011; if() #876 Body Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
MULTV D2 0.8000
STORE D2 0.0002
LOAD D2 0.0013
PUSHR D2
PUSHR D4
LOAD D2 0.0002; UsrFunc[int VectorX(int, int)] Params Start
DIVV D2 2
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7449; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0013
LOAD D2 0.0012
PUSHR D2
PUSHR D4
LOAD D2 0.0002; UsrFunc[int VectorY(int, int)] Params Start
DIVV D2 2
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7459; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0012
PUSHVARGV 1; InlineFunc[int Max(int, int)] Params Start
PUSHR D4
LOAD D2 0.0002; UsrFunc[int Round(int)] Params Start
DIVV D2 4
PUSHR D2; UsrFunc[int Round(int)] Params End
CALLFUNC 2.7707; UsrFunc[int Round(int)] Call
POP D4
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0001
LOAD D2 0.0014; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params Start
PUSHR D2
LOAD D2 0.0013
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0012
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 1
PUSHV 128; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params End
CIRCLER; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body End
ALLOCATEMEMV D2 2 0
STORE D2 0
LOAD D2 0.0013
PUSHR D2
PUSHR D4
PUSHV 320; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0010
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7449; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0012
PUSHR D2
PUSHR D4
PUSHV 320; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0010
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7459; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0011; if() #517 Test
DIVV D2 16
COMPAREV D2 1
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 32290 ==; Test 'if'
PUSHVARGV 1; InlineFunc[int Max(int, int)] Params Start AND if() #517 Body Start
PUSHR D4
LOAD D2 0.0011; UsrFunc[int Round(int)] Params Start
DIVV D2 16
PUSHR D2; UsrFunc[int Round(int)] Params End
CALLFUNC 2.7707; UsrFunc[int Round(int)] Call
POP D4
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0002
PUSHR D4
LOAD D2 0.0014; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Params Start
PUSHR D2
LOAD D2 0.0013
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0012
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV 1
PUSHV 128; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Params End
CALLFUNC 3.2450; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Call
POP D4
GOTO 32357; if() #517 Body End
LOAD D2 0.0014; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Params Start AND if() #517 Else Start
PUSHR D2
LOAD D2 0.0013
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0012
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 128; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Params End
LINER; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Body End AND if() #517 Else End
LOAD D3 0
DEALLOCATEMEMR D3; if() #876 Body End
GOTO 32448; if() #516 Body End
LOAD D2 0.0008; InlineFunc[int Choose(int)] Params Start AND if() #516 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHVARGR D2
LOAD D2 0.0008
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0008
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0003
LOAD D2 0.0007; if() #877 Test
COMPAREV D2 -1
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 32384 ==; Test 'if'
LOAD D2 0.0007; if() #877 Body Start
STORE D2 0.0003; if() #877 Body End
PUSHVARGV 1; InlineFunc[int Max(int, int)] Params Start
PUSHR D4
LOAD D2 0.0011; UsrFunc[int Round(int)] Params Start
DIVV D2 8
PUSHR D2; UsrFunc[int Round(int)] Params End
CALLFUNC 2.7707; UsrFunc[int Round(int)] Call
POP D4
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0001
PUSHR D4
LOAD D2 0.0014; UsrFunc[void EZB_DrawLaser(int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0013
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0012
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[void EZB_DrawLaser(int, int, int, int, int, int)] Params End
CALLFUNC 3.2510; UsrFunc[void EZB_DrawLaser(int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0013; UsrFunc[bool EZB_LaserCollision(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[bool EZB_LaserCollision(int, int, int, int)] Params End
CALLFUNC 3.2613; UsrFunc[bool EZB_LaserCollision(int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 32448 ==; Test 'if'
PUSHR D4; if() #878 Body Start
LOAD D2 0.0009; UsrFunc[void EZB_DamageLink(int)] Params Start
PUSHR D2; UsrFunc[void EZB_DamageLink(int)] Params End
CALLFUNC 3.1825; UsrFunc[void EZB_DamageLink(int)] Call
POP D4; if() #878 Body End
POPARGS D5 0.0015; if() #516 Else End
RETURNFUNC; Func[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Body End
SETR D4 SP2; Func[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Body Start
LOAD D2 0.0008; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0003
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0007; InlineFunc[int Distance(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 1
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
PUSHR D4
LOAD D2 0.0007; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
RECTR; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0012; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS D5 0.0009
RETURNFUNC; Func[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Body End
SETR D4 SP2; Func[void EZB_DrawLaser(int, int, int, int, int, int)] Body Start
PUSHR D4; if() #518 Test
PUSHV 1; UsrFunc[int ScreenFlag(int, int)] Params Start
PUSHV 4; UsrFunc[int ScreenFlag(int, int)] Params End
CALLFUNC 2.9410; UsrFunc[int ScreenFlag(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 32523 ==
LOAD D2 0.0005
COMPAREV D2 2
GOTOCMP 32523 !=
SETV D2 1
GOTO 32524
SETV D2 0
COMPAREV D2 0
GOTOCMP 32529 ==; Test 'if'
SETV D2 1; if() #518 Body Start
STORE D2 0.0005
GOTO 32546; if() #518 Body End
PUSHR D4; if() #881 Test AND if() #518 Else Start
PUSHV 1; UsrFunc[int ScreenFlag(int, int)] Params Start
PUSHV 5; UsrFunc[int ScreenFlag(int, int)] Params End
CALLFUNC 2.9410; UsrFunc[int ScreenFlag(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 32541 ==
LOAD D2 0.0005
COMPAREV D2 3
GOTOCMP 32541 !=
SETV D2 1
GOTO 32542
SETV D2 0
COMPAREV D2 0
GOTOCMP 32546 ==; Test 'if'
SETV D2 4; if() #881 Body Start
STORE D2 0.0005; if() #881 Body End
LOAD D2 0.0005; if() #518 Else End AND InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 1
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
PUSHR D2
PUSHV 1
PUSHV 128; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params End
CIRCLER; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body End
LOAD D2 0.0005; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
ADDV D2 512
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 1
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
PUSHR D2
PUSHV 1
PUSHV 128; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
RECTR; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0012; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS D5 0.0006
RETURNFUNC; Func[void EZB_DrawLaser(int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0003; Func[bool EZB_LaserCollision(int, int, int, int)] Body Start
SETR D4 SP2
PUSHVARGV 1; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0.0004
SUBV D2 3
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0002
LOAD D2 0.0006
PUSHR D2
PUSHR D4
LOAD D2 0.0004; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7449; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0001
LOAD D2 0.0005
PUSHR D2
PUSHR D4
LOAD D2 0.0004; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7459; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #931 Test
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 32669 ==; Test 'if'
SETV D2 1; return Start AND if() #931 Body Start
GOTO 32713; return End AND if() #931 Body End
PUSHR D4; return Start
LOAD D2 0.0006; UsrFunc[bool EZB_RotRectCollision(int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHR D4
LOAD D2 0.0004; UsrFunc[int VectorX(int, int)] Params Start
ADDV D2 128
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7449; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
PUSHR D2
PUSHR D4
LOAD D2 0.0004; UsrFunc[int VectorY(int, int)] Params Start
ADDV D2 128
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7459; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 128
LOAD D2 0.0003
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHARGSV 4 0.0002
PUSHV 0; UsrFunc[bool EZB_RotRectCollision(int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.5325; UsrFunc[bool EZB_RotRectCollision(int, int, int, int, int, int, int, int, int, int)] Call
POP D4
POPARGS D5 0.0007; return End
RETURNFUNC; Func[bool EZB_LaserCollision(int, int, int, int)] Body End
SETR D4 SP2; Func[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Body Start
SETR D2 LINKHP; if() #879 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 32860 !=; Test 'if' AND return (Void) AND if() #879 Body
LOAD D2 0.0005
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7449; UsrFunc[int VectorX(int, int)] Call
POP D4
ADDV D2 -8
POP D3
ADDR D2 D3
STORE D2 0.0005
LOAD D2 0.0004
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7459; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0004
LOAD D2 0.0005
PUSHR D2
PUSHR D4
PUSHV 8; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0002
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7449; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0005
LOAD D2 0.0004
PUSHR D2
PUSHR D4
PUSHV 8; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0002
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7459; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0004
PUSHV 6; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
PUSHR D4
LOAD D2 0.0008; UsrFunc[int EZB_GetSpecialCombo(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
PUSHV 1; UsrFunc[int EZB_GetSpecialCombo(ffc, npc, int, int)] Params End
CALLFUNC 3.2862; UsrFunc[int EZB_GetSpecialCombo(ffc, npc, int, int)] Call
POP D4
PUSHR D2
PUSHV 2
PUSHV 1
PUSHR GD11
PUSHARGSV -1 0.0002
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
PUSHV 0
PUSHV 1
PUSHV 128; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWCOMBOR; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0016; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
LOAD D2 0; if() #880 Test
COMPAREV D2 0
GOTOCMP 32860 ==; Test 'if'
PUSHR D4; if() #880 Body Start
LOAD D2 0.0005; UsrFunc[void EZB_MakeHitbox(int, int, int, int, int)] Params Start
ADDV D2 8
PUSHR D2
PUSHR D4
PUSHV 8; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0002
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7449; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
PUSHR D4
PUSHV 8; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0002
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7459; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHARGSV 16 0.0002
LOAD D2 0
PUSHR D2; UsrFunc[void EZB_MakeHitbox(int, int, int, int, int)] Params End
CALLFUNC 3.2911; UsrFunc[void EZB_MakeHitbox(int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0005; UsrFunc[void EZB_MakeHitbox(int, int, int, int, int)] Params Start
ADDV D2 8
PUSHR D2
PUSHR D4
PUSHV -8; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0002
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7449; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
PUSHR D4
PUSHV -8; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0002
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7459; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHARGSV 16 0.0002
LOAD D2 0
PUSHR D2; UsrFunc[void EZB_MakeHitbox(int, int, int, int, int)] Params End
CALLFUNC 3.2911; UsrFunc[void EZB_MakeHitbox(int, int, int, int, int)] Call
POP D4; if() #880 Body End
POPARGS D5 0.0009
RETURNFUNC; Func[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0003; Func[int EZB_GetSpecialCombo(ffc, npc, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0004
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0.0002
LOAD D2 0.0004
PUSHR D2
POP D0
READPODARRAYV D2 310
STORE D2 0.0001
LOAD D2 0.0001
ADDV D2 2
STORE D2 0
LOAD D2 0.0002; if() #541 Test
ANDV D2 1
COMPAREV D2 0
GOTOCMP 32885 ==; Test 'if'
LOAD D2 0.0001; if() #541 Body Start
ADDV D2 8
STORE D2 0
GOTO 32892; if() #541 Body End
LOAD D2 0.0002; if() #928 Test AND if() #541 Else Start
ANDV D2 2
COMPAREV D2 0
GOTOCMP 32892 ==; Test 'if'
LOAD D2 0.0001; if() #928 Body Start
ADDV D2 16
STORE D2 0; if() #928 Body End
LOAD D2 0.0003; if() #541 Else End AND if() #542 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32900 ==; Test 'if'
LOAD D2 0; return Start AND if() #542 Body Start
GOTO 32909; return End
GOTO 32908; if() #542 Body End
LOAD D2 0.0003; if() #929 Test AND if() #542 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32908 ==; Test 'if'
LOAD D2 0; return Start AND if() #929 Body Start
ADDV D2 1
GOTO 32909; return End AND if() #929 Body End
SETV D2 0; if() #542 Else End AND return Start
POPARGS D5 0.0007; return End
RETURNFUNC; Func[int EZB_GetSpecialCombo(ffc, npc, int, int)] Body End
PUSHV 0; Func[void EZB_MakeHitbox(int, int, int, int, int)] Body Start
SETR D4 SP2
PUSHR D4
PUSHV 40; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHV 120
PUSHV 80
PUSHARGSV 0 0.0002
LOAD D2 0.0001
PUSHR D2
PUSHARGSV -1 0.0002
PUSHV 1; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 2.0818; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
STORE D2 0
LOAD D2 0.0005
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNX
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNHXOFS D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNY
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNHYOFS D2
SETV D2 -1000
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNYOFS D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNHXSZ D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNHYSZ D2
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Params Start
PUSHR D2
PUSHARGSV 1 0.0002; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Params End
CALLFUNC 2.9521; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Call
PEEK D4
LOAD D2 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 2.9457; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4
POPARGS D5 0.0006
RETURNFUNC; Func[void EZB_MakeHitbox(int, int, int, int, int)] Body End
SETR D4 SP2; Func[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Body Start
SETR D2 LINKHP; if() #882 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 33074 !=; Test 'if' AND return (Void) AND if() #882 Body
LOAD D2 0.0005
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7449; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0005
LOAD D2 0.0004
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7459; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0004
PUSHV 6; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
PUSHR D4
LOAD D2 0.0008; UsrFunc[int EZB_GetSpecialCombo(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
PUSHV 0; UsrFunc[int EZB_GetSpecialCombo(ffc, npc, int, int)] Params End
CALLFUNC 3.2862; UsrFunc[int EZB_GetSpecialCombo(ffc, npc, int, int)] Call
POP D4
PUSHR D2
PUSHARGSV 1 0.0002
PUSHR GD11
PUSHARGSV -1 0.0002
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
PUSHV 0
PUSHV 1
PUSHV 128; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWCOMBOR; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0016; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
LOAD D2 0; if() #883 Test
COMPAREV D2 0
GOTOCMP 33074 ==; Test 'if'
PUSHR D4; if() #883 Body Start
LOAD D2 0.0005; UsrFunc[void EZB_MakeHitbox(int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
PUSHARGSV 16 0.0002
LOAD D2 0
PUSHR D2; UsrFunc[void EZB_MakeHitbox(int, int, int, int, int)] Params End
CALLFUNC 3.2911; UsrFunc[void EZB_MakeHitbox(int, int, int, int, int)] Call
POP D4; if() #883 Body End
POPARGS D5 0.0009
RETURNFUNC; Func[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0007; Func[void EZB_DrawTeleport(ffc, npc, int, int, int, int, int)] Body Start
SETR D4 SP2
SETR D2 GD12
STORE D2 0.0006
SETR D2 GD13
STORE D2 0.0005
LOAD D2 0.0011
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0.0004
SETR D2 GD10
STORE D2 0.0003
LOAD D2 0.0004; if() #884 Test
ANDV D2 1
COMPAREV D2 0
GOTOCMP 33099 !=
LOAD D2 0.0004
ANDV D2 2
COMPAREV D2 0
GOTOCMP 33099 !=
SETV D2 0
GOTO 33100
SETV D2 1
COMPAREV D2 0
GOTOCMP 33108 ==; Test 'if'
LOAD D2 0.0003; if() #884 Body Start
PUSHR D2
SETR D2 GD4
POP D3
ADDR D2 D3
STORE D2 0.0003; if() #884 Body End
STOREV 2 0.0002
PUSHR D4; if() #885 Test
PUSHV 1; UsrFunc[int ScreenFlag(int, int)] Params Start
PUSHV 4; UsrFunc[int ScreenFlag(int, int)] Params End
CALLFUNC 2.9410; UsrFunc[int ScreenFlag(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 33118 ==; Test 'if'
SETV D2 1; if() #885 Body Start
STORE D2 0.0002; if() #885 Body End
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
POP D3
DIVR D3 D2
SETR D2 D3
STORE D2 0.0001
STOREV 128 0
LOAD D2 0.0008; if() #886 Test
PUSHR D2
LOAD D2 0.0007
SUBV D2 8
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 33137 ==; Test 'if'
SETV D2 64; if() #886 Body Start
STORE D2 0; if() #886 Body End
LOAD D2 0.0002; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0006
MULTV D2 8
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0005
MULTV D2 24
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0013
PUSHR D2
POP REFFFC
PUSHR CSET
LOAD D2 0.0006
MULTV D2 16
PUSHR D2
LOAD D2 0.0006
MULTV D2 16
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0005
MULTV D2 16
PUSHR D2
LOAD D2 0.0005
MULTV D2 24
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHARGSV 0 0.0003
PUSHV -1
PUSHV 0
PUSHV 1
LOAD D2 0
PUSHR D2; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWCOMBOR; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0016; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS D5 0.0014
RETURNFUNC; Func[void EZB_DrawTeleport(ffc, npc, int, int, int, int, int)] Body End
PUSHV 0; Func[void EZB_FaceAngle(ffc, npc, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0
LOAD D2 0; if() #520 Test
ANDV D2 2
COMPAREV D2 0
GOTOCMP 33223 ==; Test 'if'
PUSHR D4; if() #520 Body Start
LOAD D2 0.0001; UsrFunc[int AngleDir8(int)] Params Start
PUSHR D2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 2.0402; UsrFunc[int AngleDir8(int)] Call
POP D4
SETR GD4 D2
GOTO 33229; if() #520 Body End
PUSHR D4; if() #520 Else Start
LOAD D2 0.0001; UsrFunc[int AngleDir4(int)] Params Start
PUSHR D2; UsrFunc[int AngleDir4(int)] Params End
CALLFUNC 2.0359; UsrFunc[int AngleDir4(int)] Call
POP D4
SETR GD4 D2; if() #520 Else End
POPARGS D5 0.0005
RETURNFUNC; Func[void EZB_FaceAngle(ffc, npc, int, int)] Body End
PUSHV 0; Func[void EZB_FaceDir(ffc, npc, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0
LOAD D2 0; if() #521 Test
ANDV D2 2
COMPAREV D2 0
GOTOCMP 33245 ==; Test 'if'
LOAD D2 0.0001; if() #521 Body Start
SETR GD4 D2
GOTO 33269; if() #521 Body End
LOAD D2 0.0001; if() #522 Test AND if() #521 Else Start
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 33253 ==; Test 'if'
LOAD D2 0.0001; if() #522 Body Start
SETR GD4 D2
GOTO 33269; if() #522 Body End
LOAD D2 0.0001; if() #523 Test AND if() #522 Else Start
COMPAREV D2 4
GOTOCMP 33261 ==
LOAD D2 0.0001
COMPAREV D2 6
GOTOCMP 33261 ==
SETV D2 0
GOTO 33262
SETV D2 1
COMPAREV D2 0
GOTOCMP 33267 ==; Test 'if'
SETV D2 2; if() #523 Body Start
SETR GD4 D2
GOTO 33269; if() #523 Body End
SETV D2 3; if() #523 Else Start
SETR GD4 D2; if() #523 Else End
POPARGS D5 0.0005; if() #522 Else End AND if() #521 Else End
RETURNFUNC; Func[void EZB_FaceDir(ffc, npc, int, int)] Body End
SETR D4 SP2; Func[void EZB_FaceDir4(ffc, npc, int, int)] Body Start
LOAD D2 0; if() #524 Test
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 33280 ==; Test 'if'
LOAD D2 0; if() #524 Body Start
SETR GD4 D2
GOTO 33296; if() #524 Body End
LOAD D2 0; if() #525 Test AND if() #524 Else Start
COMPAREV D2 4
GOTOCMP 33288 ==
LOAD D2 0
COMPAREV D2 6
GOTOCMP 33288 ==
SETV D2 0
GOTO 33289
SETV D2 1
COMPAREV D2 0
GOTOCMP 33294 ==; Test 'if'
SETV D2 2; if() #525 Body Start
SETR GD4 D2
GOTO 33296; if() #525 Body End
SETV D2 3; if() #525 Else Start
SETR GD4 D2; if() #525 Else End
POPARGS D5 0.0004; if() #524 Else End
RETURNFUNC; Func[void EZB_FaceDir4(ffc, npc, int, int)] Body End
PUSHV 0; Func[void EZB_FaceLink(ffc, npc, int)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0
LOAD D2 0; if() #526 Test
ANDV D2 2
COMPAREV D2 0
GOTOCMP 33336 ==; Test 'if'
PUSHARGSR D4 0.0003; if() #526 Body Start AND UsrFunc[int AngleDir8(int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0002; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0002; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 2.0402; UsrFunc[int AngleDir8(int)] Call
POP D4
SETR GD4 D2
GOTO 33362; if() #526 Body End
PUSHARGSR D4 0.0003; if() #526 Else Start AND UsrFunc[int AngleDir4(int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0002; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0002; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2; UsrFunc[int AngleDir4(int)] Params End
CALLFUNC 2.0359; UsrFunc[int AngleDir4(int)] Call
POP D4
SETR GD4 D2; if() #526 Else End
POPARGS D5 0.0004
RETURNFUNC; Func[void EZB_FaceLink(ffc, npc, int)] Body End
PUSHV 0; Func[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Body Start
SETR D4 SP2
PUSHR D4
LOAD D2 0.0007; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
PUSHV 0; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params End
CALLFUNC 3.3388; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Call
POP D4
STORE D2 0
LOAD D2 0; return Start
POPARGS D5 0.0008; return End
RETURNFUNC; Func[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0007; Func[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0012
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0.0006
PUSHR D4
LOAD D2 0.0013; UsrFunc[int EZB_WeaponTypeToID(int)] Params Start
PUSHR D2
POP REFNPC
PUSHR NPCWEAPON; UsrFunc[int EZB_WeaponTypeToID(int)] Params End
CALLFUNC 3.3516; UsrFunc[int EZB_WeaponTypeToID(int)] Call
POP D4
STORE D2 0.0005
LOAD D2 0.0006; if() #888 Test
ANDV D2 128
COMPAREV D2 0
GOTOCMP 33410 ==; Test 'if'
LOAD D2 0.0007; if() #888 Body Start
ORV D2 1
STORE D2 0.0007; if() #888 Body End
LOAD D2 0.0012
PUSHR D2
POP D0
READPODARRAYV D2 307
STORE D2 0.0004
LOAD D2 0.0012
PUSHR D2
POP D0
READPODARRAYV D2 308
STORE D2 0.0003
LOAD D2 0.0003; if() #889 Test
COMPAREV D2 0
GOTOCMP 33440 !=
LOAD D2 0.0005
COMPAREV D2 132
GOTOCMP 33438 ==
LOAD D2 0.0005
COMPAREV D2 130
GOTOCMP 33438 ==
LOAD D2 0.0005
COMPAREV D2 134
GOTOCMP 33438 ==
LOAD D2 0.0005
COMPAREV D2 137
GOTOCMP 33438 ==
LOAD D2 0.0005
COMPAREV D2 138
GOTOCMP 33440 !=
SETV D2 1
GOTO 33441
SETV D2 0
COMPAREV D2 0
GOTOCMP 33446 ==; Test 'if'
LOAD D2 0.0007; if() #889 Body Start
ORV D2 2
STORE D2 0.0007; if() #889 Body End
LOAD D2 0.0003; if() #527 Test
COMPAREV D2 2000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 33458 ==; Test 'if'
LOAD D2 0.0007; if() #527 Body Start
ORV D2 4
STORE D2 0.0007
LOAD D2 0.0003
SUBV D2 2000
STORE D2 0.0003
GOTO 33469; if() #527 Body End
LOAD D2 0.0003; if() #890 Test AND if() #527 Else Start
COMPAREV D2 1000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 33469 ==; Test 'if'
LOAD D2 0.0007; if() #890 Body Start
ORV D2 2
STORE D2 0.0007
LOAD D2 0.0003
SUBV D2 1000
STORE D2 0.0003; if() #890 Body End
LOAD D2 0.0004; if() #527 Else End
STORE D2 0.0002
LOAD D2 0.0004; if() #891 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 33478 ==; Test 'if'
SETV D2 -1; if() #891 Body Start
STORE D2 0.0002; if() #891 Body End
LOAD D2 0.0003
STORE D2 0.0001
LOAD D2 0.0003; if() #892 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 33487 ==; Test 'if'
SETV D2 -1; if() #892 Body Start
STORE D2 0.0001; if() #892 Body End
PUSHR D4
LOAD D2 0.0005; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0009; InlineFunc[int DegtoRad(int)] Params Start
SETR D3 D2; InlineFunc[int DegtoRad(int)] Params End
DEGTORAD D2 D3; InlineFunc[int DegtoRad(int)] Body
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0013
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 2.0818; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
STORE D2 0
LOAD D2 0; return Start
POPARGS D5 0.0015; return End
RETURNFUNC; Func[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Body End
SETR D4 SP2; Func[int EZB_WeaponTypeToID(int)] Body Start
LOAD D2 0; if() #568 Test
COMPAREV D2 140
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33525 ==; Test 'if'
SETV D2 140; return Start AND if() #568 Body Start
GOTO 33637; return End
GOTO 33636; if() #568 Body End
LOAD D2 0; if() #569 Test AND if() #568 Else Start
COMPAREV D2 141
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33533 ==; Test 'if'
SETV D2 141; return Start AND if() #569 Body Start
GOTO 33637; return End
GOTO 33636; if() #569 Body End
LOAD D2 0; if() #570 Test AND if() #569 Else Start
COMPAREV D2 129
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33541 ==; Test 'if'
SETV D2 129; return Start AND if() #570 Body Start
GOTO 33637; return End
GOTO 33636; if() #570 Body End
LOAD D2 0; if() #571 Test AND if() #570 Else Start
COMPAREV D2 130
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33549 ==; Test 'if'
SETV D2 130; return Start AND if() #571 Body Start
GOTO 33637; return End
GOTO 33636; if() #571 Body End
LOAD D2 0; if() #572 Test AND if() #571 Else Start
COMPAREV D2 131
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33557 ==; Test 'if'
SETV D2 131; return Start AND if() #572 Body Start
GOTO 33637; return End
GOTO 33636; if() #572 Body End
LOAD D2 0; if() #573 Test AND if() #572 Else Start
COMPAREV D2 132
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33565 ==; Test 'if'
SETV D2 132; return Start AND if() #573 Body Start
GOTO 33637; return End
GOTO 33636; if() #573 Body End
LOAD D2 0; if() #574 Test AND if() #573 Else Start
COMPAREV D2 133
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33573 ==; Test 'if'
SETV D2 133; return Start AND if() #574 Body Start
GOTO 33637; return End
GOTO 33636; if() #574 Body End
LOAD D2 0; if() #575 Test AND if() #574 Else Start
COMPAREV D2 134
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33581 ==; Test 'if'
SETV D2 134; return Start AND if() #575 Body Start
GOTO 33637; return End
GOTO 33636; if() #575 Body End
LOAD D2 0; if() #576 Test AND if() #575 Else Start
COMPAREV D2 135
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33589 ==; Test 'if'
SETV D2 135; return Start AND if() #576 Body Start
GOTO 33637; return End
GOTO 33636; if() #576 Body End
LOAD D2 0; if() #577 Test AND if() #576 Else Start
COMPAREV D2 136
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33597 ==; Test 'if'
SETV D2 136; return Start AND if() #577 Body Start
GOTO 33637; return End
GOTO 33636; if() #577 Body End
LOAD D2 0; if() #578 Test AND if() #577 Else Start
COMPAREV D2 137
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33605 ==; Test 'if'
SETV D2 137; return Start AND if() #578 Body Start
GOTO 33637; return End
GOTO 33636; if() #578 Body End
LOAD D2 0; if() #579 Test AND if() #578 Else Start
COMPAREV D2 138
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33613 ==; Test 'if'
SETV D2 138; return Start AND if() #579 Body Start
GOTO 33637; return End
GOTO 33636; if() #579 Body End
LOAD D2 0; if() #580 Test AND if() #579 Else Start
COMPAREV D2 139
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33621 ==; Test 'if'
SETV D2 139; return Start AND if() #580 Body Start
GOTO 33637; return End
GOTO 33636; if() #580 Body End
LOAD D2 0; if() #581 Test AND if() #580 Else Start
COMPAREV D2 142
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33629 ==; Test 'if'
SETV D2 142; return Start AND if() #581 Body Start
GOTO 33637; return End
GOTO 33636; if() #581 Body End
LOAD D2 0; if() #958 Test AND if() #581 Else Start
COMPAREV D2 145
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33636 ==; Test 'if'
SETV D2 145; return Start AND if() #958 Body Start
GOTO 33637; return End AND if() #958 Body End
SETV D2 134; if() #581 Else End AND if() #580 Else End AND if() #579 Else End AND if() #578 Else End AND if() #577 Else End AND if() #576 Else End AND if() #575 Else End AND if() #574 Else End AND if() #573 Else End AND if() #572 Else End AND if() #571 Else End AND if() #570 Else End AND if() #569 Else End AND if() #568 Else End AND return Start
POP D5; return End
RETURNFUNC; Func[int EZB_WeaponTypeToID(int)] Body End
PUSHARGSV 0 0.0008; Func[void EZB_FiringAnim(ffc, npc, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0007
LOAD D2 0.0009
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0.0006
LOAD D2 0.0009
PUSHR D2
POP D0
READPODARRAYV D2 310
STORE D2 0.0005
LOAD D2 0.0006; if() #528 Test
ANDV D2 2
COMPAREV D2 0
GOTOCMP 33660 ==; Test 'if'
LOAD D2 0.0005; if() #528 Body Start
ADDV D2 8
SETR GD10 D2
GOTO 33671; if() #528 Body End
LOAD D2 0.0006; if() #529 Test AND if() #528 Else Start
ANDV D2 1
COMPAREV D2 0
GOTOCMP 33668 ==; Test 'if'
LOAD D2 0.0005; if() #529 Body Start
ADDV D2 4
SETR GD10 D2
GOTO 33671; if() #529 Body End
LOAD D2 0.0005; if() #529 Else Start
ADDV D2 1
SETR GD10 D2; if() #529 Else End
LOAD D2 0.0010; if() #528 Else End
PUSHR D2
POP REFNPC
SETR D2 NPCXOFS
STORE D2 0.0004
LOAD D2 0.0010
PUSHR D2
POP REFNPC
SETR D2 NPCYOFS
STORE D2 0.0003
LOAD D2 0.0008; if() #530 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33707 ==; Test 'if'
SETV D2 0; for() #243 setup AND if() #530 Body Start
STORE D2 0.0007
LOAD D2 0.0007; for() #243 LoopTest
COMPAREV D2 16
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 33874 ==; for() #243 TestFail?
PUSHR D4; for() #243 Body Start
LOAD D2 0.0011; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0009
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #243 Body End
LOAD D2 0.0007; for() #243 LoopIncrement
ADDV D2 1
STORE D2 0.0007
GOTO 33688; for() #243 End
GOTO 33874; if() #530 Body End
LOAD D2 0.0008; if() #531 Test AND if() #530 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33791 ==; Test 'if'
STOREV 0 0.0001; if() #531 Body Start
STOREV 0 0
SETV D2 0; for() #244 setup
STORE D2 0.0007
LOAD D2 0.0007; for() #244 LoopTest
COMPAREV D2 32
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 33772 ==; for() #244 TestFail?
PUSHR D4; if(true) #893 [Opt:AlwaysOn] AND for() #244 Body Start
PUSHV -1; UsrFunc[int Rand(int, int)] Params Start
PUSHV 1; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0.0001
PUSHR D4
PUSHV -1; UsrFunc[int Rand(int, int)] Params Start
PUSHV 1; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0010
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCXOFS D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0010
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCYOFS D2
PUSHR D4
LOAD D2 0.0011; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0009
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #244 Body End
LOAD D2 0.0007; for() #244 LoopIncrement
ADDV D2 1
STORE D2 0.0007
GOTO 33716; for() #244 End
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0010
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCXOFS D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0010
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCYOFS D2
GOTO 33874; if() #531 Body End
LOAD D2 0.0008; if() #894 Test AND if() #531 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33874 ==; Test 'if'
STOREV 0 0.0001; if() #894 Body Start
STOREV 0 0
SETV D2 0; for() #245 setup
STORE D2 0.0007
LOAD D2 0.0007; for() #245 LoopTest
COMPAREV D2 64
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 33856 ==; for() #245 TestFail?
PUSHR D4; if(true) #895 [Opt:AlwaysOn] AND for() #245 Body Start
PUSHV -2; UsrFunc[int Rand(int, int)] Params Start
PUSHV 2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0.0001
PUSHR D4
PUSHV -2; UsrFunc[int Rand(int, int)] Params Start
PUSHV 2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0010
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCXOFS D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0010
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCYOFS D2
PUSHR D4
LOAD D2 0.0011; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0009
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #245 Body End
LOAD D2 0.0007; for() #245 LoopIncrement
ADDV D2 1
STORE D2 0.0007
GOTO 33800; for() #245 End
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0010
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCXOFS D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0010
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCYOFS D2; if() #894 Body End
POPARGS D5 0.0012; if() #531 Else End AND if() #530 Else End
RETURNFUNC; Func[void EZB_FiringAnim(ffc, npc, int, int)] Body End
PUSHV 0; Func[void EZB_Waitframe(ffc, npc, int)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0
LOAD D2 0; if() #952 Test
ANDV D2 512
COMPAREV D2 0
GOTOCMP 33896 ==; Test 'if'
SETV D2 60; if() #952 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCSTUN D2; if() #952 Body End
LOAD D2 0; if() #953 Test
ANDV D2 1024
COMPAREV D2 0
GOTOCMP 33909 ==; Test 'if'
SETV D2 0; if() #953 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCSTUN D2; if() #953 Body End
LOAD D2 0.0001; unless() #954 Test
PUSHR D2
POP D0
READPODARRAYV D2 319
COMPAREV D2 0
GOTOCMP 33987 !=; Test 'unless'
LOAD D2 0.0001; if() #955 Test AND unless() #954 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 316
COMPAREV D2 0
GOTOCMP 33987 ==; Test 'if'
LOAD D2 0.0001; if() #956 Test AND if() #955 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 315
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP D0
READPODARRAYV D2 316
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 33987 ==; Test 'if'
LOAD D2 0.0001; if() #956 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 315
ADDV D2 1
PUSHR D2
LOAD D2 0.0001
SETR D0 D2
POP D2
WRITEPODARRAYVR 315 D2
LOAD D2 0.0001
PUSHR D2
POP D0
READPODARRAYV D2 317
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP D0
READPODARRAYV D2 318
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP D0
READPODARRAYV D2 317
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP D0
READPODARRAYV D2 315
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP D0
READPODARRAYV D2 316
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCSTEP D2; if() #956 Body End
LOAD D2 0.0001; if() #955 Body End AND unless() #954 Body End AND if() #565 Test
PUSHR D2
POP D0
READPODARRAYV D2 200
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34023 ==; Test 'if'
PUSHR D4; unless() #957 Test AND if() #565 Body Start
LOAD D2 0.0003; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHARGSV 0 0.0002; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Params End
CALLFUNC 2.7919; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 34043 !=; Test 'unless'
SETV D2 1; unless() #957 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHP D2
SETV D2 1
SETR GD14 D2
SETV D2 1
PUSHR D2
LOAD D2 0.0001
SETR D0 D2
POP D2
WRITEPODARRAYVR 202 D2; unless() #957 Body End
GOTO 34043; if() #565 Body End
LOAD D2 0; if() #566 Test AND if() #565 Else Start
ANDV D2 32
COMPAREV D2 0
GOTOCMP 34036 ==; Test 'if'
PUSHR D4; if(false) #567 [Opt:AlwaysOff] AND if() #566 Body Start
LOAD D2 0.0003; UsrFunc[bool Ghost_Waitframe(ffc, npc, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHARGSV 1 0.0002; UsrFunc[bool Ghost_Waitframe(ffc, npc, int, bool)] Params End
CALLFUNC 2.8156; UsrFunc[bool Ghost_Waitframe(ffc, npc, int, bool)] Call
POP D4
GOTO 34043; if() #566 Body End
PUSHR D4; if() #566 Else Start
LOAD D2 0.0003; UsrFunc[void Ghost_Waitframe(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[void Ghost_Waitframe(ffc, npc)] Params End
CALLFUNC 2.7908; UsrFunc[void Ghost_Waitframe(ffc, npc)] Call
POP D4; if() #566 Else End
POPARGS D5 0.0004; if() #565 Else End
RETURNFUNC; Func[void EZB_Waitframe(ffc, npc, int)] Body End
PUSHARGSV 0 0.0010; Func[void EZB_FishWizardUpdate(ffc, npc, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0009
LOAD D2 0.0011
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0.0008
SETV D2 0
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
LOAD D2 0.0010; if() #532 Test
PUSHR D2
POP D0
READPODARRAYV D2 7
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34441 ==; Test 'if'
LOAD D2 0.0010; if() #896 Test AND if() #532 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
COMPAREV D2 0
GOTOCMP 34089 ==; Test 'if'
LOAD D2 0.0010; if() #896 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
SUBV D2 1
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2; if() #896 Body End
LOAD D2 0.0010; if() #897 Test
PUSHR D2
POP D0
READPODARRAYV D2 11
COMPAREV D2 0
GOTOCMP 34105 ==; Test 'if'
LOAD D2 0.0010; if() #897 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 11
SUBV D2 1
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 11 D2; if() #897 Body End
PUSHR D4
LOAD D2 0.0010; UsrFunc[int Ghost_ConstantWalk4(int, int, int, int, int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0012
PUSHR D2
POP REFNPC
PUSHR NPCSTEP
LOAD D2 0.0012
PUSHR D2
POP REFNPC
PUSHR NPCRATE
LOAD D2 0.0012
PUSHR D2
POP REFNPC
PUSHR NPCHOMING
LOAD D2 0.0012
PUSHR D2
POP REFNPC
PUSHR NPCHUNGER; UsrFunc[int Ghost_ConstantWalk4(int, int, int, int, int)] Params End
CALLFUNC 2.4246; UsrFunc[int Ghost_ConstantWalk4(int, int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
PUSHR D4; if() #533 Test
LOAD D2 0.0012; UsrFunc[bool EZB_InSight(npc)] Params Start
PUSHR D2; UsrFunc[bool EZB_InSight(npc)] Params End
CALLFUNC 3.4599; UsrFunc[bool EZB_InSight(npc)] Call
POP D4
COMPAREV D2 0
GOTOCMP 34149 ==
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 1
COMPAREV D2 0
GOTOCMP 34149 !=
SETV D2 1
GOTO 34150
SETV D2 0
COMPAREV D2 0
GOTOCMP 34169 ==; Test 'if'
LOAD D2 0.0012; if() #533 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
MULTV D2 10
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
SETV D2 1
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
GOTO 34597; if() #533 Body End
PUSHR D4; if() #898 Test AND if() #533 Else Start
PUSHV 1; UsrFunc[int Rand(int, int)] Params Start
PUSHV 90; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
COMPAREV D2 1
GOTOCMP 34184 !=
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 1
COMPAREV D2 0
GOTOCMP 34184 !=
SETV D2 1
GOTO 34185
SETV D2 0
COMPAREV D2 0
GOTOCMP 34597 ==; Test 'if'
STOREV 0 0.0007; if() #898 Body Start
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHR D2
POP REFNPC
PUSHVARGR NPCTXSZ
LOAD D2 0.0012
PUSHR D2
POP REFNPC
PUSHVARGR NPCTYSZ; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SUBV D2 1
STORE D2 0.0002
STOREV 0 0.0001
SETV D2 0; for() #246 setup
STORE D2 0.0009
LOAD D2 0.0009; for() #246 LoopTest
COMPAREV D2 128
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 34280 ==; for() #246 TestFail?
PUSHVARGV -1; InlineFunc[int Choose(int)] Params Start AND for() #246 Body Start
PUSHVARGV 1; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0007
PUSHVARGV -1; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 1; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0006
LOAD D2 0.0002
MULTV D2 16
PUSHR D2
PUSHR D4
PUSHV 2; UsrFunc[int Rand(int, int)] Params Start
PUSHV 4; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
MULTV D2 16
SETV D2 16
PUSHR D2
PUSHR D4
PUSHV 2; UsrFunc[int Rand(int, int)] Params Start
PUSHV 4; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0597; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0005
SETR D2 GD1
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0005
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0004
SETR D2 GD2
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0003
PUSHR D4; if() #899 Test
LOAD D2 0.0013; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Params End
CALLFUNC 3.1597; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 34276 ==; Test 'if'
SETV D2 1; if() #899 Body Start
STORE D2 0.0001
GOTO 34280; break 1; AND if() #899 Body End
LOAD D2 0.0009; for() #246 Body End AND for() #246 LoopIncrement
ADDV D2 1
STORE D2 0.0009
GOTO 34206; for() #246 End
LOAD D2 0.0001; if() #900 Test
COMPAREV D2 0
GOTOCMP 34597 ==; Test 'if'
LOAD D2 0.0008; if() #534 Test AND if() #900 Body Start
ANDV D2 2
COMPAREV D2 0
GOTOCMP 34300 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #534 Body Start AND UsrFunc[int AngleDir8(int)] Params Start
PUSHARGSV 0 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0340; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 2.0402; UsrFunc[int AngleDir8(int)] Call
POP D4
SETR GD4 D2
GOTO 34314; if() #534 Body End
LOAD D2 0.0008; if() #901 Test AND if() #534 Else Start
ANDV D2 1
COMPAREV D2 0
GOTOCMP 34314 ==; Test 'if'
LOAD D2 0.0007; if() #535 Test AND if() #901 Body Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 34312 ==; Test 'if'
SETV D2 2; if() #535 Body Start
SETR GD4 D2
GOTO 34314; if() #535 Body End
SETV D2 3; if() #535 Else Start
SETR GD4 D2; if() #535 Else End
PUSHR D4; if() #901 Body End AND if() #534 Else End
PUSHV 0; UsrFunc[int Clamp(int, int, int)] Params Start
LOAD D2 0.0012; InlineFunc[int Floor(int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
PUSHR D2
PUSHV 4; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0609; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #902 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34334 ==; Test 'if'
SETV D2 0.5000; if() #902 Body Start
STORE D2 0; if() #902 Body End
SETV D2 1
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 4 D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0
POP D3
DIVR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2
SETV D2 1
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 7 D2
LOAD D2 0.0011
PUSHR D2
POP D0
READPODARRAYV D2 309
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 8 D2
PUSHR D4; unless() #903 Test
PUSHV 7168; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 34390 !=; Test 'unless'
SETV D2 7168; unless() #903 Body Start
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 8 D2; unless() #903 Body End
PUSHR D4; unless() #904 Test
PUSHV 65537; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 34402 !=; Test 'unless'
SETV D2 65536; unless() #904 Body Start
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 9 D2; unless() #904 Body End
PUSHR D4; if() #905 Test
PUSHV 1; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2681; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 34414 ==; Test 'if'
SETV D2 1; if() #905 Body Start
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 12 D2; if() #905 Body End
PUSHR D4
PUSHV 7168; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4591; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK D4
PUSHV 65537; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4591; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK D4
PUSHV 1; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.4952; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP D4
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 10 D2
LOAD D2 0.0012
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
MULTV D2 10
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 11 D2; if() #900 Body End
GOTO 34597; if() #898 Body End AND if() #533 Else End AND if() #532 Body End
LOAD D2 0.0010; if() #906 Test AND if() #532 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 7
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34597 ==; Test 'if'
PUSHR D4; if() #906 Body Start
LOAD D2 0.0010; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 4
PUSHR D2
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 10
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 5
PUSHR D2
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 10
POP D3
MULTR D2 D3
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.4979; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0010; if() #536 Test
PUSHR D2
POP D0
READPODARRAYV D2 6
MODV D2 4
COMPAREV D2 2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 34496 ==; Test 'if'
SETV D2 -1000; if() #536 Body Start
PUSHR D2
LOAD D2 0.0012
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCYOFS D2
GOTO 34505; if() #536 Body End
SETV D2 -2; if() #536 Else Start
PUSHR D2
LOAD D2 0.0012
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCYOFS D2; if() #536 Else End
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 6
SUBV D2 1
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2
LOAD D2 0.0010; if() #907 Test
PUSHR D2
POP D0
READPODARRAYV D2 6
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 34597 ==; Test 'if'
SETV D2 -2; if() #907 Body Start
PUSHR D2
LOAD D2 0.0012
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCYOFS D2
LOAD D2 0.0010; if() #537 Test
PUSHR D2
POP D0
READPODARRAYV D2 4
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 34543 ==; Test 'if'
SETV D2 2; if() #537 Body Start
SETR GD4 D2
GOTO 34545; if() #537 Body End
SETV D2 3; if() #537 Else Start
SETR GD4 D2; if() #537 Else End
LOAD D2 0.0010; if() #908 Test
PUSHR D2
POP D0
READPODARRAYV D2 8
COMPAREV D2 0
GOTOCMP 34555 ==; Test 'if'
PUSHR D4; if() #908 Body Start
PUSHV 7168; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.4952; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP D4; if() #908 Body End
LOAD D2 0.0010; if() #909 Test
PUSHR D2
POP D0
READPODARRAYV D2 9
COMPAREV D2 0
GOTOCMP 34565 ==; Test 'if'
PUSHR D4; if() #909 Body Start
PUSHV 65537; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.4952; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP D4; if() #909 Body End
LOAD D2 0.0010; if() #910 Test
PUSHR D2
POP D0
READPODARRAYV D2 12
COMPAREV D2 0
GOTOCMP 34575 ==; Test 'if'
PUSHR D4; if() #910 Body Start
PUSHV 1; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4591; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #910 Body End
SETV D2 0
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 7 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
PUSHR D4
LOAD D2 0.0013; UsrFunc[void EZB_FaceDir4(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0011
PUSHR D2
PUSHR GD4; UsrFunc[void EZB_FaceDir4(ffc, npc, int, int)] Params End
CALLFUNC 3.3271; UsrFunc[void EZB_FaceDir4(ffc, npc, int, int)] Call
POP D4; if() #907 Body End
POPARGS D5 0.0014; if() #906 Body End AND if() #532 Else End
RETURNFUNC; Func[void EZB_FishWizardUpdate(ffc, npc, int, int)] Body End
PUSHARGSV 0 0.0006; Func[bool EZB_InSight(npc)] Body Start
SETR D4 SP2
PUSHR D4
LOAD D2 0.0006; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0528; UsrFunc[int CenterX(npc)] Call
POP D4
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0006; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0574; UsrFunc[int CenterY(npc)] Call
POP D4
STORE D2 0.0004
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
STORE D2 0.0003
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
STORE D2 0.0002
LOAD D2 0.0006
PUSHR D2
POP REFNPC
SETR D2 NPCTXSZ
MULTV D2 8
ADDV D2 8
STORE D2 0.0001
LOAD D2 0.0006
PUSHR D2
POP REFNPC
SETR D2 NPCTYSZ
MULTV D2 8
ADDV D2 8
STORE D2 0
SETR D2 GD4; if() #543 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34663 ==; Test 'if'
LOAD D2 0.0005; InlineFunc[int Abs(int)] Params Start AND return Start AND if() #543 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
GOTOCMP 34660 >=
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
GOTOCMP 34660 >=
SETV D2 1
GOTO 34747
SETV D2 0
GOTO 34747; return End
GOTO 34746; if() #543 Body End
SETR D2 GD4; if() #544 Test AND if() #543 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34691 ==; Test 'if'
LOAD D2 0.0005; InlineFunc[int Abs(int)] Params Start AND return Start AND if() #544 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
GOTOCMP 34688 >=
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
GOTOCMP 34688 <=
SETV D2 1
GOTO 34747
SETV D2 0
GOTO 34747; return End
GOTO 34746; if() #544 Body End
SETR D2 GD4; if() #545 Test AND if() #544 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34719 ==; Test 'if'
LOAD D2 0.0004; InlineFunc[int Abs(int)] Params Start AND return Start AND if() #545 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
GOTOCMP 34716 >=
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
COMPARER D3 D2
GOTOCMP 34716 >=
SETV D2 1
GOTO 34747
SETV D2 0
GOTO 34747; return End
GOTO 34746; if() #545 Body End
SETR D2 GD4; if() #930 Test AND if() #545 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34746 ==; Test 'if'
LOAD D2 0.0004; InlineFunc[int Abs(int)] Params Start AND return Start AND if() #930 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
GOTOCMP 34744 >=
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
COMPARER D3 D2
GOTOCMP 34744 <=
SETV D2 1
GOTO 34747
SETV D2 0
GOTO 34747; return End AND if() #930 Body End
SETV D2 0; if() #545 Else End AND if() #544 Else End AND if() #543 Else End AND return Start
POPARGS D5 0.0007; return End
RETURNFUNC; Func[bool EZB_InSight(npc)] Body End
PUSHARGSV 0 0.0013; Func[void EZB_GetExtraProperties(ffc, npc, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0012
STOREV 0 0.0011
LOAD D2 0.0018
PUSHR D2
POP D0
READPODARRAYV D2 305
STORE D2 0.0010
SETV D2 0
PUSHR D2
LOAD D2 0.0014
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
ALLOCATEMEMV D2 20 0
WRITEPODSTRING D2 "EZBoss_ExtraAttacks"
STORE D2 0.0008
LOAD D2 0.0008; InlineFunc[int Game::GetFFCScript(char32[])] Params
GETFFCSCRIPT D2; InlineFunc[int Game::GetFFCScript(char32[])] Body
STORE D2 0.0007
ALLOCATEMEMV D2 24 0
WRITEPODSTRING D2 "EZBoss_ChangeLaserColor"
STORE D2 0.0005
LOAD D2 0.0005; InlineFunc[int Game::GetFFCScript(char32[])] Params
GETFFCSCRIPT D2; InlineFunc[int Game::GetFFCScript(char32[])] Body
STORE D2 0.0004
ALLOCATEMEMV D2 28 0
WRITEPODSTRING D2 "EZBoss_ExtraTransformations"
STORE D2 0.0002
LOAD D2 0.0002; InlineFunc[int Game::GetFFCScript(char32[])] Params
GETFFCSCRIPT D2; InlineFunc[int Game::GetFFCScript(char32[])] Body
STORE D2 0.0001
SETV D2 0
PUSHR D2
LOAD D2 0.0018
SETR D0 D2
POP D2
WRITEPODARRAYVR 200 D2
LOAD D2 0.0017; if() #911 Test
COMPAREV D2 50
GOTOCMP 34799 ==
LOAD D2 0.0017
COMPAREV D2 51
GOTOCMP 34799 ==
LOAD D2 0.0017
COMPAREV D2 71
GOTOCMP 34799 ==
SETV D2 0
GOTO 34800
SETV D2 1
COMPAREV D2 0
GOTOCMP 34850 ==; Test 'if'
PUSHR D4; if() #911 Body Start
LOAD D2 0.0021; UsrFunc[void EZB_AddTransformation(ffc, npc, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0020
PUSHR D2
LOAD D2 0.0018
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0014
PUSHR D2; UsrFunc[void EZB_AddTransformation(ffc, npc, int, int, int)] Params End
CALLFUNC 3.0467; UsrFunc[void EZB_AddTransformation(ffc, npc, int, int, int)] Call
POP D4
SETV D2 1
PUSHR D2
LOAD D2 0.0018
SETR D0 D2
POP D2
WRITEPODARRAYVR 200 D2
LOAD D2 0.0017; if() #538 Test
COMPAREV D2 51
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34833 ==; Test 'if'
SETV D2 2; if() #538 Body Start
PUSHR D2
LOAD D2 0.0018
SETR D0 D2
POP D2
WRITEPODARRAYVR 200 D2
GOTO 34844; if() #538 Body End
LOAD D2 0.0017; if() #912 Test AND if() #538 Else Start
COMPAREV D2 71
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34844 ==; Test 'if'
SETV D2 3; if() #912 Body Start
PUSHR D2
LOAD D2 0.0018
SETR D0 D2
POP D2
WRITEPODARRAYVR 200 D2; if() #912 Body End
LOAD D2 0.0016; if() #538 Else End
STORE D2 0.0017
LOAD D2 0.0015
STORE D2 0.0016
SETV D2 0
STORE D2 0.0015; if() #911 Body End
LOAD D2 0.0017; if() #913 Test
COMPAREV D2 0
GOTOCMP 34866 ==; Test 'if'
PUSHR D4; if() #913 Body Start
LOAD D2 0.0021; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0020
PUSHR D2
LOAD D2 0.0018
PUSHR D2
LOAD D2 0.0017
PUSHR D2
LOAD D2 0.0014
PUSHR D2; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Params End
CALLFUNC 3.0312; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Call
POP D4; if() #913 Body End
LOAD D2 0.0016; if() #914 Test
COMPAREV D2 0
GOTOCMP 34882 ==; Test 'if'
PUSHR D4; if() #914 Body Start
LOAD D2 0.0021; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0020
PUSHR D2
LOAD D2 0.0018
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0014
PUSHR D2; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Params End
CALLFUNC 3.0312; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Call
POP D4; if() #914 Body End
LOAD D2 0.0015; if() #915 Test
COMPAREV D2 0
GOTOCMP 34898 ==; Test 'if'
PUSHR D4; if() #915 Body Start
LOAD D2 0.0021; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0020
PUSHR D2
LOAD D2 0.0018
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0014
PUSHR D2; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Params End
CALLFUNC 3.0312; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Call
POP D4; if() #915 Body End
SETV D2 1; for() #247 setup
STORE D2 0.0012
LOAD D2 0.0012; for() #247 LoopTest
COMPAREV D2 32
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 35248 ==; for() #247 TestFail?
LOAD D2 0.0012; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #247 Body Start
SUBV D2 1; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0
LOAD D2 0; if() #539 Test
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
PUSHR D2
LOAD D2 0.0007
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34972 ==; Test 'if'
LOAD D2 0; if() #916 Test AND if() #539 Body Start
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
PUSHR D2
LOAD D2 0.0019
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 35244 ==; Test 'if'
SETV D2 1; for() #248 setup AND if() #916 Body Start
STORE D2 0.0011
LOAD D2 0.0011; for() #248 LoopTest
COMPAREV D2 7
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 35244 ==; for() #248 TestFail?
LOAD D2 0; if() #917 Test AND for() #248 Body Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
GOTOCMP 34967 ==; Test 'if'
PUSHR D4; if() #917 Body Start
LOAD D2 0.0021; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0020
PUSHR D2
LOAD D2 0.0018
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP D0
POP REFFFC
PUSHR FFINITDD
LOAD D2 0.0014
PUSHR D2; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Params End
CALLFUNC 3.0312; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Call
POP D4; if() #917 Body End
LOAD D2 0.0011; for() #248 Body End AND for() #248 LoopIncrement
ADDV D2 1
STORE D2 0.0011
GOTO 34935; for() #248 End
GOTO 35244; if() #916 Body End AND if() #539 Body End
LOAD D2 0; if() #540 Test AND if() #539 Else Start
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 35134 ==; Test 'if'
LOAD D2 0; if() #918 Test AND if() #540 Body Start
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
PUSHR D2
LOAD D2 0.0019
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 35244 ==; Test 'if'
LOAD D2 0; if() #919 Test AND if() #918 Body Start
PUSHR D2
SETV D2 1
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
GOTOCMP 35026 !=
LOAD D2 0
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
GOTOCMP 35026 !=
LOAD D2 0
PUSHR D2
SETV D2 3
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
GOTOCMP 35026 !=
SETV D2 0
GOTO 35027
SETV D2 1
COMPAREV D2 0
GOTOCMP 35065 ==; Test 'if'
LOAD D2 0; if() #919 Body Start
PUSHR D2
SETV D2 1
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
PUSHR D2
LOAD D2 0.0013
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
PUSHR D2
LOAD D2 0.0013
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0
PUSHR D2
SETV D2 3
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
PUSHR D2
LOAD D2 0.0013
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2; if() #919 Body End
LOAD D2 0; if() #920 Test
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
GOTOCMP 35094 !=
LOAD D2 0
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
GOTOCMP 35094 !=
LOAD D2 0
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
GOTOCMP 35094 !=
SETV D2 0
GOTO 35095
SETV D2 1
COMPAREV D2 0
GOTOCMP 35244 ==; Test 'if'
LOAD D2 0; if() #920 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
PUSHR D2
LOAD D2 0.0013
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
LOAD D2 0
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
PUSHR D2
LOAD D2 0.0013
SETR D0 D2
POP D2
WRITEPODARRAYVR 4 D2
LOAD D2 0
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
PUSHR D2
LOAD D2 0.0013
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2; if() #920 Body End
GOTO 35244; if() #918 Body End AND if() #540 Body End
LOAD D2 0; if() #921 Test AND if() #540 Else Start
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 35244 ==; Test 'if'
LOAD D2 0; if() #922 Test AND if() #921 Body Start
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
PUSHR D2
LOAD D2 0.0019
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 35244 ==; Test 'if'
LOAD D2 0; if() #923 Test AND if() #922 Body Start
PUSHR D2
SETV D2 1
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 35183 ==; Test 'if'
LOAD D2 0; if() #923 Body Start
PUSHR D2
SETV D2 1
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
SUBV D2 1
PUSHR D2
LOAD D2 0.0018
SETR D0 D2
POP D2
WRITEPODARRAYVR 313 D2; if() #923 Body End
LOAD D2 0; if() #924 Test
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 1
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 35206 ==; Test 'if'
LOAD D2 0; if() #924 Body Start
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
PUSHR D2
LOAD D2 0.0018
SETR D0 D2
POP D2
WRITEPODARRAYVR 314 D2; if() #924 Body End
SETV D2 3; for() #249 setup
STORE D2 0.0011
LOAD D2 0.0011; for() #249 LoopTest
COMPAREV D2 7
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 35244 ==; for() #249 TestFail?
LOAD D2 0; if() #925 Test AND for() #249 Body Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
GOTOCMP 35240 ==; Test 'if'
PUSHR D4; if() #925 Body Start
LOAD D2 0.0021; UsrFunc[void EZB_AddTransformation(ffc, npc, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0020
PUSHR D2
LOAD D2 0.0018
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP D0
POP REFFFC
PUSHR FFINITDD
LOAD D2 0.0014
PUSHR D2; UsrFunc[void EZB_AddTransformation(ffc, npc, int, int, int)] Params End
CALLFUNC 3.0467; UsrFunc[void EZB_AddTransformation(ffc, npc, int, int, int)] Call
POP D4; if() #925 Body End
LOAD D2 0.0011; for() #249 Body End AND for() #249 LoopIncrement
ADDV D2 1
STORE D2 0.0011
GOTO 35208; for() #249 End
LOAD D2 0.0012; if() #922 Body End AND if() #921 Body End AND if() #540 Else End AND if() #539 Else End AND for() #247 Body End AND for() #247 LoopIncrement
ADDV D2 1
STORE D2 0.0012
GOTO 34900; for() #247 End
LOAD D2 0.0014; if() #926 Test
PUSHR D2
POP D0
READPODARRAYV D2 100
COMPAREV D2 0
GOTOCMP 35262 ==
LOAD D2 0.0018
PUSHR D2
POP D0
READPODARRAYV D2 200
COMPAREV D2 0
GOTOCMP 35262 !=
SETV D2 1
GOTO 35263
SETV D2 0
COMPAREV D2 0
GOTOCMP 35271 ==; Test 'if'
SETV D2 2; if() #926 Body Start
PUSHR D2
LOAD D2 0.0018
SETR D0 D2
POP D2
WRITEPODARRAYVR 200 D2; if() #926 Body End
LOAD D2 0.0014; if() #927 Test
PUSHR D2
POP D0
READPODARRAYV D2 100
COMPAREV D2 0
GOTOCMP 35296 ==; Test 'if'
PUSHR D4; if() #927 Body Start
LOAD D2 0.0020; UsrFunc[void EZB_Barriershift_Store(npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0014
PUSHR D2
LOAD D2 0.0014; InlineFunc[int Rand(int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 100
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
ADDV D2 101
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0018
PUSHR D2; UsrFunc[void EZB_Barriershift_Store(npc, int, int)] Params End
CALLFUNC 3.0890; UsrFunc[void EZB_Barriershift_Store(npc, int, int)] Call
POP D4; if() #927 Body End
LOAD D3 0.0002
DEALLOCATEMEMR D3
LOAD D3 0.0005
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
POPARGS D5 0.0022
RETURNFUNC; Func[void EZB_GetExtraProperties(ffc, npc, int, int, int, int, int, int, int)] Body End
SETR D4 SP2; Func[void EZB_InitVars(int)] Body Start
SETV D2 0
PUSHR D2
LOAD D2 0
SETR D0 D2
POP D2
WRITEPODARRAYVR 313 D2
SETV D2 0
PUSHR D2
LOAD D2 0
SETR D0 D2
POP D2
WRITEPODARRAYVR 314 D2
SETV D2 0
PUSHR D2
LOAD D2 0
SETR D0 D2
POP D2
WRITEPODARRAYVR 316 D2
POP D5
RETURNFUNC; Func[void EZB_InitVars(int)] Body End
PUSHARGSV 0 0.0017; Func[bool EZB_RotRectCollision(int, int, int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0024; InlineFunc[int Sqrt(int)] Params Start
PUSHR D2
LOAD D2 0.0024
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0023
PUSHR D2
LOAD D2 0.0023
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3; InlineFunc[int Sqrt(int)] Params End
SQROOTR D2 D2; InlineFunc[int Sqrt(int)] Body
STORE D2 0.0016
LOAD D2 0.0019; InlineFunc[int Sqrt(int)] Params Start
PUSHR D2
LOAD D2 0.0019
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0018
PUSHR D2
LOAD D2 0.0018
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3; InlineFunc[int Sqrt(int)] Params End
SQROOTR D2 D2; InlineFunc[int Sqrt(int)] Body
STORE D2 0.0015
LOAD D2 0.0024; InlineFunc[int ArcSin(int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start
PUSHR D2
LOAD D2 0.0016
POP D3
DIVR D3 D2; InlineFunc[int ArcSin(int)] Params End
ARCSINR D2 D3; InlineFunc[int ArcSin(int)] Body
SETR D3 D2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
STORE D2 0.0014
LOAD D2 0.0019; InlineFunc[int ArcSin(int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start
PUSHR D2
LOAD D2 0.0015
POP D3
DIVR D3 D2; InlineFunc[int ArcSin(int)] Params End
ARCSINR D2 D3; InlineFunc[int ArcSin(int)] Body
SETR D3 D2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
STORE D2 0.0013
ALLOCATEMEMV D2 4 0
STORE D2 0.0012
ALLOCATEMEMV D2 4 0
STORE D2 0.0011
ALLOCATEMEMV D2 4 0
STORE D2 0.0010
ALLOCATEMEMV D2 4 0
STORE D2 0.0009
ALLOCATEMEMV D2 4 0
STORE D2 0.0008
ALLOCATEMEMV D2 4 0
STORE D2 0.0007
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
LOAD D2 0.0026
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0022; InlineFunc[int Cos(int)] Params Start
PUSHR D2
LOAD D2 0.0014
POP D3
SUBR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0012
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0025
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0022; InlineFunc[int Sin(int)] Params Start
PUSHR D2
LOAD D2 0.0014
POP D3
SUBR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0011
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0026
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0022; InlineFunc[int Cos(int)] Params Start
PUSHR D2
LOAD D2 0.0014
POP D3
ADDR D2 D3
SETR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0012
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0025
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0022; InlineFunc[int Sin(int)] Params Start
PUSHR D2
LOAD D2 0.0014
POP D3
ADDR D2 D3
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0011
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0026
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0022; InlineFunc[int Cos(int)] Params Start
ADDV D2 180
PUSHR D2
LOAD D2 0.0014
POP D3
SUBR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0012
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
LOAD D2 0.0025
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0022; InlineFunc[int Sin(int)] Params Start
ADDV D2 180
PUSHR D2
LOAD D2 0.0014
POP D3
SUBR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0011
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
LOAD D2 0.0026
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0022; InlineFunc[int Cos(int)] Params Start
ADDV D2 180
PUSHR D2
LOAD D2 0.0014
POP D3
ADDR D2 D3
SETR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0012
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
LOAD D2 0.0025
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0022; InlineFunc[int Sin(int)] Params Start
ADDV D2 180
PUSHR D2
LOAD D2 0.0014
POP D3
ADDR D2 D3
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0011
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
LOAD D2 0.0021
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0017; InlineFunc[int Cos(int)] Params Start
PUSHR D2
LOAD D2 0.0013
POP D3
SUBR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0020
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0017; InlineFunc[int Sin(int)] Params Start
PUSHR D2
LOAD D2 0.0013
POP D3
SUBR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0021
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0017; InlineFunc[int Cos(int)] Params Start
PUSHR D2
LOAD D2 0.0013
POP D3
ADDR D2 D3
SETR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0020
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0017; InlineFunc[int Sin(int)] Params Start
PUSHR D2
LOAD D2 0.0013
POP D3
ADDR D2 D3
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0021
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0017; InlineFunc[int Cos(int)] Params Start
ADDV D2 180
PUSHR D2
LOAD D2 0.0013
POP D3
SUBR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
LOAD D2 0.0020
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0017; InlineFunc[int Sin(int)] Params Start
ADDV D2 180
PUSHR D2
LOAD D2 0.0013
POP D3
SUBR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
LOAD D2 0.0021
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0017; InlineFunc[int Cos(int)] Params Start
ADDV D2 180
PUSHR D2
LOAD D2 0.0013
POP D3
ADDR D2 D3
SETR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
LOAD D2 0.0020
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0017; InlineFunc[int Sin(int)] Params Start
ADDV D2 180
PUSHR D2
LOAD D2 0.0013
POP D3
ADDR D2 D3
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
LOAD D2 0.0012
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0012
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0008
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0011
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0007
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0012
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0012
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0008
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0011
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0007
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0008
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
LOAD D2 0.0009
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0009
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0007
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0008
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
LOAD D2 0.0009
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0009
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0007
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
STOREV 0 0.0001; for() #251 setup
LOAD D2 0.0001; for() #251 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 36073 ==; for() #251 TestFail?
LOAD D2 0.0012; for() #251 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0006
LOAD D2 0.0006
STORE D2 0.0005
LOAD D2 0.0006
STORE D2 0.0004
STOREV 1 0; for() #252 setup
LOAD D2 0; for() #252 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 35946 ==; for() #252 TestFail?
LOAD D2 0.0012; for() #252 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0006
LOAD D2 0.0006; if() #933 Test
PUSHR D2
LOAD D2 0.0005
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 35932 ==; Test 'if'
LOAD D2 0.0006; if() #933 Body Start
STORE D2 0.0005; if() #933 Body End
LOAD D2 0.0006; if() #934 Test
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 35942 ==; Test 'if'
LOAD D2 0.0006; if() #934 Body Start
STORE D2 0.0004; if() #934 Body End
LOAD D2 0; for() #252 Body End AND for() #252 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 35887; for() #252 End
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0009
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0006
LOAD D2 0.0006
STORE D2 0.0003
LOAD D2 0.0006
STORE D2 0.0002
STOREV 1 0; for() #253 setup
LOAD D2 0; for() #253 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 36038 ==; for() #253 TestFail?
LOAD D2 0.0010; for() #253 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0006
LOAD D2 0.0006; if() #935 Test
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 36024 ==; Test 'if'
LOAD D2 0.0006; if() #935 Body Start
STORE D2 0.0003; if() #935 Body End
LOAD D2 0.0006; if() #936 Test
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 36034 ==; Test 'if'
LOAD D2 0.0006; if() #936 Body Start
STORE D2 0.0002; if() #936 Body End
LOAD D2 0; for() #253 Body End AND for() #253 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 35979; for() #253 End
LOAD D2 0.0002; if() #937 Test
PUSHR D2
LOAD D2 0.0005
POP D3
COMPARER D3 D2
GOTOCMP 36052 <
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
GOTOCMP 36052 <
SETV D2 0
GOTO 36053
SETV D2 1
COMPAREV D2 0
GOTOCMP 36069 ==; Test 'if'
SETV D2 0; return Start AND if() #937 Body Start
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
LOAD D3 0.0009
DEALLOCATEMEMR D3
LOAD D3 0.0010
DEALLOCATEMEMR D3
LOAD D3 0.0011
DEALLOCATEMEMR D3
LOAD D3 0.0012
DEALLOCATEMEMR D3
GOTO 36099; return End AND if() #937 Body End
LOAD D2 0.0001; for() #251 Body End AND for() #251 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 35849; for() #251 End
SETV D2 1; return Start
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
LOAD D3 0.0009
DEALLOCATEMEMR D3
LOAD D3 0.0010
DEALLOCATEMEMR D3
LOAD D3 0.0011
DEALLOCATEMEMR D3
LOAD D3 0.0012
DEALLOCATEMEMR D3
GOTO 36099; return End
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
LOAD D3 0.0009
DEALLOCATEMEMR D3
LOAD D3 0.0010
DEALLOCATEMEMR D3
LOAD D3 0.0011
DEALLOCATEMEMR D3
LOAD D3 0.0012
DEALLOCATEMEMR D3
POPARGS D5 0.0027
RETURNFUNC; Func[bool EZB_RotRectCollision(int, int, int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[int EZB_NumSummons(npc)] Body Start
SETR D4 SP2
STOREV 0 0.0001
STOREV 0 0; for() #250 setup
LOAD D2 0; for() #250 LoopTest
COMPAREV D2 256
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 36125 ==; for() #250 TestFail?
LOAD D2 0.0002; InlineFunc[bool npc::isValid()] Params Start AND if() #932 Test AND for() #250 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2; InlineFunc[bool npc::isValid()] Params End
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 36121 ==; Test 'if'
LOAD D2 0.0001; if() #932 Body Start
ADDV D2 1
STORE D2 0.0001; if() #932 Body End
LOAD D2 0; for() #250 Body End AND for() #250 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 36105; for() #250 End
LOAD D2 0.0001; return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[int EZB_NumSummons(npc)] Body End
PUSHARGSV 0 0.0005; Func[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 15 0
WRITEPODSTRING D2 "EZBoss_Effects"
STORE D2 0.0003
LOAD D2 0.0003; InlineFunc[int Game::GetFFCScript(char32[])] Params
GETFFCSCRIPT D2; InlineFunc[int Game::GetFFCScript(char32[])] Body
STORE D2 0.0002
LOAD D2 0.0002; if() #546 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 36188 ==; Test 'if'
ALLOCATEMEMV D2 8 0; if() #546 Body Start
PUSHR D2
SETR D0 D2
PUSHR D0
LOAD D2 0.0012
POP D0
WRITEPODARRAYVR 0 D2
PUSHR D0
LOAD D2 0.0011
POP D0
WRITEPODARRAYVR 1 D2
PUSHR D0
LOAD D2 0.0010
POP D0
WRITEPODARRAYVR 2 D2
PUSHR D0
LOAD D2 0.0009
POP D0
WRITEPODARRAYVR 3 D2
PUSHR D0
LOAD D2 0.0008
POP D0
WRITEPODARRAYVR 4 D2
PUSHR D0
LOAD D2 0.0007
POP D0
WRITEPODARRAYVR 5 D2
PUSHR D0
LOAD D2 0.0006
POP D0
WRITEPODARRAYVR 6 D2
PUSHR D0
LOAD D2 0.0005
POP D0
WRITEPODARRAYVR 7 D2
POP D2
STORE D2 0
PUSHR D4
LOAD D2 0.0002; UsrFunc[int RunFFCScript(int, untyped[])] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[int RunFFCScript(int, untyped[])] Params End
CALLFUNC 2.9289; UsrFunc[int RunFFCScript(int, untyped[])] Call
POP D4
LOAD D3 0
DEALLOCATEMEMR D3
GOTO 36197; if() #546 Body End
ALLOCATEMEMV D2 73 0; if() #546 Else Start
WRITEPODSTRING D2 "ERROR: EZBoss_Effects script wasn't found. Did you forget to assign it?\n"
STORE D2 0
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0
DEALLOCATEMEMR D3; if() #546 Else End
LOAD D3 0.0003
DEALLOCATEMEMR D3
POPARGS D5 0.0013
RETURNFUNC; Func[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Body End
SETR D4 SP2; Func[void EZB_SetEWeaponDeathEffect(eweapon)] Body Start
LOAD D2 0; if() #547 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNID
COMPAREV D2 140
GOTOCMP 36216 ==
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNID
COMPAREV D2 142
GOTOCMP 36216 ==
SETV D2 0
GOTO 36217
SETV D2 1
COMPAREV D2 0
GOTOCMP 36227 ==; Test 'if'
PUSHR D4; if() #547 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 12
PUSHV -1; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 2.9457; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4
GOTO 36320; if() #547 Body End
LOAD D2 0; if() #548 Test AND if() #547 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNID
COMPAREV D2 139
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 36243 ==; Test 'if'
PUSHR D4; if() #548 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 14
PUSHV -1; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 2.9457; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4
GOTO 36320; if() #548 Body End
LOAD D2 0; if() #549 Test AND if() #548 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNID
COMPAREV D2 137
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 36262 ==; Test 'if'
PUSHR D4; if() #549 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 3
LOAD D2 0
PUSHR D2
POP REFEWPN
PUSHR EWPNPOWER; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 2.9457; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4
GOTO 36320; if() #549 Body End
LOAD D2 0; if() #550 Test AND if() #549 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNID
COMPAREV D2 138
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 36281 ==; Test 'if'
PUSHR D4; if() #550 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 4
LOAD D2 0
PUSHR D2
POP REFEWPN
PUSHR EWPNPOWER; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 2.9457; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4
GOTO 36320; if() #550 Body End
LOAD D2 0; if() #551 Test AND if() #550 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNID
COMPAREV D2 130
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 36297 ==; Test 'if'
PUSHR D4; if() #551 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 5
PUSHV -1; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 2.9457; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4
GOTO 36320; if() #551 Body End
LOAD D2 0; if() #552 Test AND if() #551 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNID
COMPAREV D2 134
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 36313 ==; Test 'if'
PUSHR D4; if() #552 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 2
PUSHV 16; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 2.9457; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4
GOTO 36320; if() #552 Body End
PUSHR D4; if() #552 Else Start
LOAD D2 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV -1; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 2.9457; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4; if() #552 Else End
POP D5; if() #551 Else End AND if() #550 Else End AND if() #549 Else End AND if() #548 Else End AND if() #547 Else End
RETURNFUNC; Func[void EZB_SetEWeaponDeathEffect(eweapon)] Body End
SETR D4 SP2; Func[void EZB_SetLaserArray(int, int, int, int, int, int, int, int, int, int)] Body Start
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0007
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
MULTV D2 2
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
MULTV D2 3
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
MULTV D2 4
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
MULTV D2 5
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETV D2 1
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
MULTV D2 6
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
MULTV D2 7
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
MULTV D2 8
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
POPARGS D5 0.0010
RETURNFUNC; Func[void EZB_SetLaserArray(int, int, int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
PUSHR D4; if() #553 Test
PUSHV 1; UsrFunc[int ScreenFlag(int, int)] Params Start
PUSHV 4; UsrFunc[int ScreenFlag(int, int)] Params End
CALLFUNC 2.9410; UsrFunc[int ScreenFlag(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 36461 ==
LOAD D2 0.0011
COMPAREV D2 2
GOTOCMP 36461 !=
SETV D2 1
GOTO 36462
SETV D2 0
COMPAREV D2 0
GOTOCMP 36467 ==; Test 'if'
SETV D2 1; if() #553 Body Start
STORE D2 0.0011
GOTO 36484; if() #553 Body End
PUSHR D4; if() #938 Test AND if() #553 Else Start
PUSHV 1; UsrFunc[int ScreenFlag(int, int)] Params Start
PUSHV 5; UsrFunc[int ScreenFlag(int, int)] Params End
CALLFUNC 2.9410; UsrFunc[int ScreenFlag(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 36479 ==
LOAD D2 0.0011
COMPAREV D2 3
GOTOCMP 36479 !=
SETV D2 1
GOTO 36480
SETV D2 0
COMPAREV D2 0
GOTOCMP 36484 ==; Test 'if'
SETV D2 4; if() #938 Body Start
STORE D2 0.0011; if() #938 Body End
LOAD D2 0.0004; if() #553 Else End AND InlineFunc[int Choose(int)] Params Start
PUSHVARGR D2
LOAD D2 0.0003
PUSHVARGR D2
LOAD D2 0.0002
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0001
STOREV 0 0; for() #254 setup
LOAD D2 0; for() #254 LoopTest
PUSHR D2
LOAD D2 0.0006
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 36551 ==; for() #254 TestFail?
LOAD D2 0.0008; if() #939 Test AND for() #254 Body Start
PUSHR D2
LOAD D2 0
MULTV D2 2
POP D3
SUBR D3 D2
SETR D2 D3
COMPAREV D2 0
GOTOCMP 36524 <=
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
MULTV D2 2
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0007
POP D3
COMPARER D3 D2
GOTOCMP 36524 >=
SETV D2 1
GOTO 36525
SETV D2 0
COMPAREV D2 0
GOTOCMP 36547 ==; Test 'if'
LOAD D2 0.0011; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #939 Body Start
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
MULTV D2 2
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0001
PUSHR D2
PUSHV 1
PUSHARGSV 0 0.0004
PUSHV 128; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params End
CIRCLER; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body End AND if() #939 Body End
LOAD D2 0; for() #254 Body End AND for() #254 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 36493; for() #254 End
LOAD D2 0.0008; InlineFunc[int Min(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0007
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #940 Test
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0009; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 36584 ==; Test 'if'
PUSHR D4; if() #940 Body Start
LOAD D2 0.0005; UsrFunc[void EZB_DamageLink(int)] Params Start
PUSHR D2; UsrFunc[void EZB_DamageLink(int)] Params End
CALLFUNC 3.1825; UsrFunc[void EZB_DamageLink(int)] Call
POP D4; if() #940 Body End
POPARGS D5 0.0012
RETURNFUNC; Func[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Body End
SETR D4 SP2; Func[void EZB_Teleport(ffc, npc, int)] Body Start
PUSHR D4
LOAD D2 0.0002; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHARGSV -1000 0.0002
PUSHV 16; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Params End
CALLFUNC 3.6600; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Call
POP D4
POPARGS D5 0.0003
RETURNFUNC; Func[void EZB_Teleport(ffc, npc, int)] Body End
PUSHARGSV 0 0.0007; Func[void EZB_Teleport(ffc, npc, int, int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 306
STORE D2 0.0006
LOAD D2 0.0006
ANDV D2 15
STORE D2 0.0005
LOAD D2 0.0006
RSHIFTV D2 4
ANDV D2 15
STORE D2 0.0004
LOAD D2 0.0004; if() #941 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 36621 ==; Test 'if'
LOAD D2 0.0005; if() #941 Body Start
STORE D2 0.0004; if() #941 Body End
PUSHR D4
LOAD D2 0.0005; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 4; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0609; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0004; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 4; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0609; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0004
SETV D2 32; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
STOREV 0 0.0003
SETV D2 0
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFNPC
SETR NPCCOLLDET D2
SETV D2 -1000
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCYOFS D2
SETR D2 GD10
STORE D2 0.0002
STOREV 0 0.0001; for() #255 setup
LOAD D2 0.0001; for() #255 LoopTest
PUSHR D2
LOAD D2 0.0007
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 36699 ==; for() #255 TestFail?
PUSHR D4; if(true) #554 [Opt:AlwaysOn] AND for() #255 Body Start
LOAD D2 0.0012; UsrFunc[void EZB_DrawTeleport(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0010
PUSHR D2
PUSHR GD1
SETR D2 GD2
SUBV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[void EZB_DrawTeleport(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3076; UsrFunc[void EZB_DrawTeleport(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0012; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #255 Body End
LOAD D2 0.0001; for() #255 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 36662; for() #255 End
SETV D2 -1000
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCYOFS D2
SETV D3 176; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0003
STOREV 0 0.0001; for() #256 setup
LOAD D2 0.0001; for() #256 LoopTest
COMPAREV D2 352
GOTOCMP 36789 >=
PUSHR D4
LOAD D2 0.0012; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2
PUSHR D4
LOAD D2 0.0003; UsrFunc[int ComboX(int)] Params Start
PUSHR D2; UsrFunc[int ComboX(int)] Params End
CALLFUNC 2.0642; UsrFunc[int ComboX(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0003; UsrFunc[int ComboY(int)] Params Start
PUSHR D2; UsrFunc[int ComboY(int)] Params End
CALLFUNC 2.0648; UsrFunc[int ComboY(int)] Call
POP D4
PUSHR D2; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Params End
CALLFUNC 3.1597; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 36787 ==
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start
LOAD D2 0.0003; UsrFunc[int ComboX(int)] Params Start
PUSHR D2; UsrFunc[int ComboX(int)] Params End
CALLFUNC 2.0642; UsrFunc[int ComboX(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFNPC
SETR D2 NPCHXSZ
DIVV D2 2
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
LOAD D2 0.0003; UsrFunc[int ComboY(int)] Params Start
PUSHR D2; UsrFunc[int ComboY(int)] Params End
CALLFUNC 2.0648; UsrFunc[int ComboY(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFNPC
SETR D2 NPCHYSZ
DIVV D2 2
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
CALLFUNC 2.0497; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0501; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
DIVV D2 2
MULTV D2 8
ADDV D2 32
POP D3
COMPARER D3 D2
GOTOCMP 36789 >=
SETV D2 1
GOTO 36790
SETV D2 0
COMPAREV D2 0
GOTOCMP 36808 ==; for() #256 TestFail?
LOAD D2 0.0001; if() #555 Test AND for() #256 Body Start
COMPAREV D2 176
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 36801 ==; Test 'if'
LOAD D2 0.0001; if() #555 Body Start
SUBV D2 176
STORE D2 0.0003
GOTO 36804; if() #555 Body End
SETV D3 176; InlineFunc[int Rand(int)] Params AND if() #555 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0003; if() #555 Else End
LOAD D2 0.0001; for() #256 Body End AND for() #256 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 36712; for() #256 End
PUSHR D4
LOAD D2 0.0003; UsrFunc[int ComboX(int)] Params Start
PUSHR D2; UsrFunc[int ComboX(int)] Params End
CALLFUNC 2.0642; UsrFunc[int ComboX(int)] Call
POP D4
SETR GD1 D2
PUSHR D4
LOAD D2 0.0003; UsrFunc[int ComboY(int)] Params Start
PUSHR D2; UsrFunc[int ComboY(int)] Params End
CALLFUNC 2.0648; UsrFunc[int ComboY(int)] Call
POP D4
SETR GD2 D2
LOAD D2 0.0009; if() #942 Test
COMPAREV D2 -1000
GOTOCMP 36828 <=
LOAD D2 0.0008
COMPAREV D2 -1000
GOTOCMP 36828 <=
SETV D2 1
GOTO 36829
SETV D2 0
COMPAREV D2 0
GOTOCMP 36835 ==; Test 'if'
LOAD D2 0.0009; if() #942 Body Start
SETR GD1 D2
LOAD D2 0.0008
SETR GD2 D2; if() #942 Body End
PUSHR D4
LOAD D2 0.0012; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0012; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3298; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4
STOREV 0 0.0001; for() #257 setup
LOAD D2 0.0001; for() #257 LoopTest
PUSHR D2
LOAD D2 0.0007
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 36894 ==; for() #257 TestFail?
PUSHR D4; if(true) #556 [Opt:AlwaysOn] AND for() #257 Body Start
LOAD D2 0.0012; UsrFunc[void EZB_DrawTeleport(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0010
PUSHR D2
PUSHR GD1
SETR D2 GD2
SUBV D2 2
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0001
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0007
PUSHR D2; UsrFunc[void EZB_DrawTeleport(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3076; UsrFunc[void EZB_DrawTeleport(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0012; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #257 Body End
LOAD D2 0.0001; for() #257 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 36853; for() #257 End
SETV D2 -2
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCYOFS D2
LOAD D2 0.0002
SETR GD10 D2
SETV D2 1
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFNPC
SETR NPCCOLLDET D2
POPARGS D5 0.0013
RETURNFUNC; Func[void EZB_Teleport(ffc, npc, int, int, int, int)] Body End
PUSHARGSV 0 0.0003; Func[void EZB_Trail(ffc, npc, int)] Body Start
SETR D4 SP2
LOAD D2 0.0003
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0.0002
SETR D3 GD10; InlineFunc[int Game::ComboTile(int)] Params
COMBOTILE D2 D3; InlineFunc[int Game::ComboTile(int)] Body
STORE D2 0.0001
LOAD D2 0.0002; if() #944 Test
ANDV D2 1
COMPAREV D2 0
GOTOCMP 36937 !=
LOAD D2 0.0002
ANDV D2 2
COMPAREV D2 0
GOTOCMP 36937 !=
SETV D2 0
GOTO 36938
SETV D2 1
COMPAREV D2 0
GOTOCMP 36948 ==; Test 'if'
SETR D2 GD10; InlineFunc[int Game::ComboTile(int)] Params Start AND if() #944 Body Start
PUSHR D2
SETR D2 GD4
POP D3
ADDR D2 D3
SETR D3 D2; InlineFunc[int Game::ComboTile(int)] Params End
COMBOTILE D2 D3; InlineFunc[int Game::ComboTile(int)] Body
STORE D2 0.0001; if() #944 Body End
PUSHR D4
PUSHV 40; UsrFunc[lweapon CreateLWeaponAt(int, int, int)] Params Start
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCX
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCXOFS
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCY
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCYOFS
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[lweapon CreateLWeaponAt(int, int, int)] Params End
CALLFUNC 2.0704; UsrFunc[lweapon CreateLWeaponAt(int, int, int)] Call
POP D4
STORE D2 0
SETV D2 3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFLWPN
SETR LWPNEXTEND D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCTXSZ
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFLWPN
SETR LWPNTXSZ D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCTYSZ
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFLWPN
SETR LWPNTYSZ D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFLWPN
SETR LWPNYOFS D2
LOAD D2 0.0005
PUSHR D2
POP REFFFC
SETR D2 CSET
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFLWPN
SETR LWPNCSET D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFLWPN
SETR LWPNTILE D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFLWPN
SETR LWPNOTILE D2
SETV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFLWPN
SETR LWPNDRAWTYPE D2
SETV D2 8
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFLWPN
SETR LWPNDEAD D2
POPARGS D5 0.0006
RETURNFUNC; Func[void EZB_Trail(ffc, npc, int)] Body End
SETR D4 SP2; Func[int EZB_TurnDir4(int, bool)] Body Start
LOAD D2 0; if() #557 Test
COMPAREV D2 0
GOTOCMP 37106 ==; Test 'if'
LOAD D2 0.0001; if() #558 Test AND if() #557 Body Start
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 37081 ==; Test 'if'
SETV D2 2; return Start AND if() #558 Body Start
GOTO 37138; return End
GOTO 37104; if() #558 Body End
LOAD D2 0.0001; if() #559 Test AND if() #558 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 37089 ==; Test 'if'
SETV D2 3; return Start AND if() #559 Body Start
GOTO 37138; return End
GOTO 37104; if() #559 Body End
LOAD D2 0.0001; if() #560 Test AND if() #559 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 37097 ==; Test 'if'
SETV D2 1; return Start AND if() #560 Body Start
GOTO 37138; return End
GOTO 37104; if() #560 Body End
LOAD D2 0.0001; if() #945 Test AND if() #560 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 37104 ==; Test 'if'
SETV D2 0; return Start AND if() #945 Body Start
GOTO 37138; return End AND if() #945 Body End
SETV D2 0; if() #560 Else End AND if() #559 Else End AND if() #558 Else End AND return Start
GOTO 37138; return End AND if() #557 Body End
LOAD D2 0.0001; if() #561 Test AND if() #557 Else Start
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 37114 ==; Test 'if'
SETV D2 3; return Start AND if() #561 Body Start
GOTO 37138; return End
GOTO 37137; if() #561 Body End
LOAD D2 0.0001; if() #562 Test AND if() #561 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 37122 ==; Test 'if'
SETV D2 2; return Start AND if() #562 Body Start
GOTO 37138; return End
GOTO 37137; if() #562 Body End
LOAD D2 0.0001; if() #563 Test AND if() #562 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 37130 ==; Test 'if'
SETV D2 0; return Start AND if() #563 Body Start
GOTO 37138; return End
GOTO 37137; if() #563 Body End
LOAD D2 0.0001; if() #946 Test AND if() #563 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 37137 ==; Test 'if'
SETV D2 1; return Start AND if() #946 Body Start
GOTO 37138; return End AND if() #946 Body End
SETV D2 0; if() #563 Else End AND if() #562 Else End AND if() #561 Else End AND return Start
POPARGS D5 0.0002; return End AND if() #557 Else End
RETURNFUNC; Func[int EZB_TurnDir4(int, bool)] Body End
SETR D4 SP2; Func[int EZB_TurnToAngle(int, int, int)] Body Start
PUSHR D4; InlineFunc[int Abs(int)] Params Start AND if() #947 Test
LOAD D2 0.0002; UsrFunc[int EZB_AngDiff(int, int)] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int EZB_AngDiff(int, int)] Params End
CALLFUNC 3.0498; UsrFunc[int EZB_AngDiff(int, int)] Call
POP D4; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 37158 ==; Test 'if'
LOAD D2 0.0001; return Start AND if() #947 Body Start
GOTO 37177; return End AND if() #947 Body End
LOAD D2 0.0002; InlineFunc[int WrapDegrees(int)] Params Start AND return Start
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
LOAD D2 0.0002; UsrFunc[int EZB_AngDiff(int, int)] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int EZB_AngDiff(int, int)] Params End
CALLFUNC 3.0498; UsrFunc[int EZB_AngDiff(int, int)] Call
POP D4
PUSHR D2; UsrFunc[int Sign(int)] Params End
CALLFUNC 2.9954; UsrFunc[int Sign(int)] Call
POP D4
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3; InlineFunc[int WrapDegrees(int)] Params End
WRAPDEGREES D2; InlineFunc[int WrapDegrees(int)] Body
POPARGS D5 0.0003; return End
RETURNFUNC; Func[int EZB_TurnToAngle(int, int, int)] Body End
PUSHV 0; Func[void EZB_UpdateLaserArray(int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0; for() #258 setup
LOAD D2 0; for() #258 LoopTest
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 37541 ==; for() #258 TestFail?
LOAD D2 0.0003; if() #948 Test AND for() #258 Body Start
PUSHR D2
LOAD D2 0.0001
MULTV D2 6
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
COMPAREV D2 0
GOTOCMP 37537 ==; Test 'if'
LOAD D2 0.0003; if() #564 Test AND if() #948 Body Start
PUSHR D2
LOAD D2 0.0001
MULTV D2 6
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 37366 ==; Test 'if'
PUSHR D4; if() #564 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0003
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 2
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 3
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
PUSHV 0
LOAD D2 0.0002
PUSHR D2
PUSHV -1
PUSHV 0
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 7
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 4
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2016; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 7
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
ADDV D2 1
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 7
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0003; if() #949 Test
PUSHR D2
LOAD D2 0.0001
MULTV D2 7
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 4
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
POP D3
COMPARER D3 D2
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 37537 ==; Test 'if'
SETV D2 37; InlineFunc[void Game::PlaySound(int)] Params AND if() #949 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 7
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETV D2 2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 6
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; if() #949 Body End
GOTO 37537; if() #564 Body End
LOAD D2 0.0003; if() #950 Test AND if() #564 Else Start
PUSHR D2
LOAD D2 0.0001
MULTV D2 6
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 37537 ==; Test 'if'
PUSHR D4; if() #950 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0003
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 2
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 3
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 8
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
PUSHV 1
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 7
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 5
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2016; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 7
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
ADDV D2 1
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 7
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0003; if() #951 Test
PUSHR D2
LOAD D2 0.0001
MULTV D2 7
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 5
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
POP D3
COMPARER D3 D2
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 37537 ==; Test 'if'
SETV D2 0; if() #951 Body Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 7
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 6
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; if() #951 Body End
LOAD D2 0; if() #950 Body End AND if() #564 Else End AND if() #948 Body End AND for() #258 Body End AND for() #258 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 37182; for() #258 End
POPARGS D5 0.0004
RETURNFUNC; Func[void EZB_UpdateLaserArray(int, int, int)] Body End
PUSHV 0; Func[void EZB_Waitframes(ffc, npc, int, int)] Body Start
SETR D4 SP2
STOREV 0 0; for() #259 setup
LOAD D2 0; for() #259 LoopTest
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 37567 ==; for() #259 TestFail?
PUSHR D4; for() #259 Body Start
LOAD D2 0.0004; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.3876; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #259 Body End
LOAD D2 0; for() #259 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 37546; for() #259 End
POPARGS D5 0.0005
RETURNFUNC; Func[void EZB_Waitframes(ffc, npc, int, int)] Body End


PUSHR D0; void run(int, int, int, int, int, int, int) Params
PUSHR D1
PUSHR D2
PUSHR D3
PUSHR D4
PUSHR D5
PUSHR D6
PUSHR REFFFC; void run(int, int, int, int, int, int, int) Body Start
SETR D4 SP2
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #31 Body [Opt:AlwaysOn]
GOTO 10; while() #31 End AND [Opt:NeverRet] AND void run(int, int, int, int, int, int, int) Body End


PUSHR D0; void run(int, int, int, int, int, int, int, int) Params
PUSHR D1
PUSHR D2
PUSHR D3
PUSHR D4
PUSHR D5
PUSHR D6
PUSHR D7
PUSHR REFFFC; void run(int, int, int, int, int, int, int, int) Body Start
SETR D4 SP2
LOAD D2 0.0008; if() #1252 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 27 ==; Test 'if'
PUSHR D4; if() #1252 Body Start
LOAD D2 0.0007; UsrFunc[void EZBE_ExpandingCircle(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[void EZBE_ExpandingCircle(int, int, int, int)] Params End
CALLFUNC 0.1670; UsrFunc[void EZBE_ExpandingCircle(int, int, int, int)] Call
POP D4; if() #1252 Body End
LOAD D2 0.0008; if() #1253 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 49 ==; Test 'if'
PUSHR D4; if() #1253 Body Start
LOAD D2 0.0007; UsrFunc[void EZBE_WallBounce(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[void EZBE_WallBounce(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.3703; UsrFunc[void EZBE_WallBounce(int, int, int, int, int, int, int)] Call
POP D4; if() #1253 Body End
LOAD D2 0.0008; if() #1254 Test
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 69 ==; Test 'if'
LOAD D2 0.0007; UsrFunc[void EZBE_HelmasaurShot(int, int, int, int, int, int, int)] Params Start AND if() #1254 Body Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[void EZBE_HelmasaurShot(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1800; UsrFunc[void EZBE_HelmasaurShot(int, int, int, int, int, int, int)] Call AND [Opt:NeverRet] AND if() #1254 Body End
LOAD D2 0.0008; if() #1255 Test
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 91 ==; Test 'if'
PUSHR D4; if() #1255 Body Start
LOAD D2 0.0007; UsrFunc[bool EZBE_Lightning(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[bool EZBE_Lightning(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2220; UsrFunc[bool EZBE_Lightning(int, int, int, int, int, int, int)] Call
POP D4; if() #1255 Body End
LOAD D2 0.0008; if() #1256 Test
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 113 ==; Test 'if'
PUSHR D4; if() #1256 Body Start
LOAD D2 0.0007; UsrFunc[bool EZBE_LightningSingle(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[bool EZBE_LightningSingle(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.3273; UsrFunc[bool EZBE_LightningSingle(int, int, int, int, int, int, int)] Call
POP D4; if() #1256 Body End
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
POPARGS D5 0.0009
QUIT; void run(int, int, int, int, int, int, int, int) Body End
SETR D4 SP2; Func[int DirNormal(int)] Body Start
LOAD D2 0; switch() #15 Key
SETR SWITCHKEY D2; Store key
COMPAREV SWITCHKEY 8
GOTOCMP 144 ==; case '80000'
COMPAREV SWITCHKEY 9
GOTOCMP 146 ==; case '90000'
COMPAREV SWITCHKEY 10
GOTOCMP 148 ==; case '100000'
COMPAREV SWITCHKEY 11
GOTOCMP 150 ==; case '110000'
COMPAREV SWITCHKEY 12
GOTOCMP 152 ==; case '120000'
COMPAREV SWITCHKEY 13
GOTOCMP 154 ==; case '130000'
COMPAREV SWITCHKEY 14
GOTOCMP 156 ==; case '140000'
COMPAREV SWITCHKEY 15
GOTOCMP 158 ==; case '150000'
GOTO 160; switch() #15 NoMatch
SETV D2 0; Case block AND return Start
GOTO 161; return End
SETV D2 5; Case block AND return Start
GOTO 161; return End
SETV D2 3; Case block AND return Start
GOTO 161; return End
SETV D2 7; Case block AND return Start
GOTO 161; return End
SETV D2 1; Case block AND return Start
GOTO 161; return End
SETV D2 6; Case block AND return Start
GOTO 161; return End
SETV D2 2; Case block AND return Start
GOTO 161; return End
SETV D2 4; Case block AND return Start
GOTO 161; return End
LOAD D2 0; Case block AND return Start
POP D5; return End
RETURNFUNC; Func[int DirNormal(int)] Body End
SETR D4 SP2; Func[int Angle(int, int, int, int)] Body Start
LOAD D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start AND return Start
PUSHR D2
LOAD D2 0.0003
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
SETR D3 D2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
POPARGS D5 0.0004; return End
RETURNFUNC; Func[int Angle(int, int, int, int)] Body End
SETR D4 SP2; Func[int Rand(int, int)] Body Start
SETV D2 0; InlineFunc[int randgen::Rand(int, int)] Params Start AND return Start
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0001
SETR D3 D2; InlineFunc[int randgen::Rand(int, int)] Params End
POP D2; InlineFunc[int randgen::Rand(int, int)] Body Start
POP REFRNG
RNGRAND3 D2 D3; InlineFunc[int randgen::Rand(int, int)] Body End
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int Rand(int, int)] Body End
SETR D4 SP2; Func[int ComboAt(int, int)] Body Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int VBound(int, int, int)] Params Start
PUSHR D2
PUSHV 255
PUSHV 0; UsrFunc[int VBound(int, int, int)] Params End
CALLFUNC 0.0220; UsrFunc[int VBound(int, int, int)] Call
POP D4
STORE D2 0.0001
PUSHR D4
LOAD D2 0; UsrFunc[int VBound(int, int, int)] Params Start
PUSHR D2
PUSHV 175
PUSHV 0; UsrFunc[int VBound(int, int, int)] Params End
CALLFUNC 0.0220; UsrFunc[int VBound(int, int, int)] Call
POP D4
STORE D2 0
LOAD D2 0; return Start
ANDV D2 240
PUSHR D2
LOAD D2 0.0001
RSHIFTV D2 4
POP D3
ADDR D2 D3
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int ComboAt(int, int)] Body End
SETR D4 SP2; Func[int VBound(int, int, int)] Body Start
LOAD D2 0.0002; if() #348 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 232 ==; Test 'if'
LOAD D2 0; if() #348 Body Start
STORE D2 0.0002
GOTO 242; if() #348 Body End
LOAD D2 0.0002; if() #581 Test AND if() #348 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 242 ==; Test 'if'
LOAD D2 0.0001; if() #581 Body Start
STORE D2 0.0002; if() #581 Body End
LOAD D2 0.0002; if() #348 Else End AND return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[int VBound(int, int, int)] Body End
PUSHV 0; Func[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0003; if() #178 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 258 ==; Test 'if'
PUSHR D4; if() #178 Body Start
LOAD D2 0.0009; UsrFunc[int GetDefaultEWeaponSprite(int)] Params Start
PUSHR D2; UsrFunc[int GetDefaultEWeaponSprite(int)] Params End
CALLFUNC 0.0395; UsrFunc[int GetDefaultEWeaponSprite(int)] Call
POP D4
STORE D2 0.0003; if() #178 Body End
LOAD D2 0.0002; if() #179 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 269 ==; Test 'if'
PUSHR D4; if() #179 Body Start
LOAD D2 0.0009; UsrFunc[int GetDefaultEWeaponSound(int)] Params Start
PUSHR D2; UsrFunc[int GetDefaultEWeaponSound(int)] Params End
CALLFUNC 0.0555; UsrFunc[int GetDefaultEWeaponSound(int)] Call
POP D4
STORE D2 0.0002; if() #179 Body End
LOAD D2 0.0009; InlineFunc[eweapon screendata::CreateEWeapon(int)] Params
CREATEEWEAPONR D2; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body Start
SETR D2 REFEWPN; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body End
STORE D2 0
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNX D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNY D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNPOWER D2
SETV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNANGULAR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
LOAD D2 0.0003; if() #180 Test
COMPAREV D2 0
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 339 ==; Test 'if'
LOAD D2 0; InlineFunc[void eweapon::UseSprite(int)] Params Start AND if() #180 Body Start
PUSHR D2
LOAD D2 0.0003; InlineFunc[void eweapon::UseSprite(int)] Params End
POP D3; InlineFunc[void eweapon::UseSprite(int)] Body Start
SETR REFEWPN D3
EWPNUSESPRITER D2; InlineFunc[void eweapon::UseSprite(int)] Body End AND if() #180 Body End
LOAD D2 0.0001
ORV D2 512
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.0608; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0.0001; if() #181 Test
ANDV D2 32
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 373 ==; Test 'if'
SETV D2 0; if() #181 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNCOLLDET D2; if() #181 Body End
LOAD D2 0; if() #182 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 390 ==; Test 'if'
PUSHR D4; if() #182 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.0718; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #182 Body End
LOAD D2 0.0002; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
LOAD D2 0; return Start
POPARGS D5 0.0010; return End
RETURNFUNC; Func[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0003; Func[int GetDefaultEWeaponSprite(int)] Body Start
SETR D4 SP2
LOAD D2 0.0003; if() #58 Test
COMPAREV D2 129
GOTOCMP 405 ==
LOAD D2 0.0003
COMPAREV D2 145
GOTOCMP 405 ==
SETV D2 0
GOTO 406
SETV D2 1
COMPAREV D2 0
GOTOCMP 410 ==; Test 'if'
SETV D2 17; return Start AND if() #58 Body Start
GOTO 553; return End AND if() #58 Body End
LOAD D2 0.0003; if() #59 Test AND if() #58 Else Start
COMPAREV D2 133
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 417 ==; Test 'if'
SETV D2 18; return Start AND if() #59 Body Start
GOTO 553; return End AND if() #59 Body End
LOAD D2 0.0003; if() #60 Test AND if() #59 Else Start
COMPAREV D2 130
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 424 ==; Test 'if'
SETV D2 19; return Start AND if() #60 Body Start
GOTO 553; return End AND if() #60 Body End
LOAD D2 0.0003; if() #61 Test AND if() #60 Else Start
COMPAREV D2 140
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 431 ==; Test 'if'
SETV D2 35; return Start AND if() #61 Body Start
GOTO 553; return End AND if() #61 Body End
LOAD D2 0.0003; if() #62 Test AND if() #61 Else Start
COMPAREV D2 142
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 438 ==; Test 'if'
SETV D2 81; return Start AND if() #62 Body Start
GOTO 553; return End AND if() #62 Body End
LOAD D2 0.0003; if() #63 Test AND if() #62 Else Start
COMPAREV D2 139
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 445 ==; Test 'if'
SETV D2 80; return Start AND if() #63 Body Start
GOTO 553; return End AND if() #63 Body End
LOAD D2 0.0003; if() #64 Test AND if() #63 Else Start
COMPAREV D2 134
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 452 ==; Test 'if'
SETV D2 21; return Start AND if() #64 Body Start
GOTO 553; return End AND if() #64 Body End
LOAD D2 0.0003; if() #65 Test AND if() #64 Else Start
COMPAREV D2 132
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 459 ==; Test 'if'
SETV D2 20; return Start AND if() #65 Body Start
GOTO 553; return End AND if() #65 Body End
LOAD D2 0.0003; if() #66 Test AND if() #65 Else Start
COMPAREV D2 141
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 466 ==; Test 'if'
SETV D2 36; return Start AND if() #66 Body Start
GOTO 553; return End AND if() #66 Body End
LOAD D2 0.0003; if() #67 Test AND if() #66 Else Start
COMPAREV D2 137
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 473 ==; Test 'if'
SETV D2 76; return Start AND if() #67 Body Start
GOTO 553; return End AND if() #67 Body End
LOAD D2 0.0003; if() #68 Test AND if() #67 Else Start
COMPAREV D2 138
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 480 ==; Test 'if'
SETV D2 77; return Start AND if() #68 Body Start
GOTO 553; return End AND if() #68 Body End
LOAD D2 0.0003; if() #69 Test AND if() #68 Else Start
COMPAREV D2 131
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 552 ==; Test 'if'
STOREV 0 0.0002; if() #69 Body Start
STOREV 0 0.0001
STOREV 0 0; for() #48 setup
LOAD D2 0; for() #48 LoopTest
COMPAREV D2 256
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 536 ==; for() #48 TestFail?
LOAD D2 0; unless() #211 Test AND for() #48 Body Start
PUSHR D2
POP D0
SETR D2 LINKITEMD
COMPAREV D2 0
GOTOCMP 532 ==; Test 'unless' AND continue 1; AND unless() #211 Body
LOAD D2 0; InlineFunc[itemdata Game::LoadItemData(int)] Params
LOADITEMDATAR D2; InlineFunc[itemdata Game::LoadItemData(int)] Body Start
SETR D2 REFITEMCLASS; InlineFunc[itemdata Game::LoadItemData(int)] Body End
STORE D2 0.0001
LOAD D2 0.0001; if() #212 Test
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATAFAMILY
COMPAREV D2 1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 532 !=; Test 'if' AND continue 1; AND if() #212 Body
LOAD D2 0.0001; if() #213 Test
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATALEVEL
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 532 ==; Test 'if'
LOAD D2 0.0001; if() #213 Body Start
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATALEVEL
STORE D2 0.0002
LOAD D2 0.0002; if() #214 Test
COMPAREV D2 3
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 536 !=; Test 'if' AND break 1; AND if() #214 Body
LOAD D2 0; if() #213 Body End AND for() #48 Body End AND for() #48 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 488; for() #48 End
LOAD D2 0.0002; if() #70 Test
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 543 ==; Test 'if'
SETV D2 4; return Start AND if() #70 Body Start
GOTO 553; return End AND if() #70 Body End
LOAD D2 0.0002; if() #71 Test AND if() #70 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 550 ==; Test 'if'
SETV D2 5; return Start AND if() #71 Body Start
GOTO 553; return End AND if() #71 Body End
SETV D2 6; return Start AND if() #71 Else Start
GOTO 553; return End AND if() #71 Else End AND if() #70 Else End AND if() #69 Body End
SETV D2 0; return Start AND if() #69 Else Start
POPARGS D5 0.0004; return End AND if() #69 Else End AND if() #68 Else End AND if() #67 Else End AND if() #66 Else End AND if() #65 Else End AND if() #64 Else End AND if() #63 Else End AND if() #62 Else End AND if() #61 Else End AND if() #60 Else End AND if() #59 Else End AND if() #58 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSprite(int)] Body End
SETR D4 SP2; Func[int GetDefaultEWeaponSound(int)] Body Start
LOAD D2 0; if() #54 Test
COMPAREV D2 129
GOTOCMP 564 ==
LOAD D2 0
COMPAREV D2 145
GOTOCMP 564 ==
SETV D2 0
GOTO 565
SETV D2 1
COMPAREV D2 0
GOTOCMP 569 ==; Test 'if'
SETV D2 40; return Start AND if() #54 Body Start
GOTO 606; return End AND if() #54 Body End
LOAD D2 0; if() #55 Test AND if() #54 Else Start
COMPAREV D2 134
GOTOCMP 577 ==
LOAD D2 0
COMPAREV D2 141
GOTOCMP 577 ==
SETV D2 0
GOTO 578
SETV D2 1
COMPAREV D2 0
GOTOCMP 582 ==; Test 'if'
SETV D2 32; return Start AND if() #55 Body Start
GOTO 606; return End AND if() #55 Body End
LOAD D2 0; if() #56 Test AND if() #55 Else Start
COMPAREV D2 140
GOTOCMP 593 ==
LOAD D2 0
COMPAREV D2 142
GOTOCMP 593 ==
LOAD D2 0
COMPAREV D2 139
GOTOCMP 593 ==
SETV D2 0
GOTO 594
SETV D2 1
COMPAREV D2 0
GOTOCMP 598 ==; Test 'if'
SETV D2 13; return Start AND if() #56 Body Start
GOTO 606; return End AND if() #56 Body End
LOAD D2 0; if() #57 Test AND if() #56 Else Start
COMPAREV D2 133
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 605 ==; Test 'if'
SETV D2 51; return Start AND if() #57 Body Start
GOTO 606; return End AND if() #57 Body End
SETV D2 0; return Start AND if() #57 Else Start
POP D5; return End AND if() #57 Else End AND if() #56 Else End AND if() #55 Else End AND if() #54 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSound(int)] Body End
PUSHARGSV 0 0.0002; Func[void SetEWeaponDir(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
MODV D2 6.2832
STORE D2 0.0001
STOREV 0 0
LOAD D2 0.0001; if() #518 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 625 ==; Test 'if'
LOAD D2 0.0001; if() #518 Body Start
ADDV D2 6.2832
STORE D2 0.0001; if() #518 Body End
LOAD D2 0.0001; if() #247 Test
COMPAREV D2 0.3927
GOTOCMP 633 <
LOAD D2 0.0001
COMPAREV D2 5.8905
GOTOCMP 633 >
SETV D2 0
GOTO 634
SETV D2 1
COMPAREV D2 0
GOTOCMP 639 ==; Test 'if'
SETV D2 3; if() #247 Body Start
STORE D2 0
GOTO 689; if() #247 Body End
LOAD D2 0.0001; if() #248 Test AND if() #247 Else Start
COMPAREV D2 1.1781
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 647 ==; Test 'if'
SETV D2 7; if() #248 Body Start
STORE D2 0
GOTO 689; if() #248 Body End
LOAD D2 0.0001; if() #249 Test AND if() #248 Else Start
COMPAREV D2 1.9635
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 655 ==; Test 'if'
SETV D2 1; if() #249 Body Start
STORE D2 0
GOTO 689; if() #249 Body End
LOAD D2 0.0001; if() #250 Test AND if() #249 Else Start
COMPAREV D2 2.7489
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 663 ==; Test 'if'
SETV D2 6; if() #250 Body Start
STORE D2 0
GOTO 689; if() #250 Body End
LOAD D2 0.0001; if() #251 Test AND if() #250 Else Start
COMPAREV D2 3.5343
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 671 ==; Test 'if'
SETV D2 2; if() #251 Body Start
STORE D2 0
GOTO 689; if() #251 Body End
LOAD D2 0.0001; if() #252 Test AND if() #251 Else Start
COMPAREV D2 4.3197
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 679 ==; Test 'if'
SETV D2 4; if() #252 Body Start
STORE D2 0
GOTO 689; if() #252 Body End
LOAD D2 0.0001; if() #253 Test AND if() #252 Else Start
COMPAREV D2 5.1051
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 687 ==; Test 'if'
SETV D2 0; if() #253 Body Start
STORE D2 0
GOTO 689; if() #253 Body End
SETV D2 5; if() #253 Else Start
STORE D2 0; if() #253 Else End
LOAD D2 0.0002; if() #252 Else End AND if() #251 Else End AND if() #250 Else End AND if() #249 Else End AND if() #248 Else End AND if() #247 Else End AND if() #519 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 707 ==; Test 'if'
PUSHR D4; if() #519 Body Start
LOAD D2 0; UsrFunc[int __UnblockableDir(int)] Params Start
PUSHR D2; UsrFunc[int __UnblockableDir(int)] Params End
CALLFUNC 0.0883; UsrFunc[int __UnblockableDir(int)] Call
POP D4
STORE D2 0; if() #519 Body End
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDIR D2
POPARGS D5 0.0003
RETURNFUNC; Func[void SetEWeaponDir(eweapon)] Body End
PUSHV 0; Func[void SetEWeaponRotation(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #271 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 801 ==; Test 'if'
LOAD D2 0.0001; if() #271 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
MODV D2 6.2832
STORE D2 0
LOAD D2 0; if() #524 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 740 ==; Test 'if'
LOAD D2 0; if() #524 Body Start
ADDV D2 6.2832
STORE D2 0; if() #524 Body End
LOAD D2 0; if() #272 Test
COMPAREV D2 0.7854
GOTOCMP 748 <
LOAD D2 0
COMPAREV D2 5.4978
GOTOCMP 748 >
SETV D2 0
GOTO 749
SETV D2 1
COMPAREV D2 0
GOTOCMP 761 ==; Test 'if'
SETV D2 4; if() #272 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2
GOTO 881; if() #272 Body End
LOAD D2 0; if() #273 Test AND if() #272 Else Start
COMPAREV D2 2.3562
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 776 ==; Test 'if'
SETV D2 3; if() #273 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2
GOTO 881; if() #273 Body End
LOAD D2 0; if() #274 Test AND if() #273 Else Start
COMPAREV D2 3.9270
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 791 ==; Test 'if'
SETV D2 7; if() #274 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2
GOTO 881; if() #274 Body End
SETV D2 0; if() #274 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2; if() #274 Else End
GOTO 881; if() #273 Else End AND if() #272 Else End AND if() #271 Body End
PUSHR D4; if() #271 Else Start
LOAD D2 0.0001; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2
POP REFEWPN
PUSHR EWPNDIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.0943; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #275 Test
COMPAREV D2 0
GOTOCMP 820 ==
LOAD D2 0
COMPAREV D2 5
GOTOCMP 820 ==
LOAD D2 0
COMPAREV D2 4
GOTOCMP 820 ==
SETV D2 0
GOTO 821
SETV D2 1
COMPAREV D2 0
GOTOCMP 833 ==; Test 'if'
SETV D2 0; if() #275 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2
GOTO 881; if() #275 Body End
LOAD D2 0; if() #276 Test AND if() #275 Else Start
COMPAREV D2 1
GOTOCMP 844 ==
LOAD D2 0
COMPAREV D2 7
GOTOCMP 844 ==
LOAD D2 0
COMPAREV D2 6
GOTOCMP 844 ==
SETV D2 0
GOTO 845
SETV D2 1
COMPAREV D2 0
GOTOCMP 857 ==; Test 'if'
SETV D2 3; if() #276 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2
GOTO 881; if() #276 Body End
LOAD D2 0; if() #277 Test AND if() #276 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 872 ==; Test 'if'
SETV D2 7; if() #277 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2
GOTO 881; if() #277 Body End
SETV D2 4; if() #277 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2; if() #277 Else End
POPARGS D5 0.0002; if() #276 Else End AND if() #275 Else End AND if() #271 Else End
RETURNFUNC; Func[void SetEWeaponRotation(eweapon)] Body End
SETR D4 SP2; Func[int __UnblockableDir(int)] Body Start
LOAD D2 0; if() #715 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 891 ==; Test 'if'
SETV D2 8; return Start AND if() #715 Body Start
GOTO 941; return End AND if() #715 Body End
LOAD D2 0; if() #716 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 898 ==; Test 'if'
SETV D2 12; return Start AND if() #716 Body Start
GOTO 941; return End AND if() #716 Body End
LOAD D2 0; if() #717 Test
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 905 ==; Test 'if'
SETV D2 14; return Start AND if() #717 Body Start
GOTO 941; return End AND if() #717 Body End
LOAD D2 0; if() #718 Test
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 912 ==; Test 'if'
SETV D2 10; return Start AND if() #718 Body Start
GOTO 941; return End AND if() #718 Body End
LOAD D2 0; if() #719 Test
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 919 ==; Test 'if'
SETV D2 15; return Start AND if() #719 Body Start
GOTO 941; return End AND if() #719 Body End
LOAD D2 0; if() #720 Test
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 926 ==; Test 'if'
SETV D2 9; return Start AND if() #720 Body Start
GOTO 941; return End AND if() #720 Body End
LOAD D2 0; if() #721 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 933 ==; Test 'if'
SETV D2 13; return Start AND if() #721 Body Start
GOTO 941; return End AND if() #721 Body End
LOAD D2 0; if() #722 Test
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 940 ==; Test 'if'
SETV D2 11; return Start AND if() #722 Body Start
GOTO 941; return End AND if() #722 Body End
LOAD D2 0; return Start
POP D5; return End
RETURNFUNC; Func[int __UnblockableDir(int)] Body End
SETR D4 SP2; Func[int __NormalizeDir(int)] Body Start
LOAD D2 0; if() #701 Test
COMPAREV D2 0
GOTOCMP 952 <
LOAD D2 0
COMPAREV D2 7
GOTOCMP 952 >
SETV D2 1
GOTO 953
SETV D2 0
COMPAREV D2 0
GOTOCMP 957 ==; Test 'if'
LOAD D2 0; return Start AND if() #701 Body Start
GOTO 1014; return End AND if() #701 Body End
LOAD D2 0; if() #702 Test
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 964 ==; Test 'if'
SETV D2 0; return Start AND if() #702 Body Start
GOTO 1014; return End AND if() #702 Body End
LOAD D2 0; if() #703 Test
COMPAREV D2 9
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 971 ==; Test 'if'
SETV D2 5; return Start AND if() #703 Body Start
GOTO 1014; return End AND if() #703 Body End
LOAD D2 0; if() #704 Test
COMPAREV D2 10
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 978 ==; Test 'if'
SETV D2 3; return Start AND if() #704 Body Start
GOTO 1014; return End AND if() #704 Body End
LOAD D2 0; if() #705 Test
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 985 ==; Test 'if'
SETV D2 7; return Start AND if() #705 Body Start
GOTO 1014; return End AND if() #705 Body End
LOAD D2 0; if() #706 Test
COMPAREV D2 12
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 992 ==; Test 'if'
SETV D2 1; return Start AND if() #706 Body Start
GOTO 1014; return End AND if() #706 Body End
LOAD D2 0; if() #707 Test
COMPAREV D2 13
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 999 ==; Test 'if'
SETV D2 6; return Start AND if() #707 Body Start
GOTO 1014; return End AND if() #707 Body End
LOAD D2 0; if() #708 Test
COMPAREV D2 14
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1006 ==; Test 'if'
SETV D2 2; return Start AND if() #708 Body Start
GOTO 1014; return End AND if() #708 Body End
LOAD D2 0; if() #709 Test
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1013 ==; Test 'if'
SETV D2 4; return Start AND if() #709 Body Start
GOTO 1014; return End AND if() #709 Body End
SETV D2 0; return Start
POP D5; return End
RETURNFUNC; Func[int __NormalizeDir(int)] Body End
SETR D4 SP2; Func[int VectorX(int, int)] Body Start
LOAD D2 0; InlineFunc[int Cos(int)] Params Start AND return Start
SETR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int VectorX(int, int)] Body End
SETR D4 SP2; Func[int VectorY(int, int)] Body Start
LOAD D2 0; InlineFunc[int Sin(int)] Params Start AND return Start
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int VectorY(int, int)] Body End
SETR D4 SP2; Func[int InFrontX(int, int)] Body Start
PUSHR D4; switch() #28 Key
LOAD D2 0.0001; UsrFunc[int DirNormal(int)] Params Start
PUSHR D2; UsrFunc[int DirNormal(int)] Params End
CALLFUNC 0.0124; UsrFunc[int DirNormal(int)] Call
POP D4
SETR SWITCHKEY D2; Store key
COMPAREV SWITCHKEY 2
GOTOCMP 1048 ==; case '20000'
COMPAREV SWITCHKEY 3
GOTOCMP 1051 ==; case '30000'
GOTO 1054; switch() #28 NoMatch
LOAD D2 0; Case block AND return Start
SUBV D2 16
GOTO 1055; return End
LOAD D2 0; Case block AND return Start
SUBV2 16 D2
GOTO 1055; return End
SETV D2 0; Case block AND return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int InFrontX(int, int)] Body End
SETR D4 SP2; Func[int InFrontY(int, int)] Body Start
PUSHR D4; switch() #29 Key
LOAD D2 0.0001; UsrFunc[int DirNormal(int)] Params Start
PUSHR D2; UsrFunc[int DirNormal(int)] Params End
CALLFUNC 0.0124; UsrFunc[int DirNormal(int)] Call
POP D4
SETR SWITCHKEY D2; Store key
COMPAREV SWITCHKEY 0
GOTOCMP 1069 ==; case '0'
COMPAREV SWITCHKEY 1
GOTOCMP 1072 ==; case '10000'
GOTO 1075; switch() #29 NoMatch
LOAD D2 0; Case block AND return Start
SUBV D2 16
GOTO 1076; return End
LOAD D2 0; Case block AND return Start
SUBV2 16 D2
GOTO 1076; return End
SETV D2 0; Case block AND return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int InFrontY(int, int)] Body End
SETR D4 SP2; Func[void SetEWeaponDeathEffect(eweapon, int, int)] Body Start
LOAD D2 0.0001; if() #516 Test
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1097 ==; Test 'if'
LOAD D2 0; if() #517 Test AND if() #516 Body Start
COMPAREV D2 1
GOTOCMP 1092 <
LOAD D2 0
COMPAREV D2 511
GOTOCMP 1092 >
SETV D2 0
GOTO 1093
SETV D2 1
COMPAREV D2 0
GOTOCMP 1097 ==; Test 'if'
SETV D2 1; if() #517 Body Start
STORE D2 0.0001; if() #517 Body End
LOAD D2 0.0001; if() #516 Body End
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 13
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 14
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0002
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ORV D2 512
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
POPARGS D5 0.0003
RETURNFUNC; Func[void SetEWeaponDeathEffect(eweapon, int, int)] Body End
SETR D4 SP2; Func[void SetEWeaponLifespan(eweapon, int, int)] Body Start
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 11
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 12
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0002
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ORV D2 512
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
POPARGS D5 0.0003
RETURNFUNC; Func[void SetEWeaponLifespan(eweapon, int, int)] Body End
SETR D4 SP2; Func[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Body Start
LOAD D2 0.0008; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0003
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0007; InlineFunc[int Distance(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 1
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
PUSHR D4
LOAD D2 0.0007; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 0.0163; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
RECTR; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0012; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS D5 0.0009
RETURNFUNC; Func[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Body End
PUSHARGSV 0 0.0003; Func[bool EZBE_CanWalk(int, int, int, int, bool)] Body Start
SETR D4 SP2
STOREV 8 0.0002
LOAD D2 0.0007
ADDV D2 15
STORE D2 0.0001
LOAD D2 0.0006
ADDV D2 15
STORE D2 0
LOAD D2 0.0003; if() #1216 Test
COMPAREV D2 0
GOTOCMP 1262 ==; Test 'if'
SETV D2 0; if() #1216 Body Start
STORE D2 0.0002; if() #1216 Body End
LOAD D2 0.0005; if() #676 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1334 ==; Test 'if'
LOAD D2 0.0006; return Start AND if() #676 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
SETR D2 D3
COMPAREV D2 0
GOTOCMP 1329 <
PUSHR D4
LOAD D2 0.0007; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 0.1530; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1329 !=
PUSHR D4
LOAD D2 0.0007; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
ADDV D2 8
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 0.1530; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1329 !=
PUSHR D4
LOAD D2 0.0001; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 0.1530; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1329 !=
SETV D2 0
GOTO 1330
SETV D2 1
COMPAREV D2 0
SETCMP D2 I==
GOTO 1528; return End
GOTO 1527; if() #676 Body End
LOAD D2 0.0005; if() #677 Test AND if() #676 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1393 ==; Test 'if'
LOAD D2 0; return Start AND if() #677 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
COMPAREV D2 176
GOTOCMP 1388 >=
PUSHR D4
LOAD D2 0.0007; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 0.1530; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1388 !=
PUSHR D4
LOAD D2 0.0007; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
ADDV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 0.1530; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1388 !=
PUSHR D4
LOAD D2 0.0001; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 0.1530; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1388 !=
SETV D2 0
GOTO 1389
SETV D2 1
COMPAREV D2 0
SETCMP D2 I==
GOTO 1528; return End
GOTO 1527; if() #677 Body End
LOAD D2 0.0005; if() #678 Test AND if() #677 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1461 ==; Test 'if'
LOAD D2 0.0007; return Start AND if() #678 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
SETR D2 D3
COMPAREV D2 0
GOTOCMP 1456 <
PUSHR D4
LOAD D2 0.0007; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 0.1530; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1456 !=
PUSHR D4
LOAD D2 0.0007; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
ADDV D2 7
PUSHR D2; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 0.1530; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1456 !=
PUSHR D4
LOAD D2 0.0007; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0
PUSHR D2; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 0.1530; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1456 !=
SETV D2 0
GOTO 1457
SETV D2 1
COMPAREV D2 0
SETCMP D2 I==
GOTO 1528; return End
GOTO 1527; if() #678 Body End
LOAD D2 0.0005; if() #1217 Test AND if() #678 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1527 ==; Test 'if'
LOAD D2 0.0001; return Start AND if() #1217 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
COMPAREV D2 256
GOTOCMP 1523 >=
PUSHR D4
LOAD D2 0.0001; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 0.1530; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1523 !=
PUSHR D4
LOAD D2 0.0001; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
ADDV D2 7
PUSHR D2; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 0.1530; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1523 !=
PUSHR D4
LOAD D2 0.0001; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 0.1530; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1523 !=
SETV D2 0
GOTO 1524
SETV D2 1
COMPAREV D2 0
SETCMP D2 I==
GOTO 1528; return End AND if() #1217 Body End
SETV D2 0; if() #678 Else End AND if() #677 Else End AND if() #676 Else End AND return Start
POPARGS D5 0.0008; return End
RETURNFUNC; Func[bool EZBE_CanWalk(int, int, int, int, bool)] Body End
PUSHV 0; Func[bool EZBE_isSolid(int, int)] Body Start
SETR D4 SP2
PUSHR D4
LOAD D2 0.0002; UsrFunc[int ComboAt(int, int)] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int ComboAt(int, int)] Params End
CALLFUNC 0.0194; UsrFunc[int ComboAt(int, int)] Call
POP D4
PUSHR D2
POP D0
SETR D2 COMBOTD
STORE D2 0
LOAD D2 0; if() #1242 Test
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1550 ==; Test 'if'
SETV D2 0; return Start AND if() #1242 Body Start
GOTO 1604; return End AND if() #1242 Body End
LOAD D2 0; if() #1243 Test
COMPAREV D2 63
GOTOCMP 1561 ==
LOAD D2 0
COMPAREV D2 42
GOTOCMP 1561 ==
LOAD D2 0
COMPAREV D2 20
GOTOCMP 1561 ==
SETV D2 0
GOTO 1562
SETV D2 1
COMPAREV D2 0
GOTOCMP 1566 ==; Test 'if'
SETV D2 0; return Start AND if() #1243 Body Start
GOTO 1604; return End AND if() #1243 Body End
LOAD D2 0; if() #1244 Test
COMPAREV D2 18
GOTOCMP 1577 ==
LOAD D2 0
COMPAREV D2 86
GOTOCMP 1575 <
LOAD D2 0
COMPAREV D2 88
GOTOCMP 1577 <=
SETV D2 0
GOTO 1578
SETV D2 1
COMPAREV D2 0
GOTOCMP 1582 ==; Test 'if'
SETV D2 0; return Start AND if() #1244 Body Start
GOTO 1604; return End AND if() #1244 Body End
LOAD D2 0; if() #1245 Test
COMPAREV D2 19
GOTOCMP 1593 ==
LOAD D2 0
COMPAREV D2 89
GOTOCMP 1591 <
LOAD D2 0
COMPAREV D2 91
GOTOCMP 1593 <=
SETV D2 0
GOTO 1594
SETV D2 1
COMPAREV D2 0
GOTOCMP 1598 ==; Test 'if'
SETV D2 0; return Start AND if() #1245 Body Start
GOTO 1604; return End AND if() #1245 Body End
LOAD D2 0.0002; InlineFunc[bool screendata::isSolid(int, int)] Params Start AND return Start
PUSHR D2
LOAD D2 0.0001
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
POPARGS D5 0.0003; return End
RETURNFUNC; Func[bool EZBE_isSolid(int, int)] Body End
PUSHV 0; Func[void EZBE_DamageLink(int)] Body Start
SETR D4 SP2
PUSHR D4
PUSHV 40; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
SETR D2 LINKX
PUSHR D2
PUSHR D4
PUSHR LINKDIR; UsrFunc[int InFrontX(int, int)] Params Start
PUSHV 12; UsrFunc[int InFrontX(int, int)] Params End
CALLFUNC 0.1036; UsrFunc[int InFrontX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
SETR D2 LINKY
PUSHR D2
PUSHR D4
PUSHR LINKDIR; UsrFunc[int InFrontY(int, int)] Params Start
PUSHV 12; UsrFunc[int InFrontY(int, int)] Params End
CALLFUNC 0.1057; UsrFunc[int InFrontY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHARGSV 0 0.0002
LOAD D2 0.0001
PUSHR D2
PUSHARGSV -1 0.0002
PUSHV 1; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0245; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
STORE D2 0
SETR D2 LINKDIR
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDIR D2
SETV D2 -1000
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNYOFS D2
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Params Start
PUSHR D2
PUSHARGSV 1 0.0002; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Params End
CALLFUNC 0.1142; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Call
PEEK D4
LOAD D2 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 0.1078; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4
POPARGS D5 0.0002
RETURNFUNC; Func[void EZBE_DamageLink(int)] Body End
PUSHARGSV 0 0.0002; Func[void EZBE_ExpandingCircle(int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0001
STOREV 0 0
SETV D2 0; for() #408 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #408 LoopTest
COMPAREV D2 16
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1736 ==; for() #408 TestFail?
LOAD D2 0.0003; for() #408 Body Start
PUSHR D2
LOAD D2 0.0001
DIVV D2 16
POP D3
MULTR D2 D3
MULTV D2 0.2000
STORE D2 0
PUSHV 4; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0005
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 0.0182; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 0.0182; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
DIVV D2 16
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 1
PUSHV 128; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params End
CIRCLER; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body End
WAITFRAME; InlineFunc[void Waitframe()] Body AND for() #408 Body End
LOAD D2 0.0001; for() #408 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 1676; for() #408 End
SETV D2 16; for() #409 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #409 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1798 ==; for() #409 TestFail?
LOAD D2 0.0003; for() #409 Body Start
PUSHR D2
LOAD D2 0.0001
DIVV D2 16
POP D3
MULTR D2 D3
MULTV D2 0.2000
STORE D2 0
PUSHV 4; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0005
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 0.0182; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 0.0182; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
DIVV D2 16
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 1
PUSHV 128; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params End
CIRCLER; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body End
WAITFRAME; InlineFunc[void Waitframe()] Body AND for() #409 Body End
LOAD D2 0.0001; for() #409 LoopIncrement
SUBV D2 1
STORE D2 0.0001
GOTO 1738; for() #409 End
POPARGS D5 0.0006; return (Void)
RETURNFUNC; Func[void EZBE_ExpandingCircle(int, int, int, int)] Body End
PUSHARGSV 0 0.0008; Func[void EZBE_HelmasaurShot(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0007
STOREV 0 0.0006
STOREV 1 0.0005
LOAD D2 0.0010; if() #1218 Test
COMPAREV D2 0
GOTOCMP 1825 !=
LOAD D2 0.0014
COMPAREV D2 132
GOTOCMP 1823 ==
LOAD D2 0.0014
COMPAREV D2 130
GOTOCMP 1823 ==
LOAD D2 0.0014
COMPAREV D2 134
GOTOCMP 1823 ==
LOAD D2 0.0014
COMPAREV D2 137
GOTOCMP 1823 ==
LOAD D2 0.0014
COMPAREV D2 138
GOTOCMP 1825 !=
SETV D2 1
GOTO 1826
SETV D2 0
COMPAREV D2 0
GOTOCMP 1831 ==; Test 'if'
LOAD D2 0.0005; if() #1218 Body Start
ORV D2 2
STORE D2 0.0005; if() #1218 Body End
LOAD D2 0.0010; if() #679 Test
COMPAREV D2 2000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 1843 ==; Test 'if'
LOAD D2 0.0005; if() #679 Body Start
ORV D2 4
STORE D2 0.0005
LOAD D2 0.0010
SUBV D2 2000
STORE D2 0.0010
GOTO 1854; if() #679 Body End
LOAD D2 0.0010; if() #1219 Test AND if() #679 Else Start
COMPAREV D2 1000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 1854 ==; Test 'if'
LOAD D2 0.0005; if() #1219 Body Start
ORV D2 2
STORE D2 0.0005
LOAD D2 0.0010
SUBV D2 1000
STORE D2 0.0010; if() #1219 Body End
LOAD D2 0.0010; if() #679 Else End AND if() #1220 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1861 ==; Test 'if'
SETV D2 -1; if() #1220 Body Start
STORE D2 0.0010; if() #1220 Body End
ALLOCATEMEMV D2 16 0
STORE D2 0.0004
ALLOCATEMEMV D2 16 0
STORE D2 0.0003
ALLOCATEMEMV D2 16 0
STORE D2 0.0002
STOREV 0 0.0001
LOAD D2 0.0009; if() #1221 Test
COMPAREV D2 0
GOTOCMP 1873 ==; Test 'if'
LOAD D2 0.0009; InlineFunc[void Game::PlaySound(int)] Params AND if() #1221 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body AND if() #1221 Body End
PUSHR D4
LOAD D2 0.0014; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0011; InlineFunc[int DegtoRad(int)] Params Start
SETR D3 D2; InlineFunc[int DegtoRad(int)] Params End
DEGTORAD D2 D3; InlineFunc[int DegtoRad(int)] Body
PUSHR D2
PUSHV 200
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0010
PUSHR D2
PUSHV 0
LOAD D2 0.0005
PUSHR D2; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0245; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0001
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETV D2 64
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETV D2 1
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0001
ADDV D2 1
STORE D2 0.0001
SETV D2 0; for() #410 setup AND while(true) #32 Body [Opt:AlwaysOn] Start
STORE D2 0.0007
LOAD D2 0.0007; for() #410 LoopTest
COMPAREV D2 16
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2212 ==; for() #410 TestFail?
LOAD D2 0.0004; InlineFunc[bool eweapon::isValid()] Params Start AND if() #1222 Test AND for() #410 Body Start
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2; InlineFunc[bool eweapon::isValid()] Params End
ISVALIDEWPN D2; InlineFunc[bool eweapon::isValid()] Body
COMPAREV D2 0
GOTOCMP 2208 ==; Test 'if'
LOAD D2 0.0003; if() #1223 Test AND if() #1222 Body Start
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
COMPAREV D2 16
GOTOCMP 1954 >=
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
COMPAREV D2 3
GOTOCMP 1954 >=
SETV D2 1
GOTO 1955
SETV D2 0
COMPAREV D2 0
GOTOCMP 1970 ==; Test 'if'
SETV D2 0; if() #1223 Body Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2; if() #1223 Body End
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
SUBV D2 1
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0007
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0003; if() #1224 Test
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2208 ==; Test 'if'
LOAD D2 0.0002; if() #680 Test AND if() #1224 Body Start
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2101 ==; Test 'if'
SETV D2 0; for() #411 setup AND if() #680 Body Start
STORE D2 0.0006
LOAD D2 0.0006; for() #411 LoopTest
COMPAREV D2 3
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2208 ==; for() #411 TestFail?
LOAD D2 0.0009; if() #1225 Test AND for() #411 Body Start
COMPAREV D2 0
GOTOCMP 2014 ==; Test 'if'
LOAD D2 0.0009; InlineFunc[void Game::PlaySound(int)] Params AND if() #1225 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body AND if() #1225 Body End
PUSHR D4
LOAD D2 0.0014; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
PUSHR D2
POP REFEWPN
PUSHR EWPNX
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
PUSHR D2
POP REFEWPN
PUSHR EWPNY
LOAD D2 0.0006; InlineFunc[int DegtoRad(int)] Params Start
MULTV D2 120
SETV D2 120
PUSHR D2
LOAD D2 0.0006
POP D3
MULTR D2 D3
ADDV D2 -90
SETR D3 D2; InlineFunc[int DegtoRad(int)] Params End
DEGTORAD D2 D3; InlineFunc[int DegtoRad(int)] Body
PUSHR D2
PUSHV 200
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0010
PUSHR D2
PUSHV 0
LOAD D2 0.0005
PUSHR D2; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0245; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0001
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETV D2 56
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETV D2 2
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0001
ADDV D2 1
STORE D2 0.0001
SETV D2 0
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2; for() #411 Body End
LOAD D2 0.0006; for() #411 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 2004; for() #411 End
GOTO 2208; if() #680 Body End
LOAD D2 0.0002; if() #1226 Test AND if() #680 Else Start
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2208 ==; Test 'if'
SETV D2 0; for() #412 setup AND if() #1226 Body Start
STORE D2 0.0006
LOAD D2 0.0006; for() #412 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2208 ==; for() #412 TestFail?
LOAD D2 0.0009; if() #1227 Test AND for() #412 Body Start
COMPAREV D2 0
GOTOCMP 2122 ==; Test 'if'
LOAD D2 0.0009; InlineFunc[void Game::PlaySound(int)] Params AND if() #1227 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body AND if() #1227 Body End
PUSHR D4
LOAD D2 0.0014; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
PUSHR D2
POP REFEWPN
PUSHR EWPNX
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
PUSHR D2
POP REFEWPN
PUSHR EWPNY
LOAD D2 0.0006; InlineFunc[int DegtoRad(int)] Params Start
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0006
POP D3
MULTR D2 D3
ADDV D2 -45
SETR D3 D2; InlineFunc[int DegtoRad(int)] Params End
DEGTORAD D2 D3; InlineFunc[int DegtoRad(int)] Body
PUSHR D2
PUSHV 200
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0010
PUSHR D2
PUSHV 0
LOAD D2 0.0005
PUSHR D2; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0245; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0001
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETV D2 56
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETV D2 3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0001
ADDV D2 1
STORE D2 0.0001
SETV D2 0
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2; for() #412 Body End
LOAD D2 0.0006; for() #412 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 2112; for() #412 End
LOAD D2 0.0007; if() #1226 Body End AND if() #680 Else End AND if() #1224 Body End AND if() #1222 Body End AND for() #410 Body End AND for() #410 LoopIncrement
ADDV D2 1
STORE D2 0.0007
GOTO 1925; for() #410 End
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #32 Body [Opt:AlwaysOn] End
GOTO 1923; while() #32 End
LOAD D3 0.0002
DEALLOCATEMEMR D3
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D3 0.0004
DEALLOCATEMEMR D3; [Opt:NeverRet] AND Func[void EZBE_HelmasaurShot(int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0010; Func[bool EZBE_Lightning(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0009
ALLOCATEMEMV D2 64 0
STORE D2 0.0008
ALLOCATEMEMV D2 64 0
STORE D2 0.0007
ALLOCATEMEMV D2 64 0
STORE D2 0.0006
ALLOCATEMEMV D2 64 0
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0008; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 32
LOAD D2 0.0014
PUSHR D2
PUSHV -64
PUSHV 32; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2523; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0007; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 32
LOAD D2 0.0014
PUSHR D2
PUSHV -32
PUSHV 32; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2523; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0006; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 32
LOAD D2 0.0014
PUSHR D2
PUSHARGSV 32 0.0002; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2523; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0005; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 32
LOAD D2 0.0014
PUSHR D2
PUSHV 64
PUSHV 32; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2523; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Call
POP D4
ALLOCATEMEMV D2 3 0
PUSHR D2
SETR D0 D2
PUSHR D0
LOAD D2 0.0013
POP D0
WRITEPODARRAYVR 0 D2
PUSHR D0
LOAD D2 0.0012
POP D0
WRITEPODARRAYVR 1 D2
PUSHR D0
LOAD D2 0.0011
POP D0
WRITEPODARRAYVR 2 D2
POP D2
STORE D2 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
STOREV 0 0
SETV D2 0; for() #413 setup
STORE D2 0.0009
LOAD D2 0.0009; for() #413 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2403 ==; for() #413 TestFail?
LOAD D2 0.0003; for() #413 Body Start
PUSHR D2
LOAD D2 0.0002
MODV D2 3
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
ADDV D2 1
MODV D2 3
POP D0
READPODARRAYR D2 D2
STORE D2 0
LOAD D2 0.0009; if() #1228 Test
MODV D2 3
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2337 ==; Test 'if'
LOAD D2 0.0002; if() #1228 Body Start
ADDV D2 1
STORE D2 0.0002
LOAD D2 0.0002
MODV D2 3
STORE D2 0.0002; if() #1228 Body End
PUSHR D4
LOAD D2 0.0008; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 32
PUSHV 0
LOAD D2 0.0009
PUSHR D2
PUSHV 20
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2723; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0007; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 32
PUSHV 0
LOAD D2 0.0009
PUSHR D2
PUSHV 20
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2723; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0006; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 32
PUSHV 0
LOAD D2 0.0009
PUSHR D2
PUSHV 20
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2723; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0005; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 32
PUSHV 0
LOAD D2 0.0009
PUSHR D2
PUSHV 20
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2723; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND for() #413 Body End
LOAD D2 0.0009; for() #413 LoopIncrement
ADDV D2 1
STORE D2 0.0009
GOTO 2305; for() #413 End
SETV D2 0; for() #414 setup
STORE D2 0.0009
LOAD D2 0.0009; for() #414 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2499 ==; for() #414 TestFail?
LOAD D2 0.0003; for() #414 Body Start
PUSHR D2
LOAD D2 0.0002
MODV D2 3
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
ADDV D2 1
MODV D2 3
POP D0
READPODARRAYR D2 D2
STORE D2 0
LOAD D2 0.0009; if() #1229 Test
MODV D2 3
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2437 ==; Test 'if'
LOAD D2 0.0002; if() #1229 Body Start
ADDV D2 1
STORE D2 0.0002
LOAD D2 0.0002
MODV D2 3
STORE D2 0.0002; if() #1229 Body End
PUSHR D4
LOAD D2 0.0008; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 32
LOAD D2 0.0009
PUSHR D2
PUSHARGSV 20 0.0002
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2723; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0007; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 32
LOAD D2 0.0009
PUSHR D2
PUSHARGSV 20 0.0002
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2723; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0006; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 32
LOAD D2 0.0009
PUSHR D2
PUSHARGSV 20 0.0002
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2723; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0005; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 32
LOAD D2 0.0009
PUSHR D2
PUSHARGSV 20 0.0002
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2723; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND for() #414 Body End
LOAD D2 0.0009; for() #414 LoopIncrement
ADDV D2 1
STORE D2 0.0009
GOTO 2405; for() #414 End
SETV D2 0; return Start
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D3 0.0005
DEALLOCATEMEMR D3
LOAD D3 0.0006
DEALLOCATEMEMR D3
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
GOTO 2521; return End
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D3 0.0005
DEALLOCATEMEMR D3
LOAD D3 0.0006
DEALLOCATEMEMR D3
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
POPARGS D5 0.0017
RETURNFUNC; Func[bool EZBE_Lightning(int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0007; Func[void EZBF_LightningInit(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
PUSHR D4
PUSHV -40; UsrFunc[int Rand(int, int)] Params Start
PUSHV 40; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 0.0182; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0.0001
STOREV 0 0; for() #418 setup
LOAD D2 0; for() #418 LoopTest
PUSHR D2
LOAD D2 0.0010
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2721 ==; for() #418 TestFail?
LOAD D2 0; for() #418 Body Start
PUSHR D2
LOAD D2 0.0010
SUBV D2 1
POP D3
DIVR D3 D2
SETR D2 D3
MULTV D2 320
SETV D2 320
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
SUBV D2 1
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
STORE D2 0.0004
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
SUBV D2 1
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
STORE D2 0.0003
PUSHR D4
LOAD D2 0.0007; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 0.0182; UsrFunc[int Rand(int, int)] Call
POP D4
MULTV D2 0.5000
STORE D2 0.0002
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
SUBV D2 1
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0002
LOAD D2 0; if() #1246 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2610 ==; Test 'if'
SETV D2 0; if() #1246 Body Start
STORE D2 0.0002; if() #1246 Body End
LOAD D2 0.0012
PUSHR D2
PUSHR D4
LOAD D2 0.0004; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0009
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 0.1016; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
LOAD D2 0.0003; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0009
ADDV D2 90
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 0.1016; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
LOAD D2 0.0002; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0009
ADDV D2 90
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 0.1016; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0006
LOAD D2 0.0011
PUSHR D2
PUSHR D4
LOAD D2 0.0004; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0009
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 0.1026; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
LOAD D2 0.0003; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0009
ADDV D2 90
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 0.1026; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
LOAD D2 0.0002; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0009
ADDV D2 90
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 0.1026; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0005
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0
MULTV D2 2
SETV D2 2
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0
MULTV D2 2
SETV D2 2
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
ADDV D2 1
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #418 Body End
LOAD D2 0; for() #418 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 2537; for() #418 End
POPARGS D5 0.0014
RETURNFUNC; Func[void EZBF_LightningInit(int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0009; Func[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
SETR D2 LINKHP; if() #1247 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 3271 !=; Test 'if' AND return (Void) AND if() #1247 Body
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0015
SUBV D2 1
POP D3
DIVR D3 D2
SETR D2 D3
STORE D2 0.0008
STOREV 0 0.0007
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
STOREV 0 0; for() #419 setup
LOAD D2 0; for() #419 LoopTest
PUSHR D2
LOAD D2 0.0015
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3271 ==; for() #419 TestFail?
LOAD D2 0.0013; if() #685 Test AND for() #419 Body Start
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
POP D3
COMPARER D3 D2
GOTOCMP 2778 <=
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
ADDV D2 1
POP D3
MULTR D2 D3
POP D3
COMPARER D3 D2
GOTOCMP 2778 >=
SETV D2 1
GOTO 2779
SETV D2 0
COMPAREV D2 0
GOTOCMP 2950 ==; Test 'if'
LOAD D2 0.0016; if() #685 Body Start
PUSHR D2
LOAD D2 0
MULTV D2 2
POP D0
READPODARRAYR D2 D2
STORE D2 0.0004
LOAD D2 0.0016
PUSHR D2
LOAD D2 0
MULTV D2 2
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0003
LOAD D2 0.0016
PUSHR D2
LOAD D2 0
ADDV D2 1
MULTV D2 2
POP D0
READPODARRAYR D2 D2
STORE D2 0.0002
LOAD D2 0.0016
PUSHR D2
LOAD D2 0
ADDV D2 1
MULTV D2 2
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001
PUSHR D4
LOAD D2 0.0004; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 0.0163; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0007
LOAD D2 0.0004; InlineFunc[int Distance(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0006
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0008
POP D3
DIVR D3 D2
SETR D2 D3
STORE D2 0.0005
LOAD D2 0.0004
PUSHR D2
PUSHR D4
LOAD D2 0.0006; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0005
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 0.1016; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0002
LOAD D2 0.0003
PUSHR D2
PUSHR D4
LOAD D2 0.0006; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0005
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 0.1026; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0001
PUSHR D4
PUSHV 4; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
PUSHV 1
LOAD D2 0.0011
PUSHR D2
PUSHV 1
PUSHV 128; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Params End
CALLFUNC 0.1188; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Call
POP D4
PUSHV 4; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0010
PUSHR D2
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 128; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Params End
LINER; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Body End
PUSHR D4; if() #1248 Test
LOAD D2 0.0004; UsrFunc[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETR D2 LINKX
ADDV D2 4
PUSHR D2
SETR D2 LINKY
ADDV D2 4
PUSHR D2
SETR D2 LINKX
ADDV D2 11
PUSHR D2
SETR D2 LINKY
ADDV D2 11
PUSHR D2
PUSHV 0; UsrFunc[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.3433; UsrFunc[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3267 ==; Test 'if'
PUSHR D4; if() #1248 Body Start
LOAD D2 0.0009; UsrFunc[void EZBE_DamageLink(int)] Params Start
PUSHR D2; UsrFunc[void EZBE_DamageLink(int)] Params End
CALLFUNC 0.1606; UsrFunc[void EZBE_DamageLink(int)] Call
POP D4; if() #1248 Body End
GOTO 3267; if() #685 Body End
LOAD D2 0.0014; if() #686 Test AND if() #685 Else Start
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
POP D3
COMPARER D3 D2
GOTOCMP 2973 <=
LOAD D2 0.0014
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
ADDV D2 1
POP D3
MULTR D2 D3
POP D3
COMPARER D3 D2
GOTOCMP 2973 >=
SETV D2 1
GOTO 2974
SETV D2 0
COMPAREV D2 0
GOTOCMP 3145 ==; Test 'if'
LOAD D2 0.0016; if() #686 Body Start
PUSHR D2
LOAD D2 0
MULTV D2 2
POP D0
READPODARRAYR D2 D2
STORE D2 0.0004
LOAD D2 0.0016
PUSHR D2
LOAD D2 0
MULTV D2 2
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0003
LOAD D2 0.0016
PUSHR D2
LOAD D2 0
ADDV D2 1
MULTV D2 2
POP D0
READPODARRAYR D2 D2
STORE D2 0.0002
LOAD D2 0.0016
PUSHR D2
LOAD D2 0
ADDV D2 1
MULTV D2 2
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001
PUSHR D4
LOAD D2 0.0004; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 0.0163; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0007
LOAD D2 0.0004; InlineFunc[int Distance(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0006
LOAD D2 0.0014
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0008
POP D3
DIVR D3 D2
SETR D2 D3
STORE D2 0.0005
LOAD D2 0.0004
PUSHR D2
PUSHR D4
LOAD D2 0.0006; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0005
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 0.1016; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0004
LOAD D2 0.0003
PUSHR D2
PUSHR D4
LOAD D2 0.0006; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0005
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 0.1026; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0003
PUSHR D4
PUSHV 4; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
PUSHV 1
LOAD D2 0.0011
PUSHR D2
PUSHV 1
PUSHV 128; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Params End
CALLFUNC 0.1188; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Call
POP D4
PUSHV 4; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0010
PUSHR D2
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 128; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Params End
LINER; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Body End
PUSHR D4; if() #1249 Test
LOAD D2 0.0004; UsrFunc[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETR D2 LINKX
ADDV D2 4
PUSHR D2
SETR D2 LINKY
ADDV D2 4
PUSHR D2
SETR D2 LINKX
ADDV D2 11
PUSHR D2
SETR D2 LINKY
ADDV D2 11
PUSHR D2
PUSHV 0; UsrFunc[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.3433; UsrFunc[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3267 ==; Test 'if'
PUSHR D4; if() #1249 Body Start
LOAD D2 0.0009; UsrFunc[void EZBE_DamageLink(int)] Params Start
PUSHR D2; UsrFunc[void EZBE_DamageLink(int)] Params End
CALLFUNC 0.1606; UsrFunc[void EZBE_DamageLink(int)] Call
POP D4; if() #1249 Body End
GOTO 3267; if() #686 Body End
LOAD D2 0.0014; if() #1250 Test AND if() #686 Else Start
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
POP D3
COMPARER D3 D2
GOTOCMP 3168 >
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
ADDV D2 1
POP D3
MULTR D2 D3
POP D3
COMPARER D3 D2
GOTOCMP 3168 <
SETV D2 1
GOTO 3169
SETV D2 0
COMPAREV D2 0
GOTOCMP 3267 ==; Test 'if'
LOAD D2 0.0016; if() #1250 Body Start
PUSHR D2
LOAD D2 0
MULTV D2 2
POP D0
READPODARRAYR D2 D2
STORE D2 0.0004
LOAD D2 0.0016
PUSHR D2
LOAD D2 0
MULTV D2 2
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0003
LOAD D2 0.0016
PUSHR D2
LOAD D2 0
ADDV D2 1
MULTV D2 2
POP D0
READPODARRAYR D2 D2
STORE D2 0.0002
LOAD D2 0.0016
PUSHR D2
LOAD D2 0
ADDV D2 1
MULTV D2 2
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001
PUSHR D4
PUSHV 4; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
PUSHV 1
LOAD D2 0.0011
PUSHR D2
PUSHV 1
PUSHV 128; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Params End
CALLFUNC 0.1188; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Call
POP D4
PUSHV 4; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0010
PUSHR D2
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 128; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Params End
LINER; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Body End
PUSHR D4; if() #1251 Test
LOAD D2 0.0004; UsrFunc[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETR D2 LINKX
ADDV D2 4
PUSHR D2
SETR D2 LINKY
ADDV D2 4
PUSHR D2
SETR D2 LINKX
ADDV D2 11
PUSHR D2
SETR D2 LINKY
ADDV D2 11
PUSHR D2
PUSHV 0; UsrFunc[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.3433; UsrFunc[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3267 ==; Test 'if'
PUSHR D4; if() #1251 Body Start
LOAD D2 0.0009; UsrFunc[void EZBE_DamageLink(int)] Params Start
PUSHR D2; UsrFunc[void EZBE_DamageLink(int)] Params End
CALLFUNC 0.1606; UsrFunc[void EZBE_DamageLink(int)] Call
POP D4; if() #1251 Body End
LOAD D2 0; if() #1250 Body End AND if() #686 Else End AND if() #685 Else End AND for() #419 Body End AND for() #419 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 2746; for() #419 End
POPARGS D5 0.0017
RETURNFUNC; Func[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0007; Func[bool EZBE_LightningSingle(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0006
ALLOCATEMEMV D2 64 0
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0005; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0012
PUSHR D2
PUSHV 32
LOAD D2 0.0011
PUSHR D2
PUSHV 0
PUSHV 32; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2523; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Call
POP D4
ALLOCATEMEMV D2 3 0
PUSHR D2
SETR D0 D2
PUSHR D0
LOAD D2 0.0010
POP D0
WRITEPODARRAYVR 0 D2
PUSHR D0
LOAD D2 0.0009
POP D0
WRITEPODARRAYVR 1 D2
PUSHR D0
LOAD D2 0.0008
POP D0
WRITEPODARRAYVR 2 D2
POP D2
STORE D2 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
STOREV 0 0
SETV D2 0; for() #415 setup
STORE D2 0.0006
LOAD D2 0.0006; for() #415 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3367 ==; for() #415 TestFail?
LOAD D2 0.0003; for() #415 Body Start
PUSHR D2
LOAD D2 0.0002
MODV D2 3
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
ADDV D2 1
MODV D2 3
POP D0
READPODARRAYR D2 D2
STORE D2 0
LOAD D2 0.0006; if() #1230 Test
MODV D2 3
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3346 ==; Test 'if'
LOAD D2 0.0002; if() #1230 Body Start
ADDV D2 1
STORE D2 0.0002
LOAD D2 0.0002
MODV D2 3
STORE D2 0.0002; if() #1230 Body End
PUSHR D4
LOAD D2 0.0005; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 32
PUSHV 0
LOAD D2 0.0006
PUSHR D2
PUSHV 20
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2723; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND for() #415 Body End
LOAD D2 0.0006; for() #415 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 3314; for() #415 End
SETV D2 0; for() #416 setup
STORE D2 0.0006
LOAD D2 0.0006; for() #416 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3421 ==; for() #416 TestFail?
LOAD D2 0.0003; for() #416 Body Start
PUSHR D2
LOAD D2 0.0002
MODV D2 3
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
ADDV D2 1
MODV D2 3
POP D0
READPODARRAYR D2 D2
STORE D2 0
LOAD D2 0.0006; if() #1231 Test
MODV D2 3
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3401 ==; Test 'if'
LOAD D2 0.0002; if() #1231 Body Start
ADDV D2 1
STORE D2 0.0002
LOAD D2 0.0002
MODV D2 3
STORE D2 0.0002; if() #1231 Body End
PUSHR D4
LOAD D2 0.0005; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 32
LOAD D2 0.0006
PUSHR D2
PUSHARGSV 20 0.0002
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2723; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND for() #416 Body End
LOAD D2 0.0006; for() #416 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 3369; for() #416 End
SETV D2 0; return Start
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D3 0.0005
DEALLOCATEMEMR D3
GOTO 3431; return End
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D3 0.0005
DEALLOCATEMEMR D3
POPARGS D5 0.0014
RETURNFUNC; Func[bool EZBE_LightningSingle(int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0004; Func[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
STORE D2 0.0008
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
STORE D2 0.0007
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0006
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0005
LOAD D2 0.0010; if() #681 Test
PUSHR D2
LOAD D2 0.0012
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3636 ==; Test 'if'
LOAD D2 0.0008; if() #681 Body Start
PUSHR D2
LOAD D2 0.0012
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0012
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
DIVR D3 D2
SETR D2 D3
STORE D2 0.0003
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0012
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0012
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
DIVR D3 D2
SETR D2 D3
STORE D2 0.0002
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0011
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0001
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0011
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0
LOAD D2 0.0008; InlineFunc[int Max(int, int)] Params Start AND if() #682 Test
PUSHVARGR D2
LOAD D2 0.0006
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHR D2
LOAD D2 0.0012; InlineFunc[int Min(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0010
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
POP D3
COMPARER D3 D2
GOTOCMP 3591 <
LOAD D2 0.0008; InlineFunc[int Min(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0006
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
PUSHR D2
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0010
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
COMPARER D3 D2
GOTOCMP 3591 >
LOAD D2 0.0007; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0005
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHR D2
LOAD D2 0.0011; InlineFunc[int Min(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0009
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
POP D3
COMPARER D3 D2
GOTOCMP 3591 <
LOAD D2 0.0007; InlineFunc[int Min(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0005
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
PUSHR D2
LOAD D2 0.0011; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0009
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
COMPARER D3 D2
GOTOCMP 3591 >
SETV D2 1
GOTO 3592
SETV D2 0
COMPAREV D2 0
GOTOCMP 3633 ==; Test 'if'
LOAD D2 0.0007; InlineFunc[int Min(int, int)] Params Start AND if() #683 Test AND if() #682 Body Start
PUSHVARGR D2
LOAD D2 0.0005
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
COMPARER D3 D2
GOTOCMP 3624 >
LOAD D2 0.0007; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0005
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Min(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
POP D3
COMPARER D3 D2
GOTOCMP 3624 <
SETV D2 0
GOTO 3625
SETV D2 1
COMPAREV D2 0
GOTOCMP 3630 ==; Test 'if'
SETV D2 0; return Start AND if() #683 Body Start
GOTO 3701; return End
GOTO 3700; if() #683 Body End
SETV D2 1; return Start AND if() #683 Else Start
GOTO 3701; return End AND if() #683 Else End
GOTO 3700; if() #682 Body End
SETV D2 0; return Start AND if() #682 Else Start
GOTO 3701; return End AND if() #682 Else End
GOTO 3700; if() #681 Body End
LOAD D2 0.0012; if() #1232 Test AND if() #681 Else Start
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
GOTOCMP 3650 <
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0006
POP D3
COMPARER D3 D2
GOTOCMP 3650 >
SETV D2 1
GOTO 3651
SETV D2 0
COMPAREV D2 0
GOTOCMP 3700 ==; Test 'if'
LOAD D2 0.0011; if() #1232 Body Start
STORE D2 0.0003
LOAD D2 0.0009
STORE D2 0.0002
LOAD D2 0.0003; if() #1233 Test
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 3669 ==; Test 'if'
LOAD D2 0.0009; if() #1233 Body Start
STORE D2 0.0003
LOAD D2 0.0011
STORE D2 0.0002; if() #1233 Body End
LOAD D2 0.0007; if() #1234 Test
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
GOTOCMP 3681 <
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
GOTOCMP 3695 <=
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
GOTOCMP 3693 <
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
GOTOCMP 3695 <=
SETV D2 0
GOTO 3696
SETV D2 1
COMPAREV D2 0
GOTOCMP 3700 ==; Test 'if'
SETV D2 1; return Start AND if() #1234 Body Start
GOTO 3701; return End AND if() #1234 Body End
SETV D2 0; if() #1232 Body End AND if() #681 Else End AND return Start
POPARGS D5 0.0013; return End
RETURNFUNC; Func[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0007; Func[void EZBE_WallBounce(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0006
STOREV 1 0.0005
LOAD D2 0.0008; if() #1235 Test
COMPAREV D2 0
GOTOCMP 3727 !=
LOAD D2 0.0013
COMPAREV D2 132
GOTOCMP 3725 ==
LOAD D2 0.0013
COMPAREV D2 130
GOTOCMP 3725 ==
LOAD D2 0.0013
COMPAREV D2 134
GOTOCMP 3725 ==
LOAD D2 0.0013
COMPAREV D2 137
GOTOCMP 3725 ==
LOAD D2 0.0013
COMPAREV D2 138
GOTOCMP 3727 !=
SETV D2 1
GOTO 3728
SETV D2 0
COMPAREV D2 0
GOTOCMP 3733 ==; Test 'if'
LOAD D2 0.0005; if() #1235 Body Start
ORV D2 2
STORE D2 0.0005; if() #1235 Body End
LOAD D2 0.0008; if() #684 Test
COMPAREV D2 2000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 3745 ==; Test 'if'
LOAD D2 0.0005; if() #684 Body Start
ORV D2 4
STORE D2 0.0005
LOAD D2 0.0008
SUBV D2 2000
STORE D2 0.0008
GOTO 3756; if() #684 Body End
LOAD D2 0.0008; if() #1236 Test AND if() #684 Else Start
COMPAREV D2 1000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 3756 ==; Test 'if'
LOAD D2 0.0005; if() #1236 Body Start
ORV D2 2
STORE D2 0.0005
LOAD D2 0.0008
SUBV D2 1000
STORE D2 0.0008; if() #1236 Body End
LOAD D2 0.0008; if() #684 Else End AND if() #1237 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3763 ==; Test 'if'
SETV D2 -1; if() #1237 Body Start
STORE D2 0.0008; if() #1237 Body End
PUSHR D4
LOAD D2 0.0013; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0010; InlineFunc[int DegtoRad(int)] Params Start
SETR D3 D2; InlineFunc[int DegtoRad(int)] Params End
DEGTORAD D2 D3; InlineFunc[int DegtoRad(int)] Body
PUSHR D2
PUSHV 0
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0008
PUSHR D2
PUSHV 0
LOAD D2 0.0005
PUSHR D2; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0245; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0004
STOREV 10 0.0003
LOAD D2 0.0009
DIVV D2 100
STORE D2 0.0009
LOAD D2 0.0004; while() #33 Test AND InlineFunc[bool eweapon::isValid()] Params
ISVALIDEWPN D2; InlineFunc[bool eweapon::isValid()] Body
COMPAREV D2 0
GOTOCMP 4005 ==; Test 'while'
PUSHR D4; while() #33 Body Start
LOAD D2 0.0009; UsrFunc[int VectorX(int, int)] Params Start
DIVV D2 100
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 0.1016; UsrFunc[int VectorX(int, int)] Call
POP D4
STORE D2 0.0002
PUSHR D4
LOAD D2 0.0009; UsrFunc[int VectorY(int, int)] Params Start
DIVV D2 100
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 0.1026; UsrFunc[int VectorY(int, int)] Call
POP D4
STORE D2 0.0001
STOREV 0 0
LOAD D2 0.0006; for() #417 LoopTest
PUSHR D2
LOAD D2 0.0009
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3995 ==; for() #417 TestFail?
LOAD D2 0.0012; for() #417 Body Start
PUSHR D2
PUSHR D4
PUSHV 1; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0010
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 0.1016; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0012
LOAD D2 0.0011
PUSHR D2
PUSHR D4
PUSHV 1; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0010
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 0.1026; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0011
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNX D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNY D2
LOAD D2 0.0002; if() #1238 Test
COMPAREV D2 0
GOTOCMP 3878 >=
PUSHR D4
LOAD D2 0.0004; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Params Start
PUSHR D2
POP REFEWPN
PUSHR EWPNX
LOAD D2 0.0004
PUSHR D2
POP REFEWPN
PUSHR EWPNY
PUSHV 2
PUSHARGSV 1 0.0002; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Params End
CALLFUNC 0.1248; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3898 ==
LOAD D2 0.0002
COMPAREV D2 0
GOTOCMP 3896 <=
PUSHR D4
LOAD D2 0.0004; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Params Start
PUSHR D2
POP REFEWPN
PUSHR EWPNX
LOAD D2 0.0004
PUSHR D2
POP REFEWPN
PUSHR EWPNY
PUSHV 3
PUSHARGSV 1 0.0002; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Params End
CALLFUNC 0.1248; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3898 ==
SETV D2 0
GOTO 3899
SETV D2 1
COMPAREV D2 0
GOTOCMP 3906 ==; Test 'if'
LOAD D2 0.0002; if() #1238 Body Start
SUBV2 0 D2
STORE D2 0.0002
SETV D2 1
STORE D2 0; if() #1238 Body End
LOAD D2 0.0001; if() #1239 Test
COMPAREV D2 0
GOTOCMP 3924 >=
PUSHR D4
LOAD D2 0.0004; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Params Start
PUSHR D2
POP REFEWPN
PUSHR EWPNX
LOAD D2 0.0004
PUSHR D2
POP REFEWPN
PUSHR EWPNY
PUSHV 0
PUSHARGSV 1 0.0002; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Params End
CALLFUNC 0.1248; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3943 ==
LOAD D2 0.0001
COMPAREV D2 0
GOTOCMP 3941 <=
PUSHR D4
LOAD D2 0.0004; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Params Start
PUSHR D2
POP REFEWPN
PUSHR EWPNX
LOAD D2 0.0004
PUSHR D2
POP REFEWPN
PUSHR EWPNY
PUSHARGSV 1 0.0003; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Params End
CALLFUNC 0.1248; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3943 ==
SETV D2 0
GOTO 3944
SETV D2 1
COMPAREV D2 0
GOTOCMP 3951 ==; Test 'if'
LOAD D2 0.0001; if() #1239 Body Start
SUBV2 0 D2
STORE D2 0.0001
SETV D2 1
STORE D2 0; if() #1239 Body End
LOAD D2 0; if() #1240 Test
COMPAREV D2 0
GOTOCMP 3991 ==; Test 'if'
PUSHR D4; if() #1240 Body Start
PUSHARGSV 0 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 0.0163; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0010
LOAD D2 0.0010; InlineFunc[int DegtoRad(int)] Params Start
SETR D3 D2; InlineFunc[int DegtoRad(int)] Params End
DEGTORAD D2 D3; InlineFunc[int DegtoRad(int)] Body
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
LOAD D2 0.0003
SUBV D2 1
STORE D2 0.0003
LOAD D2 0.0003; if() #1241 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3991 ==; Test 'if'
SETV D2 0; if() #1241 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2; if() #1241 Body End
LOAD D2 0.0006; if() #1240 Body End AND for() #417 Body End AND for() #417 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 3812; for() #417 End
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0009; InlineFunc[int Floor(int)] Params
FLOOR D2; InlineFunc[int Floor(int)] Body
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0006
WAITFRAME; InlineFunc[void Waitframe()] Body AND while() #33 Body End
GOTO 3789; while() #33 End
POPARGS D5 0.0014
RETURNFUNC; Func[void EZBE_WallBounce(int, int, int, int, int, int, int)] Body End


PUSHR D0; void run(int, int, int, int, int, int, int, int) Params
PUSHR D1
PUSHR D2
PUSHR D3
PUSHR D4
PUSHR D5
PUSHR D6
PUSHR D7
PUSHR REFFFC; void run(int, int, int, int, int, int, int, int) Body Start
SETR D4 SP2
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #34 Body [Opt:AlwaysOn]
GOTO 11; while() #34 End AND [Opt:NeverRet] AND void run(int, int, int, int, int, int, int, int) Body End


PUSHR D0; void run(int, int, int, int, int, int, int, int) Params
PUSHR D1
PUSHR D2
PUSHR D3
PUSHR D4
PUSHR D5
PUSHR D6
PUSHR D7
PUSHR REFFFC; void run(int, int, int, int, int, int, int, int) Body Start
SETR D4 SP2
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #35 Body [Opt:AlwaysOn]
GOTO 11; while() #35 End AND [Opt:NeverRet] AND void run(int, int, int, int, int, int, int, int) Body End


PUSHV 0; void run() Body Start
SETR D4 SP2
PUSHR D4
CALLFUNC 0.2380; UsrFunc[void StartGhostZH()] Call
POP D4
PUSHR D4; while(true) #8 Body [Opt:AlwaysOn] Start
CALLFUNC 0.8755; UsrFunc[void UpdateGhostZH1()] Call
POP D4
WAITDRAW; InlineFunc[void Waitdraw()] Body
PUSHR D4
CALLFUNC 0.8817; UsrFunc[void UpdateGhostZH2()] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #8 Body [Opt:AlwaysOn] End
GOTO 6; while() #8 End AND [Opt:NeverRet] AND void run() Body End
SETR D4 SP2; Func[int RadianAngle(int, int, int, int)] Body Start
LOAD D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND return Start
PUSHR D2
LOAD D2 0.0003
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
POPARGS D5 0.0004; return End
RETURNFUNC; Func[int RadianAngle(int, int, int, int)] Body End
SETR D4 SP2; Func[int Randf(int)] Body Start
SETV D2 0; InlineFunc[long randgen::LRand(long)] Params Start AND return Start
PUSHR D2
LOAD D2 0; InlineFunc[long randgen::LRand(long)] Params End
POP REFRNG; InlineFunc[long randgen::LRand(long)] Body Start
RNGLRAND2 D2; InlineFunc[long randgen::LRand(long)] Body End
POP D5; return End
RETURNFUNC; Func[int Randf(int)] Body End
SETR D4 SP2; Func[int Angle(int, int, int, int)] Body Start
LOAD D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start AND return Start
PUSHR D2
LOAD D2 0.0003
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
SETR D3 D2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
POPARGS D5 0.0004; return End
RETURNFUNC; Func[int Angle(int, int, int, int)] Body End
PUSHARGSV 0 0.0007; Func[void AutoGhost()] Body Start
SETR D4 SP2
SETR D2 GD26; if() #29 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 2
COMPAREV D2 0
GOTOCMP 411 !=; Test 'if' AND return (Void) AND if() #29 Body
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
SETR D2 NPCCOUNT; for() #2 setup
STORE D2 0.0003
LOAD D2 0.0003; for() #2 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 411 ==; for() #2 TestFail?
LOAD D2 0.0003; InlineFunc[npc screendata::LoadNPC(int)] Params AND for() #2 Body Start
SUBV D2 1; InlineFunc[npc screendata::LoadNPC(int)] Body Start
LOADNPCR D2
SETR D2 REFNPC; InlineFunc[npc screendata::LoadNPC(int)] Body End
STORE D2 0.0006
LOAD D2 0.0006; if() #30 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 407 !=; Test 'if' AND continue 1; AND if() #30 Body
LOAD D2 0.0006; if() #31 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
COMPAREV D2 511
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 407 !=; Test 'if' AND continue 1; AND if() #31 Body
LOAD D2 0.0006; if() #32 Test AND if(false) #16 [Opt:AlwaysOff]
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCMISCD
ANDV D2 65536
COMPAREV D2 0
GOTOCMP 407 !=; Test 'if' AND continue 1; AND if() #32 Body
LOAD D2 0.0006; unless() #33 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
COMPAREV D2 0
GOTOCMP 407 ==; Test 'unless' AND continue 1; AND unless() #33 Body
LOAD D2 0.0006; unless() #34 Test
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
COMPAREV D2 0
GOTOCMP 407 ==; Test 'unless' AND continue 1; AND unless() #34 Body
STOREV 0 0.0002
STOREV 0 0.0001
LOAD D2 0.0006; if(false) #17 [Opt:AlwaysOff]
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
STORE D2 0.0001
LOAD D2 0.0006
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
STORE D2 0.0002
LOAD D2 0.0002; if() #35 Test
COMPAREV D2 -1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 166 ==; Test 'if'
ALLOCATEMEMV D2 2 0; if() #35 Body Start
STORE D2 0
PUSHR D4
LOAD D2 0.0006; UsrFunc[int __AutoGhostParseName(npc, int[])] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[int __AutoGhostParseName(npc, int[])] Params End
CALLFUNC 0.0413; UsrFunc[int __AutoGhostParseName(npc, int[])] Call
POP D4
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 0
STORE D2 0.0002
LOAD D3 0
DEALLOCATEMEMR D3; if() #35 Body End
LOAD D2 0.0002; if() #36 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 177 ==; Test 'if'
PUSHR D4; if() #36 Body Start
LOAD D2 0.0006; UsrFunc[void __AutoGhostKill(npc)] Params Start
PUSHR D2; UsrFunc[void __AutoGhostKill(npc)] Params End
CALLFUNC 0.0713; UsrFunc[void __AutoGhostKill(npc)] Call
POP D4
GOTO 407; continue 1; AND if() #36 Body End
LOAD D2 0.0002; if() #37 Test
COMPAREV D2 511
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 188 ==; Test 'if'
PUSHR D4; if() #37 Body Start
LOAD D2 0.0006; UsrFunc[void __AutoGhostKill(npc)] Params Start
PUSHR D2; UsrFunc[void __AutoGhostKill(npc)] Params End
CALLFUNC 0.0713; UsrFunc[void __AutoGhostKill(npc)] Call
POP D4
GOTO 407; continue 1; AND if() #37 Body End
PUSHR D4
LOAD D2 0.0005; UsrFunc[int FindUnusedFFC(int)] Params Start
PUSHR D2; UsrFunc[int FindUnusedFFC(int)] Params End
CALLFUNC 0.0764; UsrFunc[int FindUnusedFFC(int)] Call
POP D4
STORE D2 0.0005
LOAD D2 0.0005; unless() #38 Test
COMPAREV D2 0
GOTOCMP 203 !=; Test 'unless'
PUSHR D4; unless() #38 Body Start
LOAD D2 0.0006; UsrFunc[void __AutoGhostKill(npc)] Params Start
PUSHR D2; UsrFunc[void __AutoGhostKill(npc)] Params End
CALLFUNC 0.0713; UsrFunc[void __AutoGhostKill(npc)] Call
POP D4
GOTO 407; continue 1; AND unless() #38 Body End
LOAD D2 0.0005; InlineFunc[ffc screendata::LoadFFC(int)] Params
SUBV D2 1; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0004
SETV D2 1
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
LOAD D2 0.0006
PUSHR D2
POP REFNPC
SETR D2 NPCCSET
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR CSET D2
SETV D2 1
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFTWIDTH D2
SETV D2 1
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFTHEIGHT D2
LOAD D2 0.0006
PUSHR D2
POP REFNPC
SETR D2 NPCX
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR X D2
LOAD D2 0.0006
PUSHR D2
POP REFNPC
SETR D2 NPCY
PUSHR D2
LOAD D2 0.0006
PUSHR D2
POP REFNPC
SETR D2 NPCZ
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR Y D2
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD2 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD2 D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFSCRIPT D2
LOAD D2 0.0006
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFINITDD D2
SETV D2 1; if(true) #39 [Opt:AlwaysOn]
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2
LOAD D2 0.0001; if() #40 Test
COMPAREV D2 1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 377 ==; Test 'if'
LOAD D2 0.0001; if() #41 Test AND if() #40 Body Start
COMPAREV D2 -1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 377 ==; Test 'if'
SETV D2 3; if() #41 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCEXTEND D2
SETV D2 1024
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCXOFS D2; if() #41 Body End
LOAD D2 0.0001; if() #40 Body End AND if() #18 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 395 ==; Test 'if'
SETV D2 1; if() #18 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFNPC
SETR NPCMISCD D2
GOTO 407; if() #18 Body End
LOAD D2 0.0001; if() #18 Else Start
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFNPC
SETR NPCMISCD D2; if() #18 Else End
LOAD D2 0.0003; for() #2 Body End AND for() #2 LoopIncrement
SUBV D2 1
STORE D2 0.0003
GOTO 73; for() #2 End
POPARGS D5 0.0007
RETURNFUNC; Func[void AutoGhost()] Body End
PUSHARGSV 0 0.0009; Func[int __AutoGhostParseName(npc, int[])] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 64 0
STORE D2 0.0008
ALLOCATEMEMV D2 64 0
STORE D2 0.0007
SETV D2 1
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0010; InlineFunc[void npc::GetName(char32[])] Params Start
PUSHR D2
LOAD D2 0.0008; InlineFunc[void npc::GetName(char32[])] Params End
POP REFNPC; InlineFunc[void npc::GetName(char32[])] Body Start
NPCNAME D2; InlineFunc[void npc::GetName(char32[])] Body End
STOREV 0 0.0006; for() #151 setup
LOAD D2 0.0006; for() #151 LoopTest
COMPAREV D2 63
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 651 ==; for() #151 TestFail?
LOAD D2 0.0008; if() #584 Test AND for() #151 Body Start
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
COMPAREV D2 64
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 647 ==; Test 'if'
LOAD D2 0.0008; if() #584 Body Start
PUSHR D2
LOAD D2 0.0006
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0005
PUSHR D4; if() #349 Test
LOAD D2 0.0005; UsrFunc[bool __IsScriptNameChar(int, bool)] Params Start
PUSHR D2
PUSHV 1; UsrFunc[bool __IsScriptNameChar(int, bool)] Params End
CALLFUNC 0.8939; UsrFunc[bool __IsScriptNameChar(int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 554 ==; Test 'if'
STOREV 0 0.0004; if() #349 Body Start
LOAD D2 0.0006; for() #152 setup
ADDV D2 1
STORE D2 0.0006
PUSHR D4; for() #152 LoopTest
LOAD D2 0.0008; UsrFunc[bool __IsScriptNameChar(int, bool)] Params Start
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
PUSHR D2
PUSHV 0; UsrFunc[bool __IsScriptNameChar(int, bool)] Params End
CALLFUNC 0.8939; UsrFunc[bool __IsScriptNameChar(int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 496 ==; for() #152 TestFail?
LOAD D2 0.0008; for() #152 Body Start
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0004
ADDV D2 1
STORE D2 0.0004; for() #152 Body End
LOAD D2 0.0006; for() #152 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 464; for() #152 End
SETV D2 0
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0007; InlineFunc[int Game::GetFFCScript(char32[])] Params
GETFFCSCRIPT D2; InlineFunc[int Game::GetFFCScript(char32[])] Body
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0006
SUBV D2 1
STORE D2 0.0006
LOAD D2 0.0009; if() #585 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 647 ==; Test 'if'
ALLOCATEMEMV D2 59 0; if() #585 Body Start
WRITEPODSTRING D2 "ghost.zh: AutoGhost setup failed - script does not exist.\n"
STORE D2 0.0002
ALLOCATEMEMV D2 80 0
WRITEPODSTRING D2 "  Script name: %s\n"
STORE D2 0
LOAD D2 0.0002; InlineFunc[void printf(char32[])] Params Start
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
SETV D2 0; return Start
LOAD D3 0
DEALLOCATEMEMR D3
LOAD D3 0.0002
DEALLOCATEMEMR D3
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
GOTO 711; return End
LOAD D3 0
DEALLOCATEMEMR D3
LOAD D3 0.0002
DEALLOCATEMEMR D3; if() #585 Body End
GOTO 647; if() #349 Body End
LOAD D2 0.0005; if() #586 Test AND if() #349 Else Start
COMPAREV D2 48
GOTOCMP 560 <
LOAD D2 0.0005
COMPAREV D2 57
GOTOCMP 565 <=
LOAD D2 0.0005
COMPAREV D2 45
GOTOCMP 565 ==
SETV D2 0
GOTO 566
SETV D2 1
COMPAREV D2 0
GOTOCMP 647 ==; Test 'if'
STOREV 0 0.0004; if() #586 Body Start
LOAD D2 0.0005; if() #587 Test
COMPAREV D2 45
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 585 ==; Test 'if'
SETV D2 45; if() #587 Body Start
PUSHR D2
LOAD D2 0.0007
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
SETV D2 1
STORE D2 0.0004
LOAD D2 0.0006
ADDV D2 1
STORE D2 0.0006; if() #587 Body End
LOAD D2 0.0006; for() #153 setup
ADDV D2 1
STORE D2 0.0006
LOAD D2 0.0008; for() #153 LoopTest
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
COMPAREV D2 48
GOTOCMP 604 <
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
COMPAREV D2 57
GOTOCMP 604 >
SETV D2 1
GOTO 605
SETV D2 0
COMPAREV D2 0
GOTOCMP 627 ==; for() #153 TestFail?
LOAD D2 0.0008; for() #153 Body Start
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0004
ADDV D2 1
STORE D2 0.0004; for() #153 Body End
LOAD D2 0.0006; for() #153 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 588; for() #153 End
SETV D2 0
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0007; InlineFunc[int atoi(char32[])] Params Start
SETR D3 D2; InlineFunc[int atoi(char32[])] Params End
ATOI D2 D3; InlineFunc[int atoi(char32[])] Body
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0006
SUBV D2 1
STORE D2 0.0006; if() #586 Body End
LOAD D2 0.0006; if() #349 Else End AND if() #584 Body End AND for() #151 Body End AND for() #151 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 431; for() #151 End
LOAD D2 0.0009; if() #589 Test AND unless(false) #588 [Opt:AlwaysOn]
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 701 ==; Test 'if'
ALLOCATEMEMV D2 54 0; if() #589 Body Start
WRITEPODSTRING D2 "ghost.zh: AutoGhost setup failed - script not found.\n"
STORE D2 0.0005
ALLOCATEMEMV D2 80 0
WRITEPODSTRING D2 "  Enemy name: %s\n"
STORE D2 0.0003
ALLOCATEMEMV D2 55 0
WRITEPODSTRING D2 "  Script name should start after this character: %c\n"
STORE D2 0.0001
LOAD D2 0.0005; InlineFunc[void printf(char32[])] Params Start
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0.0003; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
LOAD D2 0.0008
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0.0001; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
PUSHVARGV 64; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
SETV D2 0; return Start
LOAD D3 0.0001
DEALLOCATEMEMR D3
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D3 0.0005
DEALLOCATEMEMR D3
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
GOTO 711; return End
LOAD D3 0.0001
DEALLOCATEMEMR D3
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D3 0.0005
DEALLOCATEMEMR D3; if() #589 Body End
SETV D2 1; return Start
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
GOTO 711; return End
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
POPARGS D5 0.0011
RETURNFUNC; Func[int __AutoGhostParseName(npc, int[])] Body End
SETR D4 SP2; Func[void __AutoGhostKill(npc)] Body Start
SETV D2 65536
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFNPC
SETR NPCMISCD D2
SETV D2 1024
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCX D2
SETV D2 1024
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCY D2
SETV D2 -1000
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHP D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCITEMSET D2
POP D5
RETURNFUNC; Func[void __AutoGhostKill(npc)] Body End
PUSHARGSV 0 0.0002; Func[int FindUnusedFFC(int)] Body Start
SETR D4 SP2
STOREV 0 0.0001
LOAD D2 0.0002; InlineFunc[int Max(int, int)] Params Start AND for() #43 setup
ADDV D2 1
PUSHVARGR D2
PUSHVARGV 1; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0
LOAD D2 0; for() #43 LoopTest
COMPAREV D2 32
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 819 ==; for() #43 TestFail?
LOAD D2 0; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #43 Body Start
SUBV D2 1; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0001
LOAD D2 0.0001; if() #175 Test
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 0
GOTOCMP 795 ==
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 1
GOTOCMP 795 ==
SETV D2 0
GOTO 796
SETV D2 1
COMPAREV D2 0
GOTOCMP 815 ==; Test 'if'
LOAD D2 0.0001; unless() #176 Test AND if() #175 Body Start
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
COMPAREV D2 0
GOTOCMP 815 !=; Test 'unless'
LOAD D2 0.0001; unless() #177 Test AND unless() #176 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 815 !=; Test 'unless'
LOAD D2 0; return Start AND unless() #177 Body Start
GOTO 820; return End AND unless() #177 Body End
LOAD D2 0; unless() #176 Body End AND if() #175 Body End AND for() #43 Body End AND for() #43 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 773; for() #43 End
SETV D2 0; return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[int FindUnusedFFC(int)] Body End
SETR D4 SP2; Func[int CenterX(eweapon)] Body Start
LOAD D2 0; return Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNX
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNTXSZ
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNTXSZ
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
POP D5; return End
RETURNFUNC; Func[int CenterX(eweapon)] Body End
SETR D4 SP2; Func[int CenterY(eweapon)] Body Start
LOAD D2 0; return Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNY
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNTYSZ
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNTYSZ
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
POP D5; return End
RETURNFUNC; Func[int CenterY(eweapon)] Body End
PUSHARGSV 0 0.0002; Func[void CleanUpGhostFFCs()] Body Start
SETR D4 SP2
SETR D2 LINKHP; if() #86 Test
COMPAREV D2 0
GOTOCMP 876 >
GOTO 876
SETV D2 1
GOTO 877
SETV D2 0
COMPAREV D2 0
GOTOCMP 926 ==; Test 'if'
STOREV 0 0.0001; if() #86 Body Start
STOREV 1 0; for() #3 setup
LOAD D2 0; for() #3 LoopTest
COMPAREV D2 32
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 926 ==; for() #3 TestFail?
LOAD D2 0; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #3 Body Start
SUBV D2 1; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0001
SETR D2 GD24; if() #87 Test
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
RSHIFTV D2 4
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
ANDV D2 15
SETV D3 1
LSHIFTR D3 D2
SETR D2 D3
POP D3
ANDR D2 D3
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 922 ==; Test 'if'
SETV D2 0; if() #87 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #87 Body End
LOAD D2 0; for() #3 Body End AND for() #3 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 881; for() #3 End
POPARGS D5 0.0002; if() #86 Body End
RETURNFUNC; Func[void CleanUpGhostFFCs()] Body End
PUSHARGSV 0 0.0002; Func[void DrawEWeaponShadow(eweapon)] Body Start
SETR D4 SP2
PUSHR D4
LOAD D2 0.0002; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNXOFS
POP D3
ADDR D2 D3
STORE D2 0.0001
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNY
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNTYSZ
SUBV D2 1
MULTV D2 16
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNYOFS
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNZOFS
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0
PUSHV 1; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if(true) #35 [Opt:AlwaysOn]
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 2
ADDV D2 27400
PUSHR D2
PUSHARGSV 1 0.0002
PUSHV 7
PUSHARGSV -1 0.0002
PUSHARGSV 0 0.0004
PUSHV 1
PUSHV 64; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILER; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0015; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS D5 0.0003
RETURNFUNC; Func[void DrawEWeaponShadow(eweapon)] Body End
PUSHARGSV 0 0.0009; Func[void DrawGhostFFCs()] Body Start
SETR D4 SP2
SETV D2 1; if() #125 Test
PUSHR D2
POP D0
SETR D2 SCREENEFLAGSD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1010 ==; Test 'if'
PUSHR D4; unless() #126 Test AND if() #125 Body Start
CALLFUNC 0.1196; UsrFunc[bool __HaveAmulet()] Call
POP D4
COMPAREV D2 0
GOTOCMP 1194 ==; Test 'unless' AND return (Void) AND unless() #126 Body
STOREV 0 0.0008; if() #125 Body End
STOREV 0 0.0007
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
SETV D2 1; if() #37 Test AND if(true) #36 [Opt:AlwaysOn]
PUSHR D2
POP D0
SETR D2 SCREENFLAGSD
ANDV D2 16
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1029 ==; Test 'if'
SETV D2 1; if() #37 Body Start
STORE D2 0.0003
GOTO 1031; if() #37 Body End
SETV D2 2; if() #37 Else Start
STORE D2 0.0003; if() #37 Else End
SETV D2 4
STORE D2 0.0002
STOREV 1 0.0001; for() #20 setup
LOAD D2 0.0001; for() #20 LoopTest
PUSHR D2
SETR D2 NPCCOUNT
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 1194 ==; for() #20 TestFail?
LOAD D2 0.0001; InlineFunc[npc screendata::LoadNPC(int)] Params AND for() #20 Body Start
SUBV D2 1; InlineFunc[npc screendata::LoadNPC(int)] Body Start
LOADNPCR D2
SETR D2 REFNPC; InlineFunc[npc screendata::LoadNPC(int)] Body End
STORE D2 0.0006
PUSHR D4
LOAD D2 0.0006; UsrFunc[int[] __GetDrawingArray(npc)] Params Start
PUSHR D2; UsrFunc[int[] __GetDrawingArray(npc)] Params End
CALLFUNC 0.1215; UsrFunc[int[] __GetDrawingArray(npc)] Call
POP D4
STORE D2 0.0008
LOAD D2 0.0008; unless() #127 Test
COMPAREV D2 0
GOTOCMP 1190 ==; Test 'unless' AND continue 1; AND unless() #127 Body
SETR D2 GD26; if() #128 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1074 ==; Test 'if'
LOAD D2 0.0008; if() #129 Test AND if() #128 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 2
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1190 !=; Test 'if' AND continue 1; AND if() #129 Body
LOAD D2 0.0008; if() #128 Body End AND if() #38 Test
PUSHR D2
POP D0
READPODARRAYV D2 2
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1086 ==; Test 'if'
SETV D2 64; if() #38 Body Start
STORE D2 0.0005
GOTO 1088; if() #38 Body End
SETV D2 128; if() #38 Else Start
STORE D2 0.0005; if() #38 Else End
LOAD D2 0.0008; if() #39 Test
PUSHR D2
POP D0
READPODARRAYV D2 2
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1100 ==; Test 'if'
LOAD D2 0.0002; if() #39 Body Start
STORE D2 0.0004
GOTO 1102; if() #39 Body End
LOAD D2 0.0003; if() #39 Else Start
STORE D2 0.0004; if() #39 Else End
SETV D2 3
STORE D2 0.0007
STOREV 0 0; for() #21 setup
LOAD D2 0; for() #21 LoopTest
PUSHR D2
LOAD D2 0.0008
PUSHR D2
POP D0
READPODARRAYV D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1190 ==; for() #21 TestFail?
LOAD D2 0.0008; if() #130 Test AND for() #21 Body Start
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
COMPAREV D2 1
GOTOCMP 1132 ==
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
COMPAREV D2 0
GOTOCMP 1132 ==
SETV D2 1
GOTO 1133
SETV D2 0
COMPAREV D2 0
GOTOCMP 1183 ==; Test 'if'
LOAD D2 0.0004; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #130 Body Start
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
ADDV D2 1
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
ADDV D2 2
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
ADDV D2 3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
ADDV D2 4
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
PUSHARGSV -1 0.0002
PUSHARGSV 0 0.0005
PUSHV 1
LOAD D2 0.0005
PUSHR D2; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWCOMBOR; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0016; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End AND if() #130 Body End
LOAD D2 0.0007
ADDV D2 6
STORE D2 0.0007; for() #21 Body End
LOAD D2 0; for() #21 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 1105; for() #21 End
LOAD D2 0.0001; for() #20 Body End AND for() #20 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 1034; for() #20 End
POPARGS D5 0.0009
RETURNFUNC; Func[void DrawGhostFFCs()] Body End
SETR D4 SP2; Func[bool __HaveAmulet()] Body Start
SETV D2 50; if() #691 Test
PUSHR D2
POP D0
SETR D2 LINKITEMD
COMPAREV D2 0
GOTOCMP 1205 ==; Test 'if'
SETV D2 1; return Start AND if() #691 Body Start
GOTO 1214; return End AND if() #691 Body End
SETV D2 63; if() #692 Test
PUSHR D2
POP D0
SETR D2 LINKITEMD
COMPAREV D2 0
GOTOCMP 1213 ==; Test 'if'
SETV D2 1; return Start AND if() #692 Body Start
GOTO 1214; return End AND if() #692 Body End
SETV D2 0; return Start
RETURNFUNC; return End AND Func[bool __HaveAmulet()] Body End
PUSHV 0; Func[int[] __GetDrawingArray(npc)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #602 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCMISCD
ANDV D2 65536
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1231 ==; Test 'if'
SETV D2 0; return Start AND if() #602 Body Start
GOTO 1251; return End AND if() #602 Body End
LOAD D2 0.0001
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCMISCD
ANDV D2 65535
STORE D2 0
LOAD D2 0; unless() #603 Test
COMPAREV D2 0
GOTOCMP 1245 !=; Test 'unless'
SETV D2 0; return Start AND unless() #603 Body Start
GOTO 1251; return End AND unless() #603 Body End
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 23
STORE D2 0
LOAD D2 0; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int[] __GetDrawingArray(npc)] Body End
PUSHARGSV 0 0.0002; Func[int FindUnusedFFC()] Body Start
SETR D4 SP2
STOREV 0 0.0001
STOREV 1 0; for() #42 setup
LOAD D2 0; for() #42 LoopTest
COMPAREV D2 33
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1303 ==; for() #42 TestFail?
LOAD D2 0; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #42 Body Start
SUBV D2 1; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0001
LOAD D2 0.0001; if() #172 Test
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 0
GOTOCMP 1279 ==
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 1
GOTOCMP 1279 ==
SETV D2 0
GOTO 1280
SETV D2 1
COMPAREV D2 0
GOTOCMP 1299 ==; Test 'if'
LOAD D2 0.0001; unless() #173 Test AND if() #172 Body Start
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
COMPAREV D2 0
GOTOCMP 1299 !=; Test 'unless'
LOAD D2 0.0001; unless() #174 Test AND unless() #173 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 1299 !=; Test 'unless'
LOAD D2 0; return Start AND unless() #174 Body Start
GOTO 1304; return End AND unless() #174 Body End
LOAD D2 0; unless() #173 Body End AND if() #172 Body End AND for() #42 Body End AND for() #42 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 1257; for() #42 End
SETV D2 0; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int FindUnusedFFC()] Body End
PUSHV 0; Func[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0003; if() #198 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1319 ==; Test 'if'
PUSHR D4; if() #198 Body Start
LOAD D2 0.0009; UsrFunc[int GetDefaultEWeaponSprite(int)] Params Start
PUSHR D2; UsrFunc[int GetDefaultEWeaponSprite(int)] Params End
CALLFUNC 0.1465; UsrFunc[int GetDefaultEWeaponSprite(int)] Call
POP D4
STORE D2 0.0003; if() #198 Body End
LOAD D2 0.0002; if() #199 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1330 ==; Test 'if'
PUSHR D4; if() #199 Body Start
LOAD D2 0.0009; UsrFunc[int GetDefaultEWeaponSound(int)] Params Start
PUSHR D2; UsrFunc[int GetDefaultEWeaponSound(int)] Params End
CALLFUNC 0.1625; UsrFunc[int GetDefaultEWeaponSound(int)] Call
POP D4
STORE D2 0.0002; if() #199 Body End
LOAD D2 0.0009; InlineFunc[eweapon screendata::CreateEWeapon(int)] Params
CREATEEWEAPONR D2; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body Start
SETR D2 REFEWPN; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body End
STORE D2 0
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNX D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNY D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNPOWER D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNANGULAR D2
LOAD D2 0.0001; if() #51 Test
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1400 ==; Test 'if'
PUSHR D4; if() #51 Body Start
LOAD D2 0.0006; UsrFunc[int __UnblockableDir(int)] Params Start
PUSHR D2; UsrFunc[int __UnblockableDir(int)] Params End
CALLFUNC 0.1953; UsrFunc[int __UnblockableDir(int)] Call
POP D4
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDIR D2
GOTO 1409; if() #51 Body End
LOAD D2 0.0006; if() #51 Else Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDIR D2; if() #51 Else End
LOAD D2 0.0003; if() #200 Test
COMPAREV D2 0
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 1420 ==; Test 'if'
LOAD D2 0; InlineFunc[void eweapon::UseSprite(int)] Params Start AND if() #200 Body Start
PUSHR D2
LOAD D2 0.0003; InlineFunc[void eweapon::UseSprite(int)] Params End
POP D3; InlineFunc[void eweapon::UseSprite(int)] Body Start
SETR REFEWPN D3
EWPNUSESPRITER D2; InlineFunc[void eweapon::UseSprite(int)] Body End AND if() #200 Body End
LOAD D2 0.0001; if() #201 Test
ANDV D2 32
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1436 ==; Test 'if'
SETV D2 0; if() #201 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNCOLLDET D2; if() #201 Body End
LOAD D2 0.0001; if() #202 Test
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1447 ==; Test 'if'
PUSHR D4; if() #202 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1788; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #202 Body End
LOAD D2 0.0001
ORV D2 512
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0002; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
LOAD D2 0; return Start
POPARGS D5 0.0010; return End
RETURNFUNC; Func[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0003; Func[int GetDefaultEWeaponSprite(int)] Body Start
SETR D4 SP2
LOAD D2 0.0003; if() #58 Test
COMPAREV D2 129
GOTOCMP 1475 ==
LOAD D2 0.0003
COMPAREV D2 145
GOTOCMP 1475 ==
SETV D2 0
GOTO 1476
SETV D2 1
COMPAREV D2 0
GOTOCMP 1480 ==; Test 'if'
SETV D2 17; return Start AND if() #58 Body Start
GOTO 1623; return End AND if() #58 Body End
LOAD D2 0.0003; if() #59 Test AND if() #58 Else Start
COMPAREV D2 133
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1487 ==; Test 'if'
SETV D2 18; return Start AND if() #59 Body Start
GOTO 1623; return End AND if() #59 Body End
LOAD D2 0.0003; if() #60 Test AND if() #59 Else Start
COMPAREV D2 130
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1494 ==; Test 'if'
SETV D2 19; return Start AND if() #60 Body Start
GOTO 1623; return End AND if() #60 Body End
LOAD D2 0.0003; if() #61 Test AND if() #60 Else Start
COMPAREV D2 140
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1501 ==; Test 'if'
SETV D2 35; return Start AND if() #61 Body Start
GOTO 1623; return End AND if() #61 Body End
LOAD D2 0.0003; if() #62 Test AND if() #61 Else Start
COMPAREV D2 142
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1508 ==; Test 'if'
SETV D2 81; return Start AND if() #62 Body Start
GOTO 1623; return End AND if() #62 Body End
LOAD D2 0.0003; if() #63 Test AND if() #62 Else Start
COMPAREV D2 139
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1515 ==; Test 'if'
SETV D2 80; return Start AND if() #63 Body Start
GOTO 1623; return End AND if() #63 Body End
LOAD D2 0.0003; if() #64 Test AND if() #63 Else Start
COMPAREV D2 134
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1522 ==; Test 'if'
SETV D2 21; return Start AND if() #64 Body Start
GOTO 1623; return End AND if() #64 Body End
LOAD D2 0.0003; if() #65 Test AND if() #64 Else Start
COMPAREV D2 132
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1529 ==; Test 'if'
SETV D2 20; return Start AND if() #65 Body Start
GOTO 1623; return End AND if() #65 Body End
LOAD D2 0.0003; if() #66 Test AND if() #65 Else Start
COMPAREV D2 141
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1536 ==; Test 'if'
SETV D2 36; return Start AND if() #66 Body Start
GOTO 1623; return End AND if() #66 Body End
LOAD D2 0.0003; if() #67 Test AND if() #66 Else Start
COMPAREV D2 137
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1543 ==; Test 'if'
SETV D2 76; return Start AND if() #67 Body Start
GOTO 1623; return End AND if() #67 Body End
LOAD D2 0.0003; if() #68 Test AND if() #67 Else Start
COMPAREV D2 138
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1550 ==; Test 'if'
SETV D2 77; return Start AND if() #68 Body Start
GOTO 1623; return End AND if() #68 Body End
LOAD D2 0.0003; if() #69 Test AND if() #68 Else Start
COMPAREV D2 131
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1622 ==; Test 'if'
STOREV 0 0.0002; if() #69 Body Start
STOREV 0 0.0001
STOREV 0 0; for() #48 setup
LOAD D2 0; for() #48 LoopTest
COMPAREV D2 256
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1606 ==; for() #48 TestFail?
LOAD D2 0; unless() #211 Test AND for() #48 Body Start
PUSHR D2
POP D0
SETR D2 LINKITEMD
COMPAREV D2 0
GOTOCMP 1602 ==; Test 'unless' AND continue 1; AND unless() #211 Body
LOAD D2 0; InlineFunc[itemdata Game::LoadItemData(int)] Params
LOADITEMDATAR D2; InlineFunc[itemdata Game::LoadItemData(int)] Body Start
SETR D2 REFITEMCLASS; InlineFunc[itemdata Game::LoadItemData(int)] Body End
STORE D2 0.0001
LOAD D2 0.0001; if() #212 Test
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATAFAMILY
COMPAREV D2 1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1602 !=; Test 'if' AND continue 1; AND if() #212 Body
LOAD D2 0.0001; if() #213 Test
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATALEVEL
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1602 ==; Test 'if'
LOAD D2 0.0001; if() #213 Body Start
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATALEVEL
STORE D2 0.0002
LOAD D2 0.0002; if() #214 Test
COMPAREV D2 3
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 1606 !=; Test 'if' AND break 1; AND if() #214 Body
LOAD D2 0; if() #213 Body End AND for() #48 Body End AND for() #48 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 1558; for() #48 End
LOAD D2 0.0002; if() #70 Test
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 1613 ==; Test 'if'
SETV D2 4; return Start AND if() #70 Body Start
GOTO 1623; return End AND if() #70 Body End
LOAD D2 0.0002; if() #71 Test AND if() #70 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1620 ==; Test 'if'
SETV D2 5; return Start AND if() #71 Body Start
GOTO 1623; return End AND if() #71 Body End
SETV D2 6; return Start AND if() #71 Else Start
GOTO 1623; return End AND if() #71 Else End AND if() #70 Else End AND if() #69 Body End
SETV D2 0; return Start AND if() #69 Else Start
POPARGS D5 0.0004; return End AND if() #69 Else End AND if() #68 Else End AND if() #67 Else End AND if() #66 Else End AND if() #65 Else End AND if() #64 Else End AND if() #63 Else End AND if() #62 Else End AND if() #61 Else End AND if() #60 Else End AND if() #59 Else End AND if() #58 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSprite(int)] Body End
SETR D4 SP2; Func[int GetDefaultEWeaponSound(int)] Body Start
LOAD D2 0; if() #54 Test
COMPAREV D2 129
GOTOCMP 1634 ==
LOAD D2 0
COMPAREV D2 145
GOTOCMP 1634 ==
SETV D2 0
GOTO 1635
SETV D2 1
COMPAREV D2 0
GOTOCMP 1639 ==; Test 'if'
SETV D2 40; return Start AND if() #54 Body Start
GOTO 1676; return End AND if() #54 Body End
LOAD D2 0; if() #55 Test AND if() #54 Else Start
COMPAREV D2 134
GOTOCMP 1647 ==
LOAD D2 0
COMPAREV D2 141
GOTOCMP 1647 ==
SETV D2 0
GOTO 1648
SETV D2 1
COMPAREV D2 0
GOTOCMP 1652 ==; Test 'if'
SETV D2 32; return Start AND if() #55 Body Start
GOTO 1676; return End AND if() #55 Body End
LOAD D2 0; if() #56 Test AND if() #55 Else Start
COMPAREV D2 140
GOTOCMP 1663 ==
LOAD D2 0
COMPAREV D2 142
GOTOCMP 1663 ==
LOAD D2 0
COMPAREV D2 139
GOTOCMP 1663 ==
SETV D2 0
GOTO 1664
SETV D2 1
COMPAREV D2 0
GOTOCMP 1668 ==; Test 'if'
SETV D2 13; return Start AND if() #56 Body Start
GOTO 1676; return End AND if() #56 Body End
LOAD D2 0; if() #57 Test AND if() #56 Else Start
COMPAREV D2 133
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1675 ==; Test 'if'
SETV D2 51; return Start AND if() #57 Body Start
GOTO 1676; return End AND if() #57 Body End
SETV D2 0; return Start AND if() #57 Else Start
POP D5; return End AND if() #57 Else End AND if() #56 Else End AND if() #55 Else End AND if() #54 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSound(int)] Body End
PUSHARGSV 0 0.0002; Func[void SetEWeaponDir(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
MODV D2 6.2832
STORE D2 0.0001
STOREV 0 0
LOAD D2 0.0001; if() #518 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1695 ==; Test 'if'
LOAD D2 0.0001; if() #518 Body Start
ADDV D2 6.2832
STORE D2 0.0001; if() #518 Body End
LOAD D2 0.0001; if() #247 Test
COMPAREV D2 0.3927
GOTOCMP 1703 <
LOAD D2 0.0001
COMPAREV D2 5.8905
GOTOCMP 1703 >
SETV D2 0
GOTO 1704
SETV D2 1
COMPAREV D2 0
GOTOCMP 1709 ==; Test 'if'
SETV D2 3; if() #247 Body Start
STORE D2 0
GOTO 1759; if() #247 Body End
LOAD D2 0.0001; if() #248 Test AND if() #247 Else Start
COMPAREV D2 1.1781
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1717 ==; Test 'if'
SETV D2 7; if() #248 Body Start
STORE D2 0
GOTO 1759; if() #248 Body End
LOAD D2 0.0001; if() #249 Test AND if() #248 Else Start
COMPAREV D2 1.9635
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1725 ==; Test 'if'
SETV D2 1; if() #249 Body Start
STORE D2 0
GOTO 1759; if() #249 Body End
LOAD D2 0.0001; if() #250 Test AND if() #249 Else Start
COMPAREV D2 2.7489
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1733 ==; Test 'if'
SETV D2 6; if() #250 Body Start
STORE D2 0
GOTO 1759; if() #250 Body End
LOAD D2 0.0001; if() #251 Test AND if() #250 Else Start
COMPAREV D2 3.5343
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1741 ==; Test 'if'
SETV D2 2; if() #251 Body Start
STORE D2 0
GOTO 1759; if() #251 Body End
LOAD D2 0.0001; if() #252 Test AND if() #251 Else Start
COMPAREV D2 4.3197
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1749 ==; Test 'if'
SETV D2 4; if() #252 Body Start
STORE D2 0
GOTO 1759; if() #252 Body End
LOAD D2 0.0001; if() #253 Test AND if() #252 Else Start
COMPAREV D2 5.1051
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1757 ==; Test 'if'
SETV D2 0; if() #253 Body Start
STORE D2 0
GOTO 1759; if() #253 Body End
SETV D2 5; if() #253 Else Start
STORE D2 0; if() #253 Else End
LOAD D2 0.0002; if() #252 Else End AND if() #251 Else End AND if() #250 Else End AND if() #249 Else End AND if() #248 Else End AND if() #247 Else End AND if() #519 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1777 ==; Test 'if'
PUSHR D4; if() #519 Body Start
LOAD D2 0; UsrFunc[int __UnblockableDir(int)] Params Start
PUSHR D2; UsrFunc[int __UnblockableDir(int)] Params End
CALLFUNC 0.1953; UsrFunc[int __UnblockableDir(int)] Call
POP D4
STORE D2 0; if() #519 Body End
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDIR D2
POPARGS D5 0.0003
RETURNFUNC; Func[void SetEWeaponDir(eweapon)] Body End
PUSHV 0; Func[void SetEWeaponRotation(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #271 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 1871 ==; Test 'if'
LOAD D2 0.0001; if() #271 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
MODV D2 6.2832
STORE D2 0
LOAD D2 0; if() #524 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1810 ==; Test 'if'
LOAD D2 0; if() #524 Body Start
ADDV D2 6.2832
STORE D2 0; if() #524 Body End
LOAD D2 0; if() #272 Test
COMPAREV D2 0.7854
GOTOCMP 1818 <
LOAD D2 0
COMPAREV D2 5.4978
GOTOCMP 1818 >
SETV D2 0
GOTO 1819
SETV D2 1
COMPAREV D2 0
GOTOCMP 1831 ==; Test 'if'
SETV D2 4; if() #272 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2
GOTO 1951; if() #272 Body End
LOAD D2 0; if() #273 Test AND if() #272 Else Start
COMPAREV D2 2.3562
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 1846 ==; Test 'if'
SETV D2 3; if() #273 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2
GOTO 1951; if() #273 Body End
LOAD D2 0; if() #274 Test AND if() #273 Else Start
COMPAREV D2 3.9270
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1861 ==; Test 'if'
SETV D2 7; if() #274 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2
GOTO 1951; if() #274 Body End
SETV D2 0; if() #274 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2; if() #274 Else End
GOTO 1951; if() #273 Else End AND if() #272 Else End AND if() #271 Body End
PUSHR D4; if() #271 Else Start
LOAD D2 0.0001; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2
POP REFEWPN
PUSHR EWPNDIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2013; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #275 Test
COMPAREV D2 0
GOTOCMP 1890 ==
LOAD D2 0
COMPAREV D2 5
GOTOCMP 1890 ==
LOAD D2 0
COMPAREV D2 4
GOTOCMP 1890 ==
SETV D2 0
GOTO 1891
SETV D2 1
COMPAREV D2 0
GOTOCMP 1903 ==; Test 'if'
SETV D2 0; if() #275 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2
GOTO 1951; if() #275 Body End
LOAD D2 0; if() #276 Test AND if() #275 Else Start
COMPAREV D2 1
GOTOCMP 1914 ==
LOAD D2 0
COMPAREV D2 7
GOTOCMP 1914 ==
LOAD D2 0
COMPAREV D2 6
GOTOCMP 1914 ==
SETV D2 0
GOTO 1915
SETV D2 1
COMPAREV D2 0
GOTOCMP 1927 ==; Test 'if'
SETV D2 3; if() #276 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2
GOTO 1951; if() #276 Body End
LOAD D2 0; if() #277 Test AND if() #276 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1942 ==; Test 'if'
SETV D2 7; if() #277 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2
GOTO 1951; if() #277 Body End
SETV D2 4; if() #277 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2; if() #277 Else End
POPARGS D5 0.0002; if() #276 Else End AND if() #275 Else End AND if() #271 Else End
RETURNFUNC; Func[void SetEWeaponRotation(eweapon)] Body End
SETR D4 SP2; Func[int __UnblockableDir(int)] Body Start
LOAD D2 0; if() #715 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1961 ==; Test 'if'
SETV D2 8; return Start AND if() #715 Body Start
GOTO 2011; return End AND if() #715 Body End
LOAD D2 0; if() #716 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1968 ==; Test 'if'
SETV D2 12; return Start AND if() #716 Body Start
GOTO 2011; return End AND if() #716 Body End
LOAD D2 0; if() #717 Test
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1975 ==; Test 'if'
SETV D2 14; return Start AND if() #717 Body Start
GOTO 2011; return End AND if() #717 Body End
LOAD D2 0; if() #718 Test
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1982 ==; Test 'if'
SETV D2 10; return Start AND if() #718 Body Start
GOTO 2011; return End AND if() #718 Body End
LOAD D2 0; if() #719 Test
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1989 ==; Test 'if'
SETV D2 15; return Start AND if() #719 Body Start
GOTO 2011; return End AND if() #719 Body End
LOAD D2 0; if() #720 Test
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1996 ==; Test 'if'
SETV D2 9; return Start AND if() #720 Body Start
GOTO 2011; return End AND if() #720 Body End
LOAD D2 0; if() #721 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2003 ==; Test 'if'
SETV D2 13; return Start AND if() #721 Body Start
GOTO 2011; return End AND if() #721 Body End
LOAD D2 0; if() #722 Test
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2010 ==; Test 'if'
SETV D2 11; return Start AND if() #722 Body Start
GOTO 2011; return End AND if() #722 Body End
LOAD D2 0; return Start
POP D5; return End
RETURNFUNC; Func[int __UnblockableDir(int)] Body End
SETR D4 SP2; Func[int __NormalizeDir(int)] Body Start
LOAD D2 0; if() #701 Test
COMPAREV D2 0
GOTOCMP 2022 <
LOAD D2 0
COMPAREV D2 7
GOTOCMP 2022 >
SETV D2 1
GOTO 2023
SETV D2 0
COMPAREV D2 0
GOTOCMP 2027 ==; Test 'if'
LOAD D2 0; return Start AND if() #701 Body Start
GOTO 2084; return End AND if() #701 Body End
LOAD D2 0; if() #702 Test
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2034 ==; Test 'if'
SETV D2 0; return Start AND if() #702 Body Start
GOTO 2084; return End AND if() #702 Body End
LOAD D2 0; if() #703 Test
COMPAREV D2 9
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2041 ==; Test 'if'
SETV D2 5; return Start AND if() #703 Body Start
GOTO 2084; return End AND if() #703 Body End
LOAD D2 0; if() #704 Test
COMPAREV D2 10
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2048 ==; Test 'if'
SETV D2 3; return Start AND if() #704 Body Start
GOTO 2084; return End AND if() #704 Body End
LOAD D2 0; if() #705 Test
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2055 ==; Test 'if'
SETV D2 7; return Start AND if() #705 Body Start
GOTO 2084; return End AND if() #705 Body End
LOAD D2 0; if() #706 Test
COMPAREV D2 12
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2062 ==; Test 'if'
SETV D2 1; return Start AND if() #706 Body Start
GOTO 2084; return End AND if() #706 Body End
LOAD D2 0; if() #707 Test
COMPAREV D2 13
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2069 ==; Test 'if'
SETV D2 6; return Start AND if() #707 Body Start
GOTO 2084; return End AND if() #707 Body End
LOAD D2 0; if() #708 Test
COMPAREV D2 14
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2076 ==; Test 'if'
SETV D2 2; return Start AND if() #708 Body Start
GOTO 2084; return End AND if() #708 Body End
LOAD D2 0; if() #709 Test
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2083 ==; Test 'if'
SETV D2 4; return Start AND if() #709 Body Start
GOTO 2084; return End AND if() #709 Body End
SETV D2 0; return Start
POP D5; return End
RETURNFUNC; Func[int __NormalizeDir(int)] Body End
SETR D4 SP2; Func[bool IsSideview()] Body Start
SETV D2 0; return Start
PUSHR D2
POP D0
SETR D2 SCREENFLAGSD
ANDV D2 4
PUSHR D2
SETR D2 CURDMAP; InlineFunc[dmapdata Game::LoadDMapData(int)] Params
LOADDMAPDATAR D2; InlineFunc[dmapdata Game::LoadDMapData(int)] Body Start
SETR D2 REFDMAPDATA; InlineFunc[dmapdata Game::LoadDMapData(int)] Body End
PUSHR D2
POP REFDMAPDATA
SETR D2 DMAPDATASIDEVIEW
POP D3
COMPARER D3 D2
SETCMP D2 BI!=
RETURNFUNC; return End AND Func[bool IsSideview()] Body End
SETR D4 SP2; Func[void InitializeGhostZHData()] Body Start
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 4 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2
RETURNFUNC; Func[void InitializeGhostZHData()] Body End
SETR D4 SP2; Func[void KillEWeapon(eweapon)] Body Start
LOAD D2 0
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ORV D2 128
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
POP D5
RETURNFUNC; Func[void KillEWeapon(eweapon)] Body End
PUSHARGSV 0 0.0005; Func[int __GetEWeaponThrowHeight(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0005
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
STORE D2 0.0004
LOAD D2 0.0004; if() #604 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 2184 ==; Test 'if'
SETV D2 1; return Start AND if() #604 Body Start
GOTO 2279; return End AND if() #604 Body End
LOAD D2 0.0005; InlineFunc[int Distance(int, int, int, int)] Params Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNX
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP REFEWPN
SETR D2 EWPNHXSZ
DIVV D2 2
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP REFEWPN
SETR D2 EWPNY
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP REFEWPN
SETR D2 EWPNHYSZ
DIVV D2 2
POP D3
ADDR D2 D3
PUSHR D2
SETR D2 LINKX
ADDV D2 8
PUSHR D2
SETR D2 LINKY
ADDV D2 8; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0003
LOAD D2 0.0003; if() #605 Test
COMPAREV D2 1
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2227 ==; Test 'if'
SETV D2 1; return Start AND if() #605 Body Start
GOTO 2279; return End AND if() #605 Body End
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0004
POP D3
DIVR D3 D2
SETR D2 D3
STORE D2 0.0002
STOREV 0 0.0001
LOAD D2 0.0001; while() #5 Test
COMPAREV D2 3.2000
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 2254 ==; Test 'while'
LOAD D2 0.0001; while() #5 Body Start
ADDV D2 0.1600
STORE D2 0.0001
LOAD D2 0.0002
SUBV D2 2
STORE D2 0.0002
LOAD D2 0.0002; if() #606 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 2235 ==; Test 'if'
LOAD D2 0.0001; return Start AND if() #606 Body Start
GOTO 2279; return End AND if() #606 Body End
GOTO 2235; while() #5 Body End AND while() #5 End
STOREV 0 0
LOAD D2 0.0002; while() #6 Test
PUSHR D2
LOAD D2 0
DIVV D2 3.2000
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2278 ==; Test 'while'
LOAD D2 0.0001; while() #6 Body Start
ADDV D2 0.1600
STORE D2 0.0001
LOAD D2 0
PUSHR D2
LOAD D2 0.0001
SUBV D2 3.2000
POP D3
ADDR D2 D3
STORE D2 0
LOAD D2 0.0002
SUBV D2 2
STORE D2 0.0002; while() #6 Body End
GOTO 2255; while() #6 End
LOAD D2 0.0001; return Start
POPARGS D5 0.0006; return End
RETURNFUNC; Func[int __GetEWeaponThrowHeight(eweapon)] Body End
SETR D4 SP2; Func[void SetEWeaponRotation(eweapon, int)] Body Start
PUSHR D4
LOAD D2 0; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2013; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #278 Test
COMPAREV D2 0
GOTOCMP 2299 ==
LOAD D2 0
COMPAREV D2 5
GOTOCMP 2299 ==
LOAD D2 0
COMPAREV D2 4
GOTOCMP 2299 ==
SETV D2 0
GOTO 2300
SETV D2 1
COMPAREV D2 0
GOTOCMP 2312 ==; Test 'if'
SETV D2 0; if() #278 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2
GOTO 2360; if() #278 Body End
LOAD D2 0; if() #279 Test AND if() #278 Else Start
COMPAREV D2 1
GOTOCMP 2323 ==
LOAD D2 0
COMPAREV D2 7
GOTOCMP 2323 ==
LOAD D2 0
COMPAREV D2 6
GOTOCMP 2323 ==
SETV D2 0
GOTO 2324
SETV D2 1
COMPAREV D2 0
GOTOCMP 2336 ==; Test 'if'
SETV D2 3; if() #279 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2
GOTO 2360; if() #279 Body End
LOAD D2 0; if() #280 Test AND if() #279 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2351 ==; Test 'if'
SETV D2 7; if() #280 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2
GOTO 2360; if() #280 Body End
SETV D2 4; if() #280 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2; if() #280 Else End
POPARGS D5 0.0002; if() #279 Else End AND if() #278 Else End
RETURNFUNC; Func[void SetEWeaponRotation(eweapon, int)] Body End
SETR D4 SP2; Func[int Sign(int)] Body Start
LOAD D2 0; if() #296 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2370 ==; Test 'if'
SETV D2 1; return Start AND if() #296 Body Start
GOTO 2378; return End AND if() #296 Body End
LOAD D2 0; if() #297 Test AND if() #296 Else Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2377 ==; Test 'if'
SETV D2 -1; return Start AND if() #297 Body Start
GOTO 2378; return End AND if() #297 Body End
SETV D2 0; return Start AND if() #297 Else Start
POP D5; return End AND if() #297 Else End AND if() #296 Else End
RETURNFUNC; Func[int Sign(int)] Body End
SETR D4 SP2; Func[void StartGhostZH()] Body Start
PUSHR D4
CALLFUNC 0.2103; UsrFunc[void InitializeGhostZHData()] Call
POP D4
RETURNFUNC; Func[void StartGhostZH()] Body End
PUSHARGSV 0 0.0007; Func[void UpdateEWeapon(eweapon)] Body Start
SETR D4 SP2
SETR D2 GD26; if() #555 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3523 !=; Test 'if' AND return (Void) AND if() #555 Body
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNX
STORE D2 0.0006
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNY
STORE D2 0.0005
STOREV 1 0.0004
LOAD D2 0.0007; if() #306 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 128
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2794 ==; Test 'if'
LOAD D2 0.0007; if() #556 Test AND if() #306 Body Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 2642 ==; Test 'if'
LOAD D2 0.0007; if() #307 Test AND if() #556 Body Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 6
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 2515 ==; Test 'if'
LOAD D2 0.0007; if() #308 Test AND if() #307 Body Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2458 ==; Test 'if'
PUSHR D4; if() #308 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMSineWave(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMSineWave(eweapon)] Params End
CALLFUNC 0.3525; UsrFunc[void __UpdateEWMSineWave(eweapon)] Call
POP D4
GOTO 2642; if() #308 Body End
LOAD D2 0.0007; if() #309 Test AND if() #308 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2475 ==; Test 'if'
PUSHR D4; if() #309 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMHoming(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMHoming(eweapon)] Params End
CALLFUNC 0.3707; UsrFunc[void __UpdateEWMHoming(eweapon)] Call
POP D4
GOTO 2642; if() #309 Body End
LOAD D2 0.0007; if() #310 Test AND if() #309 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2492 ==; Test 'if'
PUSHR D4; if() #310 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMHomingReaim(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMHomingReaim(eweapon)] Params End
CALLFUNC 0.3913; UsrFunc[void __UpdateEWMHomingReaim(eweapon)] Call
POP D4
GOTO 2642; if() #310 Body End
LOAD D2 0.0007; if() #311 Test AND if() #310 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2509 ==; Test 'if'
PUSHR D4; if() #311 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMRandom(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMRandom(eweapon)] Params End
CALLFUNC 0.4248; UsrFunc[void __UpdateEWMRandom(eweapon)] Call
POP D4
GOTO 2642; if() #311 Body End
PUSHR D4; if() #311 Else Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMRandomReaim(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMRandomReaim(eweapon)] Params End
CALLFUNC 0.4368; UsrFunc[void __UpdateEWMRandomReaim(eweapon)] Call
POP D4; if() #311 Else End
GOTO 2642; if() #310 Else End AND if() #309 Else End AND if() #308 Else End AND if() #307 Body End
LOAD D2 0.0007; if() #312 Test AND if() #307 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2550 ==; Test 'if'
LOAD D2 0.0007; if() #312 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
STORE D2 0.0006
LOAD D2 0.0007
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0007; UsrFunc[void __UpdateEWMVeer(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMVeer(eweapon)] Params End
CALLFUNC 0.4680; UsrFunc[void __UpdateEWMVeer(eweapon)] Call
POP D4
SETV D2 0
STORE D2 0.0004
GOTO 2642; if() #312 Body End
LOAD D2 0.0007; if() #313 Test AND if() #312 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2567 ==; Test 'if'
PUSHR D4; if() #313 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMThrow(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMThrow(eweapon)] Params End
CALLFUNC 0.5212; UsrFunc[void __UpdateEWMThrow(eweapon)] Call
POP D4
GOTO 2642; if() #313 Body End
LOAD D2 0.0007; if() #314 Test AND if() #313 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 19
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2584 ==; Test 'if'
PUSHR D4; if() #314 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMFall(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMFall(eweapon)] Params End
CALLFUNC 0.5518; UsrFunc[void __UpdateEWMFall(eweapon)] Call
POP D4
GOTO 2642; if() #314 Body End
LOAD D2 0.0007; if() #315 Test AND if() #314 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 20
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2619 ==; Test 'if'
LOAD D2 0.0007; if() #315 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
STORE D2 0.0006
LOAD D2 0.0007
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0007; UsrFunc[void __UpdateEWMDrift(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMDrift(eweapon)] Params End
CALLFUNC 0.5784; UsrFunc[void __UpdateEWMDrift(eweapon)] Call
POP D4
SETV D2 0
STORE D2 0.0004
GOTO 2642; if() #315 Body End
LOAD D2 0.0007; if() #315 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
STORE D2 0.0006
LOAD D2 0.0007
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0007; UsrFunc[void __UpdateEWMDriftWait(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMDriftWait(eweapon)] Params End
CALLFUNC 0.6288; UsrFunc[void __UpdateEWMDriftWait(eweapon)] Call
POP D4
SETV D2 0
STORE D2 0.0004; if() #315 Else End
LOAD D2 0.0007; if() #314 Else End AND if() #313 Else End AND if() #312 Else End AND if() #307 Else End AND if() #556 Body End AND if() #557 Test
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3104 ==; Test 'if'
LOAD D2 0.0007; if() #316 Test AND if() #557 Body Start
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2700 ==; Test 'if'
LOAD D2 0.0007; if() #316 Body Start
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
SETV D2 12
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0007; if() #558 Test
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 3104 ==; Test 'if'
PUSHR D4; if() #558 Body Start
LOAD D2 0.0007; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2147; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #558 Body End
GOTO 3104; if() #316 Body End
LOAD D2 0.0007; if() #317 Test AND if() #316 Else Start
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2744 ==; Test 'if'
LOAD D2 0.0007; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #559 Test AND if() #317 Body Start
PUSHR D2
POP REFEWPN
PUSHR EWPNX
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
PUSHR EWPNY
PUSHR LINKX
SETR D2 LINKY; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
PUSHR D2
LOAD D2 0.0007
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3104 ==; Test 'if'
PUSHR D4; if() #559 Body Start
LOAD D2 0.0007; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2147; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #559 Body End
GOTO 3104; if() #317 Body End
LOAD D2 0.0007; if() #560 Test AND if() #317 Else Start
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3104 ==; Test 'if'
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params Start AND if() #560 Body Start
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
PUSHR D2
LOAD D2 0.0007
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
SUBR D3 D2
PUSHVARGR D3; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0007; if() #561 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 3104 ==; Test 'if'
PUSHR D4; if() #561 Body Start
LOAD D2 0.0007; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2147; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #561 Body End
GOTO 3104; if() #560 Body End AND if() #317 Else End AND if() #316 Else End AND if() #557 Body End AND if() #306 Body End
LOAD D2 0.0007; if() #562 Test AND if() #306 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
GOTOCMP 2815 ==
LOAD D2 0.0007
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 1024
COMPAREV D2 0
GOTOCMP 2815 !=
SETV D2 1
GOTO 2816
SETV D2 0
COMPAREV D2 0
GOTOCMP 3104 ==; Test 'if'
LOAD D2 0.0007; if() #318 Test AND if() #562 Body Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2835 ==; Test 'if'
PUSHR D4; if() #318 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathPrototype(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathPrototype(eweapon)] Params End
CALLFUNC 0.6823; UsrFunc[void __DoEWeaponDeathPrototype(eweapon)] Call
POP D4
GOTO 3104; if() #318 Body End
LOAD D2 0.0007; if() #319 Test AND if() #318 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2969 ==; Test 'if'
LOAD D2 0.0007; if() #320 Test AND if() #319 Body Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2867 ==; Test 'if'
SETV D2 0; if() #320 Body Start
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
GOTO 3104; if() #320 Body End
LOAD D2 0.0007; if() #321 Test AND if() #320 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2884 ==; Test 'if'
PUSHR D4; if() #321 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathAimAtLink(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathAimAtLink(eweapon)] Params End
CALLFUNC 0.7222; UsrFunc[void __DoEWeaponDeathAimAtLink(eweapon)] Call
POP D4
GOTO 3104; if() #321 Body End
LOAD D2 0.0007; if() #322 Test AND if() #321 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2901 ==; Test 'if'
PUSHR D4; if() #322 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathExplode(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathExplode(eweapon)] Params End
CALLFUNC 0.7389; UsrFunc[void __DoEWeaponDeathExplode(eweapon)] Call
POP D4
GOTO 3104; if() #322 Body End
LOAD D2 0.0007; if() #323 Test AND if() #322 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2918 ==; Test 'if'
PUSHR D4; if() #323 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathSBombExplode(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathSBombExplode(eweapon)] Params End
CALLFUNC 0.7433; UsrFunc[void __DoEWeaponDeathSBombExplode(eweapon)] Call
POP D4
GOTO 3104; if() #323 Body End
LOAD D2 0.0007; if() #324 Test AND if() #323 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2935 ==; Test 'if'
PUSHR D4; if() #324 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FireballsHV(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FireballsHV(eweapon)] Params End
CALLFUNC 0.7477; UsrFunc[void __DoEWeaponDeath4FireballsHV(eweapon)] Call
POP D4
GOTO 3104; if() #324 Body End
LOAD D2 0.0007; if() #325 Test AND if() #324 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2952 ==; Test 'if'
PUSHR D4; if() #325 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FireballsDiag(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FireballsDiag(eweapon)] Params End
CALLFUNC 0.7535; UsrFunc[void __DoEWeaponDeath4FireballsDiag(eweapon)] Call
POP D4
GOTO 3104; if() #325 Body End
LOAD D2 0.0007; if() #563 Test AND if() #325 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3104 ==; Test 'if'
PUSHR D4; if() #563 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FireballsRand(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FireballsRand(eweapon)] Params End
CALLFUNC 0.7593; UsrFunc[void __DoEWeaponDeath4FireballsRand(eweapon)] Call
POP D4; if() #563 Body End
GOTO 3104; if() #325 Else End AND if() #324 Else End AND if() #323 Else End AND if() #322 Else End AND if() #321 Else End AND if() #320 Else End AND if() #319 Body End
LOAD D2 0.0007; if() #326 Test AND if() #319 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2986 ==; Test 'if'
PUSHR D4; if() #326 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath8Fireballs(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath8Fireballs(eweapon)] Params End
CALLFUNC 0.7703; UsrFunc[void __DoEWeaponDeath8Fireballs(eweapon)] Call
POP D4
GOTO 3104; if() #326 Body End
LOAD D2 0.0007; if() #327 Test AND if() #326 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 9
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3003 ==; Test 'if'
PUSHR D4; if() #327 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FiresHV(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FiresHV(eweapon)] Params End
CALLFUNC 0.7761; UsrFunc[void __DoEWeaponDeath4FiresHV(eweapon)] Call
POP D4
GOTO 3104; if() #327 Body End
LOAD D2 0.0007; if() #328 Test AND if() #327 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 10
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3020 ==; Test 'if'
PUSHR D4; if() #328 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FiresDiag(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FiresDiag(eweapon)] Params End
CALLFUNC 0.7821; UsrFunc[void __DoEWeaponDeath4FiresDiag(eweapon)] Call
POP D4
GOTO 3104; if() #328 Body End
LOAD D2 0.0007; if() #329 Test AND if() #328 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3037 ==; Test 'if'
PUSHR D4; if() #329 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FiresRand(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FiresRand(eweapon)] Params End
CALLFUNC 0.7881; UsrFunc[void __DoEWeaponDeath4FiresRand(eweapon)] Call
POP D4
GOTO 3104; if() #329 Body End
LOAD D2 0.0007; if() #330 Test AND if() #329 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 12
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3054 ==; Test 'if'
PUSHR D4; if() #330 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath8Fires(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath8Fires(eweapon)] Params End
CALLFUNC 0.7993; UsrFunc[void __DoEWeaponDeath8Fires(eweapon)] Call
POP D4
GOTO 3104; if() #330 Body End
LOAD D2 0.0007; if() #331 Test AND if() #330 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 13
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3071 ==; Test 'if'
PUSHR D4; if() #331 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathSpawnNPC(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathSpawnNPC(eweapon)] Params End
CALLFUNC 0.8098; UsrFunc[void __DoEWeaponDeathSpawnNPC(eweapon)] Call
POP D4
GOTO 3104; if() #331 Body End
LOAD D2 0.0007; if() #332 Test AND if() #331 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 14
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3088 ==; Test 'if'
PUSHR D4; if() #332 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathSingleFire(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathSingleFire(eweapon)] Params End
CALLFUNC 0.8145; UsrFunc[void __DoEWeaponDeathSingleFire(eweapon)] Call
POP D4
GOTO 3104; if() #332 Body End
LOAD D2 0.0007; if() #564 Test AND if() #332 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3104 ==; Test 'if'
PUSHR D4; if() #564 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathRunScript(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathRunScript(eweapon)] Params End
CALLFUNC 0.8196; UsrFunc[void __DoEWeaponDeathRunScript(eweapon)] Call
POP D4; if() #564 Body End
LOAD D2 0.0007; if() #332 Else End AND if() #331 Else End AND if() #330 Else End AND if() #329 Else End AND if() #328 Else End AND if() #327 Else End AND if() #326 Else End AND if() #319 Else End AND if() #318 Else End AND if() #562 Body End AND if() #306 Else End AND if() #565 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 8
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3129 ==; Test 'if'
LOAD D2 0.0007; if() #566 Test AND if() #565 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNZ
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 3129 ==; Test 'if'
PUSHR D4; if() #566 Body Start
LOAD D2 0.0007; UsrFunc[void DrawEWeaponShadow(eweapon)] Params Start
PUSHR D2; UsrFunc[void DrawEWeaponShadow(eweapon)] Params End
CALLFUNC 0.0928; UsrFunc[void DrawEWeaponShadow(eweapon)] Call
POP D4; if() #566 Body End
LOAD D2 0.0007; if() #565 Body End AND if() #333 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3412 ==; Test 'if'
SETV D2 1000; if() #333 Body Start
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNXOFS D2
SETR D2 LINKHP; if() #567 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 3523 !=; Test 'if' AND return (Void) AND if() #567 Body
LOAD D2 0.0007; if() #568 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 16
COMPAREV D2 0
GOTOCMP 3174 ==
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
GOTOCMP 3174 ==
SETV D2 1
GOTO 3175
SETV D2 0
COMPAREV D2 0
GOTOCMP 3523 !=; Test 'if' AND return (Void) AND if() #568 Body
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
LOAD D2 0.0007; if() #334 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 3193 ==; Test 'if'
LOAD D2 0.0007; InlineFunc[int RadtoDeg(int)] Params Start AND if() #334 Body Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
STORE D2 0.0001
GOTO 3259; if() #334 Body End
PUSHR D4; if() #334 Else Start
LOAD D2 0.0007; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2
POP REFEWPN
PUSHR EWPNDIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2013; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #335 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3209 ==; Test 'if'
SETV D2 -90; if() #335 Body Start
STORE D2 0.0001
GOTO 3259; if() #335 Body End
LOAD D2 0; if() #336 Test AND if() #335 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3217 ==; Test 'if'
SETV D2 -45; if() #336 Body Start
STORE D2 0.0001
GOTO 3259; if() #336 Body End
LOAD D2 0; if() #337 Test AND if() #336 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3225 ==; Test 'if'
SETV D2 0; if() #337 Body Start
STORE D2 0.0001
GOTO 3259; if() #337 Body End
LOAD D2 0; if() #338 Test AND if() #337 Else Start
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3233 ==; Test 'if'
SETV D2 45; if() #338 Body Start
STORE D2 0.0001
GOTO 3259; if() #338 Body End
LOAD D2 0; if() #339 Test AND if() #338 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3241 ==; Test 'if'
SETV D2 90; if() #339 Body Start
STORE D2 0.0001
GOTO 3259; if() #339 Body End
LOAD D2 0; if() #340 Test AND if() #339 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3249 ==; Test 'if'
SETV D2 135; if() #340 Body Start
STORE D2 0.0001
GOTO 3259; if() #340 Body End
LOAD D2 0; if() #341 Test AND if() #340 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3257 ==; Test 'if'
SETV D2 180; if() #341 Body Start
STORE D2 0.0001
GOTO 3259; if() #341 Body End
SETV D2 -135; if() #341 Else Start
STORE D2 0.0001; if() #341 Else End
LOAD D2 0.0004; if() #340 Else End AND if() #339 Else End AND if() #338 Else End AND if() #337 Else End AND if() #336 Else End AND if() #335 Else End AND if() #334 Else End AND if() #342 Test
COMPAREV D2 0
GOTOCMP 3301 ==; Test 'if'
LOAD D2 0.0007; if() #342 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNX
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Cos(int)] Params Start
SETR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0003
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNY
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Sin(int)] Params Start
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0002
GOTO 3317; if() #342 Body End
LOAD D2 0.0007; if() #342 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
STORE D2 0.0003
LOAD D2 0.0007
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
STORE D2 0.0002; if() #342 Else End
LOAD D2 0.0006; unless() #569 Test
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
GOTOCMP 3331 !=
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
GOTOCMP 3331 !=
SETV D2 1
GOTO 3332
SETV D2 0
COMPAREV D2 0
GOTOCMP 3346 !=; Test 'unless'
PUSHR D4; unless() #569 Body Start
LOAD D2 0.0006; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 0.0040; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0001; unless() #569 Body End
STOREV 0 0
LOAD D2 0.0001; if() #343 Test
COMPAREV D2 0
GOTOCMP 3355 <
LOAD D2 0.0001
COMPAREV D2 180
GOTOCMP 3355 >=
SETV D2 1
GOTO 3356
SETV D2 0
COMPAREV D2 0
GOTOCMP 3361 ==; Test 'if'
SETV D2 0; if() #343 Body Start
STORE D2 0
GOTO 3363; if() #343 Body End
SETV D2 2; if() #343 Else Start
STORE D2 0; if() #343 Else End
PUSHV 4; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNZ
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
PUSHR EWPNTILE
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
PUSHR EWPNTXSZ
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
PUSHR EWPNTYSZ
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
PUSHR EWPNCSET
PUSHARGSV -1 0.0002
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNZ
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 1
PUSHV 128; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILER; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0015; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
GOTO 3469; if() #333 Body End
LOAD D2 0.0007; if() #570 Test AND if() #333 Else Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 16
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3452 ==; Test 'if'
SETR D2 GD26; if() #344 Test AND if() #570 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3443 ==; Test 'if'
SETV D2 1000; if() #344 Body Start
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNXOFS D2
GOTO 3452; if() #344 Body End
SETV D2 0; if() #344 Else Start
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNXOFS D2; if() #344 Else End
LOAD D2 0.0007; if() #570 Body End AND if() #571 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3469 ==; Test 'if'
PUSHR D4; if() #571 Body Start
LOAD D2 0.0007; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1788; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #571 Body End
LOAD D2 0.0007; if() #333 Else End AND if() #572 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 64
COMPAREV D2 0
GOTOCMP 3481 !=
SETV D2 0
GOTO 3482
SETV D2 1
COMPAREV D2 0
GOTOCMP 3523 ==; Test 'if'
LOAD D2 0.0007; if() #572 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNZ
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNZOFS D2
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNZ
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNHYOFS D2
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNZ
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNYOFS D2; if() #572 Body End
POPARGS D5 0.0008
RETURNFUNC; Func[void UpdateEWeapon(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMSineWave(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Sin(int)] Params Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D3 EWPNMISCD; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
STORE D2 0
LOAD D2 0.0001
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 1.5708
SETR D3 D2; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNX D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 1.5708
SETR D3 D2; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNY D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __UpdateEWMSineWave(eweapon)] Body End
PUSHARGSV 0 0.0003; Func[void __UpdateEWMHoming(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0003
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
MODV D2 6.2832
STORE D2 0.0002
LOAD D2 0.0002; if() #726 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3723 ==; Test 'if'
LOAD D2 0.0002; if() #726 Body Start
ADDV D2 6.2832
STORE D2 0.0002; if() #726 Body End
PUSHR D4
LOAD D2 0.0003; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR D2
POP REFEWPN
PUSHR EWPNX
LOAD D2 0.0003
PUSHR D2
POP REFEWPN
PUSHR EWPNY
PUSHR LINKX
PUSHR LINKY; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.0015; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP D4
STORE D2 0.0001
LOAD D2 0.0001; if() #727 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3745 ==; Test 'if'
LOAD D2 0.0001; if() #727 Body Start
ADDV D2 6.2832
STORE D2 0.0001; if() #727 Body End
LOAD D2 0.0002; InlineFunc[int Abs(int)] Params Start
PUSHR D2
LOAD D2 0.0001
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
STORE D2 0
LOAD D2 0; if() #433 Test
PUSHR D2
LOAD D2 0.0003
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
COMPARER D3 D2
GOTOCMP 3780 <
LOAD D2 0
PUSHR D2
LOAD D2 0.0003
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
SUBV2 6.2832 D2
POP D3
COMPARER D3 D2
GOTOCMP 3780 >
SETV D2 0
GOTO 3781
SETV D2 1
COMPAREV D2 0
GOTOCMP 3793 ==; Test 'if'
LOAD D2 0.0001; if() #433 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
GOTO 3860; if() #433 Body End
PUSHR D4; if() #434 Test AND if() #433 Else Start
LOAD D2 0.0002; UsrFunc[int Sign(int)] Params Start
PUSHR D2
LOAD D2 0.0001
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.2362; UsrFunc[int Sign(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int Sign(int)] Params Start
SUBV D2 3.1416
PUSHR D2; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.2362; UsrFunc[int Sign(int)] Call
POP D4
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3837 ==; Test 'if'
LOAD D2 0.0003; if() #434 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
PUSHR D2
LOAD D2 0.0003
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
GOTO 3860; if() #434 Body End
LOAD D2 0.0003; if() #434 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
PUSHR D2
LOAD D2 0.0003
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2; if() #434 Else End
PUSHR D4; if() #433 Else End
LOAD D2 0.0003; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1678; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0.0003; if() #728 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 3911 ==; Test 'if'
LOAD D2 0.0003; if() #728 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 10
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0003; if() #729 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 3911 ==; Test 'if'
PUSHR D4; if() #729 Body Start
LOAD D2 0.0003; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2147; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #729 Body End
POPARGS D5 0.0004; if() #728 Body End
RETURNFUNC; Func[void __UpdateEWMHoming(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMHomingReaim(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #730 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3944 ==; Test 'if'
LOAD D2 0.0001; if() #730 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2; if() #730 Body End
LOAD D2 0.0001; if() #435 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 4043 ==; Test 'if'
LOAD D2 0.0001; if() #435 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001; if() #731 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4246 ==; Test 'if'
LOAD D2 0.0001; if() #436 Test AND if() #731 Body Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 4002 ==; Test 'if'
PUSHR D4; if() #436 Body Start
LOAD D2 0.0001; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2147; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4
GOTO 4246; if() #436 Body End
LOAD D2 0.0001; if() #436 Else Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
SETV D2 -20
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2; if() #436 Else End
GOTO 4246; if() #731 Body End AND if() #435 Body End
LOAD D2 0.0001; if() #435 Else Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ADDV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001; if() #732 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4143 ==; Test 'if'
SETV D2 45; if() #732 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR D2
POP REFEWPN
PUSHR EWPNX
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
PUSHR EWPNY
PUSHR LINKX
PUSHR LINKY; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.0015; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
LOAD D2 0.0001
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1678; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0.0001; if() #733 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4143 ==; Test 'if'
PUSHR D4; if() #733 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1788; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #733 Body End
LOAD D2 0.0001; if() #732 Body End AND if() #437 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4169 ==; Test 'if'
LOAD D2 0.0001; if() #437 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 0.3000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
GOTO 4246; if() #437 Body End
LOAD D2 0.0001; if() #734 Test AND if() #437 Else Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4246 ==; Test 'if'
LOAD D2 0.0001; if() #734 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 0.2000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
SUBV2 0 D2
ANDV D2 6
STORE D2 0
LOAD D2 0; if() #438 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4216 ==; Test 'if'
PUSHR D4; if() #438 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 0; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2281; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 4246; if() #438 Body End
LOAD D2 0; if() #439 Test AND if() #438 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4228 ==; Test 'if'
PUSHR D4; if() #439 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 3; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2281; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 4246; if() #439 Body End
LOAD D2 0; if() #440 Test AND if() #439 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4240 ==; Test 'if'
PUSHR D4; if() #440 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 1; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2281; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 4246; if() #440 Body End
PUSHR D4; if() #440 Else Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 2; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2281; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4; if() #440 Else End
POPARGS D5 0.0002; if() #439 Else End AND if() #438 Else End AND if() #734 Body End AND if() #437 Else End AND if() #435 Else End
RETURNFUNC; Func[void __UpdateEWMHomingReaim(eweapon)] Body End
SETR D4 SP2; Func[void __UpdateEWMRandom(eweapon)] Body Start
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int Randf(int)] Params Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 2
SETV D2 2
PUSHR D2
LOAD D2 0
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
MULTR D2 D3
PUSHR D2; UsrFunc[int Randf(int)] Params End
CALLFUNC 0.0032; UsrFunc[int Randf(int)] Call
POP D4
PUSHR D2
LOAD D2 0
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1678; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0; if() #735 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4320 ==; Test 'if'
PUSHR D4; if() #735 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1788; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #735 Body End
LOAD D2 0; if() #736 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 4366 ==; Test 'if'
LOAD D2 0; if() #736 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
SUBV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 10
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0; if() #737 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 4366 ==; Test 'if'
PUSHR D4; if() #737 Body Start
LOAD D2 0; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2147; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #737 Body End
POP D5; if() #736 Body End
RETURNFUNC; Func[void __UpdateEWMRandom(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMRandomReaim(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #738 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4399 ==; Test 'if'
LOAD D2 0.0001; if() #738 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2; if() #738 Body End
LOAD D2 0.0001; if() #441 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 4498 ==; Test 'if'
LOAD D2 0.0001; if() #441 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001; if() #739 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4678 ==; Test 'if'
LOAD D2 0.0001; if() #442 Test AND if() #739 Body Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 4457 ==; Test 'if'
PUSHR D4; if() #442 Body Start
LOAD D2 0.0001; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2147; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4
GOTO 4678; if() #442 Body End
LOAD D2 0.0001; if() #442 Else Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
SETV D2 -20
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2; if() #442 Else End
GOTO 4678; if() #739 Body End AND if() #441 Body End
LOAD D2 0.0001; if() #441 Else Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ADDV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001; if() #740 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4588 ==; Test 'if'
SETV D2 45; if() #740 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
SETV D3 62832; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
MULTV D2 0.0001
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
LOAD D2 0.0001
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1678; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0.0001; if() #741 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4588 ==; Test 'if'
PUSHR D4; if() #741 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1788; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #741 Body End
LOAD D2 0.0001; if() #740 Body End AND if() #443 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4614 ==; Test 'if'
LOAD D2 0.0001; if() #443 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 0.3000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
GOTO 4678; if() #443 Body End
LOAD D2 0.0001; if() #742 Test AND if() #443 Else Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4678 ==; Test 'if'
LOAD D2 0.0001; if() #742 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
SUBV2 0 D2
ANDV D2 6
STORE D2 0
LOAD D2 0; if() #444 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4648 ==; Test 'if'
PUSHR D4; if() #444 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 0; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2281; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 4678; if() #444 Body End
LOAD D2 0; if() #445 Test AND if() #444 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4660 ==; Test 'if'
PUSHR D4; if() #445 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 3; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2281; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 4678; if() #445 Body End
LOAD D2 0; if() #446 Test AND if() #445 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4672 ==; Test 'if'
PUSHR D4; if() #446 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 1; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2281; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 4678; if() #446 Body End
PUSHR D4; if() #446 Else Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 2; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2281; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4; if() #446 Else End
POPARGS D5 0.0002; if() #445 Else End AND if() #444 Else End AND if() #742 Body End AND if() #443 Else End AND if() #441 Else End
RETURNFUNC; Func[void __UpdateEWMRandomReaim(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMVeer(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
STORE D2 0
LOAD D2 0.0001
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0; if() #454 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4795 ==; Test 'if'
LOAD D2 0.0001; if() #454 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 5152; if() #454 Body End
LOAD D2 0; if() #455 Test AND if() #454 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4829 ==; Test 'if'
LOAD D2 0.0001; if() #455 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 5152; if() #455 Body End
LOAD D2 0; if() #456 Test AND if() #455 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4864 ==; Test 'if'
LOAD D2 0.0001; if() #456 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 5152; if() #456 Body End
LOAD D2 0; if() #457 Test AND if() #456 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4898 ==; Test 'if'
LOAD D2 0.0001; if() #457 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 5152; if() #457 Body End
LOAD D2 0; if() #458 Test AND if() #457 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4964 ==; Test 'if'
LOAD D2 0.0001; if() #458 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 5152; if() #458 Body End
LOAD D2 0; if() #459 Test AND if() #458 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5029 ==; Test 'if'
LOAD D2 0.0001; if() #459 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 5152; if() #459 Body End
LOAD D2 0; if() #460 Test AND if() #459 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5094 ==; Test 'if'
LOAD D2 0.0001; if() #460 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 5152; if() #460 Body End
LOAD D2 0.0001; if() #460 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2; if() #460 Else End
LOAD D2 0.0001; if() #459 Else End AND if() #458 Else End AND if() #457 Else End AND if() #456 Else End AND if() #455 Else End AND if() #454 Else End
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNX D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNY D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __UpdateEWMVeer(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMThrow(eweapon)] Body Start
SETR D4 SP2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNJUMP D2
LOAD D2 0.0001; if() #743 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
GOTOCMP 5243 !=
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
GOTOCMP 5243 ==
SETV D2 1
GOTO 5244
SETV D2 0
COMPAREV D2 0
GOTOCMP 5276 ==; Test 'if'
LOAD D2 0.0001; if() #743 Body Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2; if() #743 Body End
LOAD D2 0.0001; InlineFunc[int Max(int, int)] Params Start
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
ADDR D2 D3
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
PUSHR D4; unless() #448 Test AND if(true) #447 [Opt:AlwaysOn]
CALLFUNC 0.2086; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 5328 !=; Test 'unless'
LOAD D2 0.0001; unless() #448 Body Start
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNZ D2
GOTO 5344; unless() #448 Body End
LOAD D2 0.0001; unless() #448 Else Start
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
SUBV2 176 D2
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNY D2; unless() #448 Else End
LOAD D2 0.0001; if() #449 Test
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 5407 ==; Test 'if'
PUSHR D4; unless() #744 Test AND if(true) #450 [Opt:AlwaysOn] AND if() #449 Body Start
LOAD D2 0.0001; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params Start
PUSHR D2
POP REFEWPN
PUSHR EWPNX
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
PUSHR EWPNY
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
PUSHR EWPNHXOFS
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
PUSHR EWPNHYOFS
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
PUSHR EWPNHYSZ
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
PUSHR EWPNHXSZ; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params End
CALLFUNC 0.9484; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 5516 !=; Test 'unless'
LOAD D2 0.0001; InlineFunc[int Max(int, int)] Params Start AND unless() #744 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
SUBV D2 0.1600
PUSHVARGR D2
PUSHVARGV -3.2000; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2; unless() #744 Body End
GOTO 5516; if() #449 Body End
STOREV 0 0; if() #449 Else Start
LOAD D2 0.0001; if() #451 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 2
COMPAREV D2 0
GOTOCMP 5465 ==; Test 'if'
LOAD D2 0.0001; if() #452 Test AND if() #451 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 -0.5000
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5462 ==; Test 'if'
LOAD D2 0.0001; if() #452 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 -0.5000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
MULTV D2 0.7500
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
GOTO 5467; if() #452 Body End
SETV D2 1; if() #452 Else Start
STORE D2 0; if() #452 Else End
GOTO 5467; if() #451 Body End
SETV D2 1; if() #451 Else Start
STORE D2 0; if() #451 Else End
LOAD D2 0; if() #745 Test
COMPAREV D2 0
GOTOCMP 5516 ==; Test 'if'
LOAD D2 0.0001; if() #453 Test AND if() #745 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 1
COMPAREV D2 0
GOTOCMP 5495 ==; Test 'if'
SETV D2 0; if() #453 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNZ D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2147; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4
GOTO 5516; if() #453 Body End
SETV D2 0; if() #453 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 8
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2; if() #453 Else End
POPARGS D5 0.0002; if() #745 Body End AND if() #449 Else End
RETURNFUNC; Func[void __UpdateEWMThrow(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMFall(eweapon)] Body Start
SETR D4 SP2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNJUMP D2
LOAD D2 0.0001
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
PUSHR D4; unless() #428 Test AND if(true) #427 [Opt:AlwaysOn]
CALLFUNC 0.2086; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 5579 !=; Test 'unless'
LOAD D2 0.0001; unless() #428 Body Start
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNZ D2
GOTO 5609; unless() #428 Body End
LOAD D2 0.0001; unless() #428 Else Start
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNHYOFS D2
LOAD D2 0.0001
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNYOFS D2; unless() #428 Else End
LOAD D2 0.0001; InlineFunc[int Min(int, int)] Params Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ADDV D2 0.1600
PUSHVARGR D2
PUSHVARGV 3.2000; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001; if() #723 Test AND if(true) #429 [Opt:AlwaysOn]
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 5782 ==; Test 'if'
PUSHR D4; unless() #724 Test AND if() #723 Body Start
LOAD D2 0.0001; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params Start
PUSHR D2
POP REFEWPN
PUSHR EWPNX
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
PUSHR EWPNY
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
PUSHR EWPNHXOFS
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
PUSHR EWPNHYOFS
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
PUSHR EWPNHYSZ
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
PUSHR EWPNHXSZ; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params End
CALLFUNC 0.9484; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 5782 !=; Test 'unless'
STOREV 0 0; unless() #724 Body Start
LOAD D2 0.0001; if() #430 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 5731 ==; Test 'if'
LOAD D2 0.0001; if() #431 Test AND if() #430 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 -0.5000
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5728 ==; Test 'if'
LOAD D2 0.0001; if() #431 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 -0.5000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
MULTV D2 0.7500
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
GOTO 5733; if() #431 Body End
SETV D2 1; if() #431 Else Start
STORE D2 0; if() #431 Else End
GOTO 5733; if() #430 Body End
SETV D2 1; if() #430 Else Start
STORE D2 0; if() #430 Else End
LOAD D2 0; if() #725 Test
COMPAREV D2 0
GOTOCMP 5782 ==; Test 'if'
LOAD D2 0.0001; if() #432 Test AND if() #725 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 1
COMPAREV D2 0
GOTOCMP 5761 ==; Test 'if'
SETV D2 0; if() #432 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNZ D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2147; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4
GOTO 5782; if() #432 Body End
SETV D2 0; if() #432 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 8
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2; if() #432 Else End
POPARGS D5 0.0002; if() #725 Body End AND unless() #724 Body End AND if() #723 Body End
RETURNFUNC; Func[void __UpdateEWMFall(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMDrift(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
STORE D2 0
LOAD D2 0.0001
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0; if() #412 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5899 ==; Test 'if'
LOAD D2 0.0001; if() #412 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6256; if() #412 Body End
LOAD D2 0; if() #413 Test AND if() #412 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5933 ==; Test 'if'
LOAD D2 0.0001; if() #413 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6256; if() #413 Body End
LOAD D2 0; if() #414 Test AND if() #413 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5968 ==; Test 'if'
LOAD D2 0.0001; if() #414 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6256; if() #414 Body End
LOAD D2 0; if() #415 Test AND if() #414 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6002 ==; Test 'if'
LOAD D2 0.0001; if() #415 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6256; if() #415 Body End
LOAD D2 0; if() #416 Test AND if() #415 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6068 ==; Test 'if'
LOAD D2 0.0001; if() #416 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6256; if() #416 Body End
LOAD D2 0; if() #417 Test AND if() #416 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6133 ==; Test 'if'
LOAD D2 0.0001; if() #417 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6256; if() #417 Body End
LOAD D2 0; if() #418 Test AND if() #417 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6198 ==; Test 'if'
LOAD D2 0.0001; if() #418 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6256; if() #418 Body End
LOAD D2 0.0001; if() #418 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2; if() #418 Else End
LOAD D2 0.0001; if() #417 Else End AND if() #416 Else End AND if() #415 Else End AND if() #414 Else End AND if() #413 Else End AND if() #412 Else End
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNX D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNY D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __UpdateEWMDrift(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMDriftWait(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
STORE D2 0
LOAD D2 0.0001; if() #419 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 16
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 6380 ==; Test 'if'
LOAD D2 0.0001; if() #419 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6399; if() #419 Body End
LOAD D2 0.0001; if() #419 Else Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ADDV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2; if() #419 Else End
LOAD D2 0; if() #420 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6434 ==; Test 'if'
LOAD D2 0.0001; if() #420 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6791; if() #420 Body End
LOAD D2 0; if() #421 Test AND if() #420 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6468 ==; Test 'if'
LOAD D2 0.0001; if() #421 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6791; if() #421 Body End
LOAD D2 0; if() #422 Test AND if() #421 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6503 ==; Test 'if'
LOAD D2 0.0001; if() #422 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6791; if() #422 Body End
LOAD D2 0; if() #423 Test AND if() #422 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6537 ==; Test 'if'
LOAD D2 0.0001; if() #423 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6791; if() #423 Body End
LOAD D2 0; if() #424 Test AND if() #423 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6603 ==; Test 'if'
LOAD D2 0.0001; if() #424 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6791; if() #424 Body End
LOAD D2 0; if() #425 Test AND if() #424 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6668 ==; Test 'if'
LOAD D2 0.0001; if() #425 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6791; if() #425 Body End
LOAD D2 0; if() #426 Test AND if() #425 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6733 ==; Test 'if'
LOAD D2 0.0001; if() #426 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6791; if() #426 Body End
LOAD D2 0.0001; if() #426 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2; if() #426 Else End
LOAD D2 0.0001; if() #425 Else End AND if() #424 Else End AND if() #423 Else End AND if() #422 Else End AND if() #421 Else End AND if() #420 Else End
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNX D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNY D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __UpdateEWMDriftWait(eweapon)] Body End
PUSHARGSV 0 0.0011; Func[void __DoEWeaponDeathPrototype(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0.0010
STOREV 0 0.0009
STOREV 0 0.0008
STOREV 0 0.0007
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
LOAD D2 0.0011; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD; InlineFunc[untyped Floor(untyped)] Params End
FLOOR D2; InlineFunc[untyped Floor(untyped)] Body
STORE D2 0.0010
SETR D2 EWPNCOUNT; for() #165 setup
STORE D2 0.0003
LOAD D2 0.0003; for() #165 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 6884 ==; for() #165 TestFail?
LOAD D2 0.0003; InlineFunc[eweapon screendata::LoadEWeapon(int)] Params AND for() #165 Body Start
SUBV D2 1; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body Start
LOADEWEAPONR D2
SETR D2 REFEWPN; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body End
STORE D2 0.0009
LOAD D2 0.0009; if() #594 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 768
COMPAREV D2 768
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 6880 !=; Test 'if' AND continue 1; AND if() #594 Body
LOAD D2 0.0009; if() #595 Test
PUSHR D2
SETV D2 3
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0010
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6884 !=; Test 'if' AND break 1; AND if() #595 Body
LOAD D2 0.0003; for() #165 Body End AND for() #165 LoopIncrement
SUBV D2 1
STORE D2 0.0003
GOTO 6844; for() #165 End
LOAD D2 0.0003; if() #596 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6910 ==; Test 'if'
ALLOCATEMEMV D2 43 0; if() #596 Body Start
WRITEPODSTRING D2 "ghost.zh: Failed to find prototype eweapon"
STORE D2 0
LOAD D2 0; InlineFunc[void TraceS(char32[])] Params Start
SETR D3 D2; InlineFunc[void TraceS(char32[])] Params End
TRACE6 D3; InlineFunc[void TraceS(char32[])] Body
TRACE3; InlineFunc[void TraceNL()] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
LOAD D3 0
DEALLOCATEMEMR D3
GOTO 7220; return (Void)
LOAD D3 0
DEALLOCATEMEMR D3; if() #596 Body End
LOAD D2 0.0011
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MODV D2 10
SUBV D2 6.2832
STORE D2 0.0005
LOAD D2 0.0011
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0010
POP D3
SUBR D3 D2
SETR D2 D3
MULTV D2 10000
STORE D2 0.0004
LOAD D2 0.0011
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0005
POP D3
SUBR D3 D2
SETR D2 D3
DIVV D2 100
RSHIFTV D2 0
STORE D2 0.0008
LOAD D2 0.0011; if() #359 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNEXTEND
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7000 ==; Test 'if'
LOAD D2 0.0011; if() #359 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNX
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFEWPN
SETR D2 EWPNTXSZ
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFEWPN
SETR D2 EWPNTXSZ
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0007
LOAD D2 0.0011
PUSHR D2
POP REFEWPN
SETR D2 EWPNY
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFEWPN
SETR D2 EWPNTYSZ
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFEWPN
SETR D2 EWPNTYSZ
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0006
GOTO 7012; if() #359 Body End
LOAD D2 0.0011; if() #359 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNX
ADDV D2 8
STORE D2 0.0007
LOAD D2 0.0011
PUSHR D2
POP REFEWPN
SETR D2 EWPNY
ADDV D2 8
STORE D2 0.0006; if() #359 Else End
LOAD D2 0.0008; if() #360 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7065 ==; Test 'if'
STOREV 0 0.0001; for() #166 setup AND if() #360 Body Start
LOAD D2 0.0001; for() #166 LoopTest
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7056 ==; for() #166 TestFail?
PUSHR D4; for() #166 Body Start
LOAD D2 0.0009; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0001
MULTV D2 6.2832
SETV D2 6.2832
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params End
CALLFUNC 0.8989; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Call
POP D4; for() #166 Body End
LOAD D2 0.0001; for() #166 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 7018; for() #166 End
LOAD D2 0.0009; InlineFunc[void Audio::PlaySound(int)] Params Start
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD; InlineFunc[void Audio::PlaySound(int)] Params End
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
GOTO 7211; if() #360 Body End
LOAD D2 0.0008; if() #361 Test AND if() #360 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7105 ==; Test 'if'
STOREV 0 0.0001; for() #167 setup AND if() #361 Body Start
LOAD D2 0.0001; for() #167 LoopTest
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7096 ==; for() #167 TestFail?
PUSHR D4; for() #167 Body Start
LOAD D2 0.0009; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
SETV D3 31416; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
DIVV D2 5000
PUSHR D2; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params End
CALLFUNC 0.8989; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Call
POP D4; for() #167 Body End
LOAD D2 0.0001; for() #167 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 7071; for() #167 End
LOAD D2 0.0009; InlineFunc[void Audio::PlaySound(int)] Params Start
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD; InlineFunc[void Audio::PlaySound(int)] Params End
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
GOTO 7211; if() #361 Body End
LOAD D2 0.0004; if() #362 Test AND if() #361 Else Start
COMPAREV D2 1
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 7172 ==; Test 'if'
SETR D2 LINKX; InlineFunc[int ArcTan(int, int)] Params Start AND if() #362 Body Start
ADDV D2 8
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
PUSHR D3
SETR D2 LINKY
ADDV D2 8
PUSHR D2
LOAD D2 0.0006
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
PUSHR D2
LOAD D2 0.0005
DIVV D2 2
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0001
STOREV 0 0; for() #168 setup
LOAD D2 0; for() #168 LoopTest
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7203 ==; for() #168 TestFail?
PUSHR D4; for() #168 Body Start
LOAD D2 0.0009; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0004
SUBV D2 1
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params End
CALLFUNC 0.8989; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Call
POP D4; for() #168 Body End
LOAD D2 0; for() #168 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7134; for() #168 End
GOTO 7203; if() #362 Body End
LOAD D2 0.0004; if() #597 Test AND if() #362 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7203 ==; Test 'if'
PUSHR D4; if() #597 Body Start
LOAD D2 0.0009; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
SETR D2 LINKX; InlineFunc[int ArcTan(int, int)] Params Start
ADDV D2 8
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
PUSHR D3
SETR D2 LINKY
ADDV D2 8
PUSHR D2
LOAD D2 0.0006
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
PUSHR D2; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params End
CALLFUNC 0.8989; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Call
POP D4; if() #597 Body End
LOAD D2 0.0009; if() #362 Else End AND InlineFunc[void Audio::PlaySound(int)] Params Start
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD; InlineFunc[void Audio::PlaySound(int)] Params End
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body AND if() #361 Else End
SETV D2 0; if() #360 Else End
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0012
RETURNFUNC; Func[void __DoEWeaponDeathPrototype(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeathAimAtLink(eweapon)] Body Start
SETR D4 SP2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 14
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001; if() #354 Test
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 7311 ==; Test 'if'
PUSHR D4; if() #354 Body Start
LOAD D2 0.0001; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR D2
POP REFEWPN
PUSHR EWPNX
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
PUSHR EWPNY
PUSHR LINKX
PUSHR LINKY; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.0015; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1678; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
SETV D2 300
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 13
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 7387; if() #354 Body End
LOAD D2 0.0001; if() #355 Test AND if() #354 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 7336 ==; Test 'if'
LOAD D2 0.0001; if() #355 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 0.3000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1678; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
GOTO 7387; if() #355 Body End
LOAD D2 0.0001; if() #355 Else Start
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 6
STORE D2 0
LOAD D2 0; if() #356 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7357 ==; Test 'if'
PUSHR D4; if() #356 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 0; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2281; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 7387; if() #356 Body End
LOAD D2 0; if() #357 Test AND if() #356 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7369 ==; Test 'if'
PUSHR D4; if() #357 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 3; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2281; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 7387; if() #357 Body End
LOAD D2 0; if() #358 Test AND if() #357 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7381 ==; Test 'if'
PUSHR D4; if() #358 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 1; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2281; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 7387; if() #358 Body End
PUSHR D4; if() #358 Else Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 2; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2281; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4; if() #358 Else End
POPARGS D5 0.0002; if() #357 Else End AND if() #356 Else End AND if() #355 Else End AND if() #354 Else End
RETURNFUNC; Func[void __DoEWeaponDeathAimAtLink(eweapon)] Body End
SETR D4 SP2; Func[void __DoEWeaponDeathExplode(eweapon)] Body Start
PUSHR D4
PUSHV 135; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFEWPN
PUSHR EWPNDIR
PUSHV 0
LOAD D2 0
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHV -1
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POP D5
RETURNFUNC; Func[void __DoEWeaponDeathExplode(eweapon)] Body End
SETR D4 SP2; Func[void __DoEWeaponDeathSBombExplode(eweapon)] Body Start
PUSHR D4
PUSHV 136; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFEWPN
PUSHR EWPNDIR
PUSHV 0
LOAD D2 0
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHV -1
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POP D5
RETURNFUNC; Func[void __DoEWeaponDeathSBombExplode(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsHV(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0; for() #155 setup
LOAD D2 0; for() #155 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7524 ==; for() #155 TestFail?
PUSHR D4; for() #155 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #155 Body End
LOAD D2 0; for() #155 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7480; for() #155 End
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsHV(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsDiag(eweapon)] Body Start
SETR D4 SP2
STOREV 4 0; for() #154 setup
LOAD D2 0; for() #154 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7582 ==; for() #154 TestFail?
PUSHR D4; for() #154 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #154 Body End
LOAD D2 0; for() #154 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7538; for() #154 End
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsDiag(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsRand(eweapon)] Body Start
SETR D4 SP2
SETV D3 2; InlineFunc[int Rand(int)] Params AND if() #352 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7647 ==; Test 'if'
STOREV 0 0; for() #156 setup AND if() #352 Body Start
LOAD D2 0; for() #156 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7692 ==; for() #156 TestFail?
PUSHR D4; for() #156 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #156 Body End
LOAD D2 0; for() #156 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7602; for() #156 End
GOTO 7692; if() #352 Body End
STOREV 4 0; for() #157 setup AND if() #352 Else Start
LOAD D2 0; for() #157 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7692 ==; for() #157 TestFail?
PUSHR D4; for() #157 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #157 Body End
LOAD D2 0; for() #157 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7648; for() #157 End
SETV D2 0; if() #352 Else End
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsRand(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath8Fireballs(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0; for() #162 setup
LOAD D2 0; for() #162 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7750 ==; for() #162 TestFail?
PUSHR D4; for() #162 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #162 Body End
LOAD D2 0; for() #162 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7706; for() #162 End
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath8Fireballs(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresHV(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0; for() #159 setup
LOAD D2 0; for() #159 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7808 ==; for() #159 TestFail?
PUSHR D4; for() #159 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 100
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #159 Body End
LOAD D2 0; for() #159 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7764; for() #159 End
SETV D2 13; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresHV(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresDiag(eweapon)] Body Start
SETR D4 SP2
STOREV 4 0; for() #158 setup
LOAD D2 0; for() #158 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7868 ==; for() #158 TestFail?
PUSHR D4; for() #158 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 71
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #158 Body End
LOAD D2 0; for() #158 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7824; for() #158 End
SETV D2 13; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresDiag(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresRand(eweapon)] Body Start
SETR D4 SP2
SETV D3 2; InlineFunc[int Rand(int)] Params AND if() #353 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7935 ==; Test 'if'
STOREV 0 0; for() #160 setup AND if() #353 Body Start
LOAD D2 0; for() #160 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7980 ==; for() #160 TestFail?
PUSHR D4; for() #160 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 100
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #160 Body End
LOAD D2 0; for() #160 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7890; for() #160 End
GOTO 7980; if() #353 Body End
STOREV 4 0; for() #161 setup AND if() #353 Else Start
LOAD D2 0; for() #161 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7980 ==; for() #161 TestFail?
PUSHR D4; for() #161 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 71
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #161 Body End
LOAD D2 0; for() #161 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7936; for() #161 End
SETV D2 13; if() #353 Else End AND InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresRand(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath8Fires(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0; for() #163 setup
LOAD D2 0; for() #163 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8040 ==; for() #163 TestFail?
PUSHR D4; for() #163 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 100
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #163 Body End
LOAD D2 0; for() #163 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7996; for() #163 End
STOREV 4 0; for() #164 setup
LOAD D2 0; for() #164 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8085 ==; for() #164 TestFail?
PUSHR D4; for() #164 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 71
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #164 Body End
LOAD D2 0; for() #164 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 8041; for() #164 End
SETV D2 13; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath8Fires(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeathSpawnNPC(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; InlineFunc[npc screendata::CreateNPC(int)] Params Start
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD; InlineFunc[npc screendata::CreateNPC(int)] Params End
CREATENPCR D2; InlineFunc[npc screendata::CreateNPC(int)] Body Start
SETR D2 REFNPC; InlineFunc[npc screendata::CreateNPC(int)] Body End
STORE D2 0
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNX
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCX D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNY
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCY D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeathSpawnNPC(eweapon)] Body End
SETR D4 SP2; Func[void __DoEWeaponDeathSingleFire(eweapon)] Body Start
PUSHR D4
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFEWPN
PUSHR EWPNDIR
PUSHV 0
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
SETV D2 13; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POP D5
RETURNFUNC; Func[void __DoEWeaponDeathSingleFire(eweapon)] Body End
PUSHARGSV 0 0.0005; Func[void __DoEWeaponDeathRunScript(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
PUSHR D4
CALLFUNC 0.1253; UsrFunc[int FindUnusedFFC()] Call
POP D4
STORE D2 0.0004
LOAD D2 0.0004; if() #598 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8221 ==; Test 'if'
SETV D2 0; if() #598 Body Start
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
GOTO 8360; return (Void) AND if() #598 Body End
LOAD D2 0.0004; InlineFunc[ffc screendata::LoadFFC(int)] Params
SUBV D2 1; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0003
SETR D2 EWPNCOUNT; for() #169 setup
STORE D2 0
LOAD D2 0; for() #169 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 8263 ==; for() #169 TestFail?
LOAD D2 0; InlineFunc[eweapon screendata::LoadEWeapon(int)] Params AND for() #169 Body Start
SUBV D2 1; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body Start
LOADEWEAPONR D2
SETR D2 REFEWPN; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body End
STORE D2 0.0002
LOAD D2 0.0002; if() #599 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 768
COMPAREV D2 512
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8259 !=; Test 'if' AND continue 1; AND if() #599 Body
LOAD D2 0.0001; InlineFunc[int Min(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0002
PUSHR D2
SETV D2 3
PUSHR D2
POP D0
POP REFEWPN
PUSHVARGR EWPNMISCD; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0001; for() #169 Body End
LOAD D2 0; for() #169 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 8226; for() #169 End
LOAD D2 0.0001
SUBV D2 1
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
SETV D2 3
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0005
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ORV D2 1024
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
SETV D2 1
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
PUSHR D4
LOAD D2 0.0005; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR X D2
PUSHR D4
LOAD D2 0.0005; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR Y D2
LOAD D2 0.0005
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFSCRIPT D2
LOAD D2 0.0001
SUBV D2 1
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFINITDD D2
POPARGS D5 0.0006
RETURNFUNC; Func[void __DoEWeaponDeathRunScript(eweapon)] Body End
PUSHARGSV 0 0.0002; Func[void UpdateEWeapons()] Body Start
SETR D4 SP2
STOREV 0 0.0001
SETR D2 LINKACTION; unless() #345 Test
COMPAREV D2 4
GOTOCMP 8379 ==
SETR D2 LINKACTION
COMPAREV D2 5
GOTOCMP 8379 ==
SETR D2 LINKACTION
COMPAREV D2 14
GOTOCMP 8379 ==
SETR D2 LINKACTION
COMPAREV D2 15
GOTOCMP 8379 ==
SETV D2 0
GOTO 8380
SETV D2 1
COMPAREV D2 0
GOTOCMP 8429 !=; Test 'unless'
SETR D2 EWPNCOUNT; for() #149 setup AND unless() #345 Body Start
STORE D2 0
LOAD D2 0; for() #149 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 8475 ==; for() #149 TestFail?
LOAD D2 0; InlineFunc[eweapon screendata::LoadEWeapon(int)] Params AND for() #149 Body Start
SUBV D2 1; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body Start
LOADEWEAPONR D2
SETR D2 REFEWPN; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body End
STORE D2 0.0001
LOAD D2 0.0001; if() #573 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 512
COMPAREV D2 0
GOTOCMP 8416 ==
LOAD D2 0.0001
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 256
COMPAREV D2 0
GOTOCMP 8416 !=
SETV D2 0
GOTO 8417
SETV D2 1
COMPAREV D2 0
GOTOCMP 8424 !=; Test 'if' AND continue 1; AND if() #573 Body
PUSHR D4
LOAD D2 0.0001; UsrFunc[void UpdateEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void UpdateEWeapon(eweapon)] Params End
CALLFUNC 0.2385; UsrFunc[void UpdateEWeapon(eweapon)] Call
POP D4; for() #149 Body End
LOAD D2 0; for() #149 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 8384; for() #149 End
GOTO 8475; unless() #345 Body End
SETR D2 EWPNCOUNT; for() #150 setup AND unless() #345 Else Start
STORE D2 0
LOAD D2 0; for() #150 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 8475 ==; for() #150 TestFail?
LOAD D2 0; InlineFunc[eweapon screendata::LoadEWeapon(int)] Params AND for() #150 Body Start
SUBV D2 1; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body Start
LOADEWEAPONR D2
SETR D2 REFEWPN; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body End
STORE D2 0.0001
LOAD D2 0.0001; if() #574 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 512
COMPAREV D2 0
GOTOCMP 8463 ==
LOAD D2 0.0001
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 256
COMPAREV D2 0
GOTOCMP 8463 !=
SETV D2 0
GOTO 8464
SETV D2 1
COMPAREV D2 0
GOTOCMP 8471 !=; Test 'if' AND continue 1; AND if() #574 Body
PUSHR D4
LOAD D2 0.0001; UsrFunc[void __UpdateEWeaponVisualFlags(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWeaponVisualFlags(eweapon)] Params End
CALLFUNC 0.8477; UsrFunc[void __UpdateEWeaponVisualFlags(eweapon)] Call
POP D4; for() #150 Body End
LOAD D2 0; for() #150 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 8431; for() #150 End
POPARGS D5 0.0002; unless() #345 Else End
RETURNFUNC; Func[void UpdateEWeapons()] Body End
PUSHARGSV 0 0.0002; Func[void __UpdateEWeaponVisualFlags(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0002; if() #746 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 8
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8504 ==; Test 'if'
LOAD D2 0.0002; if() #747 Test AND if() #746 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNZ
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 8504 ==; Test 'if'
PUSHR D4; if() #747 Body Start
LOAD D2 0.0002; UsrFunc[void DrawEWeaponShadow(eweapon)] Params Start
PUSHR D2; UsrFunc[void DrawEWeaponShadow(eweapon)] Params End
CALLFUNC 0.0928; UsrFunc[void DrawEWeaponShadow(eweapon)] Call
POP D4; if() #747 Body End
LOAD D2 0.0002; if() #746 Body End AND if() #461 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8696 ==; Test 'if'
SETV D2 1000; if() #461 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNXOFS D2
LOAD D2 0.0002; if() #748 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 16
COMPAREV D2 0
GOTOCMP 8544 ==
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
GOTOCMP 8544 ==
SETV D2 1
GOTO 8545
SETV D2 0
COMPAREV D2 0
GOTOCMP 8753 !=; Test 'if' AND return (Void) AND if() #748 Body
STOREV 0 0.0001
LOAD D2 0.0002; if() #462 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 8561 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int RadtoDeg(int)] Params Start AND if() #462 Body Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
STORE D2 0.0001
GOTO 8627; if() #462 Body End
PUSHR D4; if() #462 Else Start
LOAD D2 0.0002; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2
POP REFEWPN
PUSHR EWPNDIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2013; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #463 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8577 ==; Test 'if'
SETV D2 -90; if() #463 Body Start
STORE D2 0.0001
GOTO 8627; if() #463 Body End
LOAD D2 0; if() #464 Test AND if() #463 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8585 ==; Test 'if'
SETV D2 -45; if() #464 Body Start
STORE D2 0.0001
GOTO 8627; if() #464 Body End
LOAD D2 0; if() #465 Test AND if() #464 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8593 ==; Test 'if'
SETV D2 0; if() #465 Body Start
STORE D2 0.0001
GOTO 8627; if() #465 Body End
LOAD D2 0; if() #466 Test AND if() #465 Else Start
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8601 ==; Test 'if'
SETV D2 45; if() #466 Body Start
STORE D2 0.0001
GOTO 8627; if() #466 Body End
LOAD D2 0; if() #467 Test AND if() #466 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8609 ==; Test 'if'
SETV D2 90; if() #467 Body Start
STORE D2 0.0001
GOTO 8627; if() #467 Body End
LOAD D2 0; if() #468 Test AND if() #467 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8617 ==; Test 'if'
SETV D2 135; if() #468 Body Start
STORE D2 0.0001
GOTO 8627; if() #468 Body End
LOAD D2 0; if() #469 Test AND if() #468 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8625 ==; Test 'if'
SETV D2 180; if() #469 Body Start
STORE D2 0.0001
GOTO 8627; if() #469 Body End
SETV D2 -135; if() #469 Else Start
STORE D2 0.0001; if() #469 Else End
STOREV 0 0; if() #468 Else End AND if() #467 Else End AND if() #466 Else End AND if() #465 Else End AND if() #464 Else End AND if() #463 Else End AND if() #462 Else End
LOAD D2 0.0001; if() #470 Test
COMPAREV D2 0
GOTOCMP 8636 <
LOAD D2 0.0001
COMPAREV D2 180
GOTOCMP 8636 >=
SETV D2 1
GOTO 8637
SETV D2 0
COMPAREV D2 0
GOTOCMP 8642 ==; Test 'if'
SETV D2 0; if() #470 Body Start
STORE D2 0
GOTO 8644; if() #470 Body End
SETV D2 2; if() #470 Else Start
STORE D2 0; if() #470 Else End
PUSHV 4; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
PUSHR EWPNX
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNY
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNZ
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
PUSHR EWPNTILE
PUSHARGSV 1 0.0002
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
PUSHR EWPNCSET
PUSHARGSV -1 0.0002
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
PUSHR EWPNX
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNY
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNZ
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 1
PUSHV 128; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILER; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0015; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
GOTO 8753; if() #461 Body End
LOAD D2 0.0002; if() #749 Test AND if() #461 Else Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 16
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8736 ==; Test 'if'
SETR D2 GD26; if() #471 Test AND if() #749 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8727 ==; Test 'if'
SETV D2 1000; if() #471 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNXOFS D2
GOTO 8736; if() #471 Body End
SETV D2 0; if() #471 Else Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNXOFS D2; if() #471 Else End
LOAD D2 0.0002; if() #749 Body End AND if() #750 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8753 ==; Test 'if'
PUSHR D4; if() #750 Body Start
LOAD D2 0.0002; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1788; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #750 Body End
POPARGS D5 0.0003; if() #461 Else End
RETURNFUNC; Func[void __UpdateEWeaponVisualFlags(eweapon)] Body End
SETR D4 SP2; Func[void UpdateGhostZH1()] Body Start
PUSHR D4
CALLFUNC 0.8362; UsrFunc[void UpdateEWeapons()] Call
PEEK D4
CALLFUNC 0.0868; UsrFunc[void CleanUpGhostFFCs()] Call
PEEK D4
CALLFUNC 0.8764; UsrFunc[void UpdateGhostZHData1()] Call
POP D4
RETURNFUNC; Func[void UpdateGhostZH1()] Body End
PUSHV 0; Func[void UpdateGhostZHData1()] Body Start
SETR D4 SP2
SETR D2 CURDMAP
LSHIFTV D2 8
PUSHR D2
SETR D2 CURDSCR
POP D3
ADDR D2 D3
STORE D2 0
SETR D2 GD26; if() #346 Test
PUSHR D2
POP D0
READPODARRAYV D2 7
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8797 ==; Test 'if'
SETV D2 0; if() #346 Body Start
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2
LOAD D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 7 D2
GOTO 8815; if() #346 Body End
SETR D2 GD26; if() #575 Test AND if() #346 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 6
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 8815 ==; Test 'if'
SETR D2 GD26; if() #575 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 6
SUBV D2 1
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2; if() #575 Body End
POP D5; if() #346 Else End
RETURNFUNC; Func[void UpdateGhostZHData1()] Body End
SETR D4 SP2; Func[void UpdateGhostZH2()] Body Start
PUSHR D4
CALLFUNC 0.0994; UsrFunc[void DrawGhostFFCs()] Call
PEEK D4
CALLFUNC 0.0059; UsrFunc[void AutoGhost()] Call
PEEK D4
CALLFUNC 0.8826; UsrFunc[void UpdateGhostZHData2()] Call
POP D4
RETURNFUNC; Func[void UpdateGhostZH2()] Body End
SETR D4 SP2; Func[void UpdateGhostZHData2()] Body Start
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 1
ADDV D2 1
MODV D2 8
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
SETR D2 GD26; if() #347 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8858 ==; Test 'if'
SETR D2 GD26; if() #347 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ORV D2 1
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 8868; if() #347 Body End
SETR D2 GD26; if() #347 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 -2
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; if() #347 Else End
SETR D2 GD26; if(true) #576 [Opt:AlwaysOn]
PUSHR D2
POP D0
READPODARRAYV D2 3
ADDV D2 1
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
SETR D2 GD26; if() #577 Test
PUSHR D2
POP D0
READPODARRAYV D2 3
COMPAREV D2 8
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 8903 ==; Test 'if'
SETV D2 0; if() #577 Body Start
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 2
ADDV D2 1
MODV D2 4
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2; if() #577 Body End
SETR D2 GD26; if(true) #578 [Opt:AlwaysOn]
PUSHR D2
POP D0
READPODARRAYV D2 5
ADDV D2 1
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2
SETR D2 GD26; if() #579 Test
PUSHR D2
POP D0
READPODARRAYV D2 5
COMPAREV D2 8
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 8938 ==; Test 'if'
SETV D2 0; if() #579 Body Start
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 4
ADDV D2 1
MODV D2 4
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 4 D2; if() #579 Body End
RETURNFUNC; Func[void UpdateGhostZHData2()] Body End
SETR D4 SP2; Func[bool __IsScriptNameChar(int, bool)] Body Start
LOAD D2 0.0001; if() #693 Test
COMPAREV D2 97
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 8952 ==; Test 'if'
LOAD D2 0.0001; if() #694 Test AND if() #693 Body Start
COMPAREV D2 122
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 8952 ==; Test 'if'
SETV D2 1; return Start AND if() #694 Body Start
GOTO 8987; return End AND if() #694 Body End
LOAD D2 0.0001; if() #693 Body End AND if() #695 Test
COMPAREV D2 65
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 8964 ==; Test 'if'
LOAD D2 0.0001; if() #696 Test AND if() #695 Body Start
COMPAREV D2 90
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 8964 ==; Test 'if'
SETV D2 1; return Start AND if() #696 Body Start
GOTO 8987; return End AND if() #696 Body End
LOAD D2 0.0001; if() #695 Body End AND if() #697 Test
COMPAREV D2 95
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8971 ==; Test 'if'
SETV D2 1; return Start AND if() #697 Body Start
GOTO 8987; return End AND if() #697 Body End
LOAD D2 0; unless() #698 Test
COMPAREV D2 0
GOTOCMP 8986 !=; Test 'unless'
LOAD D2 0.0001; if() #699 Test AND unless() #698 Body Start
COMPAREV D2 48
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 8986 ==; Test 'if'
LOAD D2 0.0001; if() #700 Test AND if() #699 Body Start
COMPAREV D2 57
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 8986 ==; Test 'if'
SETV D2 1; return Start AND if() #700 Body Start
GOTO 8987; return End AND if() #700 Body End
SETV D2 0; if() #699 Body End AND unless() #698 Body End AND return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[bool __IsScriptNameChar(int, bool)] Body End
PUSHV 0; Func[void __CopyEWeapon(eweapon, int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0004; InlineFunc[eweapon screendata::CreateEWeapon(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNID; InlineFunc[eweapon screendata::CreateEWeapon(int)] Params End
CREATEEWEAPONR D2; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body Start
SETR D2 REFEWPN; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body End
STORE D2 0
LOAD D2 0.0004; if() #590 Test
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9021 ==; Test 'if'
LOAD D2 0; InlineFunc[void eweapon::UseSprite(int)] Params Start AND if() #590 Body Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD; InlineFunc[void eweapon::UseSprite(int)] Params End
POP D3; InlineFunc[void eweapon::UseSprite(int)] Body Start
SETR REFEWPN D3
EWPNUSESPRITER D2; InlineFunc[void eweapon::UseSprite(int)] Body End AND if() #590 Body End
LOAD D2 0.0004; if() #350 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNEXTEND
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 9157 ==; Test 'if'
SETV D2 3; if() #350 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNEXTEND D2
LOAD D2 0.0004
PUSHR D2
POP REFEWPN
SETR D2 EWPNTXSZ
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNTXSZ D2
LOAD D2 0.0004
PUSHR D2
POP REFEWPN
SETR D2 EWPNTYSZ
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNTYSZ D2
LOAD D2 0.0004
PUSHR D2
POP REFEWPN
SETR D2 EWPNTXSZ
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFEWPN
SETR D2 EWPNTXSZ
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNHXSZ D2
LOAD D2 0.0004
PUSHR D2
POP REFEWPN
SETR D2 EWPNTYSZ
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFEWPN
SETR D2 EWPNTYSZ
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNHYSZ D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNTXSZ
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNTXSZ
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNX D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNTXSZ
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNTXSZ
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNY D2
GOTO 9177; if() #350 Body End
LOAD D2 0.0003; if() #350 Else Start
SUBV D2 8
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNX D2
LOAD D2 0.0002
SUBV D2 8
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNY D2; if() #350 Else End
LOAD D2 0.0004
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0004
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNPOWER D2
SETV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNANGULAR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1678; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNX
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNY
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 8
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 10
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0004; if() #351 Test
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 15
GOTOCMP 9314 !=
LOAD D2 0.0004
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 -1
GOTOCMP 9314 !=
SETV D2 1
GOTO 9315
SETV D2 0
COMPAREV D2 0
GOTOCMP 9334 ==; Test 'if'
PUSHR D4; if() #351 Body Start
LOAD D2 0; UsrFunc[int __GetEWeaponThrowHeight(eweapon)] Params Start
PUSHR D2; UsrFunc[int __GetEWeaponThrowHeight(eweapon)] Params End
CALLFUNC 0.2169; UsrFunc[int __GetEWeaponThrowHeight(eweapon)] Call
POP D4
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 9352; if() #351 Body End
LOAD D2 0.0004; if() #351 Else Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2; if() #351 Else End
LOAD D2 0.0004
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 11
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 12
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 13
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 14
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 -257
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0; if() #591 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 32
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 9465 ==; Test 'if'
SETV D2 0; if() #591 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNCOLLDET D2; if() #591 Body End
LOAD D2 0; if() #592 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 9482 ==; Test 'if'
PUSHR D4; if() #592 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1788; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #592 Body End
POPARGS D5 0.0005
RETURNFUNC; Func[void __CopyEWeapon(eweapon, int, int, int)] Body End
PUSHV 0; Func[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0; for() #189 setup
LOAD D2 0; for() #189 LoopTest
PUSHR D2
LOAD D2 0.0001
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 9533 ==; for() #189 TestFail?
LOAD D2 0.0006; InlineFunc[bool screendata::isSolid(int, int)] Params Start AND if() #761 Test AND for() #189 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 9529 ==; Test 'if'
SETV D2 0; if() #762 Test AND if() #761 Body Start
PUSHR D2
POP D0
SETR D2 SCREENFLAGSD
ANDV D2 4
COMPAREV D2 0
GOTOCMP 9529 ==; Test 'if'
SETV D2 1; return Start AND if() #762 Body Start
GOTO 9534; return End AND if() #762 Body End
LOAD D2 0; if() #761 Body End AND for() #189 Body End AND for() #189 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 9487; for() #189 End
SETV D2 0; return Start
POPARGS D5 0.0007; return End
RETURNFUNC; Func[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Body End


PUSHR D0; void run(int) Params
PUSHR REFITEMCLASS; void run(int) Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #498 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 16 ==; Test 'if'
SETV D2 -1; if() #498 Body Start
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2
GOTO 22; if() #498 Body End
LOAD D2 0.0001; if() #498 Else Start
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2; if() #498 Else End
POPARGS D5 0.0002
QUIT; void run(int) Body End


SETV GD8 0; void run() Body Start
SETV GD9 0
SETV GD11 0
SETV GD10 0
SETV GD4 0
SETV GD14 0
SETV GD5 0
SETV GD13 0
SETV GD12 0
SETV GD6 0
SETV GD7 0
SETV GD1 0
SETV GD2 0
SETV GD3 0
ALLOCATEGMEMV D2 25 0
SETR GD25 D2
SETV GD15 0
SETV GD16 0
SETV GD20 0
SETV GD17 0
SETV GD21 0
SETV GD18 0
SETV GD19 0
ALLOCATEGMEMV D2 32 0
SETR GD24 D2
SETV GD22 0
SETV GD23 0
ALLOCATEGMEMV D2 8 0
SETR GD26 D2
ALLOCATEGMEMV D2 1000 0
SETR GD27 D2
QUIT; void run() Body End
