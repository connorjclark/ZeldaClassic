stderr:

Compiling 'screen_script.zs'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
Pass 5: Checking code paths
Pass 6: Generating object code
Pass 7: Assembling
Success!
Compile finished with exit code '0' (success)

stdout:

{
  "success": true,
  "diagnostics": [],
  "metadata": {
    "currentFileSymbols": 3,
    "symbols": 19,
    "identifiers": 44,
    "elided": true
  }
}

zasm:

PUSHR D0; void run(int, int) Params
PUSHR D1
PUSHARGSV 0 0.0002; void run(int, int) Body Start
SETR D4 SP2
SETR D2 LINKHP
DIVV D2 2
PUSHR D2
POP D2
SETR LINKHP D2
PUSHR D4; while(true) #2 Body [Opt:AlwaysOn] Start
SETV D2 0.0001; UsrFunc[int ComboAt(int, int)] Params Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
PUSHR D2; UsrFunc[int ComboAt(int, int)] Params End
CALLFUNC 0.0106; UsrFunc[int ComboAt(int, int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #436 Test
PUSHR D2
POP D0
SETR D2 COMBODD
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 50 ==; Test 'if'
LOAD D2 0; if() #436 Body Start
PUSHR D2
POP D0
SETR D2 COMBODD
ADDV D2 1
PUSHR D2
LOAD D2 0
PUSHR D2
POP D0
POP D2
SETR COMBODD D2
LOAD D2 0.0002; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body AND if() #436 Body End
PUSHV 6; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
SUBV D2 16
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_TILE
PUSHARGSV 1 0.0002
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_CSET
PUSHARGSV -1 0.0002
PUSHARGSV 0 0.0004
PUSHV 1
PUSHV 128; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILER; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0015; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
WAITDRAW; InlineFunc[void Waitdraw()] Body
PUSHV 6; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 16
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_TILE
PUSHARGSV 1 0.0002
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_CSET
PUSHARGSV -1 0.0002
PUSHARGSV 0 0.0003
PUSHV 2
PUSHV 1
PUSHV 128; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILER; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0015; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #2 Body [Opt:AlwaysOn] End
GOTO 10; while() #2 End AND [Opt:NeverRet] AND void run(int, int) Body End
SETR D4 SP2; Func[int ComboAt(int, int)] Body Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int VBound(int, int, int)] Params Start
PUSHR D2
PUSHV 255
PUSHV 0; UsrFunc[int VBound(int, int, int)] Params End
CALLFUNC 0.0132; UsrFunc[int VBound(int, int, int)] Call
POP D4
STORE D2 0.0001
PUSHR D4
LOAD D2 0; UsrFunc[int VBound(int, int, int)] Params Start
PUSHR D2
PUSHV 175
PUSHV 0; UsrFunc[int VBound(int, int, int)] Params End
CALLFUNC 0.0132; UsrFunc[int VBound(int, int, int)] Call
POP D4
STORE D2 0
LOAD D2 0; return Start
ANDV D2 240
PUSHR D2
LOAD D2 0.0001
RSHIFTV D2 4
POP D3
ADDR D2 D3
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int ComboAt(int, int)] Body End
SETR D4 SP2; Func[int VBound(int, int, int)] Body Start
LOAD D2 0.0002; if() #79 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 144 ==; Test 'if'
LOAD D2 0; if() #79 Body Start
STORE D2 0.0002
GOTO 154; if() #79 Body End
LOAD D2 0.0002; if() #346 Test AND if() #79 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 154 ==; Test 'if'
LOAD D2 0.0001; if() #346 Body Start
STORE D2 0.0002; if() #346 Body End
LOAD D2 0.0002; if() #79 Else End AND return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[int VBound(int, int, int)] Body End


QUIT; void run() Body
