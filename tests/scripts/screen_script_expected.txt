Compiling 'screen_script.zs'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
Pass 5: Checking code paths
Pass 6: Generating object code
Pass 7: Assembling
Success!
Compile finished with exit code '0' (success)
=== METADATA (elided)
{
  "currentFileSymbols": 3,
  "symbols": 5,
  "identifiers": 9
}
PUSHR d0; void run(int, int) Params
PUSHR d1
PUSHARGSV 0,0.0002; void run(int, int) Body Start
SETR d4,SP2
SETR d2,LINKHP
DIVV d2,2
PUSHR d2
POP d2
SETR LINKHP,d2
PUSHR d4; while(true) #8 Body [Opt:AlwaysOn] Start
SETR d2,LINKX; UsrFunc[int ComboAt(int, int)] Params Start
ADDV d2,8
PUSHR d2
SETR d2,LINKY
ADDV d2,8
PUSHR d2; UsrFunc[int ComboAt(int, int)] Params End
CALLFUNC 0.0076; UsrFunc[int ComboAt(int, int)] Call
POP d4
STORE d2,0
LOAD d2,0; if() #558 Test
PUSHR d2
POP d0
SETR d2,COMBODD
PUSHR d2
LOAD d2,0.0003
POP d3
COMPARER d3,d2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 44,==; Test 'if'
LOAD d2,0; if() #558 Body Start
PUSHR d2
POP d0
SETR d2,COMBODD
ADDV d2,1
PUSHR d2
LOAD d2,0
PUSHR d2
POP d0
POP d2
SETR COMBODD,d2
LOAD d2,0.0002; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body AND if() #558 Body End
PUSHV 6; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
PUSHR LINKX
SETR d2,LINKY
SUBV d2,16
PUSHR d2
PUSHR LINKTILE
PUSHARGSV 1,0.0002
PUSHR LINKCSET
PUSHARGSV -1,0.0002
PUSHARGSV 0,0.0004
PUSHV 1
PUSHV 128; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILE; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS d5,0.0015; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
WAITDRAW; InlineFunc[void Waitdraw()] Body
PUSHV 6; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
PUSHR LINKX
SETR d2,LINKY
ADDV d2,16
PUSHR d2
PUSHR LINKTILE
PUSHARGSV 1,0.0002
PUSHR LINKCSET
PUSHARGSV -1,0.0002
PUSHARGSV 0,0.0003
PUSHV 2
PUSHV 1
PUSHV 128; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILE; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS d5,0.0015; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #8 Body [Opt:AlwaysOn] End
GOTO 10; while() #8 End AND [Opt:NeverRet] AND void run(int, int) Body End
SETR d4,SP2; Func[int ComboAt(int, int)] Body Start
PUSHR d4
LOAD d2,0.0001; UsrFunc[int VBound(int, int, int)] Params Start
PUSHR d2
PUSHV 255
PUSHV 0; UsrFunc[int VBound(int, int, int)] Params End
CALLFUNC 0.0102; UsrFunc[int VBound(int, int, int)] Call
POP d4
STORE d2,0.0001
PUSHR d4
LOAD d2,0; UsrFunc[int VBound(int, int, int)] Params Start
PUSHR d2
PUSHV 175
PUSHV 0; UsrFunc[int VBound(int, int, int)] Params End
CALLFUNC 0.0102; UsrFunc[int VBound(int, int, int)] Call
POP d4
STORE d2,0
LOAD d2,0; return Start
ANDV d2,240
PUSHR d2
LOAD d2,0.0001
RSHIFTV d2,4
POP d3
ADDR d2,d3
POPARGS d5,0.0002; return End
RETURNFUNC; Func[int ComboAt(int, int)] Body End
SETR d4,SP2; Func[int VBound(int, int, int)] Body Start
LOAD d2,0.0002; if() #133 Test
PUSHR d2
LOAD d2,0
POP d3
COMPARER d3,d2
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 114,==; Test 'if'
LOAD d2,0; if() #133 Body Start
STORE d2,0.0002
GOTO 124; if() #133 Body End
LOAD d2,0.0002; if() #355 Test AND if() #133 Else Start
PUSHR d2
LOAD d2,0.0001
POP d3
COMPARER d3,d2
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 124,==; Test 'if'
LOAD d2,0.0001; if() #355 Body Start
STORE d2,0.0002; if() #355 Body End
LOAD d2,0.0002; if() #133 Else End AND return Start
POPARGS d5,0.0003; return End
RETURNFUNC; Func[int VBound(int, int, int)] Body End


ALLOCATEGMEMV d2,4096,0; void run() Body Start
SETR gd1,d2
QUIT; void run() Body End