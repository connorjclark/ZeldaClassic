///////////////////////////////////////////
//CV SUBWEAPONS
//A set of subweapons from various CV games
///////////////////////////////////////////
const int CR_MAXPROJECTILES=10;
const int SFX_ERROR=64;
const int I_CHAOSRING=104;
const int SFX_HOLYWATERBREAK = 70;

//global script Init{
//	void run(){
//	Game->Counter[CR_MAXPROJECTILES]=1;
//	}
//}

//Main item script. Handles maximum projectiles flying onscreen.
//D0-D6: FFC arguments
//D7: Script slot.
item script Subweapon{
	void run (float d0, float d1, float d2, float d3, float d4, float d5, float d6, int ffcscript){
		int maxprojectiles = Game->Counter[CR_MAXPROJECTILES];
		float D[8]={d0,d1,d2,d3,d4,d5,d6,0};
		if (CountFFCsRunning(ffcscript)>=maxprojectiles){
			Game->PlaySound(SFX_ERROR);
			Quit();
		}
		else{
			Link->Action=LA_ATTACKING;
			RunFFCScriptOrQuit(ffcscript, D);
		}
	}
} 

//An item that sets maximum projectiles that can be launched at once.
//D0: New maximum.
item script IV {
	void run (int newmax){
		
		Game->Counter[CR_MAXPROJECTILES]=newmax;
	}
}

//An AXE that moves in arch pattern. Sideview only.
//D0: Damage.
//D1: Launch sound.
//D2: Sprite used.
//D3: Starting horizontal velocity.
//D4: Starting vertical velocity.
//D5: Cost (in rupees).
ffc script Axe{
	void run (int dam, int sound, int sprite, float hvel, float vvel, int cost){
		if (!IsSideview()) Quit();
		if (!AmmoManager(CR_RUPEES, cost, I_CHAOSRING)){
			Game->PlaySound(SFX_ERROR);
			Quit();
		}
		this->Data=1;
		int soundcounter = 0;
		//Game->PlaySound(sound);
		lweapon axe = LweaponInit(this, LW_SCRIPT1, dam, sprite, sound);
		if (Link->Dir==DIR_RIGHT){
			this->Vx=hvel;
			this->Vy=-(vvel);
		}
		else if (Link->Dir==DIR_LEFT){
			this->Vx=-(hvel);
			this->Vy=-(vvel);
		}
		else if (Link->Dir==DIR_UP){
			this->Vy=-(vvel);
		}
		while(this->Y < 176){
			soundcounter = ContiniousSFX(soundcounter, 15, sound);
			if (this->X< -(this->EffectWidth)){
				if (axe->isValid()) Remove(axe);
				//Game->PlaySound(SFX_FALL);
				Quit();
			}
			if (this->X> 256) {
				if (axe->isValid()) Remove(axe);
				//Game->PlaySound(SFX_FALL);
				Quit();
			}
			if (this->Y<=-64){
				if (axe->isValid()) Remove(axe);
				//Game->PlaySound(SFX_FALL);
				Quit();
			}
			if (axe->isValid()){
			    AffectedByGravity (this, axe);
			    LweaponDirUpdate(this, axe);
			    LweaponPosUpdateAlt(this, axe);
			    PenetratorUpdate(axe);
			    //debugValue(1, this->Y);
			    //debugValue(2, this->X);
			    Waitframe();
			}
			else axe = CreateNewWeapon(this, LW_SCRIPT1, dam, sprite);
		}
		if (axe->isValid()) Remove(axe);
		//Game->PlaySound(SFX_FALL);
	}
}

//A DAGGER that moves in straightforward way.
//D0: Damage.
//D1: Launch sound.
//D2: Sprite used.
//D3: Unused.
//D4: Flight speed.
//D5: Cost (in rupees).
ffc script Knife{
	void run (int dam, int sound, int sprite, int altsprite, float speed, int cost){
		if (!AmmoManager(CR_RUPEES, cost, I_CHAOSRING)){
			Game->PlaySound(SFX_ERROR);
			Quit();
		}
		this->Data=1;
		//Game->PlaySound(sound);
		lweapon knife = LweaponInit (this, LW_SCRIPT1, dam, sprite, sound);
		if (Link->Dir==DIR_RIGHT)this->Vx=speed;		
		else if (Link->Dir==DIR_LEFT)this->Vx=-(speed);		
		else if (Link->Dir==DIR_UP)this->Vy=-(speed);		
		else this->Vy=speed;		
		while (knife->isValid()){
			LweaponPosUpdate(this, knife);
			LweaponDirUpdate(this, knife);
			LweaponSpriteUpdate (knife);
			Waitframe();
		}
		ClearFFC(this);
		//Game->PlaySound(SFX_FALL);
	}
}

//A CROSS-shaped boomerang that bounces off screen boundaries several times before disappearing.
//D0: Damage.
//D1: Launch sound.
//D2: Sprite used.
//D3: Maximum number of bounces.
//D4: Flight speed.
//D5: Cost (in rupees).
ffc script CrossBoomerang{
	void run (int dam, int sound, int sprite, int maxbounce, float speed, int cost){
		if (!AmmoManager(CR_RUPEES, cost, I_CHAOSRING)){
			Game->PlaySound(SFX_ERROR);
			Quit();
		}
		this->Data=1;
		//Game->PlaySound(sound);
		lweapon cross = LweaponInit (this, LW_SCRIPT1, dam, sprite, sound);
		int soundcounter = 0;
		int bounce = 0;
		int initbounce= 30;
		if (Link->Dir==DIR_RIGHT)this->Vx=speed;
		else if (Link->Dir==DIR_LEFT)this->Vx=-(speed);
		else if (Link->Dir==DIR_UP)this->Vy=-(speed);
		else this->Vy=speed;
		while (InsideScreen (this)){
			if (!(cross->isValid())){
				//Game->PlaySound(SFX_FALL);
				ClearFFC(this);
				Quit();
			}
			if (initbounce>0)initbounce--;
			soundcounter = ContiniousSFX(soundcounter, 15, sound);
			if (OnScreenEdge(this)){
				if (bounce < maxbounce){
					if (this->Vx!=0) this->Vx= -(this->Vx);
					if (this->Vy!=0) this->Vy= -(this->Vy);
					if (initbounce==0)bounce++;
				}
			}
			LweaponPosUpdateAlt(this, cross);
			LweaponDirUpdate(this, cross);
			LweaponSpriteUpdate (cross);
			PenetratorUpdate(cross);
			Waitframe();
		}
		if (cross->isValid()) Remove (cross);
		ClearFFC(this);
     	//Game->PlaySound(SFX_FALL);
	}
}

//A bottle filled with HOLY WATER. When thrown it lobs at arch pattern like axe and on collision with
//solid combos explodes into raging inferno like Molotov Cocktail. Sideview only.
//D0: Damage.
//D1: Launch sound.
//D2: Sprite used.
//D3: Starting horizontal velocity.
//D4: Starting vertical velocity.
//D5: Cost (in rupees).
ffc script HolyMolotov{
	void run (int dam, int sound, int sprite, float hvel, float vvel, int cost){
		if (!AmmoManager(CR_RUPEES, cost, I_CHAOSRING)){
			Game->PlaySound(SFX_ERROR);
			Quit();
		}
		if (!IsSideview()) Quit();
		this->Data=1;
		//Game->PlaySound(sound);
		lweapon bottle = LweaponInit(this, LW_SCRIPT1, dam, sprite, sound);
		bottle->HitWidth=8;
		bottle->HitHeight=8;
		if (Link->Dir==DIR_RIGHT){
			this->Vx=hvel;
			this->Vy=-(vvel);
		}
		else if (Link->Dir==DIR_LEFT){
			this->Vx=-(hvel);
			this->Vy=-(vvel);
			bottle->Flip=1;
		}
		else if (Link->Dir==DIR_UP){
			this->Vy=-(vvel);
		}
		while(this->Y<=176){
			if (this->X< -(this->EffectWidth)){
				//Game->PlaySound(SFX_FALL);
				Quit();
			}
			if (this->X> 256) {
				//Game->PlaySound(SFX_FALL);
				Quit();
			}
			if (bottle->isValid()){
			    AffectedByGravity (this, bottle);
			    LweaponDirUpdate(this, bottle);
			    LweaponPosUpdateAlt(this, bottle);
			    PenetratorUpdate(bottle);
			    if (WallCollision8way(bottle)){
			    	Game->PlaySound(SFX_HOLYWATERBREAK);
			    	KillMolotov( this, bottle, dam, 8, 60);
			    	Quit();
			    }
			    Waitframe();
			}
			else bottle = CreateNewWeapon(this, LW_SCRIPT1, dam, sprite);
		}
		ClearFFC(this);
		//Game->PlaySound(SFX_FALL);
	}
}
//An ancient HOLY BIBLE. Upon launching, 
//It starts moving in spiral pattern until disappearing after certain time.
//D0: Damage.
//D1: Launch sound.
//D2: Sprite used.
//D3: Spiral radius.
//D4: Angular speed of moving.
//D5: Bible lifespan, in frames.
//D6: Cost(in rupees).
ffc script Bible{
	void run (int dam, int sound, int sprite, int radius, int speed, int duration, int cost){
		if (!AmmoManager(CR_RUPEES, cost, I_CHAOSRING)){
			Game->PlaySound(SFX_ERROR);
			Quit();
		}
		this->Data=1;
		//Game->PlaySound(sound);
		int angle=0;
		int rotspeed = speed;
		int Xrad = 0;
		int Ox = Link->X;
		int Oy = Link->Y;
		lweapon book = LweaponInit (this, LW_SCRIPT1, dam, sprite, sound);
		//int booktile = book->OriginalTile;
		book->HitWidth=8;
		book->DrawXOffset=-4;
		if (Link->Dir==DIR_DOWN){
			angle= 90;
		}
		else if (Link->Dir==DIR_RIGHT){
			angle= 0;
		}
		else if (Link->Dir==DIR_LEFT){
			if (IsSideview()) rotspeed = -(speed);
			angle= 180;
		}
		else angle=270;
		for (int t = duration; t>=0; t--){
			SetPolarCoordinates(this,Ox,Oy,Xrad,angle);
			angle=angle+speed;
			Xrad=Xrad+radius;
			if (book->isValid()){
				LweaponPosUpdateAlt(this,book);
				LweaponDirUpdate(this,book);
				PenetratorUpdate(book);
				if (t<Floor(duration/5)) book->DrawStyle=DS_PHANTOM;
			}
			else book = CreateNewWeapon (this, LW_SCRIPT1, dam, sprite);
			Waitframe();
		}
		Remove (book);
		ClearFFC(this);
		//Game->PlaySound(SFX_FALL);
	}
}

//A small DIAMOND that, when thrown, ricochets off solid combos. Sideview only.
//D0: Damage.
//D1: Launch sound.
//D2: Sprite used.
//D3: Maximum number of ricochets before flying trough walls.
//D4: Flight speed.
//D5: Cost (in rupees).
ffc script RicochetingDiamond{
	void run( int dam, int sound, int sprite, int maxbounce, float speed, int cost){
		if (!AmmoManager(CR_RUPEES, cost, I_CHAOSRING)){
			Game->PlaySound(SFX_ERROR);
			Quit();
		}
		if (!IsSideview()) Quit();
		this->Data=1;
		//Game->PlaySound(sound);
		lweapon gem = LweaponInit (this, LW_SCRIPT1, dam, sprite, sound);
		int startdir= 0;
		int ric= 0;
		int bouncecooldown=0;
		gem->HitWidth=8;
		gem->HitHeight=8;
		gem->DrawXOffset=-4;
		gem->DrawYOffset=-4;
		if (Link->Dir==DIR_RIGHT) startdir=45;
		else if (Link->Dir==DIR_LEFT) startdir=135;
		else if (Link->Dir==DIR_UP) startdir= Rand(45, 135);
		else startdir = Rand(225, 315);
		this->Vx=speed*Cos(startdir);
		this->Vy=speed*Sin(startdir);
		while (gem->isValid()){
			if (ric <= maxbounce){
				if (bouncecooldown>0) bouncecooldown--;
			     else if (WallCollision8way(gem)) {
			     	MoveToSolidContactPosition(this, gem);
			     	Bounce(this, gem, SFX_TAP1);
			     	ric++;
			     	bouncecooldown=bouncecooldown+1;
			     	}
			     }
			else gem->DrawStyle=DS_PHANTOM;
			LweaponPosUpdate(this,gem);
			LweaponDirUpdate(this,gem);
			PenetratorUpdate(gem);
			Waitframe();
		}
		//Game->PlaySound(SFX_FALL);
		ClearFFC(this);
	}
}

item script SubweaponStart{
	void run (){
		if (Game->Counter[CR_MAXPROJECTILES] == 0){
			Game->Counter[CR_MAXPROJECTILES] = 1;
			Link->Item[150]=true;
		}
	}
}