///////////////////////////////////////////
//CV SUBWEAPONS
//A set of subweapons from various CV games
///////////////////////////////////////////

//import "std.zh"
//import "string.zh"
//import "ffcscript.zh"
//import "stdExtra.zh"

const int CR_MAXPROJECTILES=10; //Counter ID used for maximum amount of lweapons launched at time.
const int SFX_ERROR=32; //Error SFX.
const int I_CHAOSRING=104; //Item that allows infinite rupees.

//Put it in Init global script slot, so Link can fire subweapons one at time initially.
//Otherwise, give Link "I" item
global script Init{
void run(){
	Game->Counter[CR_MAXPROJECTILES]=1;
}
}

//An item that sets maximum projectiles that can be launched at once.
//D0: New maximum.
item script IV {
	void run (int newmax){
		Game->Counter[CR_MAXPROJECTILES]=newmax;
	}
}

//An AXE that moves in arch pattern. Uses SWORD enemy defense.
//D0: Damage.
//D1: Launch sound.
//D2: Sprite used.
//D3: Starting horizontal velocity.
//D4: Starting vertical velocity.
//D5: Cost (in rupees).
ffc script Axe{
	void run (int dam, int sound, int sprite, float hvel, float vvel, int cost){
		CheckMaxLweapons(this, (Game->Counter[CR_MAXPROJECTILES]));
		if (!AmmoManager(CR_RUPEES, cost, I_CHAOSRING)){
			Game->PlaySound(SFX_ERROR);
			Quit();
		}
		int soundcounter = 0;
		lweapon axe = LweaponInit(this, LW_GHOSTED, dam, sprite, sound);
		LweaponSetFlag(axe, LWF_PENETRATING);
		LweaponSetFlag(axe, LWF_DRAW_SHADOW);
		LweaponSetFlag(axe, LWF_MOVE_OFFSCREEN);
		LweaponSetFlag(axe, LWF_AUTO_DIR_UPDATE);
		SetEnemyDefense(axe, NPCD_SWORD);
		if(IsSideview()){
			if (Link->Dir==DIR_RIGHT){
				this->Vx=hvel;
				this->Vy=-(vvel);
			}
			else if (Link->Dir==DIR_LEFT){
				this->Vx=-(hvel);
				this->Vy=-(vvel);
			}
			else if (Link->Dir==DIR_UP){
				this->Vy=-(vvel);
			}
		}
		else{
			SetStraightMotion4(this, hvel);
			this->Misc[FFC_MISC_VZ] = vvel;
			axe->HitZHeight = 16;
		}
		if(IsSideview()){
			while(true){
				//UseEnemyDefense(axe, 0, NPCD_SWORD);
				if (this->X< -(this->EffectWidth))TerminateLweapon (this, axe);
				if (this->X> 256) TerminateLweapon (this, axe);
				if (this->Y>176) TerminateLweapon (this, axe);
				soundcounter = ContiniousSFX(soundcounter, 20, sound);
				if (BlockedByEnemy(axe)){
					Game->PlaySound(6);
					this-> Vx = -((this->Vx)/4);
					axe->DrawStyle=DS_PHANTOM;
					axe->CollDetection = false;
				}
				LweaponWaitframe (this, axe, true);
			}			
		}
		else{
			while (true){
				soundcounter = ContiniousSFX(soundcounter, 20, sound);
				if ((axe->Z <= 0)&&(this->Misc[FFC_MISC_VZ]<=0)) Remove(axe);
				LweaponWaitframe (this, axe, true);
			}
		}
	}
}

//A DAGGER that moves in straightforward way. Turns Gibdos into Stalfos II. Uses ARROW enemy defense.
//D0: Damage.
//D1: Launch sound.
//D2: Sprite used.
//D3: Unused.
//D4: Flight speed.
//D5: Cost (in rupees).
ffc script Knife{
	void run (int dam, int sound, int sprite, int altsprite, float speed, int cost){
		CheckMaxLweapons(this, (Game->Counter[CR_MAXPROJECTILES]));
		if (!AmmoManager(CR_RUPEES, cost, I_CHAOSRING)){
			Game->PlaySound(SFX_ERROR);
			Quit();
		}
		lweapon knife = LweaponInit(this, LW_GHOSTED, dam, sprite, sound);
		LweaponSetFlag(knife, LWF_AUTO_DIR_UPDATE);
		LweaponSetFlag(knife, LWF_AUTO_SPRITE_UPDATE);
		LweaponSetFlag(knife, LWF_NO_FALL);
		SetEnemyDefense(knife, NPCD_ARROW);
		SetStraightMotion4(this, speed);		
		while (true){
			//UseEnemyDefense(knife, 0, NPCD_ARROW);
			TransformEnemyOnCollision (knife, NPC_GIBDO, NPC_STALFOS2, false, SFX_EDEAD);
			LweaponWaitframe (this, knife, true);
		}
	}
}

//A CROSS-shaped boomerang that bounces off screen boundaries several times before disappearing.
//Use Boomerang Defense for enemy interaction with this weapon. Uses SWORD enemy defense.
//Also this weapon drags dropped items around.
//D0: Damage.
//D1: Launch sound.
//D2: Sprite used.
//D3: Maximum number of bounces.
//D4: Flight speed.
//D5: Cost (in rupees).
ffc script CrossBoomerang{
	void run (int dam, int sound, int sprite, int maxbounce, float speed, int cost){
		CheckMaxLweapons(this, (Game->Counter[CR_MAXPROJECTILES]));
		if (!AmmoManager(CR_RUPEES, cost, I_CHAOSRING)){
			Game->PlaySound(SFX_ERROR);
			Quit();
		}
		//this->Data=1;
		lweapon cross = LweaponInit(this, LW_GHOSTED, dam, sprite, sound);
		int bouncecounter = 0;
		int timer = -1;
		int cooldown = 0;
		LweaponSetFlag(cross, LWF_PENETRATING);
		LweaponSetFlag(cross, LWF_MOVE_OFFSCREEN);
		LweaponSetFlag(cross, LWF_AUTO_DIR_UPDATE);
		LweaponSetFlag(cross, LWF_AUTO_SPRITE_UPDATE);
		LweaponSetFlag(cross, LWF_CAN_PICKUP_ITEMS);
		LweaponSetFlag(cross, LWF_NO_FALL);
		SetEnemyDefense(cross, NPCD_SWORD);
		SetStraightMotion4(this, speed);
		while (true){
			//UseEnemyDefense(cross, 0, NPCD_SWORD);
			TransformEnemyOnCollision (cross, NPC_GIBDO, NPC_STALFOS2, false, SFX_EDEAD);
			if (cooldown==0){
			if ((OnScreenEdge(cross))||(BlockedByEnemy(cross))){
				if (bouncecounter<maxbounce){					
					if (this->Vx!=0) this->Vx= -(this->Vx);
					if (this->Vy!=0) this->Vy= -(this->Vy);
					if (BlockedByEnemy(cross)){
						cross->CollDetection = false;
						cooldown = 10;
					}
					bouncecounter++;
				}
				else if (BlockedByEnemy(cross)){
					if (this->Vx!=0) this->Vx= ((this->Vx)/(-4));
					if (this->Vy!=0) this->Vy= ((this->Vy)/(-4));
					cross->DrawStyle=DS_PHANTOM;
					cross->CollDetection = false;
					if(IsSideview())LweaponUnSetFlag(cross, LWF_NO_FALL);
					else timer = 30;
				}
				
			}
			}
			if (cooldown >0){
					cooldown --;
					if (cooldown==0){
						cross->CollDetection=true;
					}
				}
			if (timer>=0) timer--;
			if (timer==0) TerminateLweapon (this, cross);
			if (!InsideScreen(cross)) TerminateLweapon (this, cross);
			LweaponWaitframe (this, cross, true);
		}
	}
}

//A bottle filled with HOLY WATER. When thrown it lobs at arch pattern like axe and on collision with
//solid combos (or enemies) explodes into raging inferno like Molotov Cocktail.
//Uses FIRE enemy defense.
//D0: Damage.
//D1: Launch sound.
//D2: Sprite used.
//D3: Starting horizontal velocity.
//D4: Starting vertical velocity.
//D5: Cost (in rupees).
ffc script HolyMolotov{
	void run (int dam, int sound, int sprite, float hvel, float vvel, int cost){
		CheckMaxLweapons(this, (Game->Counter[CR_MAXPROJECTILES]));
		if (!AmmoManager(CR_RUPEES, cost, I_CHAOSRING)){
			Game->PlaySound(SFX_ERROR);
			Quit();
		}
		lweapon bottle = LweaponInit(this, LW_GHOSTED, dam, sprite, sound);
		PutFFCInFrontOfLink(this, 4);
		LweaponSetFlag(bottle, LWF_PENETRATING);
		LweaponSetFlag(bottle, LWF_DRAW_SHADOW);
		LweaponSetFlag(bottle, LWF_MOVE_OFFSCREEN);
		LweaponSetFlag(bottle, LWF_AUTO_DIR_UPDATE);
		SetEnemyDefense(bottle, NPCD_FIRE);
		SetLweaponHitboxOffsets(bottle, 4, 4,4, 4);
		if(IsSideview()){
		if (Link->Dir==DIR_RIGHT){
			this->Vx=hvel;
			this->Vy=-(vvel);
		}
		else if (Link->Dir==DIR_LEFT){
			this->Vx=-(hvel);
			this->Vy=-(vvel);
		}
		else if (Link->Dir==DIR_UP){
			this->Vy=-(vvel);
		}
		}
		else{
			SetStraightMotion4(this, hvel);
			this->Misc[FFC_MISC_VZ] = vvel;
			bottle->HitZHeight = 16;
		}
		if(IsSideview()){
			while(true){
				if (this->X< -(this->EffectWidth))TerminateLweapon (this, bottle);
				if (this->X> 256) TerminateLweapon (this, bottle);
				if (this->Y>176) TerminateLweapon (this, bottle);;
				//UseEnemyDefense(bottle, 0, NPCD_FIRE);
				if ((WallCollision8way(bottle))||(BlockedByEnemy(bottle))){
					Game->PlaySound(SFX_FIRE);
					KillMolotov(this, bottle, dam, 8, 60);
					ClearFFC(this);
					Quit();
				}
			LweaponWaitframe (this, bottle, true);
			}
		}
		else{
			while (true){
				//UseEnemyDefense(bottle, 0, NPCD_FIRE);
				if ((WallCollision8way(bottle))||(BlockedByEnemy(bottle))||
				((bottle->Z <= 0)&&(this->Misc[FFC_MISC_VZ]<0))){
					Game->PlaySound(SFX_FIRE);
					KillMolotov( this, bottle, dam, 8, 60);
					ClearFFC(this);
					Quit();
				}
				if (!InsideScreen(bottle)) TerminateLweapon (this, bottle);
				LweaponWaitframe (this, bottle, true);
			}
		}
	}
}
//An ancient HOLY BIBLE. Upon launching,it starts moving in spiral pattern 
//until disappearing after certain time. Additionally, it destroys EWeapons.
//Uses BYRNA BEAM enemy defense.
//D0: Damage.
//D1: Launch sound.
//D2: Sprite used.
//D3: Spiral radius.
//D4: Angular speed of moving.
//D5: Bible lifespan, in frames.
//D6: Cost(in rupees).
ffc script Bible{
	void run (int dam, int sound, int sprite, int radius, int speed, int duration, int cost){
		CheckMaxLweapons(this, (Game->Counter[CR_MAXPROJECTILES]));
		if (!AmmoManager(CR_RUPEES, cost, I_CHAOSRING)){
			Game->PlaySound(SFX_ERROR);
			Quit();
		}
		int angle=0;
		int rotspeed = speed;
		int Xrad = 0;
		int Ox = Link->X;
		int Oy = Link->Y;
		lweapon book = LweaponInit(this, LW_GHOSTED, dam, sprite, sound);
		int timer = duration;
		LweaponSetFlag(book, LWF_PENETRATING);
		LweaponSetFlag(book, LWF_NO_FALL);
		LweaponSetFlag(book, LWF_MOVE_OFFSCREEN);
		LweaponSetFlag(book, LWF_AUTO_DIR_UPDATE);
		SetEnemyDefense(book, NPCD_BYRNA);
		SetLweaponHitboxOffsets(book, 4, 0, 0, 4);
		if (Link->Dir==DIR_DOWN){
			angle= 90;
		}
		else if (Link->Dir==DIR_RIGHT){
			angle= 0;
		}
		else if (Link->Dir==DIR_LEFT){
			if (IsSideview()) rotspeed = -(speed);
			angle= 180;
		}
		else angle=270;
		while (true){
			//UseEnemyDefense(book, 0, NPCD_BYRNA);
			angle=angle+speed;
			Xrad=Xrad+radius;
			SetPolarCoordinates(this,Ox,Oy,Xrad,angle);
			DestroyEweapons (book, 10, 0);
			timer--;
			if (timer<=(duration/5))book->DrawStyle=DS_PHANTOM;
			if (timer<=0) TerminateLweapon (this, book);
			LweaponWaitframe (this, book, true);
		}
	}
}

//A small DIAMOND that, when thrown, ricochets off solid combos.
//Uses REFLECTED ROCK enemy defense.
//D0: Damage.
//D1: Launch sound.
//D2: Sprite used.
//D3: Maximum number of ricochets before flying trough walls.
//D4: Flight speed.
//D5: Cost (in rupees).
ffc script RicochetingDiamond{
	void run( int dam, int sound, int sprite, int maxbounce, float speed, int cost){
		CheckMaxLweapons(this, (Game->Counter[CR_MAXPROJECTILES]));
		if (!AmmoManager(CR_RUPEES, cost, I_CHAOSRING)){
			Game->PlaySound(SFX_ERROR);
			Quit();
		}
		lweapon gem = LweaponInit(this, LW_GHOSTED, dam, sprite, sound);
		LweaponSetFlag(gem, LWF_PENETRATING);
		LweaponSetFlag(gem, LWF_NO_FALL);
		LweaponSetFlag(gem, LWF_MOVE_OFFSCREEN);
		LweaponSetFlag(gem, LWF_AUTO_DIR_UPDATE);
		SetEnemyDefense(gem, NPCD_REFROCK);
		int startdir= 0;
		int ric= 0;
		int bouncecooldown=0;
		gem->HitWidth=8;
		gem->HitHeight=8;
		gem->DrawXOffset=-4;
		gem->DrawYOffset=-4;
		if (IsSideview()){
			if (Link->Dir==DIR_RIGHT) startdir=45;
			else if (Link->Dir==DIR_LEFT) startdir=135;
			else if (Link->Dir==DIR_UP) startdir= Rand(45, 135);
			else startdir = Rand(225, 315);
		}
		else{
			if (Link->Dir==DIR_UP) startdir=315;
			else if (Link->Dir==DIR_DOWN) startdir=135;
			else if (Link->Dir==DIR_LEFT) startdir= 225;
			else startdir = 45;
		}
		this->Vx=speed*Cos(startdir);
		this->Vy=speed*Sin(startdir);
		while (true){
			//UseEnemyDefense(gem, 0, NPCD_REFROCK);
			if (ric <= maxbounce){
				if (bouncecooldown>0) bouncecooldown--;
			     else if (WallCollision8way(gem)) {
			     	MoveToSolidContactPosition(this, gem);
			     	Bounce(this, gem, SFX_TAP1);
			     	ric++;
			     	bouncecooldown++;
			     	}
			     }
			else gem->DrawStyle=DS_PHANTOM;
			if (!InsideScreen(gem)) TerminateLweapon (this, gem);
			LweaponWaitframe (this, gem, true);
		}
	}
}