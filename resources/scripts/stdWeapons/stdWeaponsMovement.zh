//Makes FFC bounce off solid combos. Don`t call it too often. Otherwise Lweapon can be stuck in a wall.
void Bounce (ffc ball, lweapon l, int sound){
	bool bounce = false;
	int lwx = l->X + l->HitXOffset;
	int lwy = l->Y + l->HitYOffset;
	if (Screen->isSolid(lwx+l->HitWidth/2, lwy)) {
		ball->Vy*=-1;
		bounce = true;
	}
	if (Screen->isSolid(lwx+l->HitWidth/2, lwy+l->HitHeight)) {
		ball->Vy*=-1;
		bounce = true;
	}
	if (Screen->isSolid(lwx, lwy+l->HitHeight/2)) {
		ball->Vx*=-1;
		bounce = true;
	}
	if (Screen->isSolid(lwx+l->HitWidth, lwy+l->HitHeight/2)) {
		ball->Vx*=-1;
		bounce = true;
	}
	if (bounce){
		Game->PlaySound(sound);
		return;
	}
	if ((Screen->isSolid(lwx, lwy))&&(ball->Vx < 0)&&(ball->Vy <0)){
		ball->Vx*=-1;
		ball->Vy*=-1;
		bounce = true;
	}
	if ((Screen->isSolid(lwx, lwy+l->HitHeight))&&(ball->Vx < 0)&&(ball->Vy > 0)){
		ball->Vx*=-1;
		ball->Vy*=-1;
		bounce = true;
	}
	if ((Screen->isSolid(lwx+l->HitWidth, lwy+l->HitHeight))&&(ball->Vx > 0)&&(ball->Vy >0)){
		ball->Vx*=-1;
		ball->Vy*=-1;
		bounce = true;
	}
	if ((Screen->isSolid(lwx+l->HitWidth, lwy))&&(ball->Vx > 0)&&(ball->Vy <0)){
		ball->Vx*=-1;
		ball->Vy*=-1;
		bounce = true;
	}
	if (bounce){
		Game->PlaySound(sound);
		return;
	}	
}

//Puts FFC at position where it`s Lweapon`s wall collision just recently occured.
//Do you remember the same function in Game Maker?
void MoveToSolidContactPosition(ffc f, lweapon l){
	f->X-= f->Vx;
	f->Y-= f->Vy;
	while (!WallCollision8way(l)){
		f->X+=Sign(f->Vx);
		f->Y+=Sign(f->Vy);
		if (LweaponFlagIsSet(l, LWF_MOVE_OFFSCREEN))LweaponPosUpdateAlt(f, l);
		else LweaponPosUpdate(f, l);
	}
	f->X-=Sign(f->Vx);
	f->Y-=Sign(f->Vy);
}

//Set FFC`s position using polar coordinate system with given origin point, radius and angle set.
//Best used with circling Lweapons. Run once every frame.
void SetPolarCoordinates (ffc f, int oX, int oY, float radius, int angle){
	f->X=oX+(radius*Cos(angle));
	f->Y=oY+(radius*Sin(angle));	
}

//Causes FFC to be affected by gravity. Run once every frame.
void AffectedByGravity (ffc f, lweapon l){
	if (IsSideview()){
		if (f->Vy>TERMINAL_VELOCITY){
			f->Vy=TERMINAL_VELOCITY;
			f->Ay=0;
			}
		else f->Ay=GRAVITY;
		}
	else {
		if (f->Misc[FFC_MISC_VZ] > -TERMINAL_VELOCITY) f->Misc[FFC_MISC_VZ]-=GRAVITY;
		else f->Misc[FFC_MISC_VZ]=-TERMINAL_VELOCITY;
		f->Misc[FFC_MISC_Z] += f->Misc[FFC_MISC_VZ];
	}
}

//Sets angular movement of FFC. Angle is measured in degrees.
void SetAngularMovement(ffc f, int angle, int speed){
	f->Vx = speed*Cos(angle);
	f->Vy = speed*Sin(angle);
}

//Sets FFC to move in one of cardinal directions at given speed, using Link`s direction.
void SetStraightMotion4(ffc f, float speed){
	f->Vx=0;
	f->Vy=0;
	if (Link->Dir==DIR_RIGHT)f->Vx=speed;
	else if (Link->Dir==DIR_LEFT)f->Vx=-(speed);
	else if (Link->Dir==DIR_UP)f->Vy=-(speed);
	else f->Vy=speed;
}

//Same as previous function, but in specific direction (not reading Link`s one).
void SetStraightMotion4(ffc f, int dir, float speed){
	f->Vx=0;
	f->Vy=0;
	if (dir==DIR_RIGHT)f->Vx=speed;
	else if (dir==DIR_LEFT)f->Vx=-(speed);
	else if (dir==DIR_UP)f->Vy=-(speed);
	else f->Vy=speed;
}

//Causes FFC to home on given point. If "accel" boolean is set to TRUE, the function affects FFC`s
//acceleration, instead of velocity.
void HomingUpdate(ffc f, int speed, int targetX, int targetY, bool accel){
	int fx = CenterX (f);
	int fy = CenterY (f);
	int hdir = Angle(fx, fy, targetX, targetY);
	if (accel){
		f->Ax = speed*Cos(hdir);
		f->Ay = speed*Sin(hdir);
	}
	else{
		f->Vx = speed*Cos(hdir);
		f->Vy = speed*Sin(hdir);
	}
}

void RotateFFCMovement(ffc f, int angle){
	int rotx = f->Vx;
	int roty = f->Vy;
	f->Vx = (RotatePointX(rotx, roty, 0, 0, angle));
	f->Vy = (RotatePointY(rotx, roty, 0, 0, angle));
}