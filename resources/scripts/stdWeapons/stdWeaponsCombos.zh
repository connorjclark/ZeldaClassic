//These extra functions are used for interaction between custom Lweapons and combos.
//Requires stdCombosv3.zh

//Checks for collision with trigger flags and triggers screen secrets if a collision occurs.
//Uses screen`s undercombo for replacing triggered combo.
//Sound - sound to play on triggering secrets.
//Perm - Set to TRUE, and the secrets will be permanent.
//CMB - Combo used on replacing activated triggers. Set to 0 to use screen`s undercombo, or -1 for changing to net combo in the table.
//SCset - CSet for Combo used on replacing activated triggers. Set to -1 to use screen`s under cset.
void TriggerUpdate (lweapon l, int flag, int sound, bool perm, int cmb, int SCSet){
	if (flag==0) return;
	bool Alltriggered = false;
	while (!Alltriggered){
		if (cmb == 0) cmb = Screen->UnderCombo;
		if (SCSet < 0) SCSet = Screen->UnderCSet;
		int loc = ComboAnyFlagCollision (flag, l, false, -1);
		if (loc < 0) Alltriggered = true;
		else{
			Game->PlaySound(sound);
			if (ComboFI(loc, CF_SINGLE)){
				if (cmb== -1) Screen->ComboD[loc] ++;
				else Screen->ComboD[loc] =cmb;
				Screen->ComboC[loc] = SCSet;
				Screen->ComboF[loc] = 0;
			}
			else if (ComboFI(loc, CF_SINGLE16)){
				if (cmb== -1) Screen->ComboD[loc] ++;
				else Screen->ComboD[loc] =cmb;
				Screen->ComboC[loc] = SCSet;
				Screen->ComboF[loc] = 0;
				Screen->TriggerSecrets();
			}
			else {
				for (int i=0; i<176; i++){
					if (ComboFI(i, flag)) {
						if (cmb== -1) Screen->ComboD[i] ++;
						else if (cmb== 0) Screen->ComboD[i] = Screen->UnderCombo;
						else Screen->ComboD[i] =cmb;
						if (cmb==0) Screen->ComboC[i] = Screen->UnderCSet;
						else Screen->ComboC[i] = SCSet;
						Screen->ComboF[i] = 0;
					} 
				}
				Screen->TriggerSecrets();
				if (perm) Screen->State[ST_SECRET] = true;
			}
		}
	}
}

//Same, as TriggerUpdate, but just returns whether lweapon just triggered flag or not.
bool HitSecretTrigger (lweapon l, int flag, int sound, bool perm, int cmb, int SCSet){
	if (flag==0) return false;
	bool Alltriggered = false;
	bool HitTriggered = false;
	while (!Alltriggered){
		if (cmb == 0) cmb = Screen->UnderCombo;
		if (SCSet < 0) SCSet = Screen->UnderCSet;
		int loc = ComboAnyFlagCollision (flag, l, false, -1);
		if (loc < 0) Alltriggered = true;
		else{
			Game->PlaySound(sound);
			if (ComboFI(loc, CF_SINGLE)){
				if (cmb== -1) Screen->ComboD[loc] ++;
				else Screen->ComboD[loc] =cmb;
				Screen->ComboC[loc] = SCSet;
				Screen->ComboF[loc] = 0;
			}
			else if (ComboFI(loc, CF_SINGLE16)){
				if (cmb== -1) Screen->ComboD[loc] ++;
				else Screen->ComboD[loc] =cmb;
				Screen->ComboC[loc] = SCSet;
				Screen->ComboF[loc] = 0;
				Screen->TriggerSecrets();
			}
			else {
				for (int i=0; i<176; i++){
					if (ComboFI(i, flag)) {
						if (cmb== -1) Screen->ComboD[i] ++;
						else if (cmb== 0) Screen->ComboD[i] = Screen->UnderCombo;
						else Screen->ComboD[i] =cmb;
						if (SCSet<0) Screen->ComboC[i] = Screen->UnderCSet;
						else Screen->ComboC[i] = SCSet;
						Screen->ComboF[i] = 0;
					} 
				}
				Screen->TriggerSecrets();
				if (perm) Screen->State[ST_SECRET] = true;
				HitTriggered = true;
			}
		}
	}
	return HitTriggered;
}

bool HitSecretTrigger (lweapon l, int flag, int sound, bool perm){
	return HitSecretTrigger (l, flag, sound, perm, 0, -1);
}

void TriggerUpdate (lweapon l, int flag, int sound, bool perm){
	TriggerUpdate (l, flag, sound, perm, 0, -1);
}

//Detects if lweapon hits blocker combo type
//NP means prevent penetrating lweapons from piercing trough such combos.
bool BlockedByCombo (lweapon l, int type, int sound){
	if (type==0) return false;
	int block = ComboTypeCollision (type, l, false, -1);
	if (block>=0){
		Game->PlaySound(sound);
		return true;
	}
	return false;
}

bool BlockedByCombo (lweapon l, int type){
	return BlockedByCombo (l, type, 0);
}

//Detects if lweapon hits blocker combo type and removes lweapon on hit.
void BlockerUpdate (lweapon l, int type, int sound){
	int block = ComboTypeCollision (type, l, false, -1);
	if (block>=0){
		Game->PlaySound(sound);
		LweaponUnSetFlag(l, LWF_PENETRATING);
		l->DeadState=0;
	}
}

//Replaces any combos of specific type when touched by Lweapon
//Sound - sound to play on combo replacement.
void ReplaceCombosOnCollision( lweapon l, int type, int newcombo, int newcset, int sound){
	for (int i =0; i < 176; i++) {
		if ((Screen->ComboT[i]==type)&&(ComboCollision (i, l, false, -1))){
		Screen->ComboD[i] = newcombo;
		if (newcset >=0) Screen->ComboC[i] = newcset;
		Game->PlaySound(sound);
		}
	}
}

//Same as above but with flags. if "retainflag" is false, the flag that triggered collision will be removed.
void ReplaceFlaggedCombos( lweapon l, int flag, int newcombo, int newcset, int sound, bool retainflag){
	for (int i =0; i < 176; i++){
		if ((ComboFI(i, flag))&&(ComboCollision (i, l, false, 0))){
		Screen->ComboD[i] = newcombo;
		if (newcset >=0)Screen->ComboC[i] = newcset;
		if (retainflag) Screen->ComboF[i] = 0;
		Game->PlaySound(sound);
		}
	}
}

//Destroys combos on collision by replacing them with screen`s undercombo. 
//Sound - sound to play on destruction.
void DestroyCombosOnCollision( lweapon l, int type, int sound){
	int cmb = Screen->UnderCombo;
	int cset = Screen->UnderCSet;
	ReplaceCombosOnCollision( l, type, cmb, cset, sound);
}

//Destroys combos on collision by replacing them with next combo on the List.
//Sound - sound to play on destruction.
void ChangeToNextOnCollision( lweapon l, int type, int newcset, int sound){
	int cmb = type++;
	ReplaceCombosOnCollision( l, type, cmb, newcset, sound);
}

int ReflectOffMirrors(int oldcmb, ffc f, lweapon l){
	int cmb = ComboAt(CenterX(l), CenterY(l));
	if (cmb==oldcmb) return oldcmb;
	int angle=0;
	if (Screen->ComboT[cmb] == CT_MIRROR) angle=90;
	if (Screen->ComboT[cmb] == CT_MIRRORSLASH) angle=45;
	if (Screen->ComboT[cmb] == CT_MIRRORBACKSLASH) angle=-45;
	if (angle==0) return oldcmb;
	if (Abs(f->Vx)>Abs(f->Vy))angle*=-1;
	RotateFFCMovement(f, angle*2);
	if (angle==90)f->Vy*=-1;
	LweaponDebugValue(3, angle);
	if (angle!=0)oldcmb=cmb;
	LweaponSetFlag(l, LWF_REFLECTED);
	if (l->Misc[LWEAPON_MISC_DEFENSE]==NPCD_MAGIC) SetEnemyDefense(l, NPCD_REFMAGIC);
	return oldcmb;
}