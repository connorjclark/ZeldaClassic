// Invaders
// v0.2.0
// 2nd April, 2020
// ZoriaRPG
//
/*
* Change History
* 0.0.1 - Project Begins
* 0.0.2 - Fixed initial compile. 
* 0.0.3 - Added playr::missile, and initial lweapon script. 
* 0.0.4 - Aliens now move, spawn and aniate properly. Player is clamped properly. 
* 	- Player is now animated. Shields are drawn using bitmaps. 
* 	- Known Bugs: Shields are not obliterated by aliens because of logic issues. 
* 0.0.4 - Added player attack. Disabled bunker bitmap/getpixel checks for now. 
* 	- Added sounds and actions. Added player init script. 
* 	- Fixed bugs with enemies not attacking. 
* 0.0.5 - Game now ends on landing. Enemy missiles now damage the player. 
* 0.0.6	- Fixed some visual bugs, and added splat effect. 
* 0.0.7 - Added scoring. Disabled the active subscreen.
* 	- Added additional stages. Show 'R' (round) indicator. 
* 0.0.8 - Some clamping to force step to stay in bounds. 
* 0.1.0 - Refactored aliens.
* 0.1.1 - Refactored attacking and splatting.
* 0.1.2 - Backported to Alpha 51 due to Rob's parser improvements bricking
* 	  npc pointers in a for loop. 
* 	  Worked on new movemnt system for enemies. 
* 0.1.3 - Start adding bunker destruction.
* 0.1.4 - Restore 'nextstage'. Disable tracing unless DEBUG is on. 
*	- Disable bunker collision unless SKIPBUNKERS is off. 
* 	- Added UFO. 
* 0.1.5 - Increased playr shot speed by +50% and increased minimum enemy attack clk slightly. 
* 	- Game Over now suspends the game.
* 0.1.6 - Invaders now descent 8px, not 16px.
* 0.1.7 - Fixed UFO collision and points. Adjusted the way that invader step is calculated. 
* 	- Slowed UFO speed a bit. Added 20 frames of grace in invader descent phase. 
* 	- Fixed a bug where X/Y on the swarm pointer were accessed during nextstage() prior to being respawned. 
* 0.2.0 - Implemented bunkers, after fixing Getpixel in th ZC interpreter.
*	- Now requires Alha 58.
*/

/*TODO

Add UFO score. This could be drawn with DrawInt or with a sparkle sprite. 

Fix GetPixel in the source so that it returns the correct values for the screen.
	Finish bunkers.
	
Fix UFO not dying.

Points = Life Refills
Every 2000 points gain +4 HP?

*/

//Bunnies should drop blue egg bombs

int ofs = 0;
namespace invaders
{
	int alienclk; //one second clock
	int hasturned = 0;
	int gameover = 0;
	const int SPLATSPRITE = 34; 
	const bool SKIPBUNKERS = 0;
	const bool DEBUG = 0;
	namespace shields
	{
		bitmap bnkr[4];
		ffc loc[4] = { NULL, NULL, NULL, NULL };
		const int TILE = 78213;
		const int CSET = 11;
		void init()
		{
			for ( int q = 0; q < 4; ++q )
			{
				loc[q] = NULL;
				bnkr[q] = Game->CreateBitmap(3*16, 2*16);
				if (DEBUG) printf("bnkr[q]: %d\n", <int>bnkr[q]);
				bnkr[q]->DrawTile(0, 0, 0, TILE, 3, 2, CSET, -1, -1, 0, 0, 0, 0, true, 128);
				
			}
			//bnkr[0]->Write(0, "bunker1.png", true);
			//bnkr[1]->Write(0, "bunker2.png", true);
			//bnkr[2]->Write(0, "bunker3.png", true);
			//bnkr[3]->Write(0, "bunker4.png", true);
			
		}
		const int HEIGHT = 32;
		const int WIDTH = 48;
		
		namespace one
		{
			const int minX = 16;
			const int maxX = 16+(16*2)-1;
		}
		namespace two
		{
			const int minX = 79;
			const int maxX = 79+(16*2)-1;
		}
		namespace three
		{
			const int minX = 143;
			const int maxX = 143+(16*2)-1;
		}
		namespace four
		{
			const int minX = 205;
			const int maxX = 205+(16*2)-1;
		}
		
		int getpositionX(int id)
		{
			return loc[id]->X;
		}
		int getpositionY(int id)
		{
			return loc[id]->Y;
		}
		
		void draw(ffc f, int spin)
		{
			//printf("bnkr[f->InitD[0]] is: %d\n", <int>bnkr[f->InitD[0]]);
			//bnkr[f->InitD[0]]->Blit(0, RT_SCREEN, 0, 0, 3*16, 2*16, f->X, f->Y, 3*16, 2*16, 0, 0, 0, 0, 0, true);
			//!Revert to this to stop the spin. 
			//bnkr[f->InitD[0]]->Blit(0, <bitmap>(-2), 0, 0, 3*16, 2*16, f->X, f->Y, 3*16, 2*16, 0-(ofs/30), 0, 0, 0, 0, true);
			bnkr[f->InitD[0]]->Blit(2, <bitmap>(-2), 0, 0, 3*16, 2*16, f->X, f->Y, 3*16, 2*16, 0-(ofs/30), 0, 0, 0, 0, true);
			if ( spin ) --ofs;
		}
		ffc script bunker
		{
			void run(int id)
			{
				// Probably doesn't need a script. Changers would work.
				// Oh, but we need to draw it from a bitmap. Flidd. 
				loc[id] = this;
				while(1)
				{
					draw(this, (this->InitD[1]));
					Waitframe();
				}
			}
		}
		
	}
	
	void runclock()
	{
		++alienclk;
		if ( alienclk > 59 ) alienclk = 0;
	}
	void nextstage()
	{
		Audio->PlaySound(4);
		++Game->Counter[CR_KEYS];
		aliens::theinvaders.spawn(aliens::theinvaders.swarm);
	}
	global script inv
	{
		void run()
		{
			playr::init();
			shields::init(); //Set up bunker bitmaps.
			aliens::init(); //Set up temp bitmap for shield collisions and UFO clock. 
			//aliens::spawn();
			
			
			/*for ( int q = 0; q < 32; ++q )
			{
				for ( int w = 0; w < 48; ++w )
				{
					int col = Graphics->GetPixel(invaders::shields::bnkr[0], w, q); 
					printf("Bunker[0] colour at x[%d], y[%d] is: %d\n", w, q, col);
				}
			}*/
			Waitframes(100);
			int c1 = Graphics->GetPixel(RT_SCREEN, 78,118)*10000;
				printf("c1: %d\n", c1);
			
			while(1)
			{
				if ( gameover ) 
				{
					GameOver();
				}
				//runclock();
				//aliens::animate();
				playr::animate();
				playr::clamp();
				playr::attack();
				
				/*if ( aliens::hitedge )
				{
					printf("hit screen edge\n");
					for ( int qe = Screen->NumNPCs(); qe > 0; --qe )
					{
						npc nn = Screen->LoadNPC(qe);
						
						switch(nn->Dir)
						{
							case DIR_LEFT:
							{
								//++nn->X;
								nn->Dir = DIR_RIGHT;
								aliens::descend(nn);
								break;
							}
							case DIR_RIGHT:
							{
								//--nn->X;
								nn->Dir = DIR_LEFT;
								aliens::descend(nn);
								break;
							}
						}
					}
					aliens::hitedge = 0;
				}
				*/
				
				Waitdraw();
				playr::clamp();
				Waitframe();
			}
		}
	}
	
	global script newgame
	{
		void run()
		{
			playr::init();
			shields::init(); //Set up bunker bitmaps.
			aliens::init(); //Set up temp bitmap for shield collisions. 
			//aliens::animate();
			//aliens::spawn();
		}
	}
	
	void GameOver()
	{
		Game->Suspend[susptGUYS] = true;
		Game->Suspend[susptLWEAPONS] = true;
		Game->Suspend[susptEWEAPONS] = true;
		Game->Suspend[susptLINK] = true;
		Game->Suspend[susptLWEAPONSCRIPTS] = true;
		Game->Suspend[susptEWEAPONSCRIPTS] = true;
		Game->Suspend[susptNPCSCRIPTS] = true;
		while(1)
		{
			Screen->DrawString(7, 100, 100, 1, 0x92, 0x0F, 0, "    GAME OVER    ", 128);
			Waitframe();
		}
		
	}
		
	namespace aliens
	{
		npc grid[theinvaders.NUMINVADERS]; 
		int turn_cooldown = 0; 
		int hitedge = 0;
		const int COOLDOWN_TIME = 15;
		enum adir { dLeft, dRight, dLast };
		const int DESCEND_Y_PIXELS = 4;
		const int FIRECLK = 1;
		const int FIRECLK_MIN = 100;
		const int FIRECLK_MAX = 400;
		const int FIRST = 180;
		
		const int UFO = 39;
		int ufoclk = 0;
		
		
		bitmap tmpbmp;
		void init()
		{
			tmpbmp = Game->CreateBitmap(16,16);
			ufoclk = Rand((60), (4*60));
		}
		
		const int STARTX = 32;
		const int STARTY = 16;
		
		enum starttile { stA = 78000, stB = 78020, stC = 78040, stD = 78000 }; //unintentional Pun. 
		
		const int INITIALSTEP = 1; //pixels per second!, not frame
		int step = INITIALSTEP; //This increases as enemies die.
		
		void wipegrid()
		{
			for ( int q = 0; q < theinvaders.NUMINVADERS; ++q ) 
			{
				grid[q] = NULL;
				theinvaders.swarm[q] = NULL;
			}
			theinvaders.lowest = NULL;
			theinvaders.leftmost = NULL;
			theinvaders.rightmost = NULL;
			theinvaders.curstep = INITIALSTEP;
			
		}
		
		//Misc[]
		const int aclk = 2; 
		const int curtile = 3;
		
		const int MAXEW = 6;
		const int ATKSFX = 1;
		
		
		const int MISSILESPR = 10;
		const int STEP = 2;
		const int STEPSFX = 3;
		
		int maxstep;
		
		const int SPLATTED = 6;
		int AttClk_Min = 400; //not const
		int AttClk_Max = 1000; //not const
		
		npc script ufo
		{
			void run()
			{
				int clk;
				this->DrawYOffset = -16;
				this->HitYOffset = 8;
				this->Y += 8;
				this->ScriptTile = this->OriginalTile;
				while(1)
				{
					++clk;
					unless((clk%2))
					{
						this->X-=3; //Move left.
					}
					if ( this->HP < 1 && this->X > -16 )
					{
						unless ( this->Misc[SPLATTED] )
						{
							printf("Splatted UFO\n");
							if (DEBUG) printf("Creating splat 2.\n");
							
							for ( int q = 0; q < 4; ++q )
							{
								lweapon splat = Screen->CreateLWeapon(LW_SPARKLE);
								splat->HitYOffset = -32768; 
	
								splat->UseSprite(SPLATSPRITE);
								splat->X = this->X+this->DrawXOffset + Rand(-2,2);
								splat->Y = this->Y+this->DrawYOffset + Rand(-2,2);
								//theinvaders.stepclk += 0.5;
							}
							this->DrawYOffset = -32768;
							Game->Counter[CR_RUPEES] += this->InitD[Rand(4)];
							this->Misc[SPLATTED] = 1;
						}
					}
					++ufoclk; //Don't let it fall below 0 so that more than one canna spawn.
					if ( this->X < -20 )
					{
						//printf("UFO has left the building.\n");
						this->HP = HP_SILENT;
						ufoclk = Rand((60), (4*60));
					}
					++this->Misc[aclk]; 
					unless (( this->Misc[aclk]%16 ))
					{
						if ( this->Misc[curtile] < 7 )
						{
							++this->ScriptTile;
							++this->Misc[curtile];
						}
						else
						{
							this->ScriptTile = this->OriginalTile;
							this->Misc[curtile] = 0;
						}
					}
					Waitframe();
				}
			}
		}
		
		eweapon script enemy_missile
		{
			void run()
			{
				this->Dir = DIR_DOWN;
				int type2 = Rand(1);
				this->UseSprite(MISSILESPR + (type2));
				
				this->Damage = 2;
				bitmap playfield;
				unless(SKIPBUNKERS)
				{
					playfield = Game->LoadBitmapID(RT_SCREEN);
				}
				int step = STEP + type2;
				//invaders::shields::bnkr[0]->Write(0, "bunker_w1.png", true);
				//invaders::shields::bnkr[1]->Write(0, "bunker_w2.png", true);
				//invaders::shields::bnkr[2]->Write(0, "bunker_w3.png", true);
				//invaders::shields::bnkr[3]->Write(0, "bunker_w4.png", true);
				Waitdraw();
				int c1 = Graphics->GetPixel(RT_SCREEN, 78,118)*10000;
				printf("c1: %d\n", c1);
				
				while(1)
				{
					//for every pixel of movement, check collisions.
					for ( int q = 0; q < STEP; ++q )
					{
						++this->Y;
						
						//if there is a collision, move until reaching that Y pos, then kill the missile.
						/*if ( this->Y > 110 )*/
						unless(SKIPBUNKERS)
						{
							int col = Graphics->GetPixel(RT_SCREEN, this->X+4, this->Y+16+2) * 10000;
							//printf("ew col is: %d\n", col);
							bitmap scrn = Game->LoadBitmapID(RT_SCREEN);
							//printf("scrn pointer is: %f\n", <int>scrn);
							int col2 = scrn->GetPixel(this->X+4, this->Y+16+2) * 10000;
							//printf("scrn col2 is: %f\n", col2);
							//printf("pixel colour: %f\n", col);
							if ( col2 >= (177) && col2 < (192) ) //cset 11
							{
								bool skip;
								printf("Bunker collision on colour: %d\n", col);
								if ( this->X+4 < shields::four::minX )
								{
									//must be shield 1, 2, or 3
									if ( this->X+4 < shields::three::minX )
									{
										//must be shield 1, 2
										if ( this->X+4 < shields::two::minX )
										{
											//must be shield 1
											int xpos = this->X+4;
											//we are inside the ffc by this much
											int edge = Abs(xpos-shields::one::maxX);
											printf("SHIELD 1: edge is: %d\n", edge);
											int impact = Abs(118-(this->Y)); //the depth of the impact
											printf("SHIELD 1: impact at y: %d\n", impact);
											//edge is the left edge of the bitmap for ffc[1]
											
											invaders::shields::bnkr[0]->Circle(1, edge+Rand(-3,3), impact+Rand(-3,3), 5+Rand(5), 0, 1, 0,0,0, true, 128);
											this->DeadState = WDS_DEAD;
											Quit();
												
											
											
										}
										else
										{
											//must be shield 2
											int xpos = this->X+4;
											//we are inside the ffc by this much
											int edge = Abs(xpos-shields::two::maxX);
											printf("SHIELD 2: edge is: %d\n", edge);
											int impact = Abs(118-(this->Y)); //the depth of the impact
											printf("SHIELD 2: impact at y: %d\n", impact);
											//edge is the left edge of the bitmap for ffc[2]
											
											invaders::shields::bnkr[1]->Circle(1, edge+Rand(-3,3), impact+Rand(-3,3), 5+Rand(5), 0, 1, 0,0,0, true, 128);
											this->DeadState = WDS_DEAD;
											Quit();
												
											
										}
										
									}
									else
									{
										//must be shield 3
										int xpos = this->X+4;
										//we are inside the ffc by this much
										int edge = Abs(xpos-shields::three::maxX);
										printf("SHIELD 3: edge is: %d\n", edge);
										int impact = Abs(118-(this->Y)); //the depth of the impact
										printf("SHIELD 3: impact at y: %d\n", impact);
										//edge is the left edge of the bitmap for ffc[1]
										
										invaders::shields::bnkr[2]->Circle(1, edge+Rand(-3,3), impact+Rand(-3,3), 5+Rand(5), 0, 1, 0,0,0, true, 128);
										this->DeadState = WDS_DEAD;
										Quit();
											
										
									}
									
								}
								else
								{
									//must be shield 4
									int xpos = this->X+4;
									//we are inside the ffc by this much
									int edge = Abs(xpos-shields::four::maxX);
									int impact = Abs(118-(this->Y)); //the depth of the impact
									printf("SHIELD 4: edge is: %d\n", edge);
									printf("SHIELD 4: impact at y: %d\n", impact);
									//edge is the left edge of the bitmap for ffc[1]
									
									invaders::shields::bnkr[3]->Circle(1, edge+Rand(-3,3), impact+Rand(-3,3), 5+Rand(5), 0, 1, 0,0,0, true, 128);
									this->DeadState = WDS_DEAD;
									Quit();
										
									
								}
							}
						}
						//otherwise complete full move. 
					}
					
					Waitdraw();
					Waitframe();
				}
			}
		}
		
		
		
		
		npc script splatted
		{
			const int SCORE = 0;
			void run()
			{
				int attackclk = Rand(AttClk_Min,AttClk_Max);
				while(1)
				{
					if ( this->isValid() )
					{
						if ( this->HP < 1 )
						{
							unless ( this->Misc[SPLATTED] )
							{
								if (DEBUG) printf("Creating splat 2.\n");
								
								for ( int q = 0; q < 4; ++q )
								{
									lweapon splat = Screen->CreateLWeapon(LW_SPARKLE);
									splat->HitYOffset = -32768; 
									splat->HitYOffset = -37768;
									splat->UseSprite(SPLATSPRITE);
									
									splat->X = this->X+this->DrawXOffset + Rand(-2,2);
									splat->Y = this->Y+this->DrawYOffset + Rand(-2,2);
									theinvaders.stepclk -= 0.25;
								}
								
								Game->Counter[CR_RUPEES] += this->InitD[SCORE];
								this->Misc[SPLATTED] = 1;
							}
							
						}
						else
						{
							unless(attackclk)
							{
								//if ( Screen->NumEWeapons() < 3 ) 
								{
									this->Attack();
									attackclk = Rand(AttClk_Min,AttClk_Max);
									if (DEBUG) printf("attackclk is: %d\n", attackclk);
								}
								//else --attackclk;
							}
							else --attackclk;
						}
					}
					Waitdraw();
					Waitframe();
				}
			}
		}
		
		npc script theinvaders
		{
			const int NUMINVADERS = 48;
			npc lowest = NULL;
			npc leftmost = NULL;
			npc rightmost = NULL;
			npc swarm[NUMINVADERS];
			int curstep = INITIALSTEP;
			void run()
			{
				
				npc leader = this; 
				this->Dir = DIR_RIGHT;
				this->HitYOffset = -32678; //Can't be hit
				this->DrawYOffset = -32678; //Can't be seen
				
				int lx, ly;
				int invclk = 0;
				
				spawn(swarm);
				
				Waitframes(6);
				
				//Find the edges
				for ( int a = 0; a < 48; ++a )
				{
					unless ( rightmost->isValid() ) 
					{
						rightmost = swarm[a];
						break;
					}
				}
				for ( int b = 0; b < 48; ++b )
				{
					unless ( leftmost->isValid() ) 
					{
						leftmost = swarm[b];
						break;
					}
				}
				for ( int c = 0; c < 48; ++c )
				{
					unless ( lowest->isValid() ) 
					{
						lowest = swarm[c];
						break;
					}
				}
				//printf("leftmost[q]->X is: %d\n", leftmost->X);
				//printf("rightmost[q]->X is: %d\n", rightmost->X);
				//printf("lowest[q]->Y is: %d\n", lowest->Y);
				for ( int d = 0; d < 48; ++d )
				{
					if(swarm[d]->isValid())
					{
						//printf("swarm[%d]->X is: %d\n", d, swarm[d]->X);
						//printf("swarm[%d]->Y is: %d\n", d, swarm[d]->Y);
					}
					if ( swarm[d]->isValid() && swarm[d]->X > rightmost->X ) 
					{
						rightmost = swarm[d];
					}
					if ( swarm[d]->isValid() && swarm[d]->X < leftmost->X )
					{
						leftmost = swarm[d];
					}
					if ( swarm[d]->isValid() && swarm[d]->Y > lowest->Y )
					{
						lowest = swarm[d];
					}
				}
					//printf("rightmost UID: %d\n", rightmost->UID);
					//printf("leftmost UID: %d\n", leftmost->UID);
					//printf("lowest UID: %d\n", lowest->UID);
				while(1)
				{
					//printf("ufoclk is: %d\n", ufoclk);
					if(--ufoclk <= 0)
					{
						npc u = Screen->CreateNPC(UFO);
						u->X = 256; u->Y = 0;
					}
					
					
					unless(numInvaders())
					{
						while(Screen->NumNPCs() > 1 ) Waitframe(); //1 is always present
						nextstage();
						continue;
					}
					//splat(swarm);
					findedges(swarm);
					move(leader, swarm, invclk);
					animate(swarm);
					//attack(swarm);
					//cleanup(swarm);
					
					//Check for Landing
					if ( lowest->isValid() && lowest->Y >= 152 )
					{
						gameover = 1;
					}
					
					++invclk;
					Waitframe();
				}
				
			}
			void findedges(npc swarm)
			{
				//Find the edges
				for ( int q = 0; q < 48; ++q )
				{
					if ( rightmost->isValid() ) break;
					rightmost = swarm[q];
				}
				for ( int q = 0; q < 48; ++q )
				{
					if ( leftmost->isValid() ) break;
					leftmost = swarm[q];
				}
				for ( int q = 0; q < 48; ++q )
				{
					if ( lowest->isValid() ) break;
					lowest = swarm[q];
				}
				for ( int q = 0; q < 48; ++q )
				{
					unless ( swarm[q]->isValid() ) continue;
					if ( swarm[q]->X > rightmost->X ) 
					{
						rightmost = swarm[q];
					}
					if ( swarm[q]->X < leftmost->X )
					{
						leftmost = swarm[q];
					}
					if ( swarm[q]->Y > lowest->X )
					{
						lowest = swarm[q];
					}
				}
			}
			void spawn(npc swarm)
			{
				wipegrid(); //Clear old pointers. 
				int id = FIRST; int x = STARTX, y = STARTY;
				starttile tiles[4] = { stA, stB, stC, stD };
				for ( int q = 0; q < NUMINVADERS; ++q )
				{
					//printf("spawning invader nuber: %d\n", q);
					if ( (q) && (!(q%12)) ) //start of a row
					{
						++id;
						y += 16;
						x = STARTX;
					}
					
					swarm[q] = Screen->CreateNPC(id);
					swarm[q]->ScriptTile = swarm[q]->OriginalTile;
					swarm[q]->X = x; swarm[q]->Y = y; //Position on the grid.
					swarm[q]->DrawYOffset = -8;
					swarm[q]->HitYOffset = -8; //So that they 'land' at the visible 8th pixel.
					x += 16; //Increment column.
					grid[q] = swarm[q]; //Store its pointer into the grid. 
					//if (DEBUG) printf("swarm[%d] x: %d\n", q, swarm[q]->X);
					//if (DEBUG) printf("swarm[%d] y: %d\n", q, swarm[q]->Y);
				}
				for ( int q = 0; q < 48; ++q )
				{
					//if (DEBUG) printf("swarm[%d] x: %d\n", q, swarm[q]->X);
					//if (DEBUG) printf("swarm[%d] y: %d\n", q, swarm[q]->Y);
				}
				
			}
			
			void animate(npc swarm)
			{
				for ( int q = 0; q < NUMINVADERS; ++q )
				{
					if ( swarm[q]->isValid() )
					{
						++swarm[q]->Misc[aclk]; 
						unless (( swarm[q]->Misc[aclk]%16 ))
						{
							if ( swarm[q]->Misc[curtile] < 7 )
							{
								++swarm[q]->ScriptTile;
								++swarm[q]->Misc[curtile];
							}
							else
							{
								swarm[q]->ScriptTile = swarm[q]->OriginalTile;
								swarm[q]->Misc[curtile] = 0;
							}
						}
					}
					
				}
				
			}
			
			int numInvaders()
			{
				int ret;
				for ( int q = Screen->NumNPCs(); q > 0; --q )
				{
					npc n = Screen->LoadNPC(q);
					if ( n->ID >= FIRST && n->ID <= FIRST+3 ) ++ret;
				}
				return ret;
			}
			
			
			void splat(npc swarm)
			{
				
				for ( int q = 0; q < NUMINVADERS; ++q )
				{
					if ( swarm[q]->isValid() )
					{
						if ( swarm[q]->HP < 1 )
						{
							//printf("Creating splat 1.\n");
							unless(swarm[q]->Misc[SPLATTED])
							{
								//printf("Creating splat 2.\n");
								lweapon splat = Screen->CreateLWeapon(LW_SPARKLE);
								splat->HitYOffset = -32768; 
								splat->HitYOffset = -37768;
								splat->UseSprite(SPLATSPRITE);
								
								splat->X = swarm[q]->X;
								splat->Y = swarm[q]->Y;
								Game->Counter[CR_RUPEES] += swarm[q]->Y;
								swarm[q]->Misc[SPLATTED] = 1;
							}
						}
					}
				}
			}
			
			int stepclk = 20;
			
			void move(npc leader, npc swarm, int clk)
			{
				unless ( clk%60 )
				{
					Audio->PlaySound(STEPSFX);
					//printf("leftmost is: %d\n", <int>leftmost);
					//printf("leftmost->X is: %d\n", leftmost->X);
					
					//printf("rightmost is: %d\n", <int>rightmost);
					//printf("rightmost->X is: %d\n", rightmost->X);
					
					if (DEBUG) printf("curstep is: %d\n", curstep);
				}
				
				unless ( clk%(Max(stepclk<<0,1)) )
				{
					switch(leader->Dir)
					{
						case DIR_LEFT:
						{
							//printf("Move left\n");
							//if on a screen edge
							if ( leftmost->X <= 1 ) 
							{
								//printf("descending\n");
								descend(swarm);
								leader->Dir = DIR_RIGHT;
							}
							else
							{
								//printf("moving\n");
								//Find the maximum step
								int maxstep = ( (leftmost->X - curstep) > -1 ) ? curstep : leftmost->X;
								//printf("maxstep is: %d\n", maxstep);
								//Move the full step up to the edge of the screen, but not beyond
								for ( int q = 0; q < NUMINVADERS; ++q )
								{
									unless(swarm[q]->isValid()) { continue; }
									swarm[q]->X -= maxstep;
								}
							}
							break;
						}
						case DIR_RIGHT:
						{
							//printf("Move right\n");
							//if on a screen edge
							if ( rightmost->X >= 239 ) 
							{
								//printf("descending\n");
								descend(swarm);
								leader->Dir = DIR_LEFT;
							}
							else
							{
								//printf("moving\n");
								//Find the maximum step
								int maxstep = ( (rightmost->X + curstep) < 241 ) ? curstep : (240-rightmost->X);
								//printf("maxstep is: %d\n", maxstep);
								//Move the full step up to the edge of the screen, but not beyond
								for ( int q = 0; q < NUMINVADERS; ++q )
								{
									unless(swarm[q]->isValid()) { continue; }
									swarm[q]->X += maxstep;
								}
							}
							break;
						}
						
					}
					
				}
			}
			
			void descend(npc swarm)
			{
				for ( int q = 0; q < NUMINVADERS; ++q )
				{
					if ( swarm[q]->isValid() )
					{
						swarm[q]->Y += DESCEND_Y_PIXELS;
					}
				}
				Waitframes(20); //grace
			}
			const int FIRING = 7; //Misc index to mark that an npc is firing. 
			void attack(npc swarm)
			{
				//count remaining aliens
				
				int count = 0; int truecount = 0;
				npc canfire[NUMINVADERS]; int cf_ix = 0;
				for ( int q = 0; q < NUMINVADERS; ++q )
				{
					if ( swarm[q]->isValid() )
					{
						++count;
						//++truecount;
						canfire[cf_ix] = swarm[q];
						++cf_ix; //Put all aliens that can fire into a sequential list.
					}
				}
				//for ( int q = 0; q < 48; ++q )
				//{
				//	printf("canfire[q] pointer: %d\n", <int>canfire[q]);
				//}
				unless(count) { return; } //no aliens left
				//choose up to six aliens to fire shots
				count = Clamp(count, 1, 6); //vound the max shots
				count = Rand(count)+1; //choose a random number of shots, min 1
				
				//Get length of truecount array
				for ( truecount = 0; canfire[truecount]->isValid(); ++truecount );
				//if (DEBUG) printf("count is: %d\n", count);
				//if (DEBUG) printf("truecount is: %d\n", truecount);
				//Select 'count' random invaders to fire.
				int firelist[48];
				memset(firelist, -1, 48);
				
				if (DEBUG) 
				{
					for ( int f = 0; canfire[f]->isValid(); ++f )
					{
						printf("canfire[f] UID is: %d\n", canfire[f]->UID);
					}
				}
				
				/* would be nice if we allowed variable arrays locally
				npc positions[truecount];
				if ( swarm[q] ->isValid() && swarm[q]->HP > 0 )
				{
					++count;
					++truecount;
				}
				*/
			}
			void cleanup(npc swarm)
			{
				//cleanup of status values
				for ( int q = 0; q < NUMINVADERS; ++q )
				{
					if ( swarm[q]->isValid() )
					{
						//clear attacking status
						swarm[q]->Misc[FIRING] = 0;
					}
				}
			}
		} // end script 
	} // end namespace
	
	

	namespace playr
	{
		//int cooldown = 0;
		// Player movement and firing.
		namespace missile
		{
			int clk, step, cool, x, y;
			const int SPRITE = 63;
			const int STEP = 3; //pixels per frame
			const int TYPE = LW_SCRIPT1;
			const int XOFS = 0; 
			const int YOFS = -16;
			//missile bounding box. 
			const int HEIGHT = 12;
			const int WIDTH = 4;
			const int HITXOFS = 6;
			const int HITYOFS = 2;
			
			lweapon script player_missile
			{
				void run()
				{
					while(1)
					{
						//for every pixel of movement, check collisions.
						for ( int q = 0; q < STEP; ++q )
						{
							--this->Y;
							//if there is a collision, move until reaching that Y pos, then kill the missile.
							for ( int q = Screen->NumNPCs(); q < 0; --q )
							{
								npc n = Screen->LoadNPC(q);
								if ( Collision(this,n) ) break;
							}
							//otherwise complete full move. 
						}
						
						Waitdraw();
						Waitframe();
					}
				}
			}
			
		}
		void clamp()
		{
			//enum bounds { UPPER, LOWER, LEFT, RIGHT, LAST };
			Player->X = Clamp(Player->X, 0, 238);
			Player->Y = 152;
			Player->Dir = DIR_UP;
		}
		const int MISSILESPR = 11;
		const int ATKSFX = 2;
		void attack()
		{
			if ( Link->PressA ) 
			{
				if ( Screen->NumLWeapons() ) 
				{
					return;
				}
				lweapon m = Screen->CreateLWeapon(missile::TYPE);
				m->Dir = DIR_UP;
				m->X = Player->X + missile::XOFS;
				m->Y = Player->Y + missile::YOFS;
				m->Step = 0; //Moves by weapon script. 
				m->Script = Game->GetLWeaponScript("player_missile");
				m->UseSprite(MISSILESPR);
				m->Power = 1;
				Audio->PlaySound(ATKSFX);
			}
		}
		const int FIRST = 78060;
		const int aclk = 2;
		const int curtile = 3;

		void init()
		{
			Game->Counter[CR_KEYS] = 1;
			Game->DisableActiveSubscreen = true;
			Player->ScriptTile = 78060;
		}
		
		player script initial
		{
			void run()
			{
				init();
			}
		}
		
		void animate()
		{
			++Player->Misc[aclk]; 
				unless (( Player->Misc[aclk]%16 ))
				{
					if ( Player->Misc[curtile] < 7 )
					{
						++Player->ScriptTile;
						++Player->Misc[curtile];
					}
					else
					{
						Player->ScriptTile = FIRST;
						Player->Misc[curtile] = 0;
					}
				}
				
		}
					
		
		
	}
	
}