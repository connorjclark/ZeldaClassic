// ghost.zh
// Version 3.0.0 - Alpha 9

namespace ghost3
{
	const int DIAGONAL_MODIFIER = 0.7071;
	void MoveXY(npc ghost, float xStep, float yStep, int imprecision)
	{
		// If this is sideview, most enemies can't move upward
		if(yStep<0 && IsSideview() && !FlagIsSet(ghost, GHF_NO_FALL))
			yStep=0;

		// If moving more than 8 pixels along either axis, go 8 at a time
		
		while(Abs(xStep)>8 || Abs(yStep)>8)
		{
			if(Abs(xStep)>=Abs(yStep))
			{
				if(xStep>0)
				{
					MoveXY(ghost, 8, 0, imprecision);
					xStep-=8;
				}
				else
				{
					MoveXY(ghost, -8, 0, imprecision);
					xStep+=8;
				}
			}
			else // yStep>=xStep
			{
				if(yStep>0)
				{
					MoveXY(ghost, 0, 8, imprecision);
					yStep-=8;
				}
				else
				{
					MoveXY(ghost, 0, -8, imprecision);
					yStep+=8;
				}
			}
		}
		
		int edge; // Position of leading edge
		int edgeDiff; // Difference between Ghost_X/Ghost_Y and edge
		int startHT; // The half-tile position where the edge starts
		int endHT; // And where it ends up
		
		if(xStep<0) // Left
		{
			edgeDiff=ghost->HitXOffset;
			edge=ghost->X+edgeDiff;
			
			startHT=Round(edge/8);
			endHT=Round((edge+xStep)/8);
			
			// If the edge ends up on the same half-tile line it's already on,
			// there's no need to check walkability
			if(ghost3::CanMove(ghost, DIR_LEFT, -xStep, imprecision))
				edge+=xStep;
			else // Can't move all the way; snap to the grid
				edge=(edge>>3)<<3;
			
			ghost->X=edge-edgeDiff;
		}
		else if(xStep>0) // Right
		{
			edgeDiff=ghost->HitXOffset+ghost->HitWidth-1;
			edge=ghost->X+edgeDiff;
			
			startHT=Round(edge/8);
			endHT=Round((edge+xStep)/8);
			
			if(ghost3::CanMove(ghost, DIR_RIGHT, xStep, imprecision))
				edge+=xStep;
			else
				edge=((edge+7)>>3)<<3;
			
			ghost->X=edge-edgeDiff;
		}
		
		if(yStep<0) // Up
		{
			edgeDiff=ghost->HitYOffset;
			edge=ghost->Y+edgeDiff;
			
			startHT=Round(edge/8);
			endHT=Round((edge+yStep)/8);
			
			// If the edge ends up on the same half-tile line it's already on,
			// there's no need to check walkability
			if(ghost3::CanMove(ghost, DIR_UP, -yStep, imprecision))
				edge+=yStep;
			else // Can't move all the way; snap to the grid
				edge=(edge>>3)<<3;
			
			ghost->Y=edge-edgeDiff;
		}
		else if(yStep>0) // Down
		{
			edgeDiff=ghost->HitHeight+ghost->HitYOffset-1;
			edge=ghost->Y+edgeDiff;
			
			startHT=Round(edge/8);
			endHT=Round((edge+yStep)/8);
			
			if(ghost3::CanMove(ghost, DIR_DOWN, yStep, imprecision))
				edge+=yStep;
			else
				edge=((edge+7)>>3)<<3;
			
			ghost->Y=edge-edgeDiff;
		}
	}

	void Move(npc ghost, int dir, float step, int imprecision)
	{
		float xStep=0;
		float yStep=0;

		switch(dir)
		{
			case DIR_UP:
				yStep=-step;
				break;
			case DIR_DOWN:
				yStep=step;
				break;
			case DIR_LEFT:
				xStep=-step;
				break;
			case DIR_RIGHT:
				xStep=step;
				break;
			case DIR_LEFTUP:
				xStep=-step*DIAGONAL_MODIFIER;
				yStep=-step*DIAGONAL_MODIFIER;
				break;
			case DIR_RIGHTUP:
				xStep=step*DIAGONAL_MODIFIER;
				yStep=-step*DIAGONAL_MODIFIER;
				break;
			case DIR_LEFTDOWN:
				xStep=-step*DIAGONAL_MODIFIER;
				yStep=step*DIAGONAL_MODIFIER;
				break;
			case DIR_RIGHTDOWN:
				xStep=step*DIAGONAL_MODIFIER;
				yStep=step*DIAGONAL_MODIFIER;
				break;
			default:
				printf("Invalid dir (%d) passed to ghost3::Move()\n", dir);
				return;
		}

		MoveXY(ghost, xStep, yStep, imprecision);
	}

	void MoveAtAngle(npc ghost, float angle, float step, int imprecision)
	{
		MoveXY(ghost, VectorX(step, angle), VectorY(step, angle), imprecision);
	}

	void MoveTowardLink(npc ghost, float step, int imprecision)
	{
		float angle=Angle(ghost->X+ghost->TileWidth*8, ghost->Y+ghost->TileHeight*8, Link->X+8, Link->Y+8);
		MoveXY(ghost, VectorX(step, angle), VectorY(step, angle), imprecision);
	}

	bool CanMove(npc ghost, int dir, float step, int imprecision, bool inAir)
	{
		if(step==0)
			return true;
		
		if(dir>=4) // Diagonal
			step*=DIAGONAL_MODIFIER;
		
		dir=NormalizeDir(dir);
		
		// More than 8 pixels? Step 8 at a time
		while(step>8)
		{
			unless(CanMoveSingle(ghost, dir, step-8, imprecision, inAir))
				return false;
			step-=8;
		}
		
		return CanMoveSingle(ghost, dir, step, imprecision, inAir);
	}


	// Check a single line for movability; needed when checking CanMove
	// over more than 8 pixels
	bool CanMoveSingle(npc ghost, int dir, float step, int imprecision, bool inAir)
	{
		int i;
		float leadingEdge; // X or Y position of the leading edge
		int edgeSize; // Length of that edge (ignoring imprecision)
		float edgeStart; // X or Y at the top or left end of the leading edge
		int numCheckPoints; // Number of points to check, excluding endpoints
		switch(dir)
		{
			case DIR_LEFT:
			{
				// The edge size is hitheight, because what the fuck saffith
			// That was not okay. My eyes hurt now.
				edgeSize=ghost->HitHeight;
				
				// The leading edge is the left edge of the hitbox
				leadingEdge=ghost->X+ghost->HitXOffset-step;
				
				// The edge starts at the top of the hitbox
				edgeStart=ghost->Y+ghost->HitYOffset;
				
				// Check every eight pixels; -1 cuts off the last point
				numCheckPoints=edgeSize/8-1;
				
				// Check the non-end points
				for(i=1; i<=numCheckPoints; ++i)
				{
					if(!CanMovePixel(ghost, leadingEdge, edgeStart+i*8, inAir))
						return false;
				}
				
				// Then the endpoints
				if(!CanMovePixel(ghost, leadingEdge, edgeStart+imprecision, inAir))
					return false;
				if(!CanMovePixel(ghost, leadingEdge, edgeStart+edgeSize-imprecision-1, inAir))
					return false;
				
				return true;
			}
			case DIR_RIGHT:
			{
				edgeSize=ghost->HitHeight;
				leadingEdge=ghost->X+ghost->HitWidth+ghost->HitXOffset-1+step;
				edgeStart=ghost->Y+ghost->HitYOffset;
				numCheckPoints=edgeSize/8-1;
				
				for(i=1; i<=numCheckPoints; ++i)
				{
					if(!CanMovePixel(ghost, leadingEdge, edgeStart+i*8, inAir))
						return false;
				}
				if(!CanMovePixel(ghost, leadingEdge, edgeStart+imprecision, inAir))
					return false;
				if(!CanMovePixel(ghost, leadingEdge, edgeStart+edgeSize-imprecision-1, inAir))
					return false;
				
				return true;
			}
			case DIR_UP:
			{
				// Most enemies can't move upward on sideview screens
				if(IsSideview())
				{
					unless (FlagIsSet(ghost, GHF_NO_FALL))
					{
						return false;
					}
				}
				
				edgeSize=ghost->HitWidth;
				leadingEdge=ghost->Y+ghost->HitYOffset-step;
				edgeStart=ghost->X+ghost->HitXOffset;
				numCheckPoints=edgeSize/8-1;
				
				for(i=1; i<=numCheckPoints; ++i)
				{
					if(!CanMovePixel(ghost, edgeStart+i*8, leadingEdge, inAir))
						return false;
				}
				
				if(!CanMovePixel(ghost, edgeStart+imprecision, leadingEdge, inAir))
					return false;
				if(!CanMovePixel(ghost, edgeStart+edgeSize-imprecision-1, leadingEdge, inAir))
					return false;
				
				return true;
			}
			case DIR_DOWN:
			{
				edgeSize=ghost->HitWidth;
				leadingEdge=ghost->Y+ghost->HitHeight+ghost->HitYOffset-1+step;
				edgeStart=ghost->X+ghost->HitXOffset;
				numCheckPoints=edgeSize/8-1;
				
				for(i=1; i<=numCheckPoints; ++i)
				{
					if(!CanMovePixel(ghost, edgeStart+i*8, leadingEdge, inAir))
						return false;
				}
				
				if(!CanMovePixel(ghost, edgeStart+imprecision, leadingEdge, inAir))
					return false;
				if(!CanMovePixel(ghost, edgeStart+edgeSize-imprecision-1, leadingEdge, inAir))
					return false;
				
				return true;
			}
			
			// Diagonal directions - move along one axis and test the other
			case DIR_LEFTUP:
			{
				bool ret;
				
				ghost->X-=step;
				ret=ghost3::CanMove(ghost, DIR_UP, step, imprecision, inAir);
				ghost->X+=step;
				if(!ret)
					return false;
				
				ghost->Y-=step;
				ret=ghost3::CanMove(ghost, DIR_LEFT, step, imprecision, inAir);
				ghost->Y+=step;
				return ret;
			}
			case DIR_RIGHTUP:
			{
				bool ret;
				
				ghost->X+=step;
				ret=ghost3::CanMove(ghost, DIR_UP, step, imprecision, inAir);
				ghost->X-=step;
				if(!ret)
					return false;
				
				ghost->Y-=step;
				ret=ghost3::CanMove(ghost, DIR_RIGHT, step, imprecision, inAir);
				ghost->Y+=step;
				return ret;
			}
			case DIR_LEFTDOWN:
			{
				bool ret;
				
				ghost->X-=step;
				ret=ghost3::CanMove(ghost, DIR_DOWN, step, imprecision, inAir);
				ghost->X+=step;
				if(!ret)
					return false;
				
				ghost->Y+=step;
				ret=ghost3::CanMove(ghost, DIR_LEFT, step, imprecision, inAir);
				ghost->Y-=step;
				return ret;
			}
			case DIR_RIGHTDOWN:
			{
				bool ret;
				
				ghost->X+=step;
				ret=ghost3::CanMove(ghost, DIR_DOWN, step, imprecision, inAir);
				ghost->X-=step;
				if(!ret)
					return false;
				
				ghost->Y+=step;
				ret=ghost3::CanMove(ghost, DIR_RIGHT, step, imprecision, inAir);
				ghost->Y-=step;
				return ret;
			}
			default: // Invalid direction
				return false;
		}
	}

	bool CanMove(npc ghost, int dir, float step, int imprecision)
	{
		return ghost3::CanMove(ghost, dir, step, imprecision, ghost->Z>0);
	}

	bool CanMovePixel(npc ghost, int x, int y, bool inAir)
	{
		if(x<0 || x>255 || y<0 || y>175)
			return FlagIsSet(ghost, GHF_MOVE_OFFSCREEN);
		
		int combo=ComboAt(x, y);
		
		// "No enemy" flags and combos
		if(!FlagIsSet(ghost, GHF_IGNORE_NO_ENEMY))
		{
			if(Screen->ComboT[combo]==CT_NOENEMY)
				return false;
			if(Screen->ComboF[combo]==CF_NOENEMY)
				return false;
			if(Screen->ComboI[combo]==CF_NOENEMY)
				return false;
				
			
			// Flying
			if(FlagIsSet(ghost, GHF_FLYING_ENEMY))
			{
				if(Screen->ComboT[combo]==CT_NOFLYZONE)
					return false;
			}
			// Jumping
			else if(inAir)
			{
				if(Screen->ComboT[combo]==CT_NOJUMPZONE)
					return false;
			}
			// Ground
			else
			{
				if(Screen->ComboT[combo]==CT_NOGROUNDENEMY)
					return false;
				if(Screen->ComboF[combo]==CF_NOGROUNDENEMY)
					return false;
				if(Screen->ComboI[combo]==CF_NOGROUNDENEMY)
					return false;
			}
		}
		// Restricted to water
		if(FlagIsSet(ghost, GHF_DEEP_WATER_ONLY))
			return IsWater(combo);
		if(FlagIsSet(ghost, GHF_WATER_ONLY))
			return IsWater(combo) || Screen->ComboT[combo]==CT_SHALLOWWATER;
		// Water and pit walkability override solidity checking
		if(IsWater(combo))
			return FlagIsSet(ghost, GHF_IGNORE_WATER);
		if(IsPit(combo))
			return FlagIsSet(ghost, GHF_IGNORE_PITS);
		// Ignore solidity: always OK
		if(FlagIsSet(ghost, GHF_IGNORE_SOLIDITY))
			return true;
		
		// Full tile movement: Only if the whole tile is walkable
		else 
		{
			if(FlagIsSet(ghost, GHF_FULL_TILE_MOVEMENT))
				return __FullTileWalkable(x, y, FlagIsSet(ghost, GHF_MOVE_OFFSCREEN));
			
			// All others: Only if the pixel is walkable
			else
			{
				return !Screen->isSolid(x, y);
			}
		}
	}

	bool CanMovePixel(npc ghost, int x, int y)
	{
		return ghost3::CanMovePixel(ghost, x, y, ghost->Z>0);
	}


	// Returns true if the only if the full tile at the given location is walkable
	bool __FullTileWalkable(int x, int y, bool offscreen)
	{
		// Offscreen?
		if(x<0 || y<0 || x>=256 || y>=176)
			return offscreen;
		
		// Get the exact coordinate of the top-left pixel
		x-=x%16;
		y-=y%16;
		
		if(Screen->isSolid(x, y) ||
		   Screen->isSolid(x+8, y) ||
		   Screen->isSolid(x, y+8) ||
		   Screen->isSolid(x+8, y+8))
			return false;
		
		return true;
	}
	
	bool CanPlaceTile(npc ghost, int x, int y, bool inair)
	{
		x-=x%16;
		y-=y%16;
		unless(CanMovePixel(ghost, x, y, inair)&&CanMovePixel(ghost, x+8, y, inair)
		&&CanMovePixel(ghost, x, y+8, inair)&&CanMovePixel(ghost, x+8, y+8, inair)) 
			return false;
		
		return true;
	}

	//this assumes that a step of 2.5 pixels per frame is 2.5, not 250
	bool CanMoveAtAngle(npc ghost, float angle, float step, int imprecision)
	{
		for ( int q = Max((step), 1); q > 0; --q )
		{
			if(ghost3::CanMovePixel(ghost, VectorX(q, angle), VectorY(q, angle), ghost->Z>0))
			{
				return true;
			}
		}
		return false;
	}

	bool CanMoveAtAngle(npc ghost, float angle, float step)
	{
		for ( int q = Max((step), 1); q > 0; --q )
		{
			if(!CanMovePixel(ghost, VectorX(q, angle), VectorY(q, angle), ghost->Z>0))
			{
				return true;
			}
		}
		return false;
	}
	
	int AngleDir4(int x1, int y1, int x2, int y2) //Overload to do the Angle function
	{
		return ::AngleDir4(Angle(x1, y1, x2, y2));
	}
	
	int AngleDir8(int x1, int y1, int x2, int y2) //Overload to do the Angle function
	{
		return ::AngleDir8(Angle(x1, y1, x2, y2));
	}
	
	void WizzrobeMove(npc this, int walkstep, int phasestep, int walkhoming, int phasehoming, int walkrate, int phaserate, int haltrate)
	{	
		int data = this->Misc[GH_INTERNAL];
		int arr[3];
		arr[0] = this->Dir;
		arr[1] = 1;
		arr[2] = SPW_DOOR;
		if(data[CLK0]<=0 || ((data[CLK0]&31)==0 && !this->CanMove(arr) && !data[D0]))
		{
			FixCoords(this, false);
			switch(data[D0])
			{
				case 1:											   //walking
					if(__FullTileWalkable(this->X, this->Y, false))
						data[D0]=0;
					else
					{
						data[CLK0]=16;
						arr[0] = this->Dir;
						arr[1] = 1;
						arr[2] = SPW_WIZZROBE;
						if(!this->CanMove(arr))
						{
							WizzrobeNewDir(this, phasehoming, phaserate);
						}
					}
					
					break;
					
				case 2:											   //phasing
				{
					int jx=this->X;
					int jy=this->Y;
					int jdir=-1;
					
					switch(Rand(8))
					{
						case 0:
							jx-=32;
							jy-=32;
							jdir=15;
							break;
							
						case 1:
							jx+=32;
							jy-=32;
							jdir=9;
							break;
							
						case 2:
							jx+=32;
							jy+=32;
							jdir=11;
							break;
							
						case 3:
							jx-=32;
							jy+=32;
							jdir=13;
							break;
					}
					
					if(jdir>0 && jx>=32 && jx<=208 && jy>=32 && jy<=128)
					{
						data[D0]=3;
						data[CLK0]=32;
						this->Dir=jdir;
						break;
					}
				}
				
				case 3:
					this->Dir&=3;
					data[D0]=0;
					
				case 0:
					WizzrobeNewDir(this, walkhoming, walkrate);
					
				default:
					arr[0] = this->Dir;
					arr[1] = 1;
					arr[2] = SPW_DOOR;
					if(!this->CanMove(arr))
					{
						arr[0] = this->Dir;
						arr[1] = 15;
						arr[2] = SPW_WIZZROBE;
						if(this->CanMove(arr))
						{
							data[D0]=1;
							data[CLK0]=16;
						}
						else
						{
							WizzrobeNewDir(this, walkhoming, walkrate);
							data[D0]=0;
							data[CLK0]=32;
						}
					}
					else
					{
						data[CLK0]=32;
					}
					
					break;
			}
			
			if(data[D0]<0)
				++data[D0];
		}
		
		--data[CLK0];
		
		int step;
		
		switch(data[D0])
		{
			case 1:
			case 3:
				step=phasestep;
				break;
				
			case 2:
				step=0;
				break;
				
			default:
				step=walkstep;
				break;
				
		}
		
		step /= 100;
		
		ForceMove(this, step);
		
		if(data[D0]==0 && Rand(128)<=haltrate-1)
			data[D0]=2;
			
		if(data[D0]==2 && data[CLK0]==4)
			FixCoords(this, false);
				
	}
	void WizzrobeAnimate(npc this)
	{
		int data = this->Misc[GH_INTERNAL];
		if (data[D0] == 1 || data[D0] == 3) WizzrobeFlicker(this);
	}
	
	bool DoWizzrobeStuff(npc this, int walkstep, int phasestep, int walkhoming, int phasehoming, int walkrate, int phaserate, int haltrate, int attackstyle, int attackrange)
	{
		int data = this->Misc[GH_INTERNAL];
		WizzrobeMove(this, walkstep, phasestep, walkhoming, phasehoming, walkrate, phaserate, haltrate);
		WizzrobeAnimate(this);
		if(data[D0]<=0 && data[CLK0]==28)
		{
			if(attackstyle != 1)
			{
				if(this->LinedUp(attackrange, true) == this->Dir)
				{
					return true;
				}
			}
			else
			{
				if(Rand(500)>=400)
				{
					return true;
				}
			}
		}
		return false;
	}

	void WizzrobeNewDir(npc this, int homing, int rate)
	{
		// Wizzrobes shouldn't move to the edge of the screen;
		// if they're already there, they should move toward the center
		if(this->X<32)
			this->Dir=DIR_RIGHT;
		else if(this->X>=224)
			this->Dir=DIR_LEFT;
		else if(this->Y<32)
			this->Dir=DIR_DOWN;
		else if(this->Y>=144)
			this->Dir=DIR_UP;
		else
			this->NewDir({rate, Clamp(homing, 0, 255), SPW_WIZZROBE});
	}
	void ForceMove(npc this, int s)
	{
		switch(this->Dir)
		{
			case 8:
			case DIR_UP:
				this->Y-=s;
				break;
				
			case 12:
			case DIR_DOWN:
				this->Y+=s;
				break;
				
			case 14:
			case DIR_LEFT:
				this->X-=s;
				break;
				
			case 10:
			case DIR_RIGHT:
				this->X+=s;
				break;
				
			case 15:
			case DIR_LEFTUP:
				this->X-=s;
				this->Y-=s;
				break;
				
			case 9:
			case DIR_RIGHTUP:
				this->X+=s;
				this->Y-=s;
				break;
				
			case 13:
			case DIR_LEFTDOWN:
				this->X-=s;
				this->Y+=s;
				break;
				
			case 11:
			case DIR_RIGHTDOWN:
				this->X+=s;
				this->Y+=s;
				break;
				
			case -1:
				break;
		}
	}
	void FixCoords(npc this, bool bound)
	{
		if(bound)
		{
			this->X=Clamp(this->X, 0, 240);
			this->Y=Clamp(this->Y, 0, 160);
		}
		
		if(this->X > 0 && this->Y > 0 && this->X <= 240 && this->Y <= 160)
		{
			this->X=(this->X&0xF0)+((this->X&8)?16:0);
			
			if(IsSideview())
				this->Y=(this->Y&0xF8)+((this->Y&4)?8:0);
			else
				this->Y=(this->Y&0xF0)+((this->Y&8)?16:0);
		}
	}
	//! Wizzrobe Values
	const int TELEPORTTIME_IN = 18;
	const int TELEPORTTIME_OUT = 64;
	const int TELEPORTTIME_WAIT = 74;
	const int WIZZROBE_INVISIBLE = 0;
	enum
	{
		WIZZTELE_X,
		WIZZTELE_Y,
		WIZZTELE_DIR,
		WIZZTELE_LAST
	};
	void WizzrobeTeleport(npc this, int x, int y, int dir, int outframes, int inframes, int waittime, bool collflicker, DeathAnim deathtype, bool quitondeath)
	{
		//default outframes = 18;
		//default inframes = 64;
		//Wizzrobe waits for 19 frames between fading in and firing; 9 before firing animation and 10 after that before firing.
		//Wizzrobe then waits for 36 frames after that before resuming the regular animation,
		//Then 9 frames after that before fading out (45 total).
		//Total of 54 frames between teleports.
		//Then it waits dmisc5 frames before selecting a new position.
		//Jesus christ dissecting the engine code to understand this was a headache.
		int data = this->Misc[GH_INTERNAL];
		bool colldet;
		WizzrobeTeleportAnim(this, outframes, collflicker, deathtype, quitondeath);
		colldet = this->CollDetection;
		this->CollDetection = false;
		for (int i = 0; i < waittime; ++i)
		{
			this->BFlags[WIZZROBE_INVISIBLE]  = true;
			Ghost_Waitframe(this, deathtype, quitondeath);
		}
		this->X = x;
		this->Y = y;
		this->Dir = dir;
		this->CollDetection = colldet;
		WizzrobeTeleportAnim(this, inframes, collflicker, deathtype, quitondeath);
	}
	void WizzrobeTeleportAnim(npc this, int frames, bool collflicker, DeathAnim deathtype, bool quitondeath)
	{
		for (int i = 0; i < frames; ++i)
		{
			unless(collflicker) this->Stun = 2;
			WizzrobeFlicker(this);
			Ghost_Waitframe(this, deathtype, quitondeath);
		}
	}
	void WizzrobeTeleportAnim(npc this, int frames, bool collflicker)
	{
		for (int i = 0; i < frames; ++i)
		{
			unless(collflicker) this->Stun = 2;
			WizzrobeFlicker(this);
			Ghost_Waitframe(this, GHD_NONE, true);
		}
	}
	void WizzrobeFlicker(npc this)
	{
		int data = this->Misc[GH_INTERNAL];
		if (data[FLICKERCLK]&10b) 
		{
			this->BFlags[WIZZROBE_INVISIBLE]  = true;
		}
		else this->BFlags[WIZZROBE_INVISIBLE]  = false;
		++data[FLICKERCLK];
	}
	void WizzrobeFlickerClear(npc this)
	{
		this->BFlags[WIZZROBE_INVISIBLE] = false;
	}
	void WizzrobeTeleport(npc this, int teletype, int outframes, int inframes, int waittime, bool collflicker, DeathAnim deathtype, bool quitondeath)
	{
		int data = this->Misc[GH_INTERNAL];
		bool colldet;
		WizzrobeTeleportAnim(this, outframes, collflicker, deathtype, quitondeath);
		colldet = this->CollDetection;
		this->CollDetection = false;
		for (int i = 0; i < waittime; ++i)
		{
			this->BFlags[WIZZROBE_INVISIBLE]  = true;
			Ghost_Waitframe(this, deathtype, quitondeath);
		}
		int arr[WIZZTELE_LAST];
		WizzrobeGetPos(this, arr, teletype);
		this->X = arr[WIZZTELE_X];
		this->Y = arr[WIZZTELE_Y];
		this->Dir = arr[WIZZTELE_DIR];
		this->CollDetection = colldet;
		WizzrobeTeleportAnim(this, inframes, collflicker, deathtype, quitondeath);
	}
	void WizzrobeTeleport(npc this, int teletype, int waittime, bool collflicker, DeathAnim deathtype, bool quitondeath)
	{
		int data = this->Misc[GH_INTERNAL];
		bool colldet;
		WizzrobeTeleportAnim(this, TELEPORTTIME_IN, collflicker, deathtype, quitondeath);
		colldet = this->CollDetection;
		this->CollDetection = false;
		for (int i = 0; i < waittime; ++i)
		{
			this->BFlags[WIZZROBE_INVISIBLE]  = true;
			Ghost_Waitframe(this, deathtype, quitondeath);
		}
		int arr[WIZZTELE_LAST];
		WizzrobeGetPos(this, arr, teletype);
		this->X = arr[WIZZTELE_X];
		this->Y = arr[WIZZTELE_Y];
		this->Dir = arr[WIZZTELE_DIR];
		this->CollDetection = colldet;
		WizzrobeTeleportAnim(this, TELEPORTTIME_OUT, collflicker, deathtype, quitondeath);
	}
	void WizzrobeTeleport(npc this, int teletype, int waittime, DeathAnim deathtype, bool quitondeath)
	{
		int data = this->Misc[GH_INTERNAL];
		bool colldet;
		WizzrobeTeleportAnim(this, TELEPORTTIME_IN, true, deathtype, quitondeath);
		colldet = this->CollDetection;
		this->CollDetection = false;
		for (int i = 0; i < waittime; ++i)
		{
			this->BFlags[WIZZROBE_INVISIBLE]  = true;
			Ghost_Waitframe(this, deathtype, quitondeath);
		}
		int arr[WIZZTELE_LAST];
		WizzrobeGetPos(this, arr, teletype);
		this->X = arr[WIZZTELE_X];
		this->Y = arr[WIZZTELE_Y];
		this->Dir = arr[WIZZTELE_DIR];
		this->CollDetection = colldet;
		WizzrobeTeleportAnim(this, TELEPORTTIME_OUT, true, deathtype, quitondeath);
	}
	void WizzrobeTeleport(npc this, int teletype, DeathAnim deathtype, bool quitondeath)
	{
		int data = this->Misc[GH_INTERNAL];
		bool colldet;
		WizzrobeTeleportAnim(this, TELEPORTTIME_IN, true, deathtype, quitondeath);
		colldet = this->CollDetection;
		this->CollDetection = false;
		for (int i = 0; i < TELEPORTTIME_WAIT; ++i)
		{
			this->BFlags[WIZZROBE_INVISIBLE]  = true;
			Ghost_Waitframe(this, deathtype, quitondeath);
		}
		int arr[WIZZTELE_LAST];
		WizzrobeGetPos(this, arr, teletype);
		this->X = arr[WIZZTELE_X];
		this->Y = arr[WIZZTELE_Y];
		this->Dir = arr[WIZZTELE_DIR];
		this->CollDetection = colldet;
		WizzrobeTeleportAnim(this, TELEPORTTIME_OUT, true, deathtype, quitondeath);
	}
	void WizzrobeTeleport(npc this, int teletype)
	{
		const int TELEPORTTIME_IN = 18;
		const int TELEPORTTIME_OUT = 64;
		const int TELEPORTTIME_WAIT = 74;
		enum
		{
			WIZZTELE_X,
			WIZZTELE_Y,
			WIZZTELE_DIR,
			WIZZTELE_LAST
		};
		int data = this->Misc[GH_INTERNAL];
		bool colldet;
		WizzrobeTeleportAnim(this, TELEPORTTIME_IN, true, GHD_NONE, true);
		colldet = this->CollDetection;
		this->CollDetection = false;
		for (int i = 0; i < TELEPORTTIME_WAIT; ++i)
		{
			this->BFlags[WIZZROBE_INVISIBLE]  = true;
			Ghost_Waitframe(this, GHD_NONE, true);
		}
		int arr[WIZZTELE_LAST];
		WizzrobeGetPos(this, arr, teletype);
		this->X = arr[WIZZTELE_X];
		this->Y = arr[WIZZTELE_Y];
		this->Dir = arr[WIZZTELE_DIR];
		this->CollDetection = colldet;
		WizzrobeTeleportAnim(this, TELEPORTTIME_OUT, true, GHD_NONE, true);
	}
	void WizzrobeGetPos(npc this, int arr, int type)
	{
		if (type == 1) WizzrobeFindPos1(this, arr);
		else WizzrobeFindPos2(this, arr);
	}
	void WizzrobeFindPos1(npc this, int arr)
	{
		int t=0;
		bool placed=false;
		int x;
		int y;
		int dir;
		
		while(!placed && t<160)
		{
			if(IsDungeon())
			{
				x=(Rand(12)+2)*16;
				y=(Rand(7)+2)*16;
			}
			else
			{
				x=(Rand(14)+1)*16;
				y=(Rand(19)+1)*16;
			}
			
			if((Abs(x-Hero->X) >= 32) || (Abs(y-Hero->Y) >= 32))
			{
				placed=true;
			}
			
			++t;
		}
		
		if(Abs(x - Hero->X) < Abs(y - Hero->Y))
		{
			if(y < Hero->Y)
			{
				dir = DIR_DOWN;
			}
			else
			{
				dir = DIR_UP;
			}
		}
		else
		{
			if(x < Hero->X)
			{
				dir = DIR_RIGHT;
			}
			else
			{
				dir = DIR_LEFT;
			}
		}
		arr[0] = x;
		arr[1] = y;
		arr[2] = dir;
	}
	// place the enemy in line with Link (red wizzrobes)
	void WizzrobeFindPos2(npc this, int arr)
	{
		int lx=Clamp(GridX(Hero->X),32,208);
		int ly=Clamp(GridY(Hero->Y),32,128);
		int x;
		int y;
		int dir;
		int pos2=Rand(23);
		int tried=0;
		bool last_resort = false , placed = false;
		
		do
		{
			if(pos2<14)
			{
				x=(pos2<<4)+16;
				y=ly;
			}
			else
			{
				x=lx;
				y=((pos2-14)<<4)+16;
			}
			
			// Don't commit to a last resort if position is out of bounds.
			last_resort= !(x<32 || y<32 || x>=224 || y>=144);
			
			if(Abs(lx-x)>16 || Abs(ly-y)>16)
			{
				// Red Wizzrobes should be able to appear on water, but not other
				// solid combos; however, they could appear on solid combos in 2.10,
				// and some quests depend on that.
				if(CanPlaceTile(this, x, y, true))
					placed=true;
			}
			
			if(!placed && tried>=22 && last_resort)
			{
				placed=true;
			}
			
			++tried;
			pos2=(pos2+3)%23;
		}
		while(!placed);
		
		if(y==ly)
			dir=(x<lx)?DIR_RIGHT:DIR_LEFT;
		else
			dir=(y<ly)?DIR_DOWN:DIR_UP;
			
		arr[0] = x;
		arr[1] = y;
		arr[2] = dir;
	}
	void TeleportAtAngle(npc this, float angle, float dist, int speed, bool phase, bool setdirection, bool ignoresolid, int sfx)
	{
		Audio->PlaySound(sfx);
		TeleportAtAngle(this, angle, dist, speed, phase, setdirection, ignoresolid);
	}
	void TeleportAtAngle(npc this, float angle, float dist, int speed, bool phase, bool ignoresetdirection, bool ignoresolid)
	{
		int data = this->Misc[GH_INTERNAL];
		int totalframes = Floor(dist / speed)+1;
		int finalx = this->X + VectorX(dist, angle);
		int finaly = this->Y + VectorY(dist, angle);
		bool colldet = this->CollDetection;
		int dir = this->Dir;
		for (int i = totalframes; i > 0; --i)
		{
			unless (i == 1)
			{
				if (ignoresolid) ForceMoveAtAngle(this, angle, speed);
				else MoveAtAngle(this, angle, speed, 2);
				if (ignoresetdirection)
				{
					data[GHI_IFLAGS]|=GHFI_DIR_FORCED;
					data[GHI_DIR] = dir;
				}
				if (this->X < 0 || this->X >= (256-(this->TileWidth*16)) ||
				this->Y < 0 || this->Y >= (176-(this->TileHeight*16))) 
				{
					this->X = Clamp(this->X, 0, 256-(this->TileWidth*16));
					this->Y = Clamp(this->Y, 0, 176-(this->TileHeight*16));
					break;
				}
				if (phase) 
				{
					WizzrobeFlicker(this);
					this->CollDetection = false;
				}
			}
			else if (ignoresolid)
			{
				this->X = finalx;
				this->Y = finaly;
			}
			Ghost_Waitframe(this, GHD_NONE, true);
		}
		if (phase) 
		{
			this->CollDetection = colldet;
			WizzrobeFlickerClear(this);
		}
	}
	void OrbitNPC2(npc this, npc n, int preferdist, int anglespeed, bool ignoresolid)
	{
		Orbit(this, CenterX(n), CenterY(n), preferdist, anglespeed, ignoresolid);
	}
	void OrbitEWeapon2(npc this, eweapon e, int preferdist, int anglespeed, bool ignoresolid)
	{
		Orbit(this, CenterX(e), CenterY(e), preferdist, anglespeed, ignoresolid);
	}
	void OrbitLWeapon2(npc this, lweapon l, int preferdist, int anglespeed, bool ignoresolid)
	{
		Orbit(this, CenterX(l), CenterY(l), preferdist, anglespeed, ignoresolid);
	}
	void OrbitHero2(npc this, int preferdist, int anglespeed, bool ignoresolid)
	{
		Orbit(this, Hero->X+8, Hero->Y+8, preferdist, anglespeed, ignoresolid);
	}
	void Orbit2(npc this, int centerx, int centery, int preferdist, int anglespeed, bool ignoresolid)
	{
		int data =  this->Misc[GH_INTERNAL];
		if (data[GHI_ORBIT_ANGLE] == -720) data[GHI_ORBIT_ANGLE] = Angle(centerx, centery, CenterX(this), CenterY(this));
		data[GHI_ORBIT_ANGLE] += anglespeed;
		if (ignoresolid)
		{
			this->X = centerx+VectorX(preferdist, data[GHI_ORBIT_ANGLE]);
			this->Y = centery+VectorY(preferdist, data[GHI_ORBIT_ANGLE]);
		}
		else
		{
			int angle2 = Angle(CenterX(this), CenterY(this), centerx+VectorX(preferdist, data[GHI_ORBIT_ANGLE]), centery+VectorY(preferdist, data[GHI_ORBIT_ANGLE]));
			int dist = Distance(CenterX(this), CenterY(this), centerx+VectorX(preferdist, data[GHI_ORBIT_ANGLE]), centery+VectorY(preferdist, data[GHI_ORBIT_ANGLE]));
			MoveAtAngle(this, angle2, dist, 2);
		}
	}
	void OrbitNPC(npc this, npc n, int preferdist, int anglespeed, bool ignoresolid)
	{
		Orbit(this, CenterX(n), CenterY(n), preferdist, anglespeed, ignoresolid);
	}
	void OrbitEWeapon(npc this, eweapon e, int preferdist, int anglespeed, bool ignoresolid)
	{
		Orbit(this, CenterX(e), CenterY(e), preferdist, anglespeed, ignoresolid);
	}
	void OrbitLWeapon(npc this, lweapon l, int preferdist, int anglespeed, bool ignoresolid)
	{
		Orbit(this, CenterX(l), CenterY(l), preferdist, anglespeed, ignoresolid);
	}
	void OrbitHero(npc this, int preferdist, int anglespeed, bool ignoresolid)
	{
		Orbit(this, Hero->X+8, Hero->Y+8, preferdist, anglespeed, ignoresolid);
	}
	void Orbit(npc this, int centerx, int centery, int preferdist, int anglespeed, bool ignoresolid)
	{
		int data =  this->Misc[GH_INTERNAL];
		unless (data[GHI_ORBIT_LASTX] == 0 && data[GHI_ORBIT_LASTY] == 0)
		{
			if (ignoresolid) ForceMoveXY(this, (centerx - data[GHI_ORBIT_LASTX]), (centery - data[GHI_ORBIT_LASTY]));
			else MoveXY(this, (centerx - data[GHI_ORBIT_LASTX]), (centery - data[GHI_ORBIT_LASTY]), 2);
		}
		data[GHI_ORBIT_LASTX] = centerx;
		data[GHI_ORBIT_LASTY] = centery;
		int angle = Angle(centerx, centery, CenterX(this), CenterY(this));
		angle += anglespeed;
		int angle2 = Angle(CenterX(this), CenterY(this), centerx+VectorX(preferdist, angle), centery+VectorY(preferdist, angle));
		int dist = Distance(CenterX(this), CenterY(this), centerx+VectorX(preferdist, angle), centery+VectorY(preferdist, angle));
		if (ignoresolid) ForceMoveAtAngle(this, angle2, dist);
		else MoveAtAngle(this, angle2, dist, 2);
	}
	
	void ForceMoveAtAngle(npc this, int angle, int step)
	{
		this->X += VectorX(step, angle);
		this->Y += VectorY(step, angle);
	}
	void ForceMoveXY(npc this, int xstep, int ystep)
	{
		this->X += xstep;
		this->Y += ystep;
	}
}

