// ghost.zh
// Version 3.0.0 - Alpha 8

namespace ghost3
{
	int FindSpawnPoint(bool landOK, bool wallsOK, bool waterOK, bool pitsOK)
	{
	    int tileRatings[176];
	    int checkCombo;
	    int checkX;
	    int checkY;
	    int bestRating;
	    int bestCount;
	    int counter;
	    int choice;
	    int tries;
	    npc otherNPC;
	    
	    // First, rate each tile for suitability. Lower is better,
	    // but negative means it's strictly off-limits.
	    
	    // Tiles too close to other enemies are undesirable
	    for(int i=Screen->NumNPCs(); i>0; --i)
	    {
		otherNPC=Screen->LoadNPC(i);
		checkCombo=ComboAt(otherNPC->X, otherNPC->Y);
		tileRatings[checkCombo]+=100;
		
		if(checkCombo>15)
		    tileRatings[checkCombo-16]+=1;
		if(checkCombo<160)
		    tileRatings[checkCombo+16]+=1;
		if(checkCombo%16>0)
		    tileRatings[checkCombo-1]+=1;
		if(checkCombo%16<15)
		    tileRatings[checkCombo+1]+=1;
	    }
	    
	    // Mark prohibited tiles
	    for(int i=0; i<176; i++)
	    {
		// Screen edges in NES dungeon
		if((Screen->Flags[SF_ROOMTYPE]&010b)!=0 && (i<32 || i>143 || i%16<2 || i%16>13))
		    tileRatings[i]=-1;
		// Water
		else if(IsWater(i))
		{
		    if(!waterOK)
			tileRatings[i]=-1;
		}
		// Pits
		else if(IsPit(i))
		{
		    if(!pitsOK)
			tileRatings[i]=-1;
		}
		// "No enemy" flag and combos
		else if(Screen->ComboF[i]==CF_NOENEMY || Screen->ComboI[i]==CF_NOENEMY ||
			Screen->ComboT[i]==CT_NOENEMY || Screen->ComboT[i]==CT_NOFLYZONE ||
			Screen->ComboT[i]==CT_NOJUMPZONE)
		    tileRatings[i]=-1;
		// Too close to Link
		else if(Abs(ComboX(i)-Link->X)<32 && Abs(ComboY(i)-Link->Y)<32)
		    tileRatings[i]=-1;
		// All other combos
		else
		{
		    // If land is okay, but not walls (i.e. walkable only)
		    if(landOK && !wallsOK)
		    {
			checkX=ComboX(i);
			checkY=ComboY(i);
			
			if(Screen->isSolid(checkX, checkY) ||
			   Screen->isSolid(checkX+8, checkY) ||
			   Screen->isSolid(checkX, checkY+8) ||
			   Screen->isSolid(checkX+8, checkY+8))
			    tileRatings[i]=-1;
		    }
		    // If walls are okay, but not land (i.e. unwalkable only)
		    else if(!landOK && wallsOK)
		    {
			checkX=ComboX(i);
			checkY=ComboY(i);
			
			if(!Screen->isSolid(checkX, checkY) ||
			   !Screen->isSolid(checkX+8, checkY) ||
			   !Screen->isSolid(checkX, checkY+8) ||
			   !Screen->isSolid(checkX+8, checkY+8))
			    tileRatings[i]=-1;
		    }
		    // Neither land nor walls are okay
		    else if(!landOK && !wallsOK)
			tileRatings[i]=-1;
		}
	    }
	    
	    // Find the best rating and count the number of tiles with that rating
	    bestRating=10000;
	    bestCount=0;
	    for(int i=0; i<176; i++)
	    {
		if(tileRatings[i]<0)
		    continue;
		
		if(tileRatings[i]==bestRating)
		    bestCount++;
		else if(tileRatings[i]<bestRating)
		{
		    bestRating=tileRatings[i];
		    bestCount=1;
		}
	    }
	    
	    // The loop below might hang if every tile is unusable
	    if(bestCount==0)
		return 0;
	    
	    // Pick at random from the best rated tiles
	    counter=Rand(bestCount)+1;
	    for(choice=0; counter>0; choice++)
	    {
		if(tileRatings[choice]==bestRating)
		    counter--;
	    }
	    
	    // Subtract 1 because the for loop overshot
	    return choice-1;
	}

	int FindSpawnPoint(int type, int flag)
	{
	    int tileRatings[176];
	    int checkCombo;
	    int checkX;
	    int checkY;
	    int bestRating;
	    int bestCount;
	    int counter;
	    int choice;
	    int tries;
	    npc otherNPC;
	    
	    // Too close to other enemies
	    for(int i=Screen->NumNPCs(); i>0; i--)
	    {
		otherNPC=Screen->LoadNPC(i);
		checkCombo=ComboAt(otherNPC->X, otherNPC->Y);
		tileRatings[checkCombo]+=100;
		
		if(checkCombo>15)
		    tileRatings[checkCombo-16]+=1;
		if(checkCombo<160)
		    tileRatings[checkCombo+16]+=1;
		if(checkCombo%16>0)
		    tileRatings[checkCombo-1]+=1;
		if(checkCombo%16<15)
		    tileRatings[checkCombo+1]+=1;
	    }
	    
	    // Mark prohibited tiles
	    for(int i=0; i<176; i++)
	    {
		// Wrong combo type
		if(type>=0)
		{
		    if(Screen->ComboT[i]!=type)
			tileRatings[i]=-1;
		}
		
		// Flag isn't present
		if(flag>=0)
		{
		    if(Screen->ComboF[i]!=flag && Screen->ComboI[i]!=flag)
			tileRatings[i]=-1;
		}
		
		// Too close to Link
		else if(Abs(ComboX(i)-Link->X)<32 && Abs(ComboY(i)-Link->Y)<32)
		    tileRatings[i]=-1;
	    }
	    
	    // Find the best rating and count the tiles
	    bestRating=10000;
	    bestCount=0;
	    for(int i=0; i<176; i++)
	    {
		if(tileRatings[i]<0)
		    continue;
		
		if(tileRatings[i]==bestRating)
		    bestCount++;
		else if(tileRatings[i]<bestRating)
		{
		    bestRating=tileRatings[i];
		    bestCount=1;
		}
	    }
	    
	    if(bestCount==0)
		return 0;
	    
	    // Pick one at random
	    counter=Rand(bestCount)+1;
	    for(choice=0; counter>0; choice++)
	    {
		if(tileRatings[choice]==bestRating)
		    counter--;
	    }
	    
	    return choice-1;
	}

	npc SpawnNPC(int id)
	{
	    npc theNPC;
	    
	    int spawnCombo=FindSpawnPoint(true, false, false, false);
	    
	    theNPC=Screen->CreateNPC(id);
	    theNPC->X=ComboX(spawnCombo);
	    theNPC->Y=ComboY(spawnCombo);
	    return theNPC;
	}
	
	bool isDead(npc n)
	{
		return n->HP <= 0 && !n->Immortal;
	}

	int FindUnusedFFC()
	{
	    ffc f;
	    
	    for(int i=1; i<33; ++i)
	    {
		f=Screen->LoadFFC(i);
		
		if((!(f->Data) || f->Data==Game->Ghost[GHV_SETTINGS_COMBO_ID]) )
		{
		
		   if (!(f->Script))
		   {
			if(!(f->Flags[FFCF_CHANGER]))
			{
				return i;
			}
		    }
		}
	    }
	    
	    // Couldn't find one
	    return 0;
	}

	int FindUnusedFFC(int startingFrom)
	{
	    ffc f;
	    
	    for(int i=Max(startingFrom+1, Game->Ghost[GHV_MIN_FFC]); i<=(Min(Game->Ghost[GHV_MAX_FFC],32)); ++i)
	    {
		f=Screen->LoadFFC(i);
		
		if((!(f->Data) || f->Data==Game->Ghost[GHV_SETTINGS_COMBO_ID]) )
		{
		
		   if (!(f->Script))
		   {
			if(!(f->Flags[FFCF_CHANGER]))
			{
				return i;
			}
		    }
		}
	    }
	    
	    // Couldn't find one
	    return 0;
	}


	bool GotHit(npc ghost)
	{
	    return (ghost->HitBy[6] != 0);
	}

	bool WasFrozen(npc ghost)
	{
	    return ghost3::IFlagIsSet(ghost, GHFI_WAS_FROZEN);
	}

	void DeathAnimation(npc ghost, ghost3::DeathAnim type, bool kill)
	{
		ghost->Immortal = true;
		switch(type)
		{
			case GHD_NONE: break;
			case GHD_EXPLODE:
				ghost3::Explode(ghost, kill, false);
				break;
			case GHD_EXPLODE_FLASH:
				ghost3::Explode(ghost, kill, true);
				break;
			case GHD_SHRINK:
				ghost3::ShrinkAway(ghost, kill);
				break;
		}
		ghost->Immortal = false;
	}

	float GetAttribute(npc ghost, int index, float defaultVal, float min, float max)
	{
	    if(index<0 || index>11)
		return 0;
	    
	    float attr=ghost->Attributes[index];
	    
	    if(attr==0)
		return defaultVal;
	    if(attr<min)
		return min;
	    if(attr>max)
		return max;
	    return attr;
	}

	float GetAttribute(npc ghost, int index, float defaultVal)
	{
	    if(index<0 || index>11)
		return 0;
	    
	    float attr=ghost->Attributes[index];
	    
	    if(attr==0)
		return defaultVal;
	    return attr;
	}

	bool ClockIsActive()
	{
	    //ghzhData[GHI_CLOCK_TIMER]!=0;
	}

	void SuspendGhostZHScripts()
	{
	    //ghzhData[GHI_GLOBAL_FLAGS]|=GHGF_SUSPEND;
	}

	void ResumeGhostZHScripts()
	{
	    //ghzhData[GHI_GLOBAL_FLAGS]&=~GHGF_SUSPEND;
	}

	void Explode(npc ghost, bool kill, bool flash)
	{
	    lweapon explosion;
	    int baseX=ghost->X+ghost->DrawXOffset;
	    int baseY=(ghost->Y+ghost->DrawYOffset)-(ghost->Z+ghost->DrawZOffset);
	    
	    __DeathAnimStart(ghost);
	    __DeathAnimSFX(ghost->ID);
	    
	    
	    // One explosion every 16 frames, 15 times
	    for(int i=0; i<15; ++i)
	    {
		explosion=Screen->CreateLWeapon(LW_BOMBBLAST);
		explosion->X=baseX+Rand(16*ghost->TileWidth)-8;
		explosion->Y=baseY+Rand(16*ghost->TileHeight)-8;
		explosion->CollDetection=false;
		
		for(int j=0; j<16; ++j)
		{
		    Ghost_WaitframeLight(ghost);
		}
	    }
	    
	    __DeathAnimEnd(ghost, kill);
	}

	void ShrinkAway(npc ghost, bool kill)
	{
	    lweapon explosion;
	    int baseWidth=ghost->TileWidth*16;
	    int baseHeight=ghost->TileHeight*16;
	    
	    __DeathAnimStart(ghost);
	    //__Ghost_FlashCounter=0;
	    
	    for(int i=0; i<120; i++)
	    {
		float scale=Cos(i-30)/Cos(30);
		float xSize=baseWidth*scale;
		float ySize=baseHeight*scale;
		int xoff = (baseWidth-xSize)/2;
		int yoff = (baseHeight-ySize)/2;
		
		if(i==30)
		    __DeathAnimSFX(ghost->ID);
		
		ghost->Scale = scale;
		ghost->DrawXOffset = xoff;
		ghost->DrawYOffset = yoff;
		
		Ghost_WaitframeLight(ghost);
	    }
	    
	    __DeathAnimEnd(ghost, kill);
	}

	void __DeathAnimStart(npc ghost)
	{
	    ghost->Immortal = true; 
	    ghost->CollDetection=false;
	    ghost->SFX=0;
	}

	void __DeathAnimEnd(npc ghost, bool kill)
	{
	    ghost->Immortal = false; 
	    if(ghost->isValid() && kill)
	    {
		ghost->HP=HP_SILENT;
	    }
	}

	// The enemy has to stay alive until the end of the animation, but the death
	// sound generally has to play sooner. There isn't a good way to do that, so
	// here's a stupid way, instead. Make another of the same enemy, hide it, and
	// kill it. After the animation finishes, the real one will be killed silently.
	void __DeathAnimSFX(int ghostid)
	{
	    npcdata ghost = Game->LoadNPCData(ghostid);
	    Audio->PlaySound(ghost->DeathSFX);
	}
}