name: Release

on:
  schedule:
    # Once a week at midnight EST on saturday.
    - cron: '0 4 * * 6'
  workflow_dispatch: {}

jobs:
  check_date:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.should_run.outputs.should_run }}
    steps:
      - uses: actions/checkout@v2
      - name: print latest_commit
        run: echo ${{ github.sha }}

      - id: should_run
        continue-on-error: true
        if: ${{ github.event_name == 'schedule' }}
        run: test -z $(git rev-list --after="1 week" ${{ github.sha }}) && echo "::set-output name=should_run::false"

  create_tag:
    runs-on: ubuntu-latest
    outputs:
      release_tag_name: ${{ steps.make-tag-name.outputs.value }}
      release_name: ${{ steps.make-name.outputs.value }}
    steps:
      - name: Get current time
        uses: josStorer/get-current-time@v2
        id: current-time
        with:
          format: YYYY-MM-DD
      - id: make-tag-name
        run: echo "::set-output name=value::nightly-${{ steps.current-time.outputs.formattedTime }}"
      - id: make-name
        run: echo "::set-output name=value::2.55 Nightly ${{ steps.current-time.outputs.formattedTime }}"

  release-win:
    needs:
      - check_date
      - create_tag
    if: ${{ needs.check_date.outputs.should_run != 'false' }}

    runs-on: windows-2022
    strategy:
      matrix:
        arrays: [
          {arch: x64, name: windows-x64},
          {arch: win32, name: windows-x86},
        ]
      fail-fast: false

    steps:
    - uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.arrays.arch }}

    - name: git clone
      uses: actions/checkout@v2

    - name: Install Dependencies
      uses: crazy-max/ghaction-chocolatey@v1
      with:
        args: install .github/dependencies.config -y

    - run: cp src/metadata/*.h.sig src/metadata/sigs/
    - run: cmake . -A ${{ matrix.arrays.arch }}
    - run: cmake --build . --config Release
    - run: echo y | ./buildpack.bat
      working-directory: output/_auto
    - run: mv output/_auto/buildpack.zip "output/_auto/${{ needs.create_tag.outputs.release_tag_name }}-${{ matrix.arrays.name }}.zip"

    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        name: ${{ needs.create_tag.outputs.release_name }}
        tag_name: ${{ needs.create_tag.outputs.release_tag_name }}
        files: "output/_auto/${{ needs.create_tag.outputs.release_tag_name }}-${{ matrix.arrays.name }}.zip"
        prerelease: true
        fail_on_unmatched_files: true
        generate_release_notes: true

  release-mac:
    needs:
      - check_date
      - create_tag
    if: ${{ needs.check_date.outputs.should_run != 'false' }}

    runs-on: macos-12

    steps:
    - name: git clone
      uses: actions/checkout@v2

    - run: brew install ninja
    - name: Install Bison
      run: |
        wget http://ftp.gnu.org/gnu/bison/bison-3.6.tar.gz
        tar -zxvf bison-3.6.tar.gz
        cd bison-3.6
        ./configure
        make
        sudo make install

    - run: cp src/metadata/*.h.sig src/metadata/sigs/
    - run: cmake -G Ninja .
    - run: cmake --build .

    - run: ./buildpack_osx.sh
      working-directory: output/_auto
    - run: mv output/_auto/ZeldaClassic.dmg "output/_auto/${{ needs.create_tag.outputs.release_tag_name }}.dmg"

    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        name: ${{ needs.create_tag.outputs.release_name }}
        tag_name: ${{ needs.create_tag.outputs.release_tag_name }}
        files: "output/_auto/${{ needs.create_tag.outputs.release_tag_name }}.dmg"
        prerelease: true
        fail_on_unmatched_files: true
        generate_release_notes: true
