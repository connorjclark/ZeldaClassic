cmake_minimum_required(VERSION 3.5)
set(CMAKE_CONFIGURATION_TYPES Debug Release CACHE STRING INTERNAL FORCE)
project (ZeldaClassic)

set(USE_PCH FALSE CACHE BOOL "Use precompiled headers")
set(UNITY_BUILD FALSE CACHE BOOL "Unity build")

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# This allows outputs to be run where they are by putting their libaries in
# the same folder. 
set (CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
set (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})

if(UNIX AND NOT APPLE)
	set(LINUX TRUE)
endif()

if(APPLE)
	# Makes binaries look in their directory for shared libraries.
	list(APPEND CMAKE_BUILD_RPATH "@loader_path")
endif()

function(enable_unity_build UB_SUFFIX SOURCE_VARIABLE_NAME)
  set(files ${${SOURCE_VARIABLE_NAME}})
  # Generate a unique filename for the unity build translation unit
  set(unit_build_file ${CMAKE_CURRENT_BINARY_DIR}/UB_${UB_SUFFIX}.cpp)
  # Exclude all translation units from compilation
  set_source_files_properties(${files} PROPERTIES HEADER_FILE_ONLY true)
  # Open the ub file
  FILE(WRITE ${unit_build_file} "// Unity Build generated by CMake\n")
  FILE(APPEND ${unit_build_file} "#include \"${CMAKE_SOURCE_DIR}/src/precompiled.h\"\n")
  # Add include statement for each translation unit
  foreach(source_file ${files} )
    FILE( APPEND ${unit_build_file} "#include <${CMAKE_CURRENT_SOURCE_DIR}/${source_file}>\n")
  endforeach(source_file)
  # Complement list of translation units with the name of ub
  set(${SOURCE_VARIABLE_NAME} ${${SOURCE_VARIABLE_NAME}} ${unit_build_file} PARENT_SCOPE)
endfunction(enable_unity_build)

#############################################################
# Allegro
#############################################################

# SDL WIP:
#    cmake .. -DALLEGRO_SDL=on -DWANT_NATIVE_DIALOG=off
# https://github.com/liballeg/allegro5/issues/1335

if(NOT APPLE)
	add_definitions(-DALLEGRO_NO_MAGIC_MAIN)
endif()
add_definitions(-DALLEGRO_KCM_AUDIO_SRC)
# Needed to build on Mac, otherwise get this error:
#    aintern_bitmap.h:154:33: error: unknown type name 'ALLEGRO_BITMAP_WRAP'
add_definitions(-DALLEGRO_UNSTABLE)
option(SHARED "" ON)

include(FetchContent)
FetchContent_Declare(
  allegro5
  GIT_REPOSITORY https://github.com/liballeg/allegro5.git
  GIT_TAG        74edb77851bd7e1820bed115e3ec1397aa2142ae
)
FetchContent_GetProperties(allegro5)
if(NOT allegro5_POPULATED)
  FetchContent_Populate(allegro5)
	option(WANT_TESTS "" OFF)
	option(WANT_EXAMPLES "" OFF)
	option(WANT_DEMO "" OFF)
	option(WANT_DOCS "" OFF)
  add_subdirectory(${allegro5_SOURCE_DIR} ${allegro5_BINARY_DIR} EXCLUDE_FROM_ALL)
  # Allegro 5 CMakeLists sets CMAKE_CONFIGURATION_TYPES in a way that doesn't work for us,
  # so set it back to our value.
  set(CMAKE_CONFIGURATION_TYPES Debug Release CACHE STRING INTERNAL FORCE)
endif()

# These include files are typically copied into the correct places via allegro's install
# target, but we do it manually because we are compiling from source.
file(COPY ${allegro5_SOURCE_DIR}/addons/font/allegro5/allegro_font.h
	DESTINATION ${allegro5_SOURCE_DIR}/include/allegro5
)
file(COPY ${allegro5_SOURCE_DIR}/addons/primitives/allegro5/allegro_primitives.h
	DESTINATION ${allegro5_SOURCE_DIR}/include/allegro5
)
file(COPY ${allegro5_SOURCE_DIR}/addons/audio/allegro5/allegro_audio.h
	DESTINATION ${allegro5_SOURCE_DIR}/include/allegro5
)
file(COPY ${allegro5_SOURCE_DIR}/addons/audio/allegro5/internal/aintern_audio.h
	DESTINATION ${allegro5_SOURCE_DIR}/include/allegro5/internal
)
file(COPY ${allegro5_SOURCE_DIR}/addons/image/allegro5/allegro_image.h
	DESTINATION ${allegro5_SOURCE_DIR}/include/allegro5
)
file(COPY ${allegro5_SOURCE_DIR}/addons/acodec/allegro5/allegro_acodec.h
	DESTINATION ${allegro5_SOURCE_DIR}/include/allegro5
)

include_directories(${allegro5_SOURCE_DIR}/include)
include_directories(${allegro5_BINARY_DIR}/include)
add_subdirectory(allegro-legacy EXCLUDE_FROM_ALL)

add_library(allegro_with_legacy INTERFACE)
target_include_directories(allegro_with_legacy INTERFACE ${allegro5_SOURCE_DIR}/include ${allegro5_BINARY_DIR}/include)
target_include_directories(allegro_with_legacy INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/allegro-legacy/include ${CMAKE_CURRENT_BINARY_DIR}/allegro-legacy/include)
target_link_libraries(allegro_with_legacy INTERFACE allegro-legacy allegro_main)

#############################################################
# Header and source file lists
#############################################################

include_directories(./include/lpng1212)
include_directories(./include/zlib123)
include_directories(./include/loadpng)
include_directories(./include/jpgalleg-2.5)
include_directories(./src)

if(MSVC)
  include_directories(./src/msvcCompat)
endif()

set(ZCSOUNDSOURCES
	src/zcmusic.cpp
	src/zcmusicd.cpp
	src/alleg_compat.cpp
)

set(ROMVIEW_MODULES
	${CMAKE_SOURCE_DIR}/modules/romview/RomviewCore.txt
	${CMAKE_SOURCE_DIR}/modules/romview/RomviewGUI.txt
)

set(ZELDA_MODULES
	${CMAKE_SOURCE_DIR}/modules/zelda/ZeldaCore.txt
	${CMAKE_SOURCE_DIR}/modules/zelda/ZeldaGUI.txt
	${CMAKE_SOURCE_DIR}/modules/zelda/ZeldaSprite.txt
	${CMAKE_SOURCE_DIR}/modules/zelda/ZeldaSubscreen.txt
)

set(ZQUEST_MODULES
	${CMAKE_SOURCE_DIR}/modules/zquest/ZQuestCore.txt
	${CMAKE_SOURCE_DIR}/modules/zquest/ZQuestGUI.txt
	${CMAKE_SOURCE_DIR}/modules/zquest/ZQuestMisc.txt
)

set(ZSCRIPT_MODULES
	${CMAKE_SOURCE_DIR}/modules/zscript/ParserCore.txt
	${CMAKE_SOURCE_DIR}/modules/zscript/ParserSrc.txt
)

set(LAUNCHER_MODULES
	${CMAKE_SOURCE_DIR}/modules/launcher/LauncherCore.txt
	${CMAKE_SOURCE_DIR}/modules/launcher/LauncherGUI.txt
)

foreach(module ${ROMVIEW_MODULES} ${ZELDA_MODULES} ${ZQUEST_MODULES} ${LAUNCHER_MODULES} ${ZSCRIPT_MODULES})
	include(${module})
	set_source_files_properties(${module} PROPERTIES HEADER_FILE_ONLY true)
endforeach()

#############################################################
# Build the ZScript parser
#############################################################

find_package(BISON QUIET)
find_package(FLEX QUIET)

if(${BISON_FOUND} AND ${FLEX_FOUND})
	if(MSVC)
		set(FLEXFLAGS "--wincompat")
	endif()
	FLEX_TARGET(ZScriptLexer ${CMAKE_SOURCE_DIR}/src/parser/ffscript.lpp ${CMAKE_SOURCE_DIR}/src/parser/lex.yy.cpp COMPILE_FLAGS ${FLEXFLAGS})
	BISON_TARGET(ZScriptParser ${CMAKE_SOURCE_DIR}/src/parser/ffscript.ypp ${CMAKE_SOURCE_DIR}/src/parser/y.tab.cpp COMPILE_FLAGS -v)
	add_flex_bison_dependency(ZScriptLexer ZScriptParser)
else()
	message(FATAL_ERROR "Flex and Bison not found. ZQuest cannot be compiled without these.")
endif()


#############################################################
# Global settings for the different platforms
#############################################################


# Windows

if(WIN32)
	# Prevents definition of min and max macros, which conflict with std::min and std::max
	add_definitions(-DNOMINMAX)

	string(REGEX MATCH "MSVC" CMAKE_COMPILER_IS_MSVC "${CMAKE_C_COMPILER_ID}")
	if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 19.20.2750.8)
		message(FATAL_ERROR "MSVC version ${CMAKE_CXX_COMPILER_VERSION} is too old. Must use at least 2019 version 16.0.0")
	endif()
endif()

if(MSVC)
	# Many of these libraries are compiled for allegro 4, but they should still function thanks to allegro-legacy.
	set(IMAGELIBS "$<$<CONFIG:DEBUG>:${CMAKE_SOURCE_DIR}/libs/win32dbg/al_gif.lib$<SEMICOLON>${CMAKE_SOURCE_DIR}/libs/win32dbg/libpng.lib$<SEMICOLON>${CMAKE_SOURCE_DIR}/libs/win32dbg/zlibd.lib$<SEMICOLON>${CMAKE_SOURCE_DIR}/libs/win32dbg/loadpng.lib$<SEMICOLON>${CMAKE_SOURCE_DIR}/libs/win32dbg/libjpgal.lib>"
	              "$<$<CONFIG:RELEASE>:${CMAKE_SOURCE_DIR}/libs/win32/al_gif.lib$<SEMICOLON>${CMAKE_SOURCE_DIR}/libs/win32/libpng.lib$<SEMICOLON>${CMAKE_SOURCE_DIR}/libs/win32/zlib.lib$<SEMICOLON>${CMAKE_SOURCE_DIR}/libs/win32/loadpng.lib$<SEMICOLON>${CMAKE_SOURCE_DIR}/libs/win32/libjpgal.lib>")

	add_compile_options("$<$<CONFIG:DEBUG>:/MTd>")
	add_compile_options("$<$<CONFIG:RELEASE>:/MT>")

	# REQUIRED or else MSVC throws internal compiler error(!)
	add_compile_options("$<$<CONFIG:RELEASE>:/fp:fast>")
	add_definitions(-D_CRT_SECURE_NO_WARNINGS)
	
	if(MSVC_VERSION GREATER 1600)
	# MSVC 2012, v11 or above
		set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /NODEFAULTLIB:LIBCD /SUBSYSTEM:WINDOWS /LARGEADDRESSAWARE /OPT:NOICF")
		set(CMAKE_EXE_LINKER_FLAGS_DEBUG "/DEBUG")
	else()
		set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /NODEFAULTLIB:LIBCD /SUBSYSTEM:WINDOWS /LARGEADDRESSAWARE /OPT:NOICF")
		set(CMAKE_EXE_LINKER_FLAGS_DEBUG "/DEBUG")
	endif()

	if(USE_PCH)
		set(ZCPrecompiledBinary "${CMAKE_CURRENT_BINARY_DIR}/zcprecompiled.pch")
		set(ZQPrecompiledBinary "${CMAKE_CURRENT_BINARY_DIR}/zqprecompiled.pch")
		set_source_files_properties(src/precompiledzc.cpp PROPERTIES COMPILE_FLAGS "/Ycprecompiled.h /Fp\"${ZCPrecompiledBinary}\"" OBJECT_OUTPUTS "${ZCPrecompiledBinary}")
		set_source_files_properties(src/precompiledzq.cpp PROPERTIES COMPILE_FLAGS "/Ycprecompiled.h /Fp\"${ZQPrecompiledBinary}\"" OBJECT_OUTPUTS "${ZQPrecompiledBinary}")
		list(APPEND ZELDAEXTRASOURCES src/precompiledzc.cpp)
		list(APPEND ZQUESTEXTRASOURCES src/precompiledzq.cpp)
	endif()

# Linux
elseif(LINUX)
	link_directories(/usr/lib/i386-linux-gnu)
	link_directories(./libs/linux)
	add_definitions(-DALLEGRO_LINUX) # Mistakenly used in the source.

	set(IMAGELIBS algif ldpng jpgal png z)
	set(SOUNDLIBS aldmb almp3 alogg dumb gme asound)
	set(X11_LIBRARIES X11 Xext Xcursor Xxf86vm pthread Xpm dl)

	add_compile_options("-m32")
	SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -m32 -static-libgcc -export-dynamic")
	SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -m32 -static-libgcc")
endif()

#############################################################
# Sound Library
#############################################################

if(LINUX)
	# TODO: Build sound deps from source on linux.
	set(BUILD_SOUND_LIBS_FROM_SOURCE OFF)
else()
	set(BUILD_SOUND_LIBS_FROM_SOURCE ON)
endif()

if(BUILD_SOUND_LIBS_FROM_SOURCE)
	if(WIN32)
		set(SOUND_LIB_SHARED STATIC)
	else()
		set(SOUND_LIB_SHARED SHARED)
	endif()
	add_library(almp3 ${SOUND_LIB_SHARED}
		allegro-addons/almp3/src/almp3.c
		allegro-addons/almp3/decoder/common.c
		allegro-addons/almp3/decoder/dct64_i386.c
		allegro-addons/almp3/decoder/decode_i386.c
		allegro-addons/almp3/decoder/interface.c
		allegro-addons/almp3/decoder/layer2.c
		allegro-addons/almp3/decoder/layer3.c
		allegro-addons/almp3/decoder/tabinit.c
	)
	target_include_directories(almp3 PUBLIC
		allegro-addons/almp3/include
		allegro-addons/almp3/decoder
	)
	target_link_libraries(almp3 PUBLIC allegro_with_legacy)

	add_library(alogg ${SOUND_LIB_SHARED}
		allegro-addons/alogg/decoder/libogg/macos/compat/strdup.c
		allegro-addons/alogg/decoder/libogg/src/bitwise.c
		allegro-addons/alogg/decoder/libogg/src/framing.c
		allegro-addons/alogg/decoder/libvorbis/lib/analysis.c
		allegro-addons/alogg/decoder/libvorbis/lib/bitrate.c
		allegro-addons/alogg/decoder/libvorbis/lib/block.c
		allegro-addons/alogg/decoder/libvorbis/lib/codebook.c
		allegro-addons/alogg/decoder/libvorbis/lib/envelope.c
		allegro-addons/alogg/decoder/libvorbis/lib/floor0.c
		allegro-addons/alogg/decoder/libvorbis/lib/floor1.c
		allegro-addons/alogg/decoder/libvorbis/lib/info.c
		allegro-addons/alogg/decoder/libvorbis/lib/lookup.c
		allegro-addons/alogg/decoder/libvorbis/lib/lpc.c
		allegro-addons/alogg/decoder/libvorbis/lib/lsp.c
		allegro-addons/alogg/decoder/libvorbis/lib/mapping0.c
		allegro-addons/alogg/decoder/libvorbis/lib/mdct.c
		allegro-addons/alogg/decoder/libvorbis/lib/psy.c
		allegro-addons/alogg/decoder/libvorbis/lib/registry.c
		allegro-addons/alogg/decoder/libvorbis/lib/res0.c
		allegro-addons/alogg/decoder/libvorbis/lib/sharedbook.c
		allegro-addons/alogg/decoder/libvorbis/lib/smallft.c
		allegro-addons/alogg/decoder/libvorbis/lib/synthesis.c
		allegro-addons/alogg/decoder/libvorbis/lib/vorbisenc.c
		allegro-addons/alogg/decoder/libvorbis/lib/vorbisfile.c
		allegro-addons/alogg/decoder/libvorbis/lib/window.c
		allegro-addons/alogg/src/alogg.c
	)
	target_include_directories(alogg PUBLIC
		allegro-addons/alogg/include
		allegro-addons/alogg/decoder
		allegro-addons/alogg/decoder/libogg/include
		allegro-addons/alogg/decoder/libvorbis/include
		allegro-addons/alogg/decoder/libvorbis/lib
	)
	target_link_libraries(alogg PUBLIC allegro_with_legacy)

	FetchContent_Declare(
		gme_external
		GIT_REPOSITORY https://bitbucket.org/mpyne/game-music-emu.git
		GIT_TAG        839ea742c42c4e0fbe4f153621d92e24c20d0799
	)
	set(GME_YM2612_EMU "Nuked" CACHE STRING "Which YM2612 emulator to use: \"Nuked\" (LGPLv2.1+), \"MAME\" (GPLv2+), or \"GENS\" (LGPLv2.1+)")
	FetchContent_MakeAvailable(gme_external)
	add_library(gme_headers INTERFACE)
	target_include_directories(gme_headers INTERFACE ${gme_external_SOURCE_DIR}/gme)
	target_compile_definitions(gme_headers INTERFACE -DVGM_YM2612_NUKED)

	option(BUILD_EXAMPLES "" OFF)
	set(ALLEGRO_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/allegro-legacy/include)
	set(ALLEGRO_LIBRARY allegro_with_legacy)
	FetchContent_Declare(
		dumb_external
		GIT_REPOSITORY https://github.com/kode54/dumb.git
		GIT_TAG        396caa4d31859045ccb5ef943fd430ca4026cce8
		PATCH_COMMAND  patch -s -p1 < ${CMAKE_SOURCE_DIR}/allegro-addons/aldumb.patch || true
	)
	FetchContent_MakeAvailable(dumb_external)
	add_library(dumb_headers INTERFACE)
	target_include_directories(dumb_headers INTERFACE ${dumb_external_SOURCE_DIR}/include)

	set(SOUNDLIBS almp3 alogg gme gme_headers aldmb dumb dumb_headers)
endif()

if(MSVC AND (MSVC_VERSION GREATER 1600))
	set(ZCSOUNDLIBSEXTRA legacy_stdio_definitions)
endif()
add_library(zcsound SHARED ${ZCSOUNDSOURCES})
target_link_libraries(zcsound PUBLIC allegro_with_legacy ${SOUNDLIBS} ${ZCSOUNDLIBSEXTRA})

if(BUILD_SOUND_LIBS_FROM_SOURCE)
	target_compile_definitions(zcsound PRIVATE SOUND_LIBS_BUILT_FROM_SOURCE)
else()
	include_directories(./include/dumb)
	include_directories(./include/alogg)
	include_directories(./include/almp3)
	include_directories(./include/gme)
endif()

#############################################################
# Romview
#############################################################

# if(MSVC)
	# list(APPEND ROMVIEWEXTRASOURCES rv_icon.rc)
# elseif(LINUX)
	# list(APPEND ROMVIEWEXTRASOURCES rv_icon.c)
	# set(ROMVIEWLIBSEXTRA ${X11_LIBRARIES})
# endif()

# if(UNITY_BUILD)
	# enable_unity_build(RomviewCore ROMVIEW_CORE_SOURCES)
	# enable_unity_build(RomviewGUI ROMVIEW_GUI_SOURCES)
# endif()

# add_executable(romview ${ROMVIEW_CORE_SOURCES} ${ROMVIEW_GUI_SOURCES} ${ROMVIEWEXTRASOURCES} ${ROMVIEW_MODULES})

# target_link_libraries(romview ${IMAGELIBS} ${ALLEGROLIB} ${SOUNDLIBS} ${ROMVIEWLIBSEXTRA})

#############################################################
# Zelda
#############################################################




if(MSVC)
	list(APPEND ZELDAEXTRASOURCES zc_icon.rc)

elseif(LINUX)
	list(APPEND ZELDAEXTRASOURCES zc_icon.c src/single_instance_unix.cpp)
	set(ZELDALIBSEXTRA ${X11_LIBRARIES})
endif()

if(UNITY_BUILD)
	enable_unity_build(ZeldaCore ZELDA_CORE_SOURCES)
	enable_unity_build(ZeldaGUI ZELDA_GUI_SOURCES)
	enable_unity_build(ZeldaSprite ZELDA_SPRITE_SOURCES)
	enable_unity_build(ZeldaSubscreen ZELDA_SUBSCREEN_SOURCES)
endif()

add_executable(zelda ${ZELDA_CORE_SOURCES} ${ZELDA_GUI_SOURCES} ${ZELDA_SPRITE_SOURCES} ${ZELDA_SUBSCREEN_SOURCES} ${ZELDA_SCRIPTING_SOURCES} ${ZELDAEXTRASOURCES} ${ZELDA_MODULES})
target_compile_definitions(zelda PRIVATE IS_PLAYER)
target_link_libraries(zelda allegro_with_legacy)

if(WIN32)
	target_link_libraries(zelda zcsound winmm ${IMAGELIBS} ${ZELDALIBSEXTRA})
elseif(LINUX)
	target_link_libraries(zelda zcsound ${IMAGELIBS} ${ZELDALIBSEXTRA})
elseif(APPLE)
	target_link_libraries(zelda zcsound ${IMAGELIBS} ${ZELDALIBSEXTRA})
endif()
target_link_libraries(zelda allegro_with_legacy)

if(MSVC AND USE_PCH)
	set_target_properties(zelda PROPERTIES COMPILE_FLAGS "/Yuprecompiled.h /FIprecompiled.h /Fp\"${ZCPrecompiledBinary}\"" OBJECT_DEPENDS "${ZCPrecompiledBinary}")
	target_compile_definitions(zelda PRIVATE ZC_PCH)
endif()

#############################################################
# ZQuest
#############################################################

if(MSVC)
	list(APPEND ZQUESTEXTRASOURCES zq_icon.rc)
elseif(LINUX)
	list(APPEND ZQUESTEXTRASOURCES zq_icon.c src/single_instance_unix.cpp)
	set(ZQUESTLIBSEXTRA ${X11_LIBRARIES})
endif()

if(UNITY_BUILD)
	enable_unity_build(ZQuestCore ZQUEST_CORE_SOURCES)
	enable_unity_build(ZQuestGUI ZQUEST_GUI_SOURCES)
	enable_unity_build(ZQuestMisc ZQUEST_MISC_SOURCES)
	enable_unity_build(ZQuestZScript PARSER_SOURCES)
endif()

set(Boost_DEBUG ON) # set to ON if you want to see more info in cmake
set(BOOST_ROOT ${CMAKE_SOURCE_DIR}/include/boost_1_74_0)
set(Boost_INCLUDE_DIR ${BOOST_ROOT})

find_package(Boost 1.74.0)

if(Boost_FOUND)
	include_directories(${Boost_INCLUDE_DIRS})
	add_definitions(-DHAS_BOOST)
    add_executable(zquest ${ZQUEST_CORE_SOURCES} ${ZQUEST_GUI_SOURCES} ${ZQUEST_MISC_SOURCES} ${ZQUESTEXTRASOURCES} ${ZQUEST_MODULES})

	target_link_libraries(zquest PUBLIC allegro_with_legacy zcsound ${IMAGELIBS} ${ZQUESTLIBSEXTRA})

	if(MSVC AND USE_PCH)
		set_target_properties(zquest PROPERTIES COMPILE_FLAGS "/Yuprecompiled.h /FIprecompiled.h /Fp\"${ZQPrecompiledBinary}\"" OBJECT_DEPENDS "${ZQPrecompiledBinary}")
		target_compile_definitions(zquest PRIVATE ZC_PCH)
	endif()

	if(MSVC)
		target_compile_definitions(zcsound PRIVATE ZCM_DLL)
		target_compile_definitions(zelda PRIVATE ZCM_DLL_IMPORT)
		target_compile_definitions(zquest PRIVATE ZCM_DLL_IMPORT)
	endif()
	target_compile_definitions(zquest PRIVATE IS_ZQUEST)
endif()

if(WIN32)
	set_source_files_properties(src/dialog/itemeditor.cpp PROPERTIES COMPILE_FLAGS "/bigobj")
endif()

#############################################################
# ZScript parser
#############################################################

if(LINUX)
	set(ZSCRIPTLIBSEXTRA ${X11_LIBRARIES})
endif()

if(${BISON_FOUND} AND ${FLEX_FOUND})
	add_executable(zscript ${ZSCRIPT_CORE_SOURCES} ${PARSER_SOURCES} ${BISON_ZScriptParser_OUTPUTS} ${FLEX_ZScriptLexer_OUTPUTS} ${ZSCRIPT_MODULES})
	target_link_libraries(zscript allegro_with_legacy ${ZSCRIPTLIBSEXTRA})
	target_compile_definitions(zscript PRIVATE IS_PARSER)
endif()

#############################################################
# Launcher
#############################################################

if(MSVC)
	list(APPEND LAUNCHEREXTRASOURCES zl_icon.rc)

elseif(LINUX)
	list(APPEND LAUNCHEREXTRASOURCES zl_icon.c src/single_instance_unix.cpp)
	set(LAUNCHERLIBSEXTRA ${X11_LIBRARIES})
endif()

add_executable(zlauncher ${LAUNCHER_SOURCES} ${LAUNCHER_GUI_SOURCES} ${LAUNCHEREXTRASOURCES})
target_link_libraries(zlauncher allegro_with_legacy ${LAUNCHERLIBSEXTRA})
target_compile_definitions(zlauncher PRIVATE IS_LAUNCHER)

#############################################################
# Allegro 5 Example
#############################################################

add_executable(al5_example EXCLUDE_FROM_ALL src/al5_example_main.c)
target_include_directories(al5_example PUBLIC ${allegro5_SOURCE_DIR}/include)
target_include_directories(al5_example PUBLIC ${allegro5_BINARY_DIR}/include)
target_link_libraries(al5_example PUBLIC allegro_with_legacy allegro_font allegro_primitives)

#############################################################
# Visual Studio
#############################################################

set_property(TARGET zquest zelda PROPERTY VS_DEBUGGER_WORKING_DIRECTORY "$(ProjectDir)$(Configuration)")

#############################################################
# Misc.
#############################################################

if(WIN32)
	target_compile_definitions(zcsound PRIVATE __STDC_LIMIT_MACROS)
	target_compile_definitions(zelda PRIVATE __STDC_LIMIT_MACROS)
	target_compile_definitions(zlauncher PRIVATE __STDC_LIMIT_MACROS)
	target_compile_definitions(zquest PRIVATE __STDC_LIMIT_MACROS)
	target_compile_definitions(zscript PRIVATE __STDC_LIMIT_MACROS)
endif()
